/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "EmailVerificationResult.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




EmailVerificationResult::EmailVerificationResult()
{
    m_DomainName = utility::conversions::to_string_t("");
    m_DomainNameIsSet = false;
    m_Port = 0;
    m_PortIsSet = false;
    m_EmailAddress = utility::conversions::to_string_t("");
    m_EmailAddressIsSet = false;
    m_IsValid = false;
    m_IsValidIsSet = false;
    m_Error = utility::conversions::to_string_t("");
    m_ErrorIsSet = false;
}

EmailVerificationResult::~EmailVerificationResult()
{
}

void EmailVerificationResult::validate()
{
    // TODO: implement validation
}

web::json::value EmailVerificationResult::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DomainNameIsSet)
    {
        val[utility::conversions::to_string_t("domainName")] = ModelBase::toJson(m_DomainName);
    }
    if(m_PortIsSet)
    {
        val[utility::conversions::to_string_t("port")] = ModelBase::toJson(m_Port);
    }
    if(m_EmailAddressIsSet)
    {
        val[utility::conversions::to_string_t("emailAddress")] = ModelBase::toJson(m_EmailAddress);
    }
    if(m_IsValidIsSet)
    {
        val[utility::conversions::to_string_t("isValid")] = ModelBase::toJson(m_IsValid);
    }
    if(m_ErrorIsSet)
    {
        val[utility::conversions::to_string_t("error")] = ModelBase::toJson(m_Error);
    }

    return val;
}

bool EmailVerificationResult::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("domainName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("domainName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_domainName;
            ok &= ModelBase::fromJson(fieldValue, refVal_domainName);
            setDomainName(refVal_domainName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("port")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("port"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_port;
            ok &= ModelBase::fromJson(fieldValue, refVal_port);
            setPort(refVal_port);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("emailAddress")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("emailAddress"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_emailAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_emailAddress);
            setEmailAddress(refVal_emailAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isValid")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isValid"));
        if(!fieldValue.is_null())
        {
            bool refVal_isValid;
            ok &= ModelBase::fromJson(fieldValue, refVal_isValid);
            setIsValid(refVal_isValid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("error")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("error"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_error;
            ok &= ModelBase::fromJson(fieldValue, refVal_error);
            setError(refVal_error);
        }
    }
    return ok;
}

void EmailVerificationResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_DomainNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("domainName"), m_DomainName));
    }
    if(m_PortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("port"), m_Port));
    }
    if(m_EmailAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("emailAddress"), m_EmailAddress));
    }
    if(m_IsValidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isValid"), m_IsValid));
    }
    if(m_ErrorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("error"), m_Error));
    }
}

bool EmailVerificationResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("domainName")))
    {
        utility::string_t refVal_domainName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("domainName")), refVal_domainName );
        setDomainName(refVal_domainName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("port")))
    {
        int32_t refVal_port;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("port")), refVal_port );
        setPort(refVal_port);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("emailAddress")))
    {
        utility::string_t refVal_emailAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("emailAddress")), refVal_emailAddress );
        setEmailAddress(refVal_emailAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isValid")))
    {
        bool refVal_isValid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isValid")), refVal_isValid );
        setIsValid(refVal_isValid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("error")))
    {
        utility::string_t refVal_error;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("error")), refVal_error );
        setError(refVal_error);
    }
    return ok;
}

utility::string_t EmailVerificationResult::getDomainName() const
{
    return m_DomainName;
}

void EmailVerificationResult::setDomainName(const utility::string_t& value)
{
    m_DomainName = value;
    m_DomainNameIsSet = true;
}

bool EmailVerificationResult::domainNameIsSet() const
{
    return m_DomainNameIsSet;
}

void EmailVerificationResult::unsetDomainName()
{
    m_DomainNameIsSet = false;
}
int32_t EmailVerificationResult::getPort() const
{
    return m_Port;
}

void EmailVerificationResult::setPort(int32_t value)
{
    m_Port = value;
    m_PortIsSet = true;
}

bool EmailVerificationResult::portIsSet() const
{
    return m_PortIsSet;
}

void EmailVerificationResult::unsetPort()
{
    m_PortIsSet = false;
}
utility::string_t EmailVerificationResult::getEmailAddress() const
{
    return m_EmailAddress;
}

void EmailVerificationResult::setEmailAddress(const utility::string_t& value)
{
    m_EmailAddress = value;
    m_EmailAddressIsSet = true;
}

bool EmailVerificationResult::emailAddressIsSet() const
{
    return m_EmailAddressIsSet;
}

void EmailVerificationResult::unsetEmailAddress()
{
    m_EmailAddressIsSet = false;
}
bool EmailVerificationResult::isIsValid() const
{
    return m_IsValid;
}

void EmailVerificationResult::setIsValid(bool value)
{
    m_IsValid = value;
    m_IsValidIsSet = true;
}

bool EmailVerificationResult::isValidIsSet() const
{
    return m_IsValidIsSet;
}

void EmailVerificationResult::unsetIsValid()
{
    m_IsValidIsSet = false;
}
utility::string_t EmailVerificationResult::getError() const
{
    return m_Error;
}

void EmailVerificationResult::setError(const utility::string_t& value)
{
    m_Error = value;
    m_ErrorIsSet = true;
}

bool EmailVerificationResult::errorIsSet() const
{
    return m_ErrorIsSet;
}

void EmailVerificationResult::unsetError()
{
    m_ErrorIsSet = false;
}
}
}
}
}


