/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SendSMTPEnvelopeOptions.h
 *
 * Options for the email envelope
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_SendSMTPEnvelopeOptions_H_
#define COM_MAILSLURP_CLIENT_MODEL_SendSMTPEnvelopeOptions_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// Options for the email envelope
/// </summary>
class  SendSMTPEnvelopeOptions
    : public ModelBase
{
public:
    SendSMTPEnvelopeOptions();
    virtual ~SendSMTPEnvelopeOptions();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SendSMTPEnvelopeOptions members

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getRcptTo();
    bool rcptToIsSet() const;
    void unsetRcptTo();

    void setRcptTo(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMailFrom() const;
    bool mailFromIsSet() const;
    void unsetMailFrom();

    void setMailFrom(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getData() const;
    bool dataIsSet() const;
    void unsetData();

    void setData(const utility::string_t& value);


protected:
    std::vector<utility::string_t> m_RcptTo;
    bool m_RcptToIsSet;
    utility::string_t m_MailFrom;
    bool m_MailFromIsSet;
    utility::string_t m_Data;
    bool m_DataIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_SendSMTPEnvelopeOptions_H_ */
