/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UserDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




UserDto::UserDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_ApiKey = utility::conversions::to_string_t("");
    m_ApiKeyIsSet = false;
    m_EmailAddress = utility::conversions::to_string_t("");
    m_EmailAddressIsSet = false;
    m_EmailAddressMd5 = utility::conversions::to_string_t("");
    m_EmailAddressMd5IsSet = false;
    m_Created = utility::datetime();
    m_CreatedIsSet = false;
    m_UserType = utility::conversions::to_string_t("");
    m_UserTypeIsSet = false;
    m_Organization = utility::conversions::to_string_t("");
    m_OrganizationIsSet = false;
    m_Verified = utility::conversions::to_string_t("");
    m_VerifiedIsSet = false;
    m_HasPassword = false;
    m_HasPasswordIsSet = false;
    m_IsFrozen = false;
    m_IsFrozenIsSet = false;
    m_AddNewContacts = false;
    m_AddNewContactsIsSet = false;
    m_SsoProvider = utility::conversions::to_string_t("");
    m_SsoProviderIsSet = false;
    m_CustomerId = utility::conversions::to_string_t("");
    m_CustomerIdIsSet = false;
    m_HasOnboarded = false;
    m_HasOnboardedIsSet = false;
    m_ImapUsername = utility::conversions::to_string_t("");
    m_ImapUsernameIsSet = false;
    m_ImapPassword = utility::conversions::to_string_t("");
    m_ImapPasswordIsSet = false;
    m_SmtpUsername = utility::conversions::to_string_t("");
    m_SmtpUsernameIsSet = false;
    m_SmtpPassword = utility::conversions::to_string_t("");
    m_SmtpPasswordIsSet = false;
}

UserDto::~UserDto()
{
}

void UserDto::validate()
{
    // TODO: implement validation
}

web::json::value UserDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_ApiKeyIsSet)
    {
        val[utility::conversions::to_string_t("apiKey")] = ModelBase::toJson(m_ApiKey);
    }
    if(m_EmailAddressIsSet)
    {
        val[utility::conversions::to_string_t("emailAddress")] = ModelBase::toJson(m_EmailAddress);
    }
    if(m_EmailAddressMd5IsSet)
    {
        val[utility::conversions::to_string_t("emailAddressMd5")] = ModelBase::toJson(m_EmailAddressMd5);
    }
    if(m_CreatedIsSet)
    {
        val[utility::conversions::to_string_t("created")] = ModelBase::toJson(m_Created);
    }
    if(m_UserTypeIsSet)
    {
        val[utility::conversions::to_string_t("userType")] = ModelBase::toJson(m_UserType);
    }
    if(m_OrganizationIsSet)
    {
        val[utility::conversions::to_string_t("organization")] = ModelBase::toJson(m_Organization);
    }
    if(m_VerifiedIsSet)
    {
        val[utility::conversions::to_string_t("verified")] = ModelBase::toJson(m_Verified);
    }
    if(m_HasPasswordIsSet)
    {
        val[utility::conversions::to_string_t("hasPassword")] = ModelBase::toJson(m_HasPassword);
    }
    if(m_IsFrozenIsSet)
    {
        val[utility::conversions::to_string_t("isFrozen")] = ModelBase::toJson(m_IsFrozen);
    }
    if(m_AddNewContactsIsSet)
    {
        val[utility::conversions::to_string_t("addNewContacts")] = ModelBase::toJson(m_AddNewContacts);
    }
    if(m_SsoProviderIsSet)
    {
        val[utility::conversions::to_string_t("ssoProvider")] = ModelBase::toJson(m_SsoProvider);
    }
    if(m_CustomerIdIsSet)
    {
        val[utility::conversions::to_string_t("customerId")] = ModelBase::toJson(m_CustomerId);
    }
    if(m_HasOnboardedIsSet)
    {
        val[utility::conversions::to_string_t("hasOnboarded")] = ModelBase::toJson(m_HasOnboarded);
    }
    if(m_ImapUsernameIsSet)
    {
        val[utility::conversions::to_string_t("imapUsername")] = ModelBase::toJson(m_ImapUsername);
    }
    if(m_ImapPasswordIsSet)
    {
        val[utility::conversions::to_string_t("imapPassword")] = ModelBase::toJson(m_ImapPassword);
    }
    if(m_SmtpUsernameIsSet)
    {
        val[utility::conversions::to_string_t("smtpUsername")] = ModelBase::toJson(m_SmtpUsername);
    }
    if(m_SmtpPasswordIsSet)
    {
        val[utility::conversions::to_string_t("smtpPassword")] = ModelBase::toJson(m_SmtpPassword);
    }

    return val;
}

bool UserDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("apiKey")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("apiKey"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_apiKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_apiKey);
            setApiKey(refVal_apiKey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("emailAddress")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("emailAddress"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_emailAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_emailAddress);
            setEmailAddress(refVal_emailAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("emailAddressMd5")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("emailAddressMd5"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_emailAddressMd5;
            ok &= ModelBase::fromJson(fieldValue, refVal_emailAddressMd5);
            setEmailAddressMd5(refVal_emailAddressMd5);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("created")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("created"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_created;
            ok &= ModelBase::fromJson(fieldValue, refVal_created);
            setCreated(refVal_created);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("userType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("userType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_userType;
            ok &= ModelBase::fromJson(fieldValue, refVal_userType);
            setUserType(refVal_userType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("organization")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("organization"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_organization;
            ok &= ModelBase::fromJson(fieldValue, refVal_organization);
            setOrganization(refVal_organization);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("verified")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("verified"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_verified;
            ok &= ModelBase::fromJson(fieldValue, refVal_verified);
            setVerified(refVal_verified);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hasPassword")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hasPassword"));
        if(!fieldValue.is_null())
        {
            bool refVal_hasPassword;
            ok &= ModelBase::fromJson(fieldValue, refVal_hasPassword);
            setHasPassword(refVal_hasPassword);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isFrozen")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isFrozen"));
        if(!fieldValue.is_null())
        {
            bool refVal_isFrozen;
            ok &= ModelBase::fromJson(fieldValue, refVal_isFrozen);
            setIsFrozen(refVal_isFrozen);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("addNewContacts")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("addNewContacts"));
        if(!fieldValue.is_null())
        {
            bool refVal_addNewContacts;
            ok &= ModelBase::fromJson(fieldValue, refVal_addNewContacts);
            setAddNewContacts(refVal_addNewContacts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("ssoProvider")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("ssoProvider"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_ssoProvider;
            ok &= ModelBase::fromJson(fieldValue, refVal_ssoProvider);
            setSsoProvider(refVal_ssoProvider);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("customerId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("customerId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_customerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_customerId);
            setCustomerId(refVal_customerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("hasOnboarded")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("hasOnboarded"));
        if(!fieldValue.is_null())
        {
            bool refVal_hasOnboarded;
            ok &= ModelBase::fromJson(fieldValue, refVal_hasOnboarded);
            setHasOnboarded(refVal_hasOnboarded);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("imapUsername")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("imapUsername"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_imapUsername;
            ok &= ModelBase::fromJson(fieldValue, refVal_imapUsername);
            setImapUsername(refVal_imapUsername);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("imapPassword")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("imapPassword"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_imapPassword;
            ok &= ModelBase::fromJson(fieldValue, refVal_imapPassword);
            setImapPassword(refVal_imapPassword);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("smtpUsername")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("smtpUsername"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_smtpUsername;
            ok &= ModelBase::fromJson(fieldValue, refVal_smtpUsername);
            setSmtpUsername(refVal_smtpUsername);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("smtpPassword")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("smtpPassword"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_smtpPassword;
            ok &= ModelBase::fromJson(fieldValue, refVal_smtpPassword);
            setSmtpPassword(refVal_smtpPassword);
        }
    }
    return ok;
}

void UserDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_ApiKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("apiKey"), m_ApiKey));
    }
    if(m_EmailAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("emailAddress"), m_EmailAddress));
    }
    if(m_EmailAddressMd5IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("emailAddressMd5"), m_EmailAddressMd5));
    }
    if(m_CreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("created"), m_Created));
    }
    if(m_UserTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("userType"), m_UserType));
    }
    if(m_OrganizationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("organization"), m_Organization));
    }
    if(m_VerifiedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("verified"), m_Verified));
    }
    if(m_HasPasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hasPassword"), m_HasPassword));
    }
    if(m_IsFrozenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isFrozen"), m_IsFrozen));
    }
    if(m_AddNewContactsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("addNewContacts"), m_AddNewContacts));
    }
    if(m_SsoProviderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("ssoProvider"), m_SsoProvider));
    }
    if(m_CustomerIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("customerId"), m_CustomerId));
    }
    if(m_HasOnboardedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("hasOnboarded"), m_HasOnboarded));
    }
    if(m_ImapUsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("imapUsername"), m_ImapUsername));
    }
    if(m_ImapPasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("imapPassword"), m_ImapPassword));
    }
    if(m_SmtpUsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("smtpUsername"), m_SmtpUsername));
    }
    if(m_SmtpPasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("smtpPassword"), m_SmtpPassword));
    }
}

bool UserDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("apiKey")))
    {
        utility::string_t refVal_apiKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("apiKey")), refVal_apiKey );
        setApiKey(refVal_apiKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("emailAddress")))
    {
        utility::string_t refVal_emailAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("emailAddress")), refVal_emailAddress );
        setEmailAddress(refVal_emailAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("emailAddressMd5")))
    {
        utility::string_t refVal_emailAddressMd5;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("emailAddressMd5")), refVal_emailAddressMd5 );
        setEmailAddressMd5(refVal_emailAddressMd5);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("created")))
    {
        utility::datetime refVal_created;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("created")), refVal_created );
        setCreated(refVal_created);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userType")))
    {
        utility::string_t refVal_userType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("userType")), refVal_userType );
        setUserType(refVal_userType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("organization")))
    {
        utility::string_t refVal_organization;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("organization")), refVal_organization );
        setOrganization(refVal_organization);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("verified")))
    {
        utility::string_t refVal_verified;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("verified")), refVal_verified );
        setVerified(refVal_verified);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hasPassword")))
    {
        bool refVal_hasPassword;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hasPassword")), refVal_hasPassword );
        setHasPassword(refVal_hasPassword);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isFrozen")))
    {
        bool refVal_isFrozen;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isFrozen")), refVal_isFrozen );
        setIsFrozen(refVal_isFrozen);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("addNewContacts")))
    {
        bool refVal_addNewContacts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("addNewContacts")), refVal_addNewContacts );
        setAddNewContacts(refVal_addNewContacts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("ssoProvider")))
    {
        utility::string_t refVal_ssoProvider;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("ssoProvider")), refVal_ssoProvider );
        setSsoProvider(refVal_ssoProvider);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("customerId")))
    {
        utility::string_t refVal_customerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("customerId")), refVal_customerId );
        setCustomerId(refVal_customerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("hasOnboarded")))
    {
        bool refVal_hasOnboarded;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("hasOnboarded")), refVal_hasOnboarded );
        setHasOnboarded(refVal_hasOnboarded);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("imapUsername")))
    {
        utility::string_t refVal_imapUsername;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("imapUsername")), refVal_imapUsername );
        setImapUsername(refVal_imapUsername);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("imapPassword")))
    {
        utility::string_t refVal_imapPassword;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("imapPassword")), refVal_imapPassword );
        setImapPassword(refVal_imapPassword);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("smtpUsername")))
    {
        utility::string_t refVal_smtpUsername;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("smtpUsername")), refVal_smtpUsername );
        setSmtpUsername(refVal_smtpUsername);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("smtpPassword")))
    {
        utility::string_t refVal_smtpPassword;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("smtpPassword")), refVal_smtpPassword );
        setSmtpPassword(refVal_smtpPassword);
    }
    return ok;
}

utility::string_t UserDto::getId() const
{
    return m_Id;
}

void UserDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool UserDto::idIsSet() const
{
    return m_IdIsSet;
}

void UserDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t UserDto::getApiKey() const
{
    return m_ApiKey;
}

void UserDto::setApiKey(const utility::string_t& value)
{
    m_ApiKey = value;
    m_ApiKeyIsSet = true;
}

bool UserDto::apiKeyIsSet() const
{
    return m_ApiKeyIsSet;
}

void UserDto::unsetApiKey()
{
    m_ApiKeyIsSet = false;
}
utility::string_t UserDto::getEmailAddress() const
{
    return m_EmailAddress;
}

void UserDto::setEmailAddress(const utility::string_t& value)
{
    m_EmailAddress = value;
    m_EmailAddressIsSet = true;
}

bool UserDto::emailAddressIsSet() const
{
    return m_EmailAddressIsSet;
}

void UserDto::unsetEmailAddress()
{
    m_EmailAddressIsSet = false;
}
utility::string_t UserDto::getEmailAddressMd5() const
{
    return m_EmailAddressMd5;
}

void UserDto::setEmailAddressMd5(const utility::string_t& value)
{
    m_EmailAddressMd5 = value;
    m_EmailAddressMd5IsSet = true;
}

bool UserDto::emailAddressMd5IsSet() const
{
    return m_EmailAddressMd5IsSet;
}

void UserDto::unsetEmailAddressMd5()
{
    m_EmailAddressMd5IsSet = false;
}
utility::datetime UserDto::getCreated() const
{
    return m_Created;
}

void UserDto::setCreated(const utility::datetime& value)
{
    m_Created = value;
    m_CreatedIsSet = true;
}

bool UserDto::createdIsSet() const
{
    return m_CreatedIsSet;
}

void UserDto::unsetCreated()
{
    m_CreatedIsSet = false;
}
utility::string_t UserDto::getUserType() const
{
    return m_UserType;
}

void UserDto::setUserType(const utility::string_t& value)
{
    m_UserType = value;
    m_UserTypeIsSet = true;
}

bool UserDto::userTypeIsSet() const
{
    return m_UserTypeIsSet;
}

void UserDto::unsetUserType()
{
    m_UserTypeIsSet = false;
}
utility::string_t UserDto::getOrganization() const
{
    return m_Organization;
}

void UserDto::setOrganization(const utility::string_t& value)
{
    m_Organization = value;
    m_OrganizationIsSet = true;
}

bool UserDto::organizationIsSet() const
{
    return m_OrganizationIsSet;
}

void UserDto::unsetOrganization()
{
    m_OrganizationIsSet = false;
}
utility::string_t UserDto::getVerified() const
{
    return m_Verified;
}

void UserDto::setVerified(const utility::string_t& value)
{
    m_Verified = value;
    m_VerifiedIsSet = true;
}

bool UserDto::verifiedIsSet() const
{
    return m_VerifiedIsSet;
}

void UserDto::unsetVerified()
{
    m_VerifiedIsSet = false;
}
bool UserDto::isHasPassword() const
{
    return m_HasPassword;
}

void UserDto::setHasPassword(bool value)
{
    m_HasPassword = value;
    m_HasPasswordIsSet = true;
}

bool UserDto::hasPasswordIsSet() const
{
    return m_HasPasswordIsSet;
}

void UserDto::unsetHasPassword()
{
    m_HasPasswordIsSet = false;
}
bool UserDto::isIsFrozen() const
{
    return m_IsFrozen;
}

void UserDto::setIsFrozen(bool value)
{
    m_IsFrozen = value;
    m_IsFrozenIsSet = true;
}

bool UserDto::isFrozenIsSet() const
{
    return m_IsFrozenIsSet;
}

void UserDto::unsetIsFrozen()
{
    m_IsFrozenIsSet = false;
}
bool UserDto::isAddNewContacts() const
{
    return m_AddNewContacts;
}

void UserDto::setAddNewContacts(bool value)
{
    m_AddNewContacts = value;
    m_AddNewContactsIsSet = true;
}

bool UserDto::addNewContactsIsSet() const
{
    return m_AddNewContactsIsSet;
}

void UserDto::unsetAddNewContacts()
{
    m_AddNewContactsIsSet = false;
}
utility::string_t UserDto::getSsoProvider() const
{
    return m_SsoProvider;
}

void UserDto::setSsoProvider(const utility::string_t& value)
{
    m_SsoProvider = value;
    m_SsoProviderIsSet = true;
}

bool UserDto::ssoProviderIsSet() const
{
    return m_SsoProviderIsSet;
}

void UserDto::unsetSsoProvider()
{
    m_SsoProviderIsSet = false;
}
utility::string_t UserDto::getCustomerId() const
{
    return m_CustomerId;
}

void UserDto::setCustomerId(const utility::string_t& value)
{
    m_CustomerId = value;
    m_CustomerIdIsSet = true;
}

bool UserDto::customerIdIsSet() const
{
    return m_CustomerIdIsSet;
}

void UserDto::unsetCustomerId()
{
    m_CustomerIdIsSet = false;
}
bool UserDto::isHasOnboarded() const
{
    return m_HasOnboarded;
}

void UserDto::setHasOnboarded(bool value)
{
    m_HasOnboarded = value;
    m_HasOnboardedIsSet = true;
}

bool UserDto::hasOnboardedIsSet() const
{
    return m_HasOnboardedIsSet;
}

void UserDto::unsetHasOnboarded()
{
    m_HasOnboardedIsSet = false;
}
utility::string_t UserDto::getImapUsername() const
{
    return m_ImapUsername;
}

void UserDto::setImapUsername(const utility::string_t& value)
{
    m_ImapUsername = value;
    m_ImapUsernameIsSet = true;
}

bool UserDto::imapUsernameIsSet() const
{
    return m_ImapUsernameIsSet;
}

void UserDto::unsetImapUsername()
{
    m_ImapUsernameIsSet = false;
}
utility::string_t UserDto::getImapPassword() const
{
    return m_ImapPassword;
}

void UserDto::setImapPassword(const utility::string_t& value)
{
    m_ImapPassword = value;
    m_ImapPasswordIsSet = true;
}

bool UserDto::imapPasswordIsSet() const
{
    return m_ImapPasswordIsSet;
}

void UserDto::unsetImapPassword()
{
    m_ImapPasswordIsSet = false;
}
utility::string_t UserDto::getSmtpUsername() const
{
    return m_SmtpUsername;
}

void UserDto::setSmtpUsername(const utility::string_t& value)
{
    m_SmtpUsername = value;
    m_SmtpUsernameIsSet = true;
}

bool UserDto::smtpUsernameIsSet() const
{
    return m_SmtpUsernameIsSet;
}

void UserDto::unsetSmtpUsername()
{
    m_SmtpUsernameIsSet = false;
}
utility::string_t UserDto::getSmtpPassword() const
{
    return m_SmtpPassword;
}

void UserDto::setSmtpPassword(const utility::string_t& value)
{
    m_SmtpPassword = value;
    m_SmtpPasswordIsSet = true;
}

bool UserDto::smtpPasswordIsSet() const
{
    return m_SmtpPasswordIsSet;
}

void UserDto::unsetSmtpPassword()
{
    m_SmtpPasswordIsSet = false;
}
}
}
}
}


