/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SmsDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




SmsDto::SmsDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_PhoneNumber = utility::conversions::to_string_t("");
    m_PhoneNumberIsSet = false;
    m_FromNumber = utility::conversions::to_string_t("");
    m_FromNumberIsSet = false;
    m_Body = utility::conversions::to_string_t("");
    m_BodyIsSet = false;
    m_Read = false;
    m_ReadIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_UpdatedAt = utility::datetime();
    m_UpdatedAtIsSet = false;
}

SmsDto::~SmsDto()
{
}

void SmsDto::validate()
{
    // TODO: implement validation
}

web::json::value SmsDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t("userId")] = ModelBase::toJson(m_UserId);
    }
    if(m_PhoneNumberIsSet)
    {
        val[utility::conversions::to_string_t("phoneNumber")] = ModelBase::toJson(m_PhoneNumber);
    }
    if(m_FromNumberIsSet)
    {
        val[utility::conversions::to_string_t("fromNumber")] = ModelBase::toJson(m_FromNumber);
    }
    if(m_BodyIsSet)
    {
        val[utility::conversions::to_string_t("body")] = ModelBase::toJson(m_Body);
    }
    if(m_ReadIsSet)
    {
        val[utility::conversions::to_string_t("read")] = ModelBase::toJson(m_Read);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t("createdAt")] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_UpdatedAtIsSet)
    {
        val[utility::conversions::to_string_t("updatedAt")] = ModelBase::toJson(m_UpdatedAt);
    }

    return val;
}

bool SmsDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("userId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("userId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_userId;
            ok &= ModelBase::fromJson(fieldValue, refVal_userId);
            setUserId(refVal_userId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("phoneNumber")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("phoneNumber"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_phoneNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_phoneNumber);
            setPhoneNumber(refVal_phoneNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fromNumber")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fromNumber"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_fromNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_fromNumber);
            setFromNumber(refVal_fromNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("body")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("body"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_body;
            ok &= ModelBase::fromJson(fieldValue, refVal_body);
            setBody(refVal_body);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("read")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("read"));
        if(!fieldValue.is_null())
        {
            bool refVal_read;
            ok &= ModelBase::fromJson(fieldValue, refVal_read);
            setRead(refVal_read);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_createdAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAt);
            setCreatedAt(refVal_createdAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("updatedAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("updatedAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_updatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_updatedAt);
            setUpdatedAt(refVal_updatedAt);
        }
    }
    return ok;
}

void SmsDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("userId"), m_UserId));
    }
    if(m_PhoneNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("phoneNumber"), m_PhoneNumber));
    }
    if(m_FromNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fromNumber"), m_FromNumber));
    }
    if(m_BodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("body"), m_Body));
    }
    if(m_ReadIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("read"), m_Read));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("updatedAt"), m_UpdatedAt));
    }
}

bool SmsDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userId")))
    {
        utility::string_t refVal_userId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("userId")), refVal_userId );
        setUserId(refVal_userId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("phoneNumber")))
    {
        utility::string_t refVal_phoneNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("phoneNumber")), refVal_phoneNumber );
        setPhoneNumber(refVal_phoneNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fromNumber")))
    {
        utility::string_t refVal_fromNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fromNumber")), refVal_fromNumber );
        setFromNumber(refVal_fromNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("body")))
    {
        utility::string_t refVal_body;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("body")), refVal_body );
        setBody(refVal_body);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("read")))
    {
        bool refVal_read;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("read")), refVal_read );
        setRead(refVal_read);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdAt")))
    {
        utility::datetime refVal_createdAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt")), refVal_createdAt );
        setCreatedAt(refVal_createdAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("updatedAt")))
    {
        utility::datetime refVal_updatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("updatedAt")), refVal_updatedAt );
        setUpdatedAt(refVal_updatedAt);
    }
    return ok;
}

utility::string_t SmsDto::getId() const
{
    return m_Id;
}

void SmsDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool SmsDto::idIsSet() const
{
    return m_IdIsSet;
}

void SmsDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t SmsDto::getUserId() const
{
    return m_UserId;
}

void SmsDto::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool SmsDto::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void SmsDto::unsetUserId()
{
    m_UserIdIsSet = false;
}
utility::string_t SmsDto::getPhoneNumber() const
{
    return m_PhoneNumber;
}

void SmsDto::setPhoneNumber(const utility::string_t& value)
{
    m_PhoneNumber = value;
    m_PhoneNumberIsSet = true;
}

bool SmsDto::phoneNumberIsSet() const
{
    return m_PhoneNumberIsSet;
}

void SmsDto::unsetPhoneNumber()
{
    m_PhoneNumberIsSet = false;
}
utility::string_t SmsDto::getFromNumber() const
{
    return m_FromNumber;
}

void SmsDto::setFromNumber(const utility::string_t& value)
{
    m_FromNumber = value;
    m_FromNumberIsSet = true;
}

bool SmsDto::fromNumberIsSet() const
{
    return m_FromNumberIsSet;
}

void SmsDto::unsetFromNumber()
{
    m_FromNumberIsSet = false;
}
utility::string_t SmsDto::getBody() const
{
    return m_Body;
}

void SmsDto::setBody(const utility::string_t& value)
{
    m_Body = value;
    m_BodyIsSet = true;
}

bool SmsDto::bodyIsSet() const
{
    return m_BodyIsSet;
}

void SmsDto::unsetBody()
{
    m_BodyIsSet = false;
}
bool SmsDto::isRead() const
{
    return m_Read;
}

void SmsDto::setRead(bool value)
{
    m_Read = value;
    m_ReadIsSet = true;
}

bool SmsDto::readIsSet() const
{
    return m_ReadIsSet;
}

void SmsDto::unsetRead()
{
    m_ReadIsSet = false;
}
utility::datetime SmsDto::getCreatedAt() const
{
    return m_CreatedAt;
}

void SmsDto::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool SmsDto::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void SmsDto::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::datetime SmsDto::getUpdatedAt() const
{
    return m_UpdatedAt;
}

void SmsDto::setUpdatedAt(const utility::datetime& value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}

bool SmsDto::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void SmsDto::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
}
}
}
}


