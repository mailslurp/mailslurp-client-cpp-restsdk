/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "WebhookBouncePayload.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




WebhookBouncePayload::WebhookBouncePayload()
{
    m_MessageId = utility::conversions::to_string_t("");
    m_MessageIdIsSet = false;
    m_WebhookId = utility::conversions::to_string_t("");
    m_WebhookIdIsSet = false;
    m_EventName = utility::conversions::to_string_t("");
    m_EventNameIsSet = false;
    m_WebhookName = utility::conversions::to_string_t("");
    m_WebhookNameIsSet = false;
    m_BounceId = utility::conversions::to_string_t("");
    m_BounceIdIsSet = false;
    m_SentToRecipientsIsSet = false;
    m_Sender = utility::conversions::to_string_t("");
    m_SenderIsSet = false;
    m_BounceRecipientsIsSet = false;
}

WebhookBouncePayload::~WebhookBouncePayload()
{
}

void WebhookBouncePayload::validate()
{
    // TODO: implement validation
}

web::json::value WebhookBouncePayload::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MessageIdIsSet)
    {
        val[utility::conversions::to_string_t("messageId")] = ModelBase::toJson(m_MessageId);
    }
    if(m_WebhookIdIsSet)
    {
        val[utility::conversions::to_string_t("webhookId")] = ModelBase::toJson(m_WebhookId);
    }
    if(m_EventNameIsSet)
    {
        val[utility::conversions::to_string_t("eventName")] = ModelBase::toJson(m_EventName);
    }
    if(m_WebhookNameIsSet)
    {
        val[utility::conversions::to_string_t("webhookName")] = ModelBase::toJson(m_WebhookName);
    }
    if(m_BounceIdIsSet)
    {
        val[utility::conversions::to_string_t("bounceId")] = ModelBase::toJson(m_BounceId);
    }
    if(m_SentToRecipientsIsSet)
    {
        val[utility::conversions::to_string_t("sentToRecipients")] = ModelBase::toJson(m_SentToRecipients);
    }
    if(m_SenderIsSet)
    {
        val[utility::conversions::to_string_t("sender")] = ModelBase::toJson(m_Sender);
    }
    if(m_BounceRecipientsIsSet)
    {
        val[utility::conversions::to_string_t("bounceRecipients")] = ModelBase::toJson(m_BounceRecipients);
    }

    return val;
}

bool WebhookBouncePayload::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("messageId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("messageId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_messageId;
            ok &= ModelBase::fromJson(fieldValue, refVal_messageId);
            setMessageId(refVal_messageId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("webhookId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("webhookId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_webhookId;
            ok &= ModelBase::fromJson(fieldValue, refVal_webhookId);
            setWebhookId(refVal_webhookId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("eventName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("eventName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_eventName;
            ok &= ModelBase::fromJson(fieldValue, refVal_eventName);
            setEventName(refVal_eventName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("webhookName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("webhookName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_webhookName;
            ok &= ModelBase::fromJson(fieldValue, refVal_webhookName);
            setWebhookName(refVal_webhookName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bounceId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bounceId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_bounceId;
            ok &= ModelBase::fromJson(fieldValue, refVal_bounceId);
            setBounceId(refVal_bounceId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sentToRecipients")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sentToRecipients"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_sentToRecipients;
            ok &= ModelBase::fromJson(fieldValue, refVal_sentToRecipients);
            setSentToRecipients(refVal_sentToRecipients);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sender")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sender"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sender;
            ok &= ModelBase::fromJson(fieldValue, refVal_sender);
            setSender(refVal_sender);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bounceRecipients")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bounceRecipients"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_bounceRecipients;
            ok &= ModelBase::fromJson(fieldValue, refVal_bounceRecipients);
            setBounceRecipients(refVal_bounceRecipients);
        }
    }
    return ok;
}

void WebhookBouncePayload::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_MessageIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messageId"), m_MessageId));
    }
    if(m_WebhookIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("webhookId"), m_WebhookId));
    }
    if(m_EventNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("eventName"), m_EventName));
    }
    if(m_WebhookNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("webhookName"), m_WebhookName));
    }
    if(m_BounceIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bounceId"), m_BounceId));
    }
    if(m_SentToRecipientsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sentToRecipients"), m_SentToRecipients));
    }
    if(m_SenderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sender"), m_Sender));
    }
    if(m_BounceRecipientsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bounceRecipients"), m_BounceRecipients));
    }
}

bool WebhookBouncePayload::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("messageId")))
    {
        utility::string_t refVal_messageId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("messageId")), refVal_messageId );
        setMessageId(refVal_messageId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("webhookId")))
    {
        utility::string_t refVal_webhookId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("webhookId")), refVal_webhookId );
        setWebhookId(refVal_webhookId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("eventName")))
    {
        utility::string_t refVal_eventName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("eventName")), refVal_eventName );
        setEventName(refVal_eventName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("webhookName")))
    {
        utility::string_t refVal_webhookName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("webhookName")), refVal_webhookName );
        setWebhookName(refVal_webhookName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bounceId")))
    {
        utility::string_t refVal_bounceId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bounceId")), refVal_bounceId );
        setBounceId(refVal_bounceId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sentToRecipients")))
    {
        std::vector<utility::string_t> refVal_sentToRecipients;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sentToRecipients")), refVal_sentToRecipients );
        setSentToRecipients(refVal_sentToRecipients);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sender")))
    {
        utility::string_t refVal_sender;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sender")), refVal_sender );
        setSender(refVal_sender);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bounceRecipients")))
    {
        std::vector<utility::string_t> refVal_bounceRecipients;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bounceRecipients")), refVal_bounceRecipients );
        setBounceRecipients(refVal_bounceRecipients);
    }
    return ok;
}

utility::string_t WebhookBouncePayload::getMessageId() const
{
    return m_MessageId;
}

void WebhookBouncePayload::setMessageId(const utility::string_t& value)
{
    m_MessageId = value;
    m_MessageIdIsSet = true;
}

bool WebhookBouncePayload::messageIdIsSet() const
{
    return m_MessageIdIsSet;
}

void WebhookBouncePayload::unsetMessageId()
{
    m_MessageIdIsSet = false;
}
utility::string_t WebhookBouncePayload::getWebhookId() const
{
    return m_WebhookId;
}

void WebhookBouncePayload::setWebhookId(const utility::string_t& value)
{
    m_WebhookId = value;
    m_WebhookIdIsSet = true;
}

bool WebhookBouncePayload::webhookIdIsSet() const
{
    return m_WebhookIdIsSet;
}

void WebhookBouncePayload::unsetWebhookId()
{
    m_WebhookIdIsSet = false;
}
utility::string_t WebhookBouncePayload::getEventName() const
{
    return m_EventName;
}

void WebhookBouncePayload::setEventName(const utility::string_t& value)
{
    m_EventName = value;
    m_EventNameIsSet = true;
}

bool WebhookBouncePayload::eventNameIsSet() const
{
    return m_EventNameIsSet;
}

void WebhookBouncePayload::unsetEventName()
{
    m_EventNameIsSet = false;
}
utility::string_t WebhookBouncePayload::getWebhookName() const
{
    return m_WebhookName;
}

void WebhookBouncePayload::setWebhookName(const utility::string_t& value)
{
    m_WebhookName = value;
    m_WebhookNameIsSet = true;
}

bool WebhookBouncePayload::webhookNameIsSet() const
{
    return m_WebhookNameIsSet;
}

void WebhookBouncePayload::unsetWebhookName()
{
    m_WebhookNameIsSet = false;
}
utility::string_t WebhookBouncePayload::getBounceId() const
{
    return m_BounceId;
}

void WebhookBouncePayload::setBounceId(const utility::string_t& value)
{
    m_BounceId = value;
    m_BounceIdIsSet = true;
}

bool WebhookBouncePayload::bounceIdIsSet() const
{
    return m_BounceIdIsSet;
}

void WebhookBouncePayload::unsetBounceId()
{
    m_BounceIdIsSet = false;
}
std::vector<utility::string_t>& WebhookBouncePayload::getSentToRecipients()
{
    return m_SentToRecipients;
}

void WebhookBouncePayload::setSentToRecipients(const std::vector<utility::string_t>& value)
{
    m_SentToRecipients = value;
    m_SentToRecipientsIsSet = true;
}

bool WebhookBouncePayload::sentToRecipientsIsSet() const
{
    return m_SentToRecipientsIsSet;
}

void WebhookBouncePayload::unsetSentToRecipients()
{
    m_SentToRecipientsIsSet = false;
}
utility::string_t WebhookBouncePayload::getSender() const
{
    return m_Sender;
}

void WebhookBouncePayload::setSender(const utility::string_t& value)
{
    m_Sender = value;
    m_SenderIsSet = true;
}

bool WebhookBouncePayload::senderIsSet() const
{
    return m_SenderIsSet;
}

void WebhookBouncePayload::unsetSender()
{
    m_SenderIsSet = false;
}
std::vector<utility::string_t>& WebhookBouncePayload::getBounceRecipients()
{
    return m_BounceRecipients;
}

void WebhookBouncePayload::setBounceRecipients(const std::vector<utility::string_t>& value)
{
    m_BounceRecipients = value;
    m_BounceRecipientsIsSet = true;
}

bool WebhookBouncePayload::bounceRecipientsIsSet() const
{
    return m_BounceRecipientsIsSet;
}

void WebhookBouncePayload::unsetBounceRecipients()
{
    m_BounceRecipientsIsSet = false;
}
}
}
}
}


