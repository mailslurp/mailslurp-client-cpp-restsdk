/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "ForwardEmailOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




ForwardEmailOptions::ForwardEmailOptions()
{
    m_BccIsSet = false;
    m_CcIsSet = false;
    m_From = utility::conversions::to_string_t("");
    m_FromIsSet = false;
    m_Subject = utility::conversions::to_string_t("");
    m_SubjectIsSet = false;
    m_ToIsSet = false;
    m_UseInboxName = false;
    m_UseInboxNameIsSet = false;
}

ForwardEmailOptions::~ForwardEmailOptions()
{
}

void ForwardEmailOptions::validate()
{
    // TODO: implement validation
}

web::json::value ForwardEmailOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BccIsSet)
    {
        val[utility::conversions::to_string_t("bcc")] = ModelBase::toJson(m_Bcc);
    }
    if(m_CcIsSet)
    {
        val[utility::conversions::to_string_t("cc")] = ModelBase::toJson(m_Cc);
    }
    if(m_FromIsSet)
    {
        val[utility::conversions::to_string_t("from")] = ModelBase::toJson(m_From);
    }
    if(m_SubjectIsSet)
    {
        val[utility::conversions::to_string_t("subject")] = ModelBase::toJson(m_Subject);
    }
    if(m_ToIsSet)
    {
        val[utility::conversions::to_string_t("to")] = ModelBase::toJson(m_To);
    }
    if(m_UseInboxNameIsSet)
    {
        val[utility::conversions::to_string_t("useInboxName")] = ModelBase::toJson(m_UseInboxName);
    }

    return val;
}

bool ForwardEmailOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("bcc")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bcc"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_bcc;
            ok &= ModelBase::fromJson(fieldValue, refVal_bcc);
            setBcc(refVal_bcc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cc")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("cc"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_cc;
            ok &= ModelBase::fromJson(fieldValue, refVal_cc);
            setCc(refVal_cc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("from")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("from"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_from;
            ok &= ModelBase::fromJson(fieldValue, refVal_from);
            setFrom(refVal_from);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subject")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subject"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_subject;
            ok &= ModelBase::fromJson(fieldValue, refVal_subject);
            setSubject(refVal_subject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("to")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("to"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_to;
            ok &= ModelBase::fromJson(fieldValue, refVal_to);
            setTo(refVal_to);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("useInboxName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("useInboxName"));
        if(!fieldValue.is_null())
        {
            bool refVal_useInboxName;
            ok &= ModelBase::fromJson(fieldValue, refVal_useInboxName);
            setUseInboxName(refVal_useInboxName);
        }
    }
    return ok;
}

void ForwardEmailOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BccIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bcc"), m_Bcc));
    }
    if(m_CcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cc"), m_Cc));
    }
    if(m_FromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("from"), m_From));
    }
    if(m_SubjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subject"), m_Subject));
    }
    if(m_ToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("to"), m_To));
    }
    if(m_UseInboxNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("useInboxName"), m_UseInboxName));
    }
}

bool ForwardEmailOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("bcc")))
    {
        std::vector<utility::string_t> refVal_bcc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bcc")), refVal_bcc );
        setBcc(refVal_bcc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cc")))
    {
        std::vector<utility::string_t> refVal_cc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("cc")), refVal_cc );
        setCc(refVal_cc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("from")))
    {
        utility::string_t refVal_from;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("from")), refVal_from );
        setFrom(refVal_from);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subject")))
    {
        utility::string_t refVal_subject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subject")), refVal_subject );
        setSubject(refVal_subject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("to")))
    {
        std::vector<utility::string_t> refVal_to;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("to")), refVal_to );
        setTo(refVal_to);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("useInboxName")))
    {
        bool refVal_useInboxName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("useInboxName")), refVal_useInboxName );
        setUseInboxName(refVal_useInboxName);
    }
    return ok;
}

std::vector<utility::string_t>& ForwardEmailOptions::getBcc()
{
    return m_Bcc;
}

void ForwardEmailOptions::setBcc(const std::vector<utility::string_t>& value)
{
    m_Bcc = value;
    m_BccIsSet = true;
}

bool ForwardEmailOptions::bccIsSet() const
{
    return m_BccIsSet;
}

void ForwardEmailOptions::unsetBcc()
{
    m_BccIsSet = false;
}
std::vector<utility::string_t>& ForwardEmailOptions::getCc()
{
    return m_Cc;
}

void ForwardEmailOptions::setCc(const std::vector<utility::string_t>& value)
{
    m_Cc = value;
    m_CcIsSet = true;
}

bool ForwardEmailOptions::ccIsSet() const
{
    return m_CcIsSet;
}

void ForwardEmailOptions::unsetCc()
{
    m_CcIsSet = false;
}
utility::string_t ForwardEmailOptions::getFrom() const
{
    return m_From;
}

void ForwardEmailOptions::setFrom(const utility::string_t& value)
{
    m_From = value;
    m_FromIsSet = true;
}

bool ForwardEmailOptions::fromIsSet() const
{
    return m_FromIsSet;
}

void ForwardEmailOptions::unsetFrom()
{
    m_FromIsSet = false;
}
utility::string_t ForwardEmailOptions::getSubject() const
{
    return m_Subject;
}

void ForwardEmailOptions::setSubject(const utility::string_t& value)
{
    m_Subject = value;
    m_SubjectIsSet = true;
}

bool ForwardEmailOptions::subjectIsSet() const
{
    return m_SubjectIsSet;
}

void ForwardEmailOptions::unsetSubject()
{
    m_SubjectIsSet = false;
}
std::vector<utility::string_t>& ForwardEmailOptions::getTo()
{
    return m_To;
}

void ForwardEmailOptions::setTo(const std::vector<utility::string_t>& value)
{
    m_To = value;
    m_ToIsSet = true;
}

bool ForwardEmailOptions::toIsSet() const
{
    return m_ToIsSet;
}

void ForwardEmailOptions::unsetTo()
{
    m_ToIsSet = false;
}
bool ForwardEmailOptions::isUseInboxName() const
{
    return m_UseInboxName;
}

void ForwardEmailOptions::setUseInboxName(bool value)
{
    m_UseInboxName = value;
    m_UseInboxNameIsSet = true;
}

bool ForwardEmailOptions::useInboxNameIsSet() const
{
    return m_UseInboxNameIsSet;
}

void ForwardEmailOptions::unsetUseInboxName()
{
    m_UseInboxNameIsSet = false;
}
}
}
}
}


