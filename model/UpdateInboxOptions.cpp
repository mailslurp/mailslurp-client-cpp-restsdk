/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "UpdateInboxOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




UpdateInboxOptions::UpdateInboxOptions()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_TagsIsSet = false;
    m_ExpiresAt = utility::datetime();
    m_ExpiresAtIsSet = false;
    m_Favourite = false;
    m_FavouriteIsSet = false;
}

UpdateInboxOptions::~UpdateInboxOptions()
{
}

void UpdateInboxOptions::validate()
{
    // TODO: implement validation
}

web::json::value UpdateInboxOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t("name")] = ModelBase::toJson(m_Name);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t("description")] = ModelBase::toJson(m_Description);
    }
    if(m_TagsIsSet)
    {
        val[utility::conversions::to_string_t("tags")] = ModelBase::toJson(m_Tags);
    }
    if(m_ExpiresAtIsSet)
    {
        val[utility::conversions::to_string_t("expiresAt")] = ModelBase::toJson(m_ExpiresAt);
    }
    if(m_FavouriteIsSet)
    {
        val[utility::conversions::to_string_t("favourite")] = ModelBase::toJson(m_Favourite);
    }

    return val;
}

bool UpdateInboxOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("name")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("name"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_name;
            ok &= ModelBase::fromJson(fieldValue, refVal_name);
            setName(refVal_name);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("description")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("description"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_description;
            ok &= ModelBase::fromJson(fieldValue, refVal_description);
            setDescription(refVal_description);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tags")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("tags"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_tags;
            ok &= ModelBase::fromJson(fieldValue, refVal_tags);
            setTags(refVal_tags);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("expiresAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("expiresAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_expiresAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_expiresAt);
            setExpiresAt(refVal_expiresAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("favourite")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("favourite"));
        if(!fieldValue.is_null())
        {
            bool refVal_favourite;
            ok &= ModelBase::fromJson(fieldValue, refVal_favourite);
            setFavourite(refVal_favourite);
        }
    }
    return ok;
}

void UpdateInboxOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("name"), m_Name));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("description"), m_Description));
    }
    if(m_TagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tags"), m_Tags));
    }
    if(m_ExpiresAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("expiresAt"), m_ExpiresAt));
    }
    if(m_FavouriteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("favourite"), m_Favourite));
    }
}

bool UpdateInboxOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("name")))
    {
        utility::string_t refVal_name;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("name")), refVal_name );
        setName(refVal_name);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("description")))
    {
        utility::string_t refVal_description;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("description")), refVal_description );
        setDescription(refVal_description);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tags")))
    {
        std::vector<utility::string_t> refVal_tags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("tags")), refVal_tags );
        setTags(refVal_tags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("expiresAt")))
    {
        utility::datetime refVal_expiresAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("expiresAt")), refVal_expiresAt );
        setExpiresAt(refVal_expiresAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("favourite")))
    {
        bool refVal_favourite;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("favourite")), refVal_favourite );
        setFavourite(refVal_favourite);
    }
    return ok;
}

utility::string_t UpdateInboxOptions::getName() const
{
    return m_Name;
}

void UpdateInboxOptions::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool UpdateInboxOptions::nameIsSet() const
{
    return m_NameIsSet;
}

void UpdateInboxOptions::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t UpdateInboxOptions::getDescription() const
{
    return m_Description;
}

void UpdateInboxOptions::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool UpdateInboxOptions::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void UpdateInboxOptions::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::vector<utility::string_t>& UpdateInboxOptions::getTags()
{
    return m_Tags;
}

void UpdateInboxOptions::setTags(const std::vector<utility::string_t>& value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}

bool UpdateInboxOptions::tagsIsSet() const
{
    return m_TagsIsSet;
}

void UpdateInboxOptions::unsetTags()
{
    m_TagsIsSet = false;
}
utility::datetime UpdateInboxOptions::getExpiresAt() const
{
    return m_ExpiresAt;
}

void UpdateInboxOptions::setExpiresAt(const utility::datetime& value)
{
    m_ExpiresAt = value;
    m_ExpiresAtIsSet = true;
}

bool UpdateInboxOptions::expiresAtIsSet() const
{
    return m_ExpiresAtIsSet;
}

void UpdateInboxOptions::unsetExpiresAt()
{
    m_ExpiresAtIsSet = false;
}
bool UpdateInboxOptions::isFavourite() const
{
    return m_Favourite;
}

void UpdateInboxOptions::setFavourite(bool value)
{
    m_Favourite = value;
    m_FavouriteIsSet = true;
}

bool UpdateInboxOptions::favouriteIsSet() const
{
    return m_FavouriteIsSet;
}

void UpdateInboxOptions::unsetFavourite()
{
    m_FavouriteIsSet = false;
}
}
}
}
}


