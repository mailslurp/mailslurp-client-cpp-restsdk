/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "GetOrCreateSamlUserOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




GetOrCreateSamlUserOptions::GetOrCreateSamlUserOptions()
{
    m_Issuer = utility::conversions::to_string_t("");
    m_IssuerIsSet = false;
    m_NameId = utility::conversions::to_string_t("");
    m_NameIdIsSet = false;
    m_NameIdFormat = utility::conversions::to_string_t("");
    m_NameIdFormatIsSet = false;
}

GetOrCreateSamlUserOptions::~GetOrCreateSamlUserOptions()
{
}

void GetOrCreateSamlUserOptions::validate()
{
    // TODO: implement validation
}

web::json::value GetOrCreateSamlUserOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IssuerIsSet)
    {
        val[utility::conversions::to_string_t("issuer")] = ModelBase::toJson(m_Issuer);
    }
    if(m_NameIdIsSet)
    {
        val[utility::conversions::to_string_t("nameId")] = ModelBase::toJson(m_NameId);
    }
    if(m_NameIdFormatIsSet)
    {
        val[utility::conversions::to_string_t("nameIdFormat")] = ModelBase::toJson(m_NameIdFormat);
    }

    return val;
}

bool GetOrCreateSamlUserOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("issuer")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("issuer"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_issuer;
            ok &= ModelBase::fromJson(fieldValue, refVal_issuer);
            setIssuer(refVal_issuer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nameId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nameId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_nameId;
            ok &= ModelBase::fromJson(fieldValue, refVal_nameId);
            setNameId(refVal_nameId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("nameIdFormat")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("nameIdFormat"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_nameIdFormat;
            ok &= ModelBase::fromJson(fieldValue, refVal_nameIdFormat);
            setNameIdFormat(refVal_nameIdFormat);
        }
    }
    return ok;
}

void GetOrCreateSamlUserOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IssuerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("issuer"), m_Issuer));
    }
    if(m_NameIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nameId"), m_NameId));
    }
    if(m_NameIdFormatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("nameIdFormat"), m_NameIdFormat));
    }
}

bool GetOrCreateSamlUserOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("issuer")))
    {
        utility::string_t refVal_issuer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("issuer")), refVal_issuer );
        setIssuer(refVal_issuer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nameId")))
    {
        utility::string_t refVal_nameId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nameId")), refVal_nameId );
        setNameId(refVal_nameId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("nameIdFormat")))
    {
        utility::string_t refVal_nameIdFormat;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("nameIdFormat")), refVal_nameIdFormat );
        setNameIdFormat(refVal_nameIdFormat);
    }
    return ok;
}

utility::string_t GetOrCreateSamlUserOptions::getIssuer() const
{
    return m_Issuer;
}

void GetOrCreateSamlUserOptions::setIssuer(const utility::string_t& value)
{
    m_Issuer = value;
    m_IssuerIsSet = true;
}

bool GetOrCreateSamlUserOptions::issuerIsSet() const
{
    return m_IssuerIsSet;
}

void GetOrCreateSamlUserOptions::unsetIssuer()
{
    m_IssuerIsSet = false;
}
utility::string_t GetOrCreateSamlUserOptions::getNameId() const
{
    return m_NameId;
}

void GetOrCreateSamlUserOptions::setNameId(const utility::string_t& value)
{
    m_NameId = value;
    m_NameIdIsSet = true;
}

bool GetOrCreateSamlUserOptions::nameIdIsSet() const
{
    return m_NameIdIsSet;
}

void GetOrCreateSamlUserOptions::unsetNameId()
{
    m_NameIdIsSet = false;
}
utility::string_t GetOrCreateSamlUserOptions::getNameIdFormat() const
{
    return m_NameIdFormat;
}

void GetOrCreateSamlUserOptions::setNameIdFormat(const utility::string_t& value)
{
    m_NameIdFormat = value;
    m_NameIdFormatIsSet = true;
}

bool GetOrCreateSamlUserOptions::nameIdFormatIsSet() const
{
    return m_NameIdFormatIsSet;
}

void GetOrCreateSamlUserOptions::unsetNameIdFormat()
{
    m_NameIdFormatIsSet = false;
}
}
}
}
}


