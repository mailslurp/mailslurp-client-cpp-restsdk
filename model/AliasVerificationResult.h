/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AliasVerificationResult.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_AliasVerificationResult_H_
#define COM_MAILSLURP_CLIENT_MODEL_AliasVerificationResult_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  AliasVerificationResult
    : public ModelBase
{
public:
    AliasVerificationResult();
    virtual ~AliasVerificationResult();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// AliasVerificationResult members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAliasId() const;
    bool aliasIdIsSet() const;
    void unsetAliasId();

    void setAliasId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsVerified() const;
    bool isVerifiedIsSet() const;
    void unsetIsVerified();

    void setIsVerified(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMessage() const;
    bool messageIsSet() const;
    void unsetMessage();

    void setMessage(const utility::string_t& value);


protected:
    utility::string_t m_AliasId;
    bool m_AliasIdIsSet;
    bool m_IsVerified;
    bool m_IsVerifiedIsSet;
    utility::string_t m_Message;
    bool m_MessageIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_AliasVerificationResult_H_ */
