/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * InboxByEmailAddressResult.h
 *
 * Result of search for inbox by email address
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_InboxByEmailAddressResult_H_
#define COM_MAILSLURP_CLIENT_MODEL_InboxByEmailAddressResult_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// Result of search for inbox by email address
/// </summary>
class  InboxByEmailAddressResult
    : public ModelBase
{
public:
    InboxByEmailAddressResult();
    virtual ~InboxByEmailAddressResult();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// InboxByEmailAddressResult members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getInboxId() const;
    bool inboxIdIsSet() const;
    void unsetInboxId();

    void setInboxId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isExists() const;
    bool existsIsSet() const;
    void unsetExists();

    void setExists(bool value);


protected:
    utility::string_t m_InboxId;
    bool m_InboxIdIsSet;
    bool m_Exists;
    bool m_ExistsIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_InboxByEmailAddressResult_H_ */
