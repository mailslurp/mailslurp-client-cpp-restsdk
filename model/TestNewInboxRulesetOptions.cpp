/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "TestNewInboxRulesetOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




TestNewInboxRulesetOptions::TestNewInboxRulesetOptions()
{
    m_InboxRulesetTestOptionsIsSet = false;
    m_CreateInboxRulesetOptionsIsSet = false;
}

TestNewInboxRulesetOptions::~TestNewInboxRulesetOptions()
{
}

void TestNewInboxRulesetOptions::validate()
{
    // TODO: implement validation
}

web::json::value TestNewInboxRulesetOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_InboxRulesetTestOptionsIsSet)
    {
        val[utility::conversions::to_string_t("inboxRulesetTestOptions")] = ModelBase::toJson(m_InboxRulesetTestOptions);
    }
    if(m_CreateInboxRulesetOptionsIsSet)
    {
        val[utility::conversions::to_string_t("createInboxRulesetOptions")] = ModelBase::toJson(m_CreateInboxRulesetOptions);
    }

    return val;
}

bool TestNewInboxRulesetOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("inboxRulesetTestOptions")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("inboxRulesetTestOptions"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<InboxRulesetTestOptions> refVal_inboxRulesetTestOptions;
            ok &= ModelBase::fromJson(fieldValue, refVal_inboxRulesetTestOptions);
            setInboxRulesetTestOptions(refVal_inboxRulesetTestOptions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createInboxRulesetOptions")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createInboxRulesetOptions"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CreateInboxRulesetOptions> refVal_createInboxRulesetOptions;
            ok &= ModelBase::fromJson(fieldValue, refVal_createInboxRulesetOptions);
            setCreateInboxRulesetOptions(refVal_createInboxRulesetOptions);
        }
    }
    return ok;
}

void TestNewInboxRulesetOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_InboxRulesetTestOptionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("inboxRulesetTestOptions"), m_InboxRulesetTestOptions));
    }
    if(m_CreateInboxRulesetOptionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createInboxRulesetOptions"), m_CreateInboxRulesetOptions));
    }
}

bool TestNewInboxRulesetOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("inboxRulesetTestOptions")))
    {
        std::shared_ptr<InboxRulesetTestOptions> refVal_inboxRulesetTestOptions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("inboxRulesetTestOptions")), refVal_inboxRulesetTestOptions );
        setInboxRulesetTestOptions(refVal_inboxRulesetTestOptions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createInboxRulesetOptions")))
    {
        std::shared_ptr<CreateInboxRulesetOptions> refVal_createInboxRulesetOptions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createInboxRulesetOptions")), refVal_createInboxRulesetOptions );
        setCreateInboxRulesetOptions(refVal_createInboxRulesetOptions);
    }
    return ok;
}

std::shared_ptr<InboxRulesetTestOptions> TestNewInboxRulesetOptions::getInboxRulesetTestOptions() const
{
    return m_InboxRulesetTestOptions;
}

void TestNewInboxRulesetOptions::setInboxRulesetTestOptions(const std::shared_ptr<InboxRulesetTestOptions>& value)
{
    m_InboxRulesetTestOptions = value;
    m_InboxRulesetTestOptionsIsSet = true;
}

bool TestNewInboxRulesetOptions::inboxRulesetTestOptionsIsSet() const
{
    return m_InboxRulesetTestOptionsIsSet;
}

void TestNewInboxRulesetOptions::unsetInboxRulesetTestOptions()
{
    m_InboxRulesetTestOptionsIsSet = false;
}
std::shared_ptr<CreateInboxRulesetOptions> TestNewInboxRulesetOptions::getCreateInboxRulesetOptions() const
{
    return m_CreateInboxRulesetOptions;
}

void TestNewInboxRulesetOptions::setCreateInboxRulesetOptions(const std::shared_ptr<CreateInboxRulesetOptions>& value)
{
    m_CreateInboxRulesetOptions = value;
    m_CreateInboxRulesetOptionsIsSet = true;
}

bool TestNewInboxRulesetOptions::createInboxRulesetOptionsIsSet() const
{
    return m_CreateInboxRulesetOptionsIsSet;
}

void TestNewInboxRulesetOptions::unsetCreateInboxRulesetOptions()
{
    m_CreateInboxRulesetOptionsIsSet = false;
}
}
}
}
}


