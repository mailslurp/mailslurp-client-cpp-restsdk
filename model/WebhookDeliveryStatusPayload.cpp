/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "WebhookDeliveryStatusPayload.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




WebhookDeliveryStatusPayload::WebhookDeliveryStatusPayload()
{
    m_MessageId = utility::conversions::to_string_t("");
    m_MessageIdIsSet = false;
    m_WebhookId = utility::conversions::to_string_t("");
    m_WebhookIdIsSet = false;
    m_EventName = utility::conversions::to_string_t("");
    m_EventNameIsSet = false;
    m_WebhookName = utility::conversions::to_string_t("");
    m_WebhookNameIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_SentId = utility::conversions::to_string_t("");
    m_SentIdIsSet = false;
    m_RemoteMtaIp = utility::conversions::to_string_t("");
    m_RemoteMtaIpIsSet = false;
    m_InboxId = utility::conversions::to_string_t("");
    m_InboxIdIsSet = false;
    m_ReportingMta = utility::conversions::to_string_t("");
    m_ReportingMtaIsSet = false;
    m_RecipientsIsSet = false;
    m_SmtpResponse = utility::conversions::to_string_t("");
    m_SmtpResponseIsSet = false;
    m_SmtpStatusCode = 0;
    m_SmtpStatusCodeIsSet = false;
    m_ProcessingTimeMillis = 0L;
    m_ProcessingTimeMillisIsSet = false;
    m_Received = utility::datetime();
    m_ReceivedIsSet = false;
    m_Subject = utility::conversions::to_string_t("");
    m_SubjectIsSet = false;
}

WebhookDeliveryStatusPayload::~WebhookDeliveryStatusPayload()
{
}

void WebhookDeliveryStatusPayload::validate()
{
    // TODO: implement validation
}

web::json::value WebhookDeliveryStatusPayload::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MessageIdIsSet)
    {
        val[utility::conversions::to_string_t("messageId")] = ModelBase::toJson(m_MessageId);
    }
    if(m_WebhookIdIsSet)
    {
        val[utility::conversions::to_string_t("webhookId")] = ModelBase::toJson(m_WebhookId);
    }
    if(m_EventNameIsSet)
    {
        val[utility::conversions::to_string_t("eventName")] = ModelBase::toJson(m_EventName);
    }
    if(m_WebhookNameIsSet)
    {
        val[utility::conversions::to_string_t("webhookName")] = ModelBase::toJson(m_WebhookName);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t("userId")] = ModelBase::toJson(m_UserId);
    }
    if(m_SentIdIsSet)
    {
        val[utility::conversions::to_string_t("sentId")] = ModelBase::toJson(m_SentId);
    }
    if(m_RemoteMtaIpIsSet)
    {
        val[utility::conversions::to_string_t("remoteMtaIp")] = ModelBase::toJson(m_RemoteMtaIp);
    }
    if(m_InboxIdIsSet)
    {
        val[utility::conversions::to_string_t("inboxId")] = ModelBase::toJson(m_InboxId);
    }
    if(m_ReportingMtaIsSet)
    {
        val[utility::conversions::to_string_t("reportingMta")] = ModelBase::toJson(m_ReportingMta);
    }
    if(m_RecipientsIsSet)
    {
        val[utility::conversions::to_string_t("recipients")] = ModelBase::toJson(m_Recipients);
    }
    if(m_SmtpResponseIsSet)
    {
        val[utility::conversions::to_string_t("smtpResponse")] = ModelBase::toJson(m_SmtpResponse);
    }
    if(m_SmtpStatusCodeIsSet)
    {
        val[utility::conversions::to_string_t("smtpStatusCode")] = ModelBase::toJson(m_SmtpStatusCode);
    }
    if(m_ProcessingTimeMillisIsSet)
    {
        val[utility::conversions::to_string_t("processingTimeMillis")] = ModelBase::toJson(m_ProcessingTimeMillis);
    }
    if(m_ReceivedIsSet)
    {
        val[utility::conversions::to_string_t("received")] = ModelBase::toJson(m_Received);
    }
    if(m_SubjectIsSet)
    {
        val[utility::conversions::to_string_t("subject")] = ModelBase::toJson(m_Subject);
    }

    return val;
}

bool WebhookDeliveryStatusPayload::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("messageId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("messageId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_messageId;
            ok &= ModelBase::fromJson(fieldValue, refVal_messageId);
            setMessageId(refVal_messageId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("webhookId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("webhookId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_webhookId;
            ok &= ModelBase::fromJson(fieldValue, refVal_webhookId);
            setWebhookId(refVal_webhookId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("eventName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("eventName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_eventName;
            ok &= ModelBase::fromJson(fieldValue, refVal_eventName);
            setEventName(refVal_eventName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("webhookName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("webhookName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_webhookName;
            ok &= ModelBase::fromJson(fieldValue, refVal_webhookName);
            setWebhookName(refVal_webhookName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("userId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("userId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_userId;
            ok &= ModelBase::fromJson(fieldValue, refVal_userId);
            setUserId(refVal_userId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_sentId);
            setSentId(refVal_sentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("remoteMtaIp")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("remoteMtaIp"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_remoteMtaIp;
            ok &= ModelBase::fromJson(fieldValue, refVal_remoteMtaIp);
            setRemoteMtaIp(refVal_remoteMtaIp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("inboxId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("inboxId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_inboxId;
            ok &= ModelBase::fromJson(fieldValue, refVal_inboxId);
            setInboxId(refVal_inboxId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("reportingMta")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("reportingMta"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_reportingMta;
            ok &= ModelBase::fromJson(fieldValue, refVal_reportingMta);
            setReportingMta(refVal_reportingMta);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("recipients")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("recipients"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_recipients;
            ok &= ModelBase::fromJson(fieldValue, refVal_recipients);
            setRecipients(refVal_recipients);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("smtpResponse")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("smtpResponse"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_smtpResponse;
            ok &= ModelBase::fromJson(fieldValue, refVal_smtpResponse);
            setSmtpResponse(refVal_smtpResponse);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("smtpStatusCode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("smtpStatusCode"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_smtpStatusCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_smtpStatusCode);
            setSmtpStatusCode(refVal_smtpStatusCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("processingTimeMillis")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("processingTimeMillis"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_processingTimeMillis;
            ok &= ModelBase::fromJson(fieldValue, refVal_processingTimeMillis);
            setProcessingTimeMillis(refVal_processingTimeMillis);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("received")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("received"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_received;
            ok &= ModelBase::fromJson(fieldValue, refVal_received);
            setReceived(refVal_received);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subject")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subject"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_subject;
            ok &= ModelBase::fromJson(fieldValue, refVal_subject);
            setSubject(refVal_subject);
        }
    }
    return ok;
}

void WebhookDeliveryStatusPayload::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_MessageIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messageId"), m_MessageId));
    }
    if(m_WebhookIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("webhookId"), m_WebhookId));
    }
    if(m_EventNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("eventName"), m_EventName));
    }
    if(m_WebhookNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("webhookName"), m_WebhookName));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("userId"), m_UserId));
    }
    if(m_SentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sentId"), m_SentId));
    }
    if(m_RemoteMtaIpIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("remoteMtaIp"), m_RemoteMtaIp));
    }
    if(m_InboxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("inboxId"), m_InboxId));
    }
    if(m_ReportingMtaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("reportingMta"), m_ReportingMta));
    }
    if(m_RecipientsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("recipients"), m_Recipients));
    }
    if(m_SmtpResponseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("smtpResponse"), m_SmtpResponse));
    }
    if(m_SmtpStatusCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("smtpStatusCode"), m_SmtpStatusCode));
    }
    if(m_ProcessingTimeMillisIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("processingTimeMillis"), m_ProcessingTimeMillis));
    }
    if(m_ReceivedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("received"), m_Received));
    }
    if(m_SubjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subject"), m_Subject));
    }
}

bool WebhookDeliveryStatusPayload::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("messageId")))
    {
        utility::string_t refVal_messageId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("messageId")), refVal_messageId );
        setMessageId(refVal_messageId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("webhookId")))
    {
        utility::string_t refVal_webhookId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("webhookId")), refVal_webhookId );
        setWebhookId(refVal_webhookId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("eventName")))
    {
        utility::string_t refVal_eventName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("eventName")), refVal_eventName );
        setEventName(refVal_eventName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("webhookName")))
    {
        utility::string_t refVal_webhookName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("webhookName")), refVal_webhookName );
        setWebhookName(refVal_webhookName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userId")))
    {
        utility::string_t refVal_userId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("userId")), refVal_userId );
        setUserId(refVal_userId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sentId")))
    {
        utility::string_t refVal_sentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sentId")), refVal_sentId );
        setSentId(refVal_sentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("remoteMtaIp")))
    {
        utility::string_t refVal_remoteMtaIp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("remoteMtaIp")), refVal_remoteMtaIp );
        setRemoteMtaIp(refVal_remoteMtaIp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("inboxId")))
    {
        utility::string_t refVal_inboxId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("inboxId")), refVal_inboxId );
        setInboxId(refVal_inboxId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("reportingMta")))
    {
        utility::string_t refVal_reportingMta;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("reportingMta")), refVal_reportingMta );
        setReportingMta(refVal_reportingMta);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("recipients")))
    {
        std::vector<utility::string_t> refVal_recipients;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("recipients")), refVal_recipients );
        setRecipients(refVal_recipients);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("smtpResponse")))
    {
        utility::string_t refVal_smtpResponse;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("smtpResponse")), refVal_smtpResponse );
        setSmtpResponse(refVal_smtpResponse);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("smtpStatusCode")))
    {
        int32_t refVal_smtpStatusCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("smtpStatusCode")), refVal_smtpStatusCode );
        setSmtpStatusCode(refVal_smtpStatusCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("processingTimeMillis")))
    {
        int64_t refVal_processingTimeMillis;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("processingTimeMillis")), refVal_processingTimeMillis );
        setProcessingTimeMillis(refVal_processingTimeMillis);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("received")))
    {
        utility::datetime refVal_received;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("received")), refVal_received );
        setReceived(refVal_received);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subject")))
    {
        utility::string_t refVal_subject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subject")), refVal_subject );
        setSubject(refVal_subject);
    }
    return ok;
}

utility::string_t WebhookDeliveryStatusPayload::getMessageId() const
{
    return m_MessageId;
}

void WebhookDeliveryStatusPayload::setMessageId(const utility::string_t& value)
{
    m_MessageId = value;
    m_MessageIdIsSet = true;
}

bool WebhookDeliveryStatusPayload::messageIdIsSet() const
{
    return m_MessageIdIsSet;
}

void WebhookDeliveryStatusPayload::unsetMessageId()
{
    m_MessageIdIsSet = false;
}
utility::string_t WebhookDeliveryStatusPayload::getWebhookId() const
{
    return m_WebhookId;
}

void WebhookDeliveryStatusPayload::setWebhookId(const utility::string_t& value)
{
    m_WebhookId = value;
    m_WebhookIdIsSet = true;
}

bool WebhookDeliveryStatusPayload::webhookIdIsSet() const
{
    return m_WebhookIdIsSet;
}

void WebhookDeliveryStatusPayload::unsetWebhookId()
{
    m_WebhookIdIsSet = false;
}
utility::string_t WebhookDeliveryStatusPayload::getEventName() const
{
    return m_EventName;
}

void WebhookDeliveryStatusPayload::setEventName(const utility::string_t& value)
{
    m_EventName = value;
    m_EventNameIsSet = true;
}

bool WebhookDeliveryStatusPayload::eventNameIsSet() const
{
    return m_EventNameIsSet;
}

void WebhookDeliveryStatusPayload::unsetEventName()
{
    m_EventNameIsSet = false;
}
utility::string_t WebhookDeliveryStatusPayload::getWebhookName() const
{
    return m_WebhookName;
}

void WebhookDeliveryStatusPayload::setWebhookName(const utility::string_t& value)
{
    m_WebhookName = value;
    m_WebhookNameIsSet = true;
}

bool WebhookDeliveryStatusPayload::webhookNameIsSet() const
{
    return m_WebhookNameIsSet;
}

void WebhookDeliveryStatusPayload::unsetWebhookName()
{
    m_WebhookNameIsSet = false;
}
utility::string_t WebhookDeliveryStatusPayload::getId() const
{
    return m_Id;
}

void WebhookDeliveryStatusPayload::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool WebhookDeliveryStatusPayload::idIsSet() const
{
    return m_IdIsSet;
}

void WebhookDeliveryStatusPayload::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t WebhookDeliveryStatusPayload::getUserId() const
{
    return m_UserId;
}

void WebhookDeliveryStatusPayload::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool WebhookDeliveryStatusPayload::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void WebhookDeliveryStatusPayload::unsetUserId()
{
    m_UserIdIsSet = false;
}
utility::string_t WebhookDeliveryStatusPayload::getSentId() const
{
    return m_SentId;
}

void WebhookDeliveryStatusPayload::setSentId(const utility::string_t& value)
{
    m_SentId = value;
    m_SentIdIsSet = true;
}

bool WebhookDeliveryStatusPayload::sentIdIsSet() const
{
    return m_SentIdIsSet;
}

void WebhookDeliveryStatusPayload::unsetSentId()
{
    m_SentIdIsSet = false;
}
utility::string_t WebhookDeliveryStatusPayload::getRemoteMtaIp() const
{
    return m_RemoteMtaIp;
}

void WebhookDeliveryStatusPayload::setRemoteMtaIp(const utility::string_t& value)
{
    m_RemoteMtaIp = value;
    m_RemoteMtaIpIsSet = true;
}

bool WebhookDeliveryStatusPayload::remoteMtaIpIsSet() const
{
    return m_RemoteMtaIpIsSet;
}

void WebhookDeliveryStatusPayload::unsetRemoteMtaIp()
{
    m_RemoteMtaIpIsSet = false;
}
utility::string_t WebhookDeliveryStatusPayload::getInboxId() const
{
    return m_InboxId;
}

void WebhookDeliveryStatusPayload::setInboxId(const utility::string_t& value)
{
    m_InboxId = value;
    m_InboxIdIsSet = true;
}

bool WebhookDeliveryStatusPayload::inboxIdIsSet() const
{
    return m_InboxIdIsSet;
}

void WebhookDeliveryStatusPayload::unsetInboxId()
{
    m_InboxIdIsSet = false;
}
utility::string_t WebhookDeliveryStatusPayload::getReportingMta() const
{
    return m_ReportingMta;
}

void WebhookDeliveryStatusPayload::setReportingMta(const utility::string_t& value)
{
    m_ReportingMta = value;
    m_ReportingMtaIsSet = true;
}

bool WebhookDeliveryStatusPayload::reportingMtaIsSet() const
{
    return m_ReportingMtaIsSet;
}

void WebhookDeliveryStatusPayload::unsetReportingMta()
{
    m_ReportingMtaIsSet = false;
}
std::vector<utility::string_t>& WebhookDeliveryStatusPayload::getRecipients()
{
    return m_Recipients;
}

void WebhookDeliveryStatusPayload::setRecipients(const std::vector<utility::string_t>& value)
{
    m_Recipients = value;
    m_RecipientsIsSet = true;
}

bool WebhookDeliveryStatusPayload::recipientsIsSet() const
{
    return m_RecipientsIsSet;
}

void WebhookDeliveryStatusPayload::unsetRecipients()
{
    m_RecipientsIsSet = false;
}
utility::string_t WebhookDeliveryStatusPayload::getSmtpResponse() const
{
    return m_SmtpResponse;
}

void WebhookDeliveryStatusPayload::setSmtpResponse(const utility::string_t& value)
{
    m_SmtpResponse = value;
    m_SmtpResponseIsSet = true;
}

bool WebhookDeliveryStatusPayload::smtpResponseIsSet() const
{
    return m_SmtpResponseIsSet;
}

void WebhookDeliveryStatusPayload::unsetSmtpResponse()
{
    m_SmtpResponseIsSet = false;
}
int32_t WebhookDeliveryStatusPayload::getSmtpStatusCode() const
{
    return m_SmtpStatusCode;
}

void WebhookDeliveryStatusPayload::setSmtpStatusCode(int32_t value)
{
    m_SmtpStatusCode = value;
    m_SmtpStatusCodeIsSet = true;
}

bool WebhookDeliveryStatusPayload::smtpStatusCodeIsSet() const
{
    return m_SmtpStatusCodeIsSet;
}

void WebhookDeliveryStatusPayload::unsetSmtpStatusCode()
{
    m_SmtpStatusCodeIsSet = false;
}
int64_t WebhookDeliveryStatusPayload::getProcessingTimeMillis() const
{
    return m_ProcessingTimeMillis;
}

void WebhookDeliveryStatusPayload::setProcessingTimeMillis(int64_t value)
{
    m_ProcessingTimeMillis = value;
    m_ProcessingTimeMillisIsSet = true;
}

bool WebhookDeliveryStatusPayload::processingTimeMillisIsSet() const
{
    return m_ProcessingTimeMillisIsSet;
}

void WebhookDeliveryStatusPayload::unsetProcessingTimeMillis()
{
    m_ProcessingTimeMillisIsSet = false;
}
utility::datetime WebhookDeliveryStatusPayload::getReceived() const
{
    return m_Received;
}

void WebhookDeliveryStatusPayload::setReceived(const utility::datetime& value)
{
    m_Received = value;
    m_ReceivedIsSet = true;
}

bool WebhookDeliveryStatusPayload::receivedIsSet() const
{
    return m_ReceivedIsSet;
}

void WebhookDeliveryStatusPayload::unsetReceived()
{
    m_ReceivedIsSet = false;
}
utility::string_t WebhookDeliveryStatusPayload::getSubject() const
{
    return m_Subject;
}

void WebhookDeliveryStatusPayload::setSubject(const utility::string_t& value)
{
    m_Subject = value;
    m_SubjectIsSet = true;
}

bool WebhookDeliveryStatusPayload::subjectIsSet() const
{
    return m_SubjectIsSet;
}

void WebhookDeliveryStatusPayload::unsetSubject()
{
    m_SubjectIsSet = false;
}
}
}
}
}


