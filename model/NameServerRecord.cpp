/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "NameServerRecord.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




NameServerRecord::NameServerRecord()
{
    m_Priority = utility::conversions::to_string_t("");
    m_PriorityIsSet = false;
    m_Raw = utility::conversions::to_string_t("");
    m_RawIsSet = false;
    m_RecordType = utility::conversions::to_string_t("");
    m_RecordTypeIsSet = false;
    m_Value = utility::conversions::to_string_t("");
    m_ValueIsSet = false;
}

NameServerRecord::~NameServerRecord()
{
}

void NameServerRecord::validate()
{
    // TODO: implement validation
}

web::json::value NameServerRecord::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PriorityIsSet)
    {
        val[utility::conversions::to_string_t("priority")] = ModelBase::toJson(m_Priority);
    }
    if(m_RawIsSet)
    {
        val[utility::conversions::to_string_t("raw")] = ModelBase::toJson(m_Raw);
    }
    if(m_RecordTypeIsSet)
    {
        val[utility::conversions::to_string_t("recordType")] = ModelBase::toJson(m_RecordType);
    }
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t("value")] = ModelBase::toJson(m_Value);
    }

    return val;
}

bool NameServerRecord::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("priority")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("priority"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_priority;
            ok &= ModelBase::fromJson(fieldValue, refVal_priority);
            setPriority(refVal_priority);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("raw")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("raw"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_raw;
            ok &= ModelBase::fromJson(fieldValue, refVal_raw);
            setRaw(refVal_raw);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("recordType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("recordType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_recordType;
            ok &= ModelBase::fromJson(fieldValue, refVal_recordType);
            setRecordType(refVal_recordType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("value")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("value"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_value;
            ok &= ModelBase::fromJson(fieldValue, refVal_value);
            setValue(refVal_value);
        }
    }
    return ok;
}

void NameServerRecord::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_PriorityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("priority"), m_Priority));
    }
    if(m_RawIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("raw"), m_Raw));
    }
    if(m_RecordTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("recordType"), m_RecordType));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("value"), m_Value));
    }
}

bool NameServerRecord::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("priority")))
    {
        utility::string_t refVal_priority;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("priority")), refVal_priority );
        setPriority(refVal_priority);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("raw")))
    {
        utility::string_t refVal_raw;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("raw")), refVal_raw );
        setRaw(refVal_raw);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("recordType")))
    {
        utility::string_t refVal_recordType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("recordType")), refVal_recordType );
        setRecordType(refVal_recordType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("value")))
    {
        utility::string_t refVal_value;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("value")), refVal_value );
        setValue(refVal_value);
    }
    return ok;
}

utility::string_t NameServerRecord::getPriority() const
{
    return m_Priority;
}

void NameServerRecord::setPriority(const utility::string_t& value)
{
    m_Priority = value;
    m_PriorityIsSet = true;
}

bool NameServerRecord::priorityIsSet() const
{
    return m_PriorityIsSet;
}

void NameServerRecord::unsetPriority()
{
    m_PriorityIsSet = false;
}
utility::string_t NameServerRecord::getRaw() const
{
    return m_Raw;
}

void NameServerRecord::setRaw(const utility::string_t& value)
{
    m_Raw = value;
    m_RawIsSet = true;
}

bool NameServerRecord::rawIsSet() const
{
    return m_RawIsSet;
}

void NameServerRecord::unsetRaw()
{
    m_RawIsSet = false;
}
utility::string_t NameServerRecord::getRecordType() const
{
    return m_RecordType;
}

void NameServerRecord::setRecordType(const utility::string_t& value)
{
    m_RecordType = value;
    m_RecordTypeIsSet = true;
}

bool NameServerRecord::recordTypeIsSet() const
{
    return m_RecordTypeIsSet;
}

void NameServerRecord::unsetRecordType()
{
    m_RecordTypeIsSet = false;
}
utility::string_t NameServerRecord::getValue() const
{
    return m_Value;
}

void NameServerRecord::setValue(const utility::string_t& value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool NameServerRecord::valueIsSet() const
{
    return m_ValueIsSet;
}

void NameServerRecord::unsetValue()
{
    m_ValueIsSet = false;
}
}
}
}
}


