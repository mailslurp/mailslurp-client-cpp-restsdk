/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Inline_object.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_Inline_object_H_
#define COM_MAILSLURP_CLIENT_MODEL_Inline_object_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "HttpContent.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  Inline_object
    : public ModelBase
{
public:
    Inline_object();
    virtual ~Inline_object();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Inline_object members

    /// <summary>
    /// Optional content type header of attachment
    /// </summary>
    utility::string_t getContentTypeHeader() const;
    bool contentTypeHeaderIsSet() const;
    void unsetContentTypeHeader();

    void setContentTypeHeader(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<HttpContent> getFile() const;
    bool fileIsSet() const;
    void unsetfile();

    void setFile(const std::shared_ptr<HttpContent>& value);


protected:
    utility::string_t m_ContentTypeHeader;
    bool m_ContentTypeHeaderIsSet;
    std::shared_ptr<HttpContent> m_file;
    bool m_fileIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_Inline_object_H_ */
