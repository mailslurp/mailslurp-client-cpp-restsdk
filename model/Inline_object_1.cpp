/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Inline_object_1.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




Inline_object_1::Inline_object_1()
{
    m_short = 0;
    m_shortIsSet = false;
    m_char = utility::conversions::to_string_t("");
    m_charIsSet = false;
    m_int = 0;
    m_intIsSet = false;
    m_long = 0L;
    m_longIsSet = false;
    m_float = 0.0f;
    m_floatIsSet = false;
    m_double = 0.0;
    m_doubleIsSet = false;
    m_Direct = false;
    m_DirectIsSet = false;
    m_ReadOnly = false;
    m_ReadOnlyIsSet = false;
}

Inline_object_1::~Inline_object_1()
{
}

void Inline_object_1::validate()
{
    // TODO: implement validation
}

web::json::value Inline_object_1::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_shortIsSet)
    {
        val[utility::conversions::to_string_t("short")] = ModelBase::toJson(m_short);
    }
    if(m_charIsSet)
    {
        val[utility::conversions::to_string_t("char")] = ModelBase::toJson(m_char);
    }
    if(m_intIsSet)
    {
        val[utility::conversions::to_string_t("int")] = ModelBase::toJson(m_int);
    }
    if(m_longIsSet)
    {
        val[utility::conversions::to_string_t("long")] = ModelBase::toJson(m_long);
    }
    if(m_floatIsSet)
    {
        val[utility::conversions::to_string_t("float")] = ModelBase::toJson(m_float);
    }
    if(m_doubleIsSet)
    {
        val[utility::conversions::to_string_t("double")] = ModelBase::toJson(m_double);
    }
    if(m_DirectIsSet)
    {
        val[utility::conversions::to_string_t("direct")] = ModelBase::toJson(m_Direct);
    }
    if(m_ReadOnlyIsSet)
    {
        val[utility::conversions::to_string_t("readOnly")] = ModelBase::toJson(m_ReadOnly);
    }

    return val;
}

bool Inline_object_1::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("short")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("short"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_short;
            ok &= ModelBase::fromJson(fieldValue, refVal_short);
            setShort(refVal_short);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("char")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("char"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_char;
            ok &= ModelBase::fromJson(fieldValue, refVal_char);
            setChar(refVal_char);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("int")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("int"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_int;
            ok &= ModelBase::fromJson(fieldValue, refVal_int);
            setInt(refVal_int);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("long")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("long"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_long;
            ok &= ModelBase::fromJson(fieldValue, refVal_long);
            setLong(refVal_long);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("float")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("float"));
        if(!fieldValue.is_null())
        {
            float refVal_float;
            ok &= ModelBase::fromJson(fieldValue, refVal_float);
            setFloat(refVal_float);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("double")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("double"));
        if(!fieldValue.is_null())
        {
            double refVal_double;
            ok &= ModelBase::fromJson(fieldValue, refVal_double);
            setDouble(refVal_double);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("direct")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("direct"));
        if(!fieldValue.is_null())
        {
            bool refVal_direct;
            ok &= ModelBase::fromJson(fieldValue, refVal_direct);
            setDirect(refVal_direct);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("readOnly")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("readOnly"));
        if(!fieldValue.is_null())
        {
            bool refVal_readOnly;
            ok &= ModelBase::fromJson(fieldValue, refVal_readOnly);
            setReadOnly(refVal_readOnly);
        }
    }
    return ok;
}

void Inline_object_1::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_shortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("short"), m_short));
    }
    if(m_charIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("char"), m_char));
    }
    if(m_intIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("int"), m_int));
    }
    if(m_longIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("long"), m_long));
    }
    if(m_floatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("float"), m_float));
    }
    if(m_doubleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("double"), m_double));
    }
    if(m_DirectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("direct"), m_Direct));
    }
    if(m_ReadOnlyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("readOnly"), m_ReadOnly));
    }
}

bool Inline_object_1::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("short")))
    {
        int32_t refVal_short;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("short")), refVal_short );
        setShort(refVal_short);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("char")))
    {
        utility::string_t refVal_char;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("char")), refVal_char );
        setChar(refVal_char);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("int")))
    {
        int32_t refVal_int;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("int")), refVal_int );
        setInt(refVal_int);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("long")))
    {
        int64_t refVal_long;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("long")), refVal_long );
        setLong(refVal_long);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("float")))
    {
        float refVal_float;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("float")), refVal_float );
        setFloat(refVal_float);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("double")))
    {
        double refVal_double;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("double")), refVal_double );
        setDouble(refVal_double);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("direct")))
    {
        bool refVal_direct;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("direct")), refVal_direct );
        setDirect(refVal_direct);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("readOnly")))
    {
        bool refVal_readOnly;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("readOnly")), refVal_readOnly );
        setReadOnly(refVal_readOnly);
    }
    return ok;
}

int32_t Inline_object_1::getShort() const
{
    return m_short;
}

void Inline_object_1::setShort(int32_t value)
{
    m_short = value;
    m_shortIsSet = true;
}

bool Inline_object_1::r_shortIsSet() const
{
    return m_shortIsSet;
}

void Inline_object_1::unsetshort()
{
    m_shortIsSet = false;
}
utility::string_t Inline_object_1::getChar() const
{
    return m_char;
}

void Inline_object_1::setChar(const utility::string_t& value)
{
    m_char = value;
    m_charIsSet = true;
}

bool Inline_object_1::r_charIsSet() const
{
    return m_charIsSet;
}

void Inline_object_1::unsetchar()
{
    m_charIsSet = false;
}
int32_t Inline_object_1::getInt() const
{
    return m_int;
}

void Inline_object_1::setInt(int32_t value)
{
    m_int = value;
    m_intIsSet = true;
}

bool Inline_object_1::r_intIsSet() const
{
    return m_intIsSet;
}

void Inline_object_1::unsetint()
{
    m_intIsSet = false;
}
int64_t Inline_object_1::getLong() const
{
    return m_long;
}

void Inline_object_1::setLong(int64_t value)
{
    m_long = value;
    m_longIsSet = true;
}

bool Inline_object_1::r_longIsSet() const
{
    return m_longIsSet;
}

void Inline_object_1::unsetlong()
{
    m_longIsSet = false;
}
float Inline_object_1::getFloat() const
{
    return m_float;
}

void Inline_object_1::setFloat(float value)
{
    m_float = value;
    m_floatIsSet = true;
}

bool Inline_object_1::r_floatIsSet() const
{
    return m_floatIsSet;
}

void Inline_object_1::unsetfloat()
{
    m_floatIsSet = false;
}
double Inline_object_1::getDouble() const
{
    return m_double;
}

void Inline_object_1::setDouble(double value)
{
    m_double = value;
    m_doubleIsSet = true;
}

bool Inline_object_1::r_doubleIsSet() const
{
    return m_doubleIsSet;
}

void Inline_object_1::unsetdouble()
{
    m_doubleIsSet = false;
}
bool Inline_object_1::isDirect() const
{
    return m_Direct;
}

void Inline_object_1::setDirect(bool value)
{
    m_Direct = value;
    m_DirectIsSet = true;
}

bool Inline_object_1::directIsSet() const
{
    return m_DirectIsSet;
}

void Inline_object_1::unsetDirect()
{
    m_DirectIsSet = false;
}
bool Inline_object_1::isReadOnly() const
{
    return m_ReadOnly;
}

void Inline_object_1::setReadOnly(bool value)
{
    m_ReadOnly = value;
    m_ReadOnlyIsSet = true;
}

bool Inline_object_1::readOnlyIsSet() const
{
    return m_ReadOnlyIsSet;
}

void Inline_object_1::unsetReadOnly()
{
    m_ReadOnlyIsSet = false;
}
}
}
}
}


