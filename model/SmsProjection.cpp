/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SmsProjection.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




SmsProjection::SmsProjection()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Body = utility::conversions::to_string_t("");
    m_BodyIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_PhoneNumber = utility::conversions::to_string_t("");
    m_PhoneNumberIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_FromNumber = utility::conversions::to_string_t("");
    m_FromNumberIsSet = false;
    m_Read = false;
    m_ReadIsSet = false;
}

SmsProjection::~SmsProjection()
{
}

void SmsProjection::validate()
{
    // TODO: implement validation
}

web::json::value SmsProjection::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_BodyIsSet)
    {
        val[utility::conversions::to_string_t("body")] = ModelBase::toJson(m_Body);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t("userId")] = ModelBase::toJson(m_UserId);
    }
    if(m_PhoneNumberIsSet)
    {
        val[utility::conversions::to_string_t("phoneNumber")] = ModelBase::toJson(m_PhoneNumber);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t("createdAt")] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_FromNumberIsSet)
    {
        val[utility::conversions::to_string_t("fromNumber")] = ModelBase::toJson(m_FromNumber);
    }
    if(m_ReadIsSet)
    {
        val[utility::conversions::to_string_t("read")] = ModelBase::toJson(m_Read);
    }

    return val;
}

bool SmsProjection::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("body")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("body"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_body;
            ok &= ModelBase::fromJson(fieldValue, refVal_body);
            setBody(refVal_body);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("userId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("userId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_userId;
            ok &= ModelBase::fromJson(fieldValue, refVal_userId);
            setUserId(refVal_userId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("phoneNumber")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("phoneNumber"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_phoneNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_phoneNumber);
            setPhoneNumber(refVal_phoneNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_createdAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAt);
            setCreatedAt(refVal_createdAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("fromNumber")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("fromNumber"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_fromNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_fromNumber);
            setFromNumber(refVal_fromNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("read")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("read"));
        if(!fieldValue.is_null())
        {
            bool refVal_read;
            ok &= ModelBase::fromJson(fieldValue, refVal_read);
            setRead(refVal_read);
        }
    }
    return ok;
}

void SmsProjection::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_BodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("body"), m_Body));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("userId"), m_UserId));
    }
    if(m_PhoneNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("phoneNumber"), m_PhoneNumber));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    }
    if(m_FromNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("fromNumber"), m_FromNumber));
    }
    if(m_ReadIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("read"), m_Read));
    }
}

bool SmsProjection::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("body")))
    {
        utility::string_t refVal_body;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("body")), refVal_body );
        setBody(refVal_body);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userId")))
    {
        utility::string_t refVal_userId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("userId")), refVal_userId );
        setUserId(refVal_userId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("phoneNumber")))
    {
        utility::string_t refVal_phoneNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("phoneNumber")), refVal_phoneNumber );
        setPhoneNumber(refVal_phoneNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdAt")))
    {
        utility::datetime refVal_createdAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt")), refVal_createdAt );
        setCreatedAt(refVal_createdAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("fromNumber")))
    {
        utility::string_t refVal_fromNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("fromNumber")), refVal_fromNumber );
        setFromNumber(refVal_fromNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("read")))
    {
        bool refVal_read;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("read")), refVal_read );
        setRead(refVal_read);
    }
    return ok;
}

utility::string_t SmsProjection::getId() const
{
    return m_Id;
}

void SmsProjection::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool SmsProjection::idIsSet() const
{
    return m_IdIsSet;
}

void SmsProjection::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t SmsProjection::getBody() const
{
    return m_Body;
}

void SmsProjection::setBody(const utility::string_t& value)
{
    m_Body = value;
    m_BodyIsSet = true;
}

bool SmsProjection::bodyIsSet() const
{
    return m_BodyIsSet;
}

void SmsProjection::unsetBody()
{
    m_BodyIsSet = false;
}
utility::string_t SmsProjection::getUserId() const
{
    return m_UserId;
}

void SmsProjection::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool SmsProjection::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void SmsProjection::unsetUserId()
{
    m_UserIdIsSet = false;
}
utility::string_t SmsProjection::getPhoneNumber() const
{
    return m_PhoneNumber;
}

void SmsProjection::setPhoneNumber(const utility::string_t& value)
{
    m_PhoneNumber = value;
    m_PhoneNumberIsSet = true;
}

bool SmsProjection::phoneNumberIsSet() const
{
    return m_PhoneNumberIsSet;
}

void SmsProjection::unsetPhoneNumber()
{
    m_PhoneNumberIsSet = false;
}
utility::datetime SmsProjection::getCreatedAt() const
{
    return m_CreatedAt;
}

void SmsProjection::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool SmsProjection::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void SmsProjection::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::string_t SmsProjection::getFromNumber() const
{
    return m_FromNumber;
}

void SmsProjection::setFromNumber(const utility::string_t& value)
{
    m_FromNumber = value;
    m_FromNumberIsSet = true;
}

bool SmsProjection::fromNumberIsSet() const
{
    return m_FromNumberIsSet;
}

void SmsProjection::unsetFromNumber()
{
    m_FromNumberIsSet = false;
}
bool SmsProjection::isRead() const
{
    return m_Read;
}

void SmsProjection::setRead(bool value)
{
    m_Read = value;
    m_ReadIsSet = true;
}

bool SmsProjection::readIsSet() const
{
    return m_ReadIsSet;
}

void SmsProjection::unsetRead()
{
    m_ReadIsSet = false;
}
}
}
}
}


