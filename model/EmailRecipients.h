/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * EmailRecipients.h
 *
 * The &#x60;To&#x60;,&#x60;CC&#x60;,&#x60;BCC&#x60; recipients stored in object form with email address and name accessible.
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_EmailRecipients_H_
#define COM_MAILSLURP_CLIENT_MODEL_EmailRecipients_H_


#include "../ModelBase.h"

#include "Recipient.h"
#include <vector>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// The &#x60;To&#x60;,&#x60;CC&#x60;,&#x60;BCC&#x60; recipients stored in object form with email address and name accessible.
/// </summary>
class  EmailRecipients
    : public ModelBase
{
public:
    EmailRecipients();
    virtual ~EmailRecipients();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// EmailRecipients members

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Recipient>>& getTo();
    bool toIsSet() const;
    void unsetTo();

    void setTo(const std::vector<std::shared_ptr<Recipient>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Recipient>>& getCc();
    bool ccIsSet() const;
    void unsetCc();

    void setCc(const std::vector<std::shared_ptr<Recipient>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Recipient>>& getBcc();
    bool bccIsSet() const;
    void unsetBcc();

    void setBcc(const std::vector<std::shared_ptr<Recipient>>& value);


protected:
    std::vector<std::shared_ptr<Recipient>> m_To;
    bool m_ToIsSet;
    std::vector<std::shared_ptr<Recipient>> m_Cc;
    bool m_CcIsSet;
    std::vector<std::shared_ptr<Recipient>> m_Bcc;
    bool m_BccIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_EmailRecipients_H_ */
