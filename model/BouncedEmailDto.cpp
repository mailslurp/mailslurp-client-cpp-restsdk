/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "BouncedEmailDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




BouncedEmailDto::BouncedEmailDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_NotificationType = utility::conversions::to_string_t("");
    m_NotificationTypeIsSet = false;
    m_SentToRecipientsIsSet = false;
    m_Sender = utility::conversions::to_string_t("");
    m_SenderIsSet = false;
    m_BounceMta = utility::conversions::to_string_t("");
    m_BounceMtaIsSet = false;
    m_BounceType = utility::conversions::to_string_t("");
    m_BounceTypeIsSet = false;
    m_BounceRecipientsIsSet = false;
    m_BounceSubType = utility::conversions::to_string_t("");
    m_BounceSubTypeIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
}

BouncedEmailDto::~BouncedEmailDto()
{
}

void BouncedEmailDto::validate()
{
    // TODO: implement validation
}

web::json::value BouncedEmailDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t("userId")] = ModelBase::toJson(m_UserId);
    }
    if(m_NotificationTypeIsSet)
    {
        val[utility::conversions::to_string_t("notificationType")] = ModelBase::toJson(m_NotificationType);
    }
    if(m_SentToRecipientsIsSet)
    {
        val[utility::conversions::to_string_t("sentToRecipients")] = ModelBase::toJson(m_SentToRecipients);
    }
    if(m_SenderIsSet)
    {
        val[utility::conversions::to_string_t("sender")] = ModelBase::toJson(m_Sender);
    }
    if(m_BounceMtaIsSet)
    {
        val[utility::conversions::to_string_t("bounceMta")] = ModelBase::toJson(m_BounceMta);
    }
    if(m_BounceTypeIsSet)
    {
        val[utility::conversions::to_string_t("bounceType")] = ModelBase::toJson(m_BounceType);
    }
    if(m_BounceRecipientsIsSet)
    {
        val[utility::conversions::to_string_t("bounceRecipients")] = ModelBase::toJson(m_BounceRecipients);
    }
    if(m_BounceSubTypeIsSet)
    {
        val[utility::conversions::to_string_t("bounceSubType")] = ModelBase::toJson(m_BounceSubType);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t("createdAt")] = ModelBase::toJson(m_CreatedAt);
    }

    return val;
}

bool BouncedEmailDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("userId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("userId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_userId;
            ok &= ModelBase::fromJson(fieldValue, refVal_userId);
            setUserId(refVal_userId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("notificationType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("notificationType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_notificationType;
            ok &= ModelBase::fromJson(fieldValue, refVal_notificationType);
            setNotificationType(refVal_notificationType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sentToRecipients")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sentToRecipients"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_sentToRecipients;
            ok &= ModelBase::fromJson(fieldValue, refVal_sentToRecipients);
            setSentToRecipients(refVal_sentToRecipients);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sender")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sender"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sender;
            ok &= ModelBase::fromJson(fieldValue, refVal_sender);
            setSender(refVal_sender);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bounceMta")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bounceMta"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_bounceMta;
            ok &= ModelBase::fromJson(fieldValue, refVal_bounceMta);
            setBounceMta(refVal_bounceMta);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bounceType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bounceType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_bounceType;
            ok &= ModelBase::fromJson(fieldValue, refVal_bounceType);
            setBounceType(refVal_bounceType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bounceRecipients")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bounceRecipients"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_bounceRecipients;
            ok &= ModelBase::fromJson(fieldValue, refVal_bounceRecipients);
            setBounceRecipients(refVal_bounceRecipients);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bounceSubType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bounceSubType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_bounceSubType;
            ok &= ModelBase::fromJson(fieldValue, refVal_bounceSubType);
            setBounceSubType(refVal_bounceSubType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_createdAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAt);
            setCreatedAt(refVal_createdAt);
        }
    }
    return ok;
}

void BouncedEmailDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("userId"), m_UserId));
    }
    if(m_NotificationTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("notificationType"), m_NotificationType));
    }
    if(m_SentToRecipientsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sentToRecipients"), m_SentToRecipients));
    }
    if(m_SenderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sender"), m_Sender));
    }
    if(m_BounceMtaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bounceMta"), m_BounceMta));
    }
    if(m_BounceTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bounceType"), m_BounceType));
    }
    if(m_BounceRecipientsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bounceRecipients"), m_BounceRecipients));
    }
    if(m_BounceSubTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bounceSubType"), m_BounceSubType));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    }
}

bool BouncedEmailDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userId")))
    {
        utility::string_t refVal_userId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("userId")), refVal_userId );
        setUserId(refVal_userId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("notificationType")))
    {
        utility::string_t refVal_notificationType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("notificationType")), refVal_notificationType );
        setNotificationType(refVal_notificationType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sentToRecipients")))
    {
        std::vector<utility::string_t> refVal_sentToRecipients;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sentToRecipients")), refVal_sentToRecipients );
        setSentToRecipients(refVal_sentToRecipients);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sender")))
    {
        utility::string_t refVal_sender;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sender")), refVal_sender );
        setSender(refVal_sender);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bounceMta")))
    {
        utility::string_t refVal_bounceMta;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bounceMta")), refVal_bounceMta );
        setBounceMta(refVal_bounceMta);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bounceType")))
    {
        utility::string_t refVal_bounceType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bounceType")), refVal_bounceType );
        setBounceType(refVal_bounceType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bounceRecipients")))
    {
        std::vector<utility::string_t> refVal_bounceRecipients;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bounceRecipients")), refVal_bounceRecipients );
        setBounceRecipients(refVal_bounceRecipients);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bounceSubType")))
    {
        utility::string_t refVal_bounceSubType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bounceSubType")), refVal_bounceSubType );
        setBounceSubType(refVal_bounceSubType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdAt")))
    {
        utility::datetime refVal_createdAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt")), refVal_createdAt );
        setCreatedAt(refVal_createdAt);
    }
    return ok;
}

utility::string_t BouncedEmailDto::getId() const
{
    return m_Id;
}

void BouncedEmailDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BouncedEmailDto::idIsSet() const
{
    return m_IdIsSet;
}

void BouncedEmailDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t BouncedEmailDto::getUserId() const
{
    return m_UserId;
}

void BouncedEmailDto::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool BouncedEmailDto::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void BouncedEmailDto::unsetUserId()
{
    m_UserIdIsSet = false;
}
utility::string_t BouncedEmailDto::getNotificationType() const
{
    return m_NotificationType;
}

void BouncedEmailDto::setNotificationType(const utility::string_t& value)
{
    m_NotificationType = value;
    m_NotificationTypeIsSet = true;
}

bool BouncedEmailDto::notificationTypeIsSet() const
{
    return m_NotificationTypeIsSet;
}

void BouncedEmailDto::unsetNotificationType()
{
    m_NotificationTypeIsSet = false;
}
std::vector<utility::string_t>& BouncedEmailDto::getSentToRecipients()
{
    return m_SentToRecipients;
}

void BouncedEmailDto::setSentToRecipients(const std::vector<utility::string_t>& value)
{
    m_SentToRecipients = value;
    m_SentToRecipientsIsSet = true;
}

bool BouncedEmailDto::sentToRecipientsIsSet() const
{
    return m_SentToRecipientsIsSet;
}

void BouncedEmailDto::unsetSentToRecipients()
{
    m_SentToRecipientsIsSet = false;
}
utility::string_t BouncedEmailDto::getSender() const
{
    return m_Sender;
}

void BouncedEmailDto::setSender(const utility::string_t& value)
{
    m_Sender = value;
    m_SenderIsSet = true;
}

bool BouncedEmailDto::senderIsSet() const
{
    return m_SenderIsSet;
}

void BouncedEmailDto::unsetSender()
{
    m_SenderIsSet = false;
}
utility::string_t BouncedEmailDto::getBounceMta() const
{
    return m_BounceMta;
}

void BouncedEmailDto::setBounceMta(const utility::string_t& value)
{
    m_BounceMta = value;
    m_BounceMtaIsSet = true;
}

bool BouncedEmailDto::bounceMtaIsSet() const
{
    return m_BounceMtaIsSet;
}

void BouncedEmailDto::unsetBounceMta()
{
    m_BounceMtaIsSet = false;
}
utility::string_t BouncedEmailDto::getBounceType() const
{
    return m_BounceType;
}

void BouncedEmailDto::setBounceType(const utility::string_t& value)
{
    m_BounceType = value;
    m_BounceTypeIsSet = true;
}

bool BouncedEmailDto::bounceTypeIsSet() const
{
    return m_BounceTypeIsSet;
}

void BouncedEmailDto::unsetBounceType()
{
    m_BounceTypeIsSet = false;
}
std::vector<utility::string_t>& BouncedEmailDto::getBounceRecipients()
{
    return m_BounceRecipients;
}

void BouncedEmailDto::setBounceRecipients(const std::vector<utility::string_t>& value)
{
    m_BounceRecipients = value;
    m_BounceRecipientsIsSet = true;
}

bool BouncedEmailDto::bounceRecipientsIsSet() const
{
    return m_BounceRecipientsIsSet;
}

void BouncedEmailDto::unsetBounceRecipients()
{
    m_BounceRecipientsIsSet = false;
}
utility::string_t BouncedEmailDto::getBounceSubType() const
{
    return m_BounceSubType;
}

void BouncedEmailDto::setBounceSubType(const utility::string_t& value)
{
    m_BounceSubType = value;
    m_BounceSubTypeIsSet = true;
}

bool BouncedEmailDto::bounceSubTypeIsSet() const
{
    return m_BounceSubTypeIsSet;
}

void BouncedEmailDto::unsetBounceSubType()
{
    m_BounceSubTypeIsSet = false;
}
utility::datetime BouncedEmailDto::getCreatedAt() const
{
    return m_CreatedAt;
}

void BouncedEmailDto::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool BouncedEmailDto::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void BouncedEmailDto::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
}
}
}
}


