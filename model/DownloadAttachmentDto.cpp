/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DownloadAttachmentDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




DownloadAttachmentDto::DownloadAttachmentDto()
{
    m_Base64FileContents = utility::conversions::to_string_t("");
    m_Base64FileContentsIsSet = false;
    m_ContentType = utility::conversions::to_string_t("");
    m_ContentTypeIsSet = false;
    m_SizeBytes = 0L;
    m_SizeBytesIsSet = false;
}

DownloadAttachmentDto::~DownloadAttachmentDto()
{
}

void DownloadAttachmentDto::validate()
{
    // TODO: implement validation
}

web::json::value DownloadAttachmentDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Base64FileContentsIsSet)
    {
        val[utility::conversions::to_string_t("base64FileContents")] = ModelBase::toJson(m_Base64FileContents);
    }
    if(m_ContentTypeIsSet)
    {
        val[utility::conversions::to_string_t("contentType")] = ModelBase::toJson(m_ContentType);
    }
    if(m_SizeBytesIsSet)
    {
        val[utility::conversions::to_string_t("sizeBytes")] = ModelBase::toJson(m_SizeBytes);
    }

    return val;
}

bool DownloadAttachmentDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("base64FileContents")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("base64FileContents"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_base64FileContents;
            ok &= ModelBase::fromJson(fieldValue, refVal_base64FileContents);
            setBase64FileContents(refVal_base64FileContents);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("contentType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("contentType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_contentType;
            ok &= ModelBase::fromJson(fieldValue, refVal_contentType);
            setContentType(refVal_contentType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sizeBytes")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sizeBytes"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_sizeBytes;
            ok &= ModelBase::fromJson(fieldValue, refVal_sizeBytes);
            setSizeBytes(refVal_sizeBytes);
        }
    }
    return ok;
}

void DownloadAttachmentDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_Base64FileContentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("base64FileContents"), m_Base64FileContents));
    }
    if(m_ContentTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("contentType"), m_ContentType));
    }
    if(m_SizeBytesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sizeBytes"), m_SizeBytes));
    }
}

bool DownloadAttachmentDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("base64FileContents")))
    {
        utility::string_t refVal_base64FileContents;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("base64FileContents")), refVal_base64FileContents );
        setBase64FileContents(refVal_base64FileContents);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("contentType")))
    {
        utility::string_t refVal_contentType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("contentType")), refVal_contentType );
        setContentType(refVal_contentType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sizeBytes")))
    {
        int64_t refVal_sizeBytes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sizeBytes")), refVal_sizeBytes );
        setSizeBytes(refVal_sizeBytes);
    }
    return ok;
}

utility::string_t DownloadAttachmentDto::getBase64FileContents() const
{
    return m_Base64FileContents;
}

void DownloadAttachmentDto::setBase64FileContents(const utility::string_t& value)
{
    m_Base64FileContents = value;
    m_Base64FileContentsIsSet = true;
}

bool DownloadAttachmentDto::base64FileContentsIsSet() const
{
    return m_Base64FileContentsIsSet;
}

void DownloadAttachmentDto::unsetBase64FileContents()
{
    m_Base64FileContentsIsSet = false;
}
utility::string_t DownloadAttachmentDto::getContentType() const
{
    return m_ContentType;
}

void DownloadAttachmentDto::setContentType(const utility::string_t& value)
{
    m_ContentType = value;
    m_ContentTypeIsSet = true;
}

bool DownloadAttachmentDto::contentTypeIsSet() const
{
    return m_ContentTypeIsSet;
}

void DownloadAttachmentDto::unsetContentType()
{
    m_ContentTypeIsSet = false;
}
int64_t DownloadAttachmentDto::getSizeBytes() const
{
    return m_SizeBytes;
}

void DownloadAttachmentDto::setSizeBytes(int64_t value)
{
    m_SizeBytes = value;
    m_SizeBytesIsSet = true;
}

bool DownloadAttachmentDto::sizeBytesIsSet() const
{
    return m_SizeBytesIsSet;
}

void DownloadAttachmentDto::unsetSizeBytes()
{
    m_SizeBytesIsSet = false;
}
}
}
}
}


