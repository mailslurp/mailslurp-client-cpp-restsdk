/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SentEmailDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




SentEmailDto::SentEmailDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_InboxId = utility::conversions::to_string_t("");
    m_InboxIdIsSet = false;
    m_DomainId = utility::conversions::to_string_t("");
    m_DomainIdIsSet = false;
    m_ToIsSet = false;
    m_From = utility::conversions::to_string_t("");
    m_FromIsSet = false;
    m_ReplyTo = utility::conversions::to_string_t("");
    m_ReplyToIsSet = false;
    m_CcIsSet = false;
    m_BccIsSet = false;
    m_AttachmentsIsSet = false;
    m_Subject = utility::conversions::to_string_t("");
    m_SubjectIsSet = false;
    m_BodyMD5Hash = utility::conversions::to_string_t("");
    m_BodyMD5HashIsSet = false;
    m_Body = utility::conversions::to_string_t("");
    m_BodyIsSet = false;
    m_ToContactsIsSet = false;
    m_ToGroup = utility::conversions::to_string_t("");
    m_ToGroupIsSet = false;
    m_Charset = utility::conversions::to_string_t("");
    m_CharsetIsSet = false;
    m_IsHTML = false;
    m_IsHTMLIsSet = false;
    m_SentAt = utility::datetime();
    m_SentAtIsSet = false;
    m_PixelIdsIsSet = false;
    m_MessageId = utility::conversions::to_string_t("");
    m_MessageIdIsSet = false;
    m_MessageIdsIsSet = false;
    m_VirtualSend = false;
    m_VirtualSendIsSet = false;
    m_TemplateId = utility::conversions::to_string_t("");
    m_TemplateIdIsSet = false;
    m_TemplateVariablesIsSet = false;
    m_Html = false;
    m_HtmlIsSet = false;
}

SentEmailDto::~SentEmailDto()
{
}

void SentEmailDto::validate()
{
    // TODO: implement validation
}

web::json::value SentEmailDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t("userId")] = ModelBase::toJson(m_UserId);
    }
    if(m_InboxIdIsSet)
    {
        val[utility::conversions::to_string_t("inboxId")] = ModelBase::toJson(m_InboxId);
    }
    if(m_DomainIdIsSet)
    {
        val[utility::conversions::to_string_t("domainId")] = ModelBase::toJson(m_DomainId);
    }
    if(m_ToIsSet)
    {
        val[utility::conversions::to_string_t("to")] = ModelBase::toJson(m_To);
    }
    if(m_FromIsSet)
    {
        val[utility::conversions::to_string_t("from")] = ModelBase::toJson(m_From);
    }
    if(m_ReplyToIsSet)
    {
        val[utility::conversions::to_string_t("replyTo")] = ModelBase::toJson(m_ReplyTo);
    }
    if(m_CcIsSet)
    {
        val[utility::conversions::to_string_t("cc")] = ModelBase::toJson(m_Cc);
    }
    if(m_BccIsSet)
    {
        val[utility::conversions::to_string_t("bcc")] = ModelBase::toJson(m_Bcc);
    }
    if(m_AttachmentsIsSet)
    {
        val[utility::conversions::to_string_t("attachments")] = ModelBase::toJson(m_Attachments);
    }
    if(m_SubjectIsSet)
    {
        val[utility::conversions::to_string_t("subject")] = ModelBase::toJson(m_Subject);
    }
    if(m_BodyMD5HashIsSet)
    {
        val[utility::conversions::to_string_t("bodyMD5Hash")] = ModelBase::toJson(m_BodyMD5Hash);
    }
    if(m_BodyIsSet)
    {
        val[utility::conversions::to_string_t("body")] = ModelBase::toJson(m_Body);
    }
    if(m_ToContactsIsSet)
    {
        val[utility::conversions::to_string_t("toContacts")] = ModelBase::toJson(m_ToContacts);
    }
    if(m_ToGroupIsSet)
    {
        val[utility::conversions::to_string_t("toGroup")] = ModelBase::toJson(m_ToGroup);
    }
    if(m_CharsetIsSet)
    {
        val[utility::conversions::to_string_t("charset")] = ModelBase::toJson(m_Charset);
    }
    if(m_IsHTMLIsSet)
    {
        val[utility::conversions::to_string_t("isHTML")] = ModelBase::toJson(m_IsHTML);
    }
    if(m_SentAtIsSet)
    {
        val[utility::conversions::to_string_t("sentAt")] = ModelBase::toJson(m_SentAt);
    }
    if(m_PixelIdsIsSet)
    {
        val[utility::conversions::to_string_t("pixelIds")] = ModelBase::toJson(m_PixelIds);
    }
    if(m_MessageIdIsSet)
    {
        val[utility::conversions::to_string_t("messageId")] = ModelBase::toJson(m_MessageId);
    }
    if(m_MessageIdsIsSet)
    {
        val[utility::conversions::to_string_t("messageIds")] = ModelBase::toJson(m_MessageIds);
    }
    if(m_VirtualSendIsSet)
    {
        val[utility::conversions::to_string_t("virtualSend")] = ModelBase::toJson(m_VirtualSend);
    }
    if(m_TemplateIdIsSet)
    {
        val[utility::conversions::to_string_t("templateId")] = ModelBase::toJson(m_TemplateId);
    }
    if(m_TemplateVariablesIsSet)
    {
        val[utility::conversions::to_string_t("templateVariables")] = ModelBase::toJson(m_TemplateVariables);
    }
    if(m_HtmlIsSet)
    {
        val[utility::conversions::to_string_t("html")] = ModelBase::toJson(m_Html);
    }

    return val;
}

bool SentEmailDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("userId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("userId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_userId;
            ok &= ModelBase::fromJson(fieldValue, refVal_userId);
            setUserId(refVal_userId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("inboxId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("inboxId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_inboxId;
            ok &= ModelBase::fromJson(fieldValue, refVal_inboxId);
            setInboxId(refVal_inboxId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("domainId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("domainId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_domainId;
            ok &= ModelBase::fromJson(fieldValue, refVal_domainId);
            setDomainId(refVal_domainId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("to")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("to"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_to;
            ok &= ModelBase::fromJson(fieldValue, refVal_to);
            setTo(refVal_to);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("from")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("from"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_from;
            ok &= ModelBase::fromJson(fieldValue, refVal_from);
            setFrom(refVal_from);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("replyTo")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("replyTo"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_replyTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_replyTo);
            setReplyTo(refVal_replyTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cc")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("cc"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_cc;
            ok &= ModelBase::fromJson(fieldValue, refVal_cc);
            setCc(refVal_cc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bcc")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bcc"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_bcc;
            ok &= ModelBase::fromJson(fieldValue, refVal_bcc);
            setBcc(refVal_bcc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("attachments")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("attachments"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_attachments;
            ok &= ModelBase::fromJson(fieldValue, refVal_attachments);
            setAttachments(refVal_attachments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subject")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subject"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_subject;
            ok &= ModelBase::fromJson(fieldValue, refVal_subject);
            setSubject(refVal_subject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bodyMD5Hash")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bodyMD5Hash"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_bodyMD5Hash;
            ok &= ModelBase::fromJson(fieldValue, refVal_bodyMD5Hash);
            setBodyMD5Hash(refVal_bodyMD5Hash);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("body")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("body"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_body;
            ok &= ModelBase::fromJson(fieldValue, refVal_body);
            setBody(refVal_body);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("toContacts")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("toContacts"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_toContacts;
            ok &= ModelBase::fromJson(fieldValue, refVal_toContacts);
            setToContacts(refVal_toContacts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("toGroup")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("toGroup"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_toGroup;
            ok &= ModelBase::fromJson(fieldValue, refVal_toGroup);
            setToGroup(refVal_toGroup);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("charset")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("charset"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_charset;
            ok &= ModelBase::fromJson(fieldValue, refVal_charset);
            setCharset(refVal_charset);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isHTML")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isHTML"));
        if(!fieldValue.is_null())
        {
            bool refVal_isHTML;
            ok &= ModelBase::fromJson(fieldValue, refVal_isHTML);
            setIsHTML(refVal_isHTML);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sentAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sentAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_sentAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_sentAt);
            setSentAt(refVal_sentAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("pixelIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("pixelIds"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_pixelIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_pixelIds);
            setPixelIds(refVal_pixelIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("messageId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("messageId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_messageId;
            ok &= ModelBase::fromJson(fieldValue, refVal_messageId);
            setMessageId(refVal_messageId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("messageIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("messageIds"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_messageIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_messageIds);
            setMessageIds(refVal_messageIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("virtualSend")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("virtualSend"));
        if(!fieldValue.is_null())
        {
            bool refVal_virtualSend;
            ok &= ModelBase::fromJson(fieldValue, refVal_virtualSend);
            setVirtualSend(refVal_virtualSend);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("templateId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("templateId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_templateId;
            ok &= ModelBase::fromJson(fieldValue, refVal_templateId);
            setTemplateId(refVal_templateId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("templateVariables")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("templateVariables"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<Object>> refVal_templateVariables;
            ok &= ModelBase::fromJson(fieldValue, refVal_templateVariables);
            setTemplateVariables(refVal_templateVariables);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("html")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("html"));
        if(!fieldValue.is_null())
        {
            bool refVal_html;
            ok &= ModelBase::fromJson(fieldValue, refVal_html);
            setHtml(refVal_html);
        }
    }
    return ok;
}

void SentEmailDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("userId"), m_UserId));
    }
    if(m_InboxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("inboxId"), m_InboxId));
    }
    if(m_DomainIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("domainId"), m_DomainId));
    }
    if(m_ToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("to"), m_To));
    }
    if(m_FromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("from"), m_From));
    }
    if(m_ReplyToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("replyTo"), m_ReplyTo));
    }
    if(m_CcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cc"), m_Cc));
    }
    if(m_BccIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bcc"), m_Bcc));
    }
    if(m_AttachmentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("attachments"), m_Attachments));
    }
    if(m_SubjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subject"), m_Subject));
    }
    if(m_BodyMD5HashIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bodyMD5Hash"), m_BodyMD5Hash));
    }
    if(m_BodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("body"), m_Body));
    }
    if(m_ToContactsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("toContacts"), m_ToContacts));
    }
    if(m_ToGroupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("toGroup"), m_ToGroup));
    }
    if(m_CharsetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("charset"), m_Charset));
    }
    if(m_IsHTMLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isHTML"), m_IsHTML));
    }
    if(m_SentAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sentAt"), m_SentAt));
    }
    if(m_PixelIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("pixelIds"), m_PixelIds));
    }
    if(m_MessageIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messageId"), m_MessageId));
    }
    if(m_MessageIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messageIds"), m_MessageIds));
    }
    if(m_VirtualSendIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("virtualSend"), m_VirtualSend));
    }
    if(m_TemplateIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("templateId"), m_TemplateId));
    }
    if(m_TemplateVariablesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("templateVariables"), m_TemplateVariables));
    }
    if(m_HtmlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("html"), m_Html));
    }
}

bool SentEmailDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userId")))
    {
        utility::string_t refVal_userId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("userId")), refVal_userId );
        setUserId(refVal_userId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("inboxId")))
    {
        utility::string_t refVal_inboxId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("inboxId")), refVal_inboxId );
        setInboxId(refVal_inboxId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("domainId")))
    {
        utility::string_t refVal_domainId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("domainId")), refVal_domainId );
        setDomainId(refVal_domainId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("to")))
    {
        std::vector<utility::string_t> refVal_to;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("to")), refVal_to );
        setTo(refVal_to);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("from")))
    {
        utility::string_t refVal_from;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("from")), refVal_from );
        setFrom(refVal_from);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("replyTo")))
    {
        utility::string_t refVal_replyTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("replyTo")), refVal_replyTo );
        setReplyTo(refVal_replyTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cc")))
    {
        std::vector<utility::string_t> refVal_cc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("cc")), refVal_cc );
        setCc(refVal_cc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bcc")))
    {
        std::vector<utility::string_t> refVal_bcc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bcc")), refVal_bcc );
        setBcc(refVal_bcc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("attachments")))
    {
        std::vector<utility::string_t> refVal_attachments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("attachments")), refVal_attachments );
        setAttachments(refVal_attachments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subject")))
    {
        utility::string_t refVal_subject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subject")), refVal_subject );
        setSubject(refVal_subject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bodyMD5Hash")))
    {
        utility::string_t refVal_bodyMD5Hash;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bodyMD5Hash")), refVal_bodyMD5Hash );
        setBodyMD5Hash(refVal_bodyMD5Hash);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("body")))
    {
        utility::string_t refVal_body;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("body")), refVal_body );
        setBody(refVal_body);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("toContacts")))
    {
        std::vector<utility::string_t> refVal_toContacts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("toContacts")), refVal_toContacts );
        setToContacts(refVal_toContacts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("toGroup")))
    {
        utility::string_t refVal_toGroup;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("toGroup")), refVal_toGroup );
        setToGroup(refVal_toGroup);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("charset")))
    {
        utility::string_t refVal_charset;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("charset")), refVal_charset );
        setCharset(refVal_charset);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isHTML")))
    {
        bool refVal_isHTML;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isHTML")), refVal_isHTML );
        setIsHTML(refVal_isHTML);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sentAt")))
    {
        utility::datetime refVal_sentAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sentAt")), refVal_sentAt );
        setSentAt(refVal_sentAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("pixelIds")))
    {
        std::vector<utility::string_t> refVal_pixelIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("pixelIds")), refVal_pixelIds );
        setPixelIds(refVal_pixelIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("messageId")))
    {
        utility::string_t refVal_messageId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("messageId")), refVal_messageId );
        setMessageId(refVal_messageId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("messageIds")))
    {
        std::vector<utility::string_t> refVal_messageIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("messageIds")), refVal_messageIds );
        setMessageIds(refVal_messageIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("virtualSend")))
    {
        bool refVal_virtualSend;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("virtualSend")), refVal_virtualSend );
        setVirtualSend(refVal_virtualSend);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("templateId")))
    {
        utility::string_t refVal_templateId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("templateId")), refVal_templateId );
        setTemplateId(refVal_templateId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("templateVariables")))
    {
        std::map<utility::string_t, std::shared_ptr<Object>> refVal_templateVariables;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("templateVariables")), refVal_templateVariables );
        setTemplateVariables(refVal_templateVariables);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("html")))
    {
        bool refVal_html;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("html")), refVal_html );
        setHtml(refVal_html);
    }
    return ok;
}

utility::string_t SentEmailDto::getId() const
{
    return m_Id;
}

void SentEmailDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool SentEmailDto::idIsSet() const
{
    return m_IdIsSet;
}

void SentEmailDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t SentEmailDto::getUserId() const
{
    return m_UserId;
}

void SentEmailDto::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool SentEmailDto::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void SentEmailDto::unsetUserId()
{
    m_UserIdIsSet = false;
}
utility::string_t SentEmailDto::getInboxId() const
{
    return m_InboxId;
}

void SentEmailDto::setInboxId(const utility::string_t& value)
{
    m_InboxId = value;
    m_InboxIdIsSet = true;
}

bool SentEmailDto::inboxIdIsSet() const
{
    return m_InboxIdIsSet;
}

void SentEmailDto::unsetInboxId()
{
    m_InboxIdIsSet = false;
}
utility::string_t SentEmailDto::getDomainId() const
{
    return m_DomainId;
}

void SentEmailDto::setDomainId(const utility::string_t& value)
{
    m_DomainId = value;
    m_DomainIdIsSet = true;
}

bool SentEmailDto::domainIdIsSet() const
{
    return m_DomainIdIsSet;
}

void SentEmailDto::unsetDomainId()
{
    m_DomainIdIsSet = false;
}
std::vector<utility::string_t>& SentEmailDto::getTo()
{
    return m_To;
}

void SentEmailDto::setTo(const std::vector<utility::string_t>& value)
{
    m_To = value;
    m_ToIsSet = true;
}

bool SentEmailDto::toIsSet() const
{
    return m_ToIsSet;
}

void SentEmailDto::unsetTo()
{
    m_ToIsSet = false;
}
utility::string_t SentEmailDto::getFrom() const
{
    return m_From;
}

void SentEmailDto::setFrom(const utility::string_t& value)
{
    m_From = value;
    m_FromIsSet = true;
}

bool SentEmailDto::fromIsSet() const
{
    return m_FromIsSet;
}

void SentEmailDto::unsetFrom()
{
    m_FromIsSet = false;
}
utility::string_t SentEmailDto::getReplyTo() const
{
    return m_ReplyTo;
}

void SentEmailDto::setReplyTo(const utility::string_t& value)
{
    m_ReplyTo = value;
    m_ReplyToIsSet = true;
}

bool SentEmailDto::replyToIsSet() const
{
    return m_ReplyToIsSet;
}

void SentEmailDto::unsetReplyTo()
{
    m_ReplyToIsSet = false;
}
std::vector<utility::string_t>& SentEmailDto::getCc()
{
    return m_Cc;
}

void SentEmailDto::setCc(const std::vector<utility::string_t>& value)
{
    m_Cc = value;
    m_CcIsSet = true;
}

bool SentEmailDto::ccIsSet() const
{
    return m_CcIsSet;
}

void SentEmailDto::unsetCc()
{
    m_CcIsSet = false;
}
std::vector<utility::string_t>& SentEmailDto::getBcc()
{
    return m_Bcc;
}

void SentEmailDto::setBcc(const std::vector<utility::string_t>& value)
{
    m_Bcc = value;
    m_BccIsSet = true;
}

bool SentEmailDto::bccIsSet() const
{
    return m_BccIsSet;
}

void SentEmailDto::unsetBcc()
{
    m_BccIsSet = false;
}
std::vector<utility::string_t>& SentEmailDto::getAttachments()
{
    return m_Attachments;
}

void SentEmailDto::setAttachments(const std::vector<utility::string_t>& value)
{
    m_Attachments = value;
    m_AttachmentsIsSet = true;
}

bool SentEmailDto::attachmentsIsSet() const
{
    return m_AttachmentsIsSet;
}

void SentEmailDto::unsetAttachments()
{
    m_AttachmentsIsSet = false;
}
utility::string_t SentEmailDto::getSubject() const
{
    return m_Subject;
}

void SentEmailDto::setSubject(const utility::string_t& value)
{
    m_Subject = value;
    m_SubjectIsSet = true;
}

bool SentEmailDto::subjectIsSet() const
{
    return m_SubjectIsSet;
}

void SentEmailDto::unsetSubject()
{
    m_SubjectIsSet = false;
}
utility::string_t SentEmailDto::getBodyMD5Hash() const
{
    return m_BodyMD5Hash;
}

void SentEmailDto::setBodyMD5Hash(const utility::string_t& value)
{
    m_BodyMD5Hash = value;
    m_BodyMD5HashIsSet = true;
}

bool SentEmailDto::bodyMD5HashIsSet() const
{
    return m_BodyMD5HashIsSet;
}

void SentEmailDto::unsetBodyMD5Hash()
{
    m_BodyMD5HashIsSet = false;
}
utility::string_t SentEmailDto::getBody() const
{
    return m_Body;
}

void SentEmailDto::setBody(const utility::string_t& value)
{
    m_Body = value;
    m_BodyIsSet = true;
}

bool SentEmailDto::bodyIsSet() const
{
    return m_BodyIsSet;
}

void SentEmailDto::unsetBody()
{
    m_BodyIsSet = false;
}
std::vector<utility::string_t>& SentEmailDto::getToContacts()
{
    return m_ToContacts;
}

void SentEmailDto::setToContacts(const std::vector<utility::string_t>& value)
{
    m_ToContacts = value;
    m_ToContactsIsSet = true;
}

bool SentEmailDto::toContactsIsSet() const
{
    return m_ToContactsIsSet;
}

void SentEmailDto::unsetToContacts()
{
    m_ToContactsIsSet = false;
}
utility::string_t SentEmailDto::getToGroup() const
{
    return m_ToGroup;
}

void SentEmailDto::setToGroup(const utility::string_t& value)
{
    m_ToGroup = value;
    m_ToGroupIsSet = true;
}

bool SentEmailDto::toGroupIsSet() const
{
    return m_ToGroupIsSet;
}

void SentEmailDto::unsetToGroup()
{
    m_ToGroupIsSet = false;
}
utility::string_t SentEmailDto::getCharset() const
{
    return m_Charset;
}

void SentEmailDto::setCharset(const utility::string_t& value)
{
    m_Charset = value;
    m_CharsetIsSet = true;
}

bool SentEmailDto::charsetIsSet() const
{
    return m_CharsetIsSet;
}

void SentEmailDto::unsetCharset()
{
    m_CharsetIsSet = false;
}
bool SentEmailDto::isIsHTML() const
{
    return m_IsHTML;
}

void SentEmailDto::setIsHTML(bool value)
{
    m_IsHTML = value;
    m_IsHTMLIsSet = true;
}

bool SentEmailDto::isHTMLIsSet() const
{
    return m_IsHTMLIsSet;
}

void SentEmailDto::unsetIsHTML()
{
    m_IsHTMLIsSet = false;
}
utility::datetime SentEmailDto::getSentAt() const
{
    return m_SentAt;
}

void SentEmailDto::setSentAt(const utility::datetime& value)
{
    m_SentAt = value;
    m_SentAtIsSet = true;
}

bool SentEmailDto::sentAtIsSet() const
{
    return m_SentAtIsSet;
}

void SentEmailDto::unsetSentAt()
{
    m_SentAtIsSet = false;
}
std::vector<utility::string_t>& SentEmailDto::getPixelIds()
{
    return m_PixelIds;
}

void SentEmailDto::setPixelIds(const std::vector<utility::string_t>& value)
{
    m_PixelIds = value;
    m_PixelIdsIsSet = true;
}

bool SentEmailDto::pixelIdsIsSet() const
{
    return m_PixelIdsIsSet;
}

void SentEmailDto::unsetPixelIds()
{
    m_PixelIdsIsSet = false;
}
utility::string_t SentEmailDto::getMessageId() const
{
    return m_MessageId;
}

void SentEmailDto::setMessageId(const utility::string_t& value)
{
    m_MessageId = value;
    m_MessageIdIsSet = true;
}

bool SentEmailDto::messageIdIsSet() const
{
    return m_MessageIdIsSet;
}

void SentEmailDto::unsetMessageId()
{
    m_MessageIdIsSet = false;
}
std::vector<utility::string_t>& SentEmailDto::getMessageIds()
{
    return m_MessageIds;
}

void SentEmailDto::setMessageIds(const std::vector<utility::string_t>& value)
{
    m_MessageIds = value;
    m_MessageIdsIsSet = true;
}

bool SentEmailDto::messageIdsIsSet() const
{
    return m_MessageIdsIsSet;
}

void SentEmailDto::unsetMessageIds()
{
    m_MessageIdsIsSet = false;
}
bool SentEmailDto::isVirtualSend() const
{
    return m_VirtualSend;
}

void SentEmailDto::setVirtualSend(bool value)
{
    m_VirtualSend = value;
    m_VirtualSendIsSet = true;
}

bool SentEmailDto::virtualSendIsSet() const
{
    return m_VirtualSendIsSet;
}

void SentEmailDto::unsetVirtualSend()
{
    m_VirtualSendIsSet = false;
}
utility::string_t SentEmailDto::getTemplateId() const
{
    return m_TemplateId;
}

void SentEmailDto::setTemplateId(const utility::string_t& value)
{
    m_TemplateId = value;
    m_TemplateIdIsSet = true;
}

bool SentEmailDto::templateIdIsSet() const
{
    return m_TemplateIdIsSet;
}

void SentEmailDto::unsetTemplateId()
{
    m_TemplateIdIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<Object>>& SentEmailDto::getTemplateVariables()
{
    return m_TemplateVariables;
}

void SentEmailDto::setTemplateVariables(const std::map<utility::string_t, std::shared_ptr<Object>>& value)
{
    m_TemplateVariables = value;
    m_TemplateVariablesIsSet = true;
}

bool SentEmailDto::templateVariablesIsSet() const
{
    return m_TemplateVariablesIsSet;
}

void SentEmailDto::unsetTemplateVariables()
{
    m_TemplateVariablesIsSet = false;
}
bool SentEmailDto::isHtml() const
{
    return m_Html;
}

void SentEmailDto::setHtml(bool value)
{
    m_Html = value;
    m_HtmlIsSet = true;
}

bool SentEmailDto::htmlIsSet() const
{
    return m_HtmlIsSet;
}

void SentEmailDto::unsetHtml()
{
    m_HtmlIsSet = false;
}
}
}
}
}


