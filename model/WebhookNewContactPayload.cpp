/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "WebhookNewContactPayload.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




WebhookNewContactPayload::WebhookNewContactPayload()
{
    m_MessageId = utility::conversions::to_string_t("");
    m_MessageIdIsSet = false;
    m_WebhookId = utility::conversions::to_string_t("");
    m_WebhookIdIsSet = false;
    m_WebhookName = utility::conversions::to_string_t("");
    m_WebhookNameIsSet = false;
    m_EventName = utility::conversions::to_string_t("");
    m_EventNameIsSet = false;
    m_ContactId = utility::conversions::to_string_t("");
    m_ContactIdIsSet = false;
    m_GroupId = utility::conversions::to_string_t("");
    m_GroupIdIsSet = false;
    m_FirstName = utility::conversions::to_string_t("");
    m_FirstNameIsSet = false;
    m_LastName = utility::conversions::to_string_t("");
    m_LastNameIsSet = false;
    m_Company = utility::conversions::to_string_t("");
    m_CompanyIsSet = false;
    m_PrimaryEmailAddress = utility::conversions::to_string_t("");
    m_PrimaryEmailAddressIsSet = false;
    m_EmailAddressesIsSet = false;
    m_TagsIsSet = false;
    m_MetaDataIsSet = false;
    m_OptOut = false;
    m_OptOutIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
}

WebhookNewContactPayload::~WebhookNewContactPayload()
{
}

void WebhookNewContactPayload::validate()
{
    // TODO: implement validation
}

web::json::value WebhookNewContactPayload::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MessageIdIsSet)
    {
        val[utility::conversions::to_string_t("messageId")] = ModelBase::toJson(m_MessageId);
    }
    if(m_WebhookIdIsSet)
    {
        val[utility::conversions::to_string_t("webhookId")] = ModelBase::toJson(m_WebhookId);
    }
    if(m_WebhookNameIsSet)
    {
        val[utility::conversions::to_string_t("webhookName")] = ModelBase::toJson(m_WebhookName);
    }
    if(m_EventNameIsSet)
    {
        val[utility::conversions::to_string_t("eventName")] = ModelBase::toJson(m_EventName);
    }
    if(m_ContactIdIsSet)
    {
        val[utility::conversions::to_string_t("contactId")] = ModelBase::toJson(m_ContactId);
    }
    if(m_GroupIdIsSet)
    {
        val[utility::conversions::to_string_t("groupId")] = ModelBase::toJson(m_GroupId);
    }
    if(m_FirstNameIsSet)
    {
        val[utility::conversions::to_string_t("firstName")] = ModelBase::toJson(m_FirstName);
    }
    if(m_LastNameIsSet)
    {
        val[utility::conversions::to_string_t("lastName")] = ModelBase::toJson(m_LastName);
    }
    if(m_CompanyIsSet)
    {
        val[utility::conversions::to_string_t("company")] = ModelBase::toJson(m_Company);
    }
    if(m_PrimaryEmailAddressIsSet)
    {
        val[utility::conversions::to_string_t("primaryEmailAddress")] = ModelBase::toJson(m_PrimaryEmailAddress);
    }
    if(m_EmailAddressesIsSet)
    {
        val[utility::conversions::to_string_t("emailAddresses")] = ModelBase::toJson(m_EmailAddresses);
    }
    if(m_TagsIsSet)
    {
        val[utility::conversions::to_string_t("tags")] = ModelBase::toJson(m_Tags);
    }
    if(m_MetaDataIsSet)
    {
        val[utility::conversions::to_string_t("metaData")] = ModelBase::toJson(m_MetaData);
    }
    if(m_OptOutIsSet)
    {
        val[utility::conversions::to_string_t("optOut")] = ModelBase::toJson(m_OptOut);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t("createdAt")] = ModelBase::toJson(m_CreatedAt);
    }

    return val;
}

bool WebhookNewContactPayload::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("messageId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("messageId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_messageId;
            ok &= ModelBase::fromJson(fieldValue, refVal_messageId);
            setMessageId(refVal_messageId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("webhookId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("webhookId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_webhookId;
            ok &= ModelBase::fromJson(fieldValue, refVal_webhookId);
            setWebhookId(refVal_webhookId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("webhookName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("webhookName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_webhookName;
            ok &= ModelBase::fromJson(fieldValue, refVal_webhookName);
            setWebhookName(refVal_webhookName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("eventName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("eventName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_eventName;
            ok &= ModelBase::fromJson(fieldValue, refVal_eventName);
            setEventName(refVal_eventName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("contactId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("contactId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_contactId;
            ok &= ModelBase::fromJson(fieldValue, refVal_contactId);
            setContactId(refVal_contactId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("groupId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("groupId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_groupId;
            ok &= ModelBase::fromJson(fieldValue, refVal_groupId);
            setGroupId(refVal_groupId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("firstName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("firstName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_firstName;
            ok &= ModelBase::fromJson(fieldValue, refVal_firstName);
            setFirstName(refVal_firstName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("lastName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("lastName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_lastName;
            ok &= ModelBase::fromJson(fieldValue, refVal_lastName);
            setLastName(refVal_lastName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("company")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("company"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_company;
            ok &= ModelBase::fromJson(fieldValue, refVal_company);
            setCompany(refVal_company);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("primaryEmailAddress")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("primaryEmailAddress"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_primaryEmailAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_primaryEmailAddress);
            setPrimaryEmailAddress(refVal_primaryEmailAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("emailAddresses")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("emailAddresses"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_emailAddresses;
            ok &= ModelBase::fromJson(fieldValue, refVal_emailAddresses);
            setEmailAddresses(refVal_emailAddresses);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("tags")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("tags"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_tags;
            ok &= ModelBase::fromJson(fieldValue, refVal_tags);
            setTags(refVal_tags);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("metaData")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("metaData"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_metaData;
            ok &= ModelBase::fromJson(fieldValue, refVal_metaData);
            setMetaData(refVal_metaData);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("optOut")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("optOut"));
        if(!fieldValue.is_null())
        {
            bool refVal_optOut;
            ok &= ModelBase::fromJson(fieldValue, refVal_optOut);
            setOptOut(refVal_optOut);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_createdAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAt);
            setCreatedAt(refVal_createdAt);
        }
    }
    return ok;
}

void WebhookNewContactPayload::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_MessageIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("messageId"), m_MessageId));
    }
    if(m_WebhookIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("webhookId"), m_WebhookId));
    }
    if(m_WebhookNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("webhookName"), m_WebhookName));
    }
    if(m_EventNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("eventName"), m_EventName));
    }
    if(m_ContactIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("contactId"), m_ContactId));
    }
    if(m_GroupIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("groupId"), m_GroupId));
    }
    if(m_FirstNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("firstName"), m_FirstName));
    }
    if(m_LastNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("lastName"), m_LastName));
    }
    if(m_CompanyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("company"), m_Company));
    }
    if(m_PrimaryEmailAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("primaryEmailAddress"), m_PrimaryEmailAddress));
    }
    if(m_EmailAddressesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("emailAddresses"), m_EmailAddresses));
    }
    if(m_TagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("tags"), m_Tags));
    }
    if(m_MetaDataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("metaData"), m_MetaData));
    }
    if(m_OptOutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("optOut"), m_OptOut));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    }
}

bool WebhookNewContactPayload::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("messageId")))
    {
        utility::string_t refVal_messageId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("messageId")), refVal_messageId );
        setMessageId(refVal_messageId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("webhookId")))
    {
        utility::string_t refVal_webhookId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("webhookId")), refVal_webhookId );
        setWebhookId(refVal_webhookId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("webhookName")))
    {
        utility::string_t refVal_webhookName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("webhookName")), refVal_webhookName );
        setWebhookName(refVal_webhookName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("eventName")))
    {
        utility::string_t refVal_eventName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("eventName")), refVal_eventName );
        setEventName(refVal_eventName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("contactId")))
    {
        utility::string_t refVal_contactId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("contactId")), refVal_contactId );
        setContactId(refVal_contactId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("groupId")))
    {
        utility::string_t refVal_groupId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("groupId")), refVal_groupId );
        setGroupId(refVal_groupId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("firstName")))
    {
        utility::string_t refVal_firstName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("firstName")), refVal_firstName );
        setFirstName(refVal_firstName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("lastName")))
    {
        utility::string_t refVal_lastName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("lastName")), refVal_lastName );
        setLastName(refVal_lastName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("company")))
    {
        utility::string_t refVal_company;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("company")), refVal_company );
        setCompany(refVal_company);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("primaryEmailAddress")))
    {
        utility::string_t refVal_primaryEmailAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("primaryEmailAddress")), refVal_primaryEmailAddress );
        setPrimaryEmailAddress(refVal_primaryEmailAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("emailAddresses")))
    {
        std::vector<utility::string_t> refVal_emailAddresses;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("emailAddresses")), refVal_emailAddresses );
        setEmailAddresses(refVal_emailAddresses);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("tags")))
    {
        std::vector<utility::string_t> refVal_tags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("tags")), refVal_tags );
        setTags(refVal_tags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("metaData")))
    {
        std::shared_ptr<Object> refVal_metaData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("metaData")), refVal_metaData );
        setMetaData(refVal_metaData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("optOut")))
    {
        bool refVal_optOut;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("optOut")), refVal_optOut );
        setOptOut(refVal_optOut);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdAt")))
    {
        utility::datetime refVal_createdAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt")), refVal_createdAt );
        setCreatedAt(refVal_createdAt);
    }
    return ok;
}

utility::string_t WebhookNewContactPayload::getMessageId() const
{
    return m_MessageId;
}

void WebhookNewContactPayload::setMessageId(const utility::string_t& value)
{
    m_MessageId = value;
    m_MessageIdIsSet = true;
}

bool WebhookNewContactPayload::messageIdIsSet() const
{
    return m_MessageIdIsSet;
}

void WebhookNewContactPayload::unsetMessageId()
{
    m_MessageIdIsSet = false;
}
utility::string_t WebhookNewContactPayload::getWebhookId() const
{
    return m_WebhookId;
}

void WebhookNewContactPayload::setWebhookId(const utility::string_t& value)
{
    m_WebhookId = value;
    m_WebhookIdIsSet = true;
}

bool WebhookNewContactPayload::webhookIdIsSet() const
{
    return m_WebhookIdIsSet;
}

void WebhookNewContactPayload::unsetWebhookId()
{
    m_WebhookIdIsSet = false;
}
utility::string_t WebhookNewContactPayload::getWebhookName() const
{
    return m_WebhookName;
}

void WebhookNewContactPayload::setWebhookName(const utility::string_t& value)
{
    m_WebhookName = value;
    m_WebhookNameIsSet = true;
}

bool WebhookNewContactPayload::webhookNameIsSet() const
{
    return m_WebhookNameIsSet;
}

void WebhookNewContactPayload::unsetWebhookName()
{
    m_WebhookNameIsSet = false;
}
utility::string_t WebhookNewContactPayload::getEventName() const
{
    return m_EventName;
}

void WebhookNewContactPayload::setEventName(const utility::string_t& value)
{
    m_EventName = value;
    m_EventNameIsSet = true;
}

bool WebhookNewContactPayload::eventNameIsSet() const
{
    return m_EventNameIsSet;
}

void WebhookNewContactPayload::unsetEventName()
{
    m_EventNameIsSet = false;
}
utility::string_t WebhookNewContactPayload::getContactId() const
{
    return m_ContactId;
}

void WebhookNewContactPayload::setContactId(const utility::string_t& value)
{
    m_ContactId = value;
    m_ContactIdIsSet = true;
}

bool WebhookNewContactPayload::contactIdIsSet() const
{
    return m_ContactIdIsSet;
}

void WebhookNewContactPayload::unsetContactId()
{
    m_ContactIdIsSet = false;
}
utility::string_t WebhookNewContactPayload::getGroupId() const
{
    return m_GroupId;
}

void WebhookNewContactPayload::setGroupId(const utility::string_t& value)
{
    m_GroupId = value;
    m_GroupIdIsSet = true;
}

bool WebhookNewContactPayload::groupIdIsSet() const
{
    return m_GroupIdIsSet;
}

void WebhookNewContactPayload::unsetGroupId()
{
    m_GroupIdIsSet = false;
}
utility::string_t WebhookNewContactPayload::getFirstName() const
{
    return m_FirstName;
}

void WebhookNewContactPayload::setFirstName(const utility::string_t& value)
{
    m_FirstName = value;
    m_FirstNameIsSet = true;
}

bool WebhookNewContactPayload::firstNameIsSet() const
{
    return m_FirstNameIsSet;
}

void WebhookNewContactPayload::unsetFirstName()
{
    m_FirstNameIsSet = false;
}
utility::string_t WebhookNewContactPayload::getLastName() const
{
    return m_LastName;
}

void WebhookNewContactPayload::setLastName(const utility::string_t& value)
{
    m_LastName = value;
    m_LastNameIsSet = true;
}

bool WebhookNewContactPayload::lastNameIsSet() const
{
    return m_LastNameIsSet;
}

void WebhookNewContactPayload::unsetLastName()
{
    m_LastNameIsSet = false;
}
utility::string_t WebhookNewContactPayload::getCompany() const
{
    return m_Company;
}

void WebhookNewContactPayload::setCompany(const utility::string_t& value)
{
    m_Company = value;
    m_CompanyIsSet = true;
}

bool WebhookNewContactPayload::companyIsSet() const
{
    return m_CompanyIsSet;
}

void WebhookNewContactPayload::unsetCompany()
{
    m_CompanyIsSet = false;
}
utility::string_t WebhookNewContactPayload::getPrimaryEmailAddress() const
{
    return m_PrimaryEmailAddress;
}

void WebhookNewContactPayload::setPrimaryEmailAddress(const utility::string_t& value)
{
    m_PrimaryEmailAddress = value;
    m_PrimaryEmailAddressIsSet = true;
}

bool WebhookNewContactPayload::primaryEmailAddressIsSet() const
{
    return m_PrimaryEmailAddressIsSet;
}

void WebhookNewContactPayload::unsetPrimaryEmailAddress()
{
    m_PrimaryEmailAddressIsSet = false;
}
std::vector<utility::string_t>& WebhookNewContactPayload::getEmailAddresses()
{
    return m_EmailAddresses;
}

void WebhookNewContactPayload::setEmailAddresses(const std::vector<utility::string_t>& value)
{
    m_EmailAddresses = value;
    m_EmailAddressesIsSet = true;
}

bool WebhookNewContactPayload::emailAddressesIsSet() const
{
    return m_EmailAddressesIsSet;
}

void WebhookNewContactPayload::unsetEmailAddresses()
{
    m_EmailAddressesIsSet = false;
}
std::vector<utility::string_t>& WebhookNewContactPayload::getTags()
{
    return m_Tags;
}

void WebhookNewContactPayload::setTags(const std::vector<utility::string_t>& value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}

bool WebhookNewContactPayload::tagsIsSet() const
{
    return m_TagsIsSet;
}

void WebhookNewContactPayload::unsetTags()
{
    m_TagsIsSet = false;
}
std::shared_ptr<Object> WebhookNewContactPayload::getMetaData() const
{
    return m_MetaData;
}

void WebhookNewContactPayload::setMetaData(const std::shared_ptr<Object>& value)
{
    m_MetaData = value;
    m_MetaDataIsSet = true;
}

bool WebhookNewContactPayload::metaDataIsSet() const
{
    return m_MetaDataIsSet;
}

void WebhookNewContactPayload::unsetMetaData()
{
    m_MetaDataIsSet = false;
}
bool WebhookNewContactPayload::isOptOut() const
{
    return m_OptOut;
}

void WebhookNewContactPayload::setOptOut(bool value)
{
    m_OptOut = value;
    m_OptOutIsSet = true;
}

bool WebhookNewContactPayload::optOutIsSet() const
{
    return m_OptOutIsSet;
}

void WebhookNewContactPayload::unsetOptOut()
{
    m_OptOutIsSet = false;
}
utility::datetime WebhookNewContactPayload::getCreatedAt() const
{
    return m_CreatedAt;
}

void WebhookNewContactPayload::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool WebhookNewContactPayload::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void WebhookNewContactPayload::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
}
}
}
}


