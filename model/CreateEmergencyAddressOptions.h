/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateEmergencyAddressOptions.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_CreateEmergencyAddressOptions_H_
#define COM_MAILSLURP_CLIENT_MODEL_CreateEmergencyAddressOptions_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  CreateEmergencyAddressOptions
    : public ModelBase
{
public:
    CreateEmergencyAddressOptions();
    virtual ~CreateEmergencyAddressOptions();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CreateEmergencyAddressOptions members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCustomerName() const;
    bool customerNameIsSet() const;
    void unsetCustomerName();

    void setCustomerName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAddress1() const;
    bool address1IsSet() const;
    void unsetAddress1();

    void setAddress1(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCity() const;
    bool cityIsSet() const;
    void unsetCity();

    void setCity(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRegion() const;
    bool regionIsSet() const;
    void unsetRegion();

    void setRegion(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPostalCode() const;
    bool postalCodeIsSet() const;
    void unsetPostalCode();

    void setPostalCode(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getIsoCountryCode() const;
    bool isoCountryCodeIsSet() const;
    void unsetIsoCountryCode();

    void setIsoCountryCode(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDisplayName() const;
    bool displayNameIsSet() const;
    void unsetDisplayName();

    void setDisplayName(const utility::string_t& value);


protected:
    utility::string_t m_CustomerName;
    bool m_CustomerNameIsSet;
    utility::string_t m_Address1;
    bool m_Address1IsSet;
    utility::string_t m_City;
    bool m_CityIsSet;
    utility::string_t m_Region;
    bool m_RegionIsSet;
    utility::string_t m_PostalCode;
    bool m_PostalCodeIsSet;
    utility::string_t m_IsoCountryCode;
    bool m_IsoCountryCodeIsSet;
    utility::string_t m_DisplayName;
    bool m_DisplayNameIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_CreateEmergencyAddressOptions_H_ */
