/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Bounce.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




Bounce::Bounce()
{
    m_BounceMta = utility::conversions::to_string_t("");
    m_BounceMtaIsSet = false;
    m_BounceRecipientsIsSet = false;
    m_BounceSubType = utility::conversions::to_string_t("");
    m_BounceSubTypeIsSet = false;
    m_BounceType = utility::conversions::to_string_t("");
    m_BounceTypeIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_NotificationType = utility::conversions::to_string_t("");
    m_NotificationTypeIsSet = false;
    m_Sender = utility::conversions::to_string_t("");
    m_SenderIsSet = false;
    m_SentToRecipientsIsSet = false;
    m_UpdatedAt = utility::datetime();
    m_UpdatedAtIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
}

Bounce::~Bounce()
{
}

void Bounce::validate()
{
    // TODO: implement validation
}

web::json::value Bounce::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BounceMtaIsSet)
    {
        val[utility::conversions::to_string_t("bounceMta")] = ModelBase::toJson(m_BounceMta);
    }
    if(m_BounceRecipientsIsSet)
    {
        val[utility::conversions::to_string_t("bounceRecipients")] = ModelBase::toJson(m_BounceRecipients);
    }
    if(m_BounceSubTypeIsSet)
    {
        val[utility::conversions::to_string_t("bounceSubType")] = ModelBase::toJson(m_BounceSubType);
    }
    if(m_BounceTypeIsSet)
    {
        val[utility::conversions::to_string_t("bounceType")] = ModelBase::toJson(m_BounceType);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t("createdAt")] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_NotificationTypeIsSet)
    {
        val[utility::conversions::to_string_t("notificationType")] = ModelBase::toJson(m_NotificationType);
    }
    if(m_SenderIsSet)
    {
        val[utility::conversions::to_string_t("sender")] = ModelBase::toJson(m_Sender);
    }
    if(m_SentToRecipientsIsSet)
    {
        val[utility::conversions::to_string_t("sentToRecipients")] = ModelBase::toJson(m_SentToRecipients);
    }
    if(m_UpdatedAtIsSet)
    {
        val[utility::conversions::to_string_t("updatedAt")] = ModelBase::toJson(m_UpdatedAt);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t("userId")] = ModelBase::toJson(m_UserId);
    }

    return val;
}

bool Bounce::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("bounceMta")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bounceMta"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_bounceMta;
            ok &= ModelBase::fromJson(fieldValue, refVal_bounceMta);
            setBounceMta(refVal_bounceMta);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bounceRecipients")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bounceRecipients"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_bounceRecipients;
            ok &= ModelBase::fromJson(fieldValue, refVal_bounceRecipients);
            setBounceRecipients(refVal_bounceRecipients);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bounceSubType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bounceSubType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_bounceSubType;
            ok &= ModelBase::fromJson(fieldValue, refVal_bounceSubType);
            setBounceSubType(refVal_bounceSubType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bounceType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bounceType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_bounceType;
            ok &= ModelBase::fromJson(fieldValue, refVal_bounceType);
            setBounceType(refVal_bounceType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_createdAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAt);
            setCreatedAt(refVal_createdAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("notificationType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("notificationType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_notificationType;
            ok &= ModelBase::fromJson(fieldValue, refVal_notificationType);
            setNotificationType(refVal_notificationType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sender")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sender"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sender;
            ok &= ModelBase::fromJson(fieldValue, refVal_sender);
            setSender(refVal_sender);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sentToRecipients")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sentToRecipients"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_sentToRecipients;
            ok &= ModelBase::fromJson(fieldValue, refVal_sentToRecipients);
            setSentToRecipients(refVal_sentToRecipients);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("updatedAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("updatedAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_updatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_updatedAt);
            setUpdatedAt(refVal_updatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("userId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("userId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_userId;
            ok &= ModelBase::fromJson(fieldValue, refVal_userId);
            setUserId(refVal_userId);
        }
    }
    return ok;
}

void Bounce::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_BounceMtaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bounceMta"), m_BounceMta));
    }
    if(m_BounceRecipientsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bounceRecipients"), m_BounceRecipients));
    }
    if(m_BounceSubTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bounceSubType"), m_BounceSubType));
    }
    if(m_BounceTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bounceType"), m_BounceType));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_NotificationTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("notificationType"), m_NotificationType));
    }
    if(m_SenderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sender"), m_Sender));
    }
    if(m_SentToRecipientsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sentToRecipients"), m_SentToRecipients));
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("updatedAt"), m_UpdatedAt));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("userId"), m_UserId));
    }
}

bool Bounce::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("bounceMta")))
    {
        utility::string_t refVal_bounceMta;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bounceMta")), refVal_bounceMta );
        setBounceMta(refVal_bounceMta);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bounceRecipients")))
    {
        std::vector<utility::string_t> refVal_bounceRecipients;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bounceRecipients")), refVal_bounceRecipients );
        setBounceRecipients(refVal_bounceRecipients);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bounceSubType")))
    {
        utility::string_t refVal_bounceSubType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bounceSubType")), refVal_bounceSubType );
        setBounceSubType(refVal_bounceSubType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bounceType")))
    {
        utility::string_t refVal_bounceType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bounceType")), refVal_bounceType );
        setBounceType(refVal_bounceType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdAt")))
    {
        utility::datetime refVal_createdAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt")), refVal_createdAt );
        setCreatedAt(refVal_createdAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("notificationType")))
    {
        utility::string_t refVal_notificationType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("notificationType")), refVal_notificationType );
        setNotificationType(refVal_notificationType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sender")))
    {
        utility::string_t refVal_sender;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sender")), refVal_sender );
        setSender(refVal_sender);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sentToRecipients")))
    {
        std::vector<utility::string_t> refVal_sentToRecipients;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sentToRecipients")), refVal_sentToRecipients );
        setSentToRecipients(refVal_sentToRecipients);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("updatedAt")))
    {
        utility::datetime refVal_updatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("updatedAt")), refVal_updatedAt );
        setUpdatedAt(refVal_updatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userId")))
    {
        utility::string_t refVal_userId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("userId")), refVal_userId );
        setUserId(refVal_userId);
    }
    return ok;
}

utility::string_t Bounce::getBounceMta() const
{
    return m_BounceMta;
}

void Bounce::setBounceMta(const utility::string_t& value)
{
    m_BounceMta = value;
    m_BounceMtaIsSet = true;
}

bool Bounce::bounceMtaIsSet() const
{
    return m_BounceMtaIsSet;
}

void Bounce::unsetBounceMta()
{
    m_BounceMtaIsSet = false;
}
std::vector<utility::string_t>& Bounce::getBounceRecipients()
{
    return m_BounceRecipients;
}

void Bounce::setBounceRecipients(const std::vector<utility::string_t>& value)
{
    m_BounceRecipients = value;
    m_BounceRecipientsIsSet = true;
}

bool Bounce::bounceRecipientsIsSet() const
{
    return m_BounceRecipientsIsSet;
}

void Bounce::unsetBounceRecipients()
{
    m_BounceRecipientsIsSet = false;
}
utility::string_t Bounce::getBounceSubType() const
{
    return m_BounceSubType;
}

void Bounce::setBounceSubType(const utility::string_t& value)
{
    m_BounceSubType = value;
    m_BounceSubTypeIsSet = true;
}

bool Bounce::bounceSubTypeIsSet() const
{
    return m_BounceSubTypeIsSet;
}

void Bounce::unsetBounceSubType()
{
    m_BounceSubTypeIsSet = false;
}
utility::string_t Bounce::getBounceType() const
{
    return m_BounceType;
}

void Bounce::setBounceType(const utility::string_t& value)
{
    m_BounceType = value;
    m_BounceTypeIsSet = true;
}

bool Bounce::bounceTypeIsSet() const
{
    return m_BounceTypeIsSet;
}

void Bounce::unsetBounceType()
{
    m_BounceTypeIsSet = false;
}
utility::datetime Bounce::getCreatedAt() const
{
    return m_CreatedAt;
}

void Bounce::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool Bounce::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void Bounce::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::string_t Bounce::getId() const
{
    return m_Id;
}

void Bounce::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Bounce::idIsSet() const
{
    return m_IdIsSet;
}

void Bounce::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Bounce::getNotificationType() const
{
    return m_NotificationType;
}

void Bounce::setNotificationType(const utility::string_t& value)
{
    m_NotificationType = value;
    m_NotificationTypeIsSet = true;
}

bool Bounce::notificationTypeIsSet() const
{
    return m_NotificationTypeIsSet;
}

void Bounce::unsetNotificationType()
{
    m_NotificationTypeIsSet = false;
}
utility::string_t Bounce::getSender() const
{
    return m_Sender;
}

void Bounce::setSender(const utility::string_t& value)
{
    m_Sender = value;
    m_SenderIsSet = true;
}

bool Bounce::senderIsSet() const
{
    return m_SenderIsSet;
}

void Bounce::unsetSender()
{
    m_SenderIsSet = false;
}
std::vector<utility::string_t>& Bounce::getSentToRecipients()
{
    return m_SentToRecipients;
}

void Bounce::setSentToRecipients(const std::vector<utility::string_t>& value)
{
    m_SentToRecipients = value;
    m_SentToRecipientsIsSet = true;
}

bool Bounce::sentToRecipientsIsSet() const
{
    return m_SentToRecipientsIsSet;
}

void Bounce::unsetSentToRecipients()
{
    m_SentToRecipientsIsSet = false;
}
utility::datetime Bounce::getUpdatedAt() const
{
    return m_UpdatedAt;
}

void Bounce::setUpdatedAt(const utility::datetime& value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}

bool Bounce::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void Bounce::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
utility::string_t Bounce::getUserId() const
{
    return m_UserId;
}

void Bounce::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool Bounce::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void Bounce::unsetUserId()
{
    m_UserIdIsSet = false;
}
}
}
}
}


