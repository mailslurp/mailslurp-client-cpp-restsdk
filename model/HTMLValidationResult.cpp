/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "HTMLValidationResult.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




HTMLValidationResult::HTMLValidationResult()
{
    m_ErrorsIsSet = false;
    m_WarningsIsSet = false;
    m_Valid = false;
    m_ValidIsSet = false;
}

HTMLValidationResult::~HTMLValidationResult()
{
}

void HTMLValidationResult::validate()
{
    // TODO: implement validation
}

web::json::value HTMLValidationResult::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ErrorsIsSet)
    {
        val[utility::conversions::to_string_t("errors")] = ModelBase::toJson(m_Errors);
    }
    if(m_WarningsIsSet)
    {
        val[utility::conversions::to_string_t("warnings")] = ModelBase::toJson(m_Warnings);
    }
    if(m_ValidIsSet)
    {
        val[utility::conversions::to_string_t("valid")] = ModelBase::toJson(m_Valid);
    }

    return val;
}

bool HTMLValidationResult::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("errors")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("errors"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ValidationMessage>> refVal_errors;
            ok &= ModelBase::fromJson(fieldValue, refVal_errors);
            setErrors(refVal_errors);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("warnings")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("warnings"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ValidationMessage>> refVal_warnings;
            ok &= ModelBase::fromJson(fieldValue, refVal_warnings);
            setWarnings(refVal_warnings);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("valid")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("valid"));
        if(!fieldValue.is_null())
        {
            bool refVal_valid;
            ok &= ModelBase::fromJson(fieldValue, refVal_valid);
            setValid(refVal_valid);
        }
    }
    return ok;
}

void HTMLValidationResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ErrorsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("errors"), m_Errors));
    }
    if(m_WarningsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("warnings"), m_Warnings));
    }
    if(m_ValidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("valid"), m_Valid));
    }
}

bool HTMLValidationResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("errors")))
    {
        std::vector<std::shared_ptr<ValidationMessage>> refVal_errors;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("errors")), refVal_errors );
        setErrors(refVal_errors);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("warnings")))
    {
        std::vector<std::shared_ptr<ValidationMessage>> refVal_warnings;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("warnings")), refVal_warnings );
        setWarnings(refVal_warnings);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("valid")))
    {
        bool refVal_valid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("valid")), refVal_valid );
        setValid(refVal_valid);
    }
    return ok;
}

std::vector<std::shared_ptr<ValidationMessage>>& HTMLValidationResult::getErrors()
{
    return m_Errors;
}

void HTMLValidationResult::setErrors(const std::vector<std::shared_ptr<ValidationMessage>>& value)
{
    m_Errors = value;
    m_ErrorsIsSet = true;
}

bool HTMLValidationResult::errorsIsSet() const
{
    return m_ErrorsIsSet;
}

void HTMLValidationResult::unsetErrors()
{
    m_ErrorsIsSet = false;
}
std::vector<std::shared_ptr<ValidationMessage>>& HTMLValidationResult::getWarnings()
{
    return m_Warnings;
}

void HTMLValidationResult::setWarnings(const std::vector<std::shared_ptr<ValidationMessage>>& value)
{
    m_Warnings = value;
    m_WarningsIsSet = true;
}

bool HTMLValidationResult::warningsIsSet() const
{
    return m_WarningsIsSet;
}

void HTMLValidationResult::unsetWarnings()
{
    m_WarningsIsSet = false;
}
bool HTMLValidationResult::isValid() const
{
    return m_Valid;
}

void HTMLValidationResult::setValid(bool value)
{
    m_Valid = value;
    m_ValidIsSet = true;
}

bool HTMLValidationResult::validIsSet() const
{
    return m_ValidIsSet;
}

void HTMLValidationResult::unsetValid()
{
    m_ValidIsSet = false;
}
}
}
}
}


