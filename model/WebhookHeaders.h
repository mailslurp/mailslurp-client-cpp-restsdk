/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * WebhookHeaders.h
 *
 * Webhook HTTP headers to include with each request from MailSlurp to your server
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_WebhookHeaders_H_
#define COM_MAILSLURP_CLIENT_MODEL_WebhookHeaders_H_


#include "../ModelBase.h"

#include "WebhookHeaderNameValue.h"
#include <vector>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// Webhook HTTP headers to include with each request from MailSlurp to your server
/// </summary>
class  WebhookHeaders
    : public ModelBase
{
public:
    WebhookHeaders();
    virtual ~WebhookHeaders();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// WebhookHeaders members

    /// <summary>
    /// List of header name value pairs to include with webhook requests
    /// </summary>
    std::vector<std::shared_ptr<WebhookHeaderNameValue>>& getHeaders();
    bool headersIsSet() const;
    void unsetHeaders();

    void setHeaders(const std::vector<std::shared_ptr<WebhookHeaderNameValue>>& value);


protected:
    std::vector<std::shared_ptr<WebhookHeaderNameValue>> m_Headers;
    bool m_HeadersIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_WebhookHeaders_H_ */
