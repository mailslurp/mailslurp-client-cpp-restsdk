/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Email.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




Email::Email()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_InboxId = utility::conversions::to_string_t("");
    m_InboxIdIsSet = false;
    m_DomainId = utility::conversions::to_string_t("");
    m_DomainIdIsSet = false;
    m_ToIsSet = false;
    m_From = utility::conversions::to_string_t("");
    m_FromIsSet = false;
    m_SenderIsSet = false;
    m_RecipientsIsSet = false;
    m_ReplyTo = utility::conversions::to_string_t("");
    m_ReplyToIsSet = false;
    m_CcIsSet = false;
    m_BccIsSet = false;
    m_HeadersIsSet = false;
    m_AttachmentsIsSet = false;
    m_Subject = utility::conversions::to_string_t("");
    m_SubjectIsSet = false;
    m_Body = utility::conversions::to_string_t("");
    m_BodyIsSet = false;
    m_BodyExcerpt = utility::conversions::to_string_t("");
    m_BodyExcerptIsSet = false;
    m_BodyMD5Hash = utility::conversions::to_string_t("");
    m_BodyMD5HashIsSet = false;
    m_IsHTML = false;
    m_IsHTMLIsSet = false;
    m_Charset = utility::conversions::to_string_t("");
    m_CharsetIsSet = false;
    m_AnalysisIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_UpdatedAt = utility::datetime();
    m_UpdatedAtIsSet = false;
    m_Read = false;
    m_ReadIsSet = false;
    m_TeamAccess = false;
    m_TeamAccessIsSet = false;
    m_Html = false;
    m_HtmlIsSet = false;
}

Email::~Email()
{
}

void Email::validate()
{
    // TODO: implement validation
}

web::json::value Email::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t("userId")] = ModelBase::toJson(m_UserId);
    }
    if(m_InboxIdIsSet)
    {
        val[utility::conversions::to_string_t("inboxId")] = ModelBase::toJson(m_InboxId);
    }
    if(m_DomainIdIsSet)
    {
        val[utility::conversions::to_string_t("domainId")] = ModelBase::toJson(m_DomainId);
    }
    if(m_ToIsSet)
    {
        val[utility::conversions::to_string_t("to")] = ModelBase::toJson(m_To);
    }
    if(m_FromIsSet)
    {
        val[utility::conversions::to_string_t("from")] = ModelBase::toJson(m_From);
    }
    if(m_SenderIsSet)
    {
        val[utility::conversions::to_string_t("sender")] = ModelBase::toJson(m_Sender);
    }
    if(m_RecipientsIsSet)
    {
        val[utility::conversions::to_string_t("recipients")] = ModelBase::toJson(m_Recipients);
    }
    if(m_ReplyToIsSet)
    {
        val[utility::conversions::to_string_t("replyTo")] = ModelBase::toJson(m_ReplyTo);
    }
    if(m_CcIsSet)
    {
        val[utility::conversions::to_string_t("cc")] = ModelBase::toJson(m_Cc);
    }
    if(m_BccIsSet)
    {
        val[utility::conversions::to_string_t("bcc")] = ModelBase::toJson(m_Bcc);
    }
    if(m_HeadersIsSet)
    {
        val[utility::conversions::to_string_t("headers")] = ModelBase::toJson(m_Headers);
    }
    if(m_AttachmentsIsSet)
    {
        val[utility::conversions::to_string_t("attachments")] = ModelBase::toJson(m_Attachments);
    }
    if(m_SubjectIsSet)
    {
        val[utility::conversions::to_string_t("subject")] = ModelBase::toJson(m_Subject);
    }
    if(m_BodyIsSet)
    {
        val[utility::conversions::to_string_t("body")] = ModelBase::toJson(m_Body);
    }
    if(m_BodyExcerptIsSet)
    {
        val[utility::conversions::to_string_t("bodyExcerpt")] = ModelBase::toJson(m_BodyExcerpt);
    }
    if(m_BodyMD5HashIsSet)
    {
        val[utility::conversions::to_string_t("bodyMD5Hash")] = ModelBase::toJson(m_BodyMD5Hash);
    }
    if(m_IsHTMLIsSet)
    {
        val[utility::conversions::to_string_t("isHTML")] = ModelBase::toJson(m_IsHTML);
    }
    if(m_CharsetIsSet)
    {
        val[utility::conversions::to_string_t("charset")] = ModelBase::toJson(m_Charset);
    }
    if(m_AnalysisIsSet)
    {
        val[utility::conversions::to_string_t("analysis")] = ModelBase::toJson(m_Analysis);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t("createdAt")] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_UpdatedAtIsSet)
    {
        val[utility::conversions::to_string_t("updatedAt")] = ModelBase::toJson(m_UpdatedAt);
    }
    if(m_ReadIsSet)
    {
        val[utility::conversions::to_string_t("read")] = ModelBase::toJson(m_Read);
    }
    if(m_TeamAccessIsSet)
    {
        val[utility::conversions::to_string_t("teamAccess")] = ModelBase::toJson(m_TeamAccess);
    }
    if(m_HtmlIsSet)
    {
        val[utility::conversions::to_string_t("html")] = ModelBase::toJson(m_Html);
    }

    return val;
}

bool Email::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("userId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("userId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_userId;
            ok &= ModelBase::fromJson(fieldValue, refVal_userId);
            setUserId(refVal_userId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("inboxId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("inboxId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_inboxId;
            ok &= ModelBase::fromJson(fieldValue, refVal_inboxId);
            setInboxId(refVal_inboxId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("domainId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("domainId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_domainId;
            ok &= ModelBase::fromJson(fieldValue, refVal_domainId);
            setDomainId(refVal_domainId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("to")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("to"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_to;
            ok &= ModelBase::fromJson(fieldValue, refVal_to);
            setTo(refVal_to);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("from")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("from"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_from;
            ok &= ModelBase::fromJson(fieldValue, refVal_from);
            setFrom(refVal_from);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sender")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sender"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Sender> refVal_sender;
            ok &= ModelBase::fromJson(fieldValue, refVal_sender);
            setSender(refVal_sender);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("recipients")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("recipients"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<EmailRecipients> refVal_recipients;
            ok &= ModelBase::fromJson(fieldValue, refVal_recipients);
            setRecipients(refVal_recipients);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("replyTo")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("replyTo"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_replyTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_replyTo);
            setReplyTo(refVal_replyTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cc")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("cc"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_cc;
            ok &= ModelBase::fromJson(fieldValue, refVal_cc);
            setCc(refVal_cc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bcc")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bcc"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_bcc;
            ok &= ModelBase::fromJson(fieldValue, refVal_bcc);
            setBcc(refVal_bcc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("headers")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("headers"));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, utility::string_t> refVal_headers;
            ok &= ModelBase::fromJson(fieldValue, refVal_headers);
            setHeaders(refVal_headers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("attachments")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("attachments"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_attachments;
            ok &= ModelBase::fromJson(fieldValue, refVal_attachments);
            setAttachments(refVal_attachments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subject")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subject"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_subject;
            ok &= ModelBase::fromJson(fieldValue, refVal_subject);
            setSubject(refVal_subject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("body")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("body"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_body;
            ok &= ModelBase::fromJson(fieldValue, refVal_body);
            setBody(refVal_body);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bodyExcerpt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bodyExcerpt"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_bodyExcerpt;
            ok &= ModelBase::fromJson(fieldValue, refVal_bodyExcerpt);
            setBodyExcerpt(refVal_bodyExcerpt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bodyMD5Hash")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bodyMD5Hash"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_bodyMD5Hash;
            ok &= ModelBase::fromJson(fieldValue, refVal_bodyMD5Hash);
            setBodyMD5Hash(refVal_bodyMD5Hash);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isHTML")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isHTML"));
        if(!fieldValue.is_null())
        {
            bool refVal_isHTML;
            ok &= ModelBase::fromJson(fieldValue, refVal_isHTML);
            setIsHTML(refVal_isHTML);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("charset")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("charset"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_charset;
            ok &= ModelBase::fromJson(fieldValue, refVal_charset);
            setCharset(refVal_charset);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("analysis")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("analysis"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<EmailAnalysis> refVal_analysis;
            ok &= ModelBase::fromJson(fieldValue, refVal_analysis);
            setAnalysis(refVal_analysis);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_createdAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAt);
            setCreatedAt(refVal_createdAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("updatedAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("updatedAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_updatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_updatedAt);
            setUpdatedAt(refVal_updatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("read")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("read"));
        if(!fieldValue.is_null())
        {
            bool refVal_read;
            ok &= ModelBase::fromJson(fieldValue, refVal_read);
            setRead(refVal_read);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("teamAccess")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("teamAccess"));
        if(!fieldValue.is_null())
        {
            bool refVal_teamAccess;
            ok &= ModelBase::fromJson(fieldValue, refVal_teamAccess);
            setTeamAccess(refVal_teamAccess);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("html")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("html"));
        if(!fieldValue.is_null())
        {
            bool refVal_html;
            ok &= ModelBase::fromJson(fieldValue, refVal_html);
            setHtml(refVal_html);
        }
    }
    return ok;
}

void Email::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("userId"), m_UserId));
    }
    if(m_InboxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("inboxId"), m_InboxId));
    }
    if(m_DomainIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("domainId"), m_DomainId));
    }
    if(m_ToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("to"), m_To));
    }
    if(m_FromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("from"), m_From));
    }
    if(m_SenderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sender"), m_Sender));
    }
    if(m_RecipientsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("recipients"), m_Recipients));
    }
    if(m_ReplyToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("replyTo"), m_ReplyTo));
    }
    if(m_CcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cc"), m_Cc));
    }
    if(m_BccIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bcc"), m_Bcc));
    }
    if(m_HeadersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("headers"), m_Headers));
    }
    if(m_AttachmentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("attachments"), m_Attachments));
    }
    if(m_SubjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subject"), m_Subject));
    }
    if(m_BodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("body"), m_Body));
    }
    if(m_BodyExcerptIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bodyExcerpt"), m_BodyExcerpt));
    }
    if(m_BodyMD5HashIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bodyMD5Hash"), m_BodyMD5Hash));
    }
    if(m_IsHTMLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isHTML"), m_IsHTML));
    }
    if(m_CharsetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("charset"), m_Charset));
    }
    if(m_AnalysisIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("analysis"), m_Analysis));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("updatedAt"), m_UpdatedAt));
    }
    if(m_ReadIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("read"), m_Read));
    }
    if(m_TeamAccessIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("teamAccess"), m_TeamAccess));
    }
    if(m_HtmlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("html"), m_Html));
    }
}

bool Email::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userId")))
    {
        utility::string_t refVal_userId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("userId")), refVal_userId );
        setUserId(refVal_userId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("inboxId")))
    {
        utility::string_t refVal_inboxId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("inboxId")), refVal_inboxId );
        setInboxId(refVal_inboxId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("domainId")))
    {
        utility::string_t refVal_domainId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("domainId")), refVal_domainId );
        setDomainId(refVal_domainId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("to")))
    {
        std::vector<utility::string_t> refVal_to;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("to")), refVal_to );
        setTo(refVal_to);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("from")))
    {
        utility::string_t refVal_from;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("from")), refVal_from );
        setFrom(refVal_from);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sender")))
    {
        std::shared_ptr<Sender> refVal_sender;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sender")), refVal_sender );
        setSender(refVal_sender);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("recipients")))
    {
        std::shared_ptr<EmailRecipients> refVal_recipients;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("recipients")), refVal_recipients );
        setRecipients(refVal_recipients);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("replyTo")))
    {
        utility::string_t refVal_replyTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("replyTo")), refVal_replyTo );
        setReplyTo(refVal_replyTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cc")))
    {
        std::vector<utility::string_t> refVal_cc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("cc")), refVal_cc );
        setCc(refVal_cc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bcc")))
    {
        std::vector<utility::string_t> refVal_bcc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bcc")), refVal_bcc );
        setBcc(refVal_bcc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("headers")))
    {
        std::map<utility::string_t, utility::string_t> refVal_headers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("headers")), refVal_headers );
        setHeaders(refVal_headers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("attachments")))
    {
        std::vector<utility::string_t> refVal_attachments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("attachments")), refVal_attachments );
        setAttachments(refVal_attachments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subject")))
    {
        utility::string_t refVal_subject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subject")), refVal_subject );
        setSubject(refVal_subject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("body")))
    {
        utility::string_t refVal_body;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("body")), refVal_body );
        setBody(refVal_body);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bodyExcerpt")))
    {
        utility::string_t refVal_bodyExcerpt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bodyExcerpt")), refVal_bodyExcerpt );
        setBodyExcerpt(refVal_bodyExcerpt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bodyMD5Hash")))
    {
        utility::string_t refVal_bodyMD5Hash;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bodyMD5Hash")), refVal_bodyMD5Hash );
        setBodyMD5Hash(refVal_bodyMD5Hash);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isHTML")))
    {
        bool refVal_isHTML;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isHTML")), refVal_isHTML );
        setIsHTML(refVal_isHTML);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("charset")))
    {
        utility::string_t refVal_charset;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("charset")), refVal_charset );
        setCharset(refVal_charset);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("analysis")))
    {
        std::shared_ptr<EmailAnalysis> refVal_analysis;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("analysis")), refVal_analysis );
        setAnalysis(refVal_analysis);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdAt")))
    {
        utility::datetime refVal_createdAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt")), refVal_createdAt );
        setCreatedAt(refVal_createdAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("updatedAt")))
    {
        utility::datetime refVal_updatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("updatedAt")), refVal_updatedAt );
        setUpdatedAt(refVal_updatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("read")))
    {
        bool refVal_read;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("read")), refVal_read );
        setRead(refVal_read);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("teamAccess")))
    {
        bool refVal_teamAccess;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("teamAccess")), refVal_teamAccess );
        setTeamAccess(refVal_teamAccess);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("html")))
    {
        bool refVal_html;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("html")), refVal_html );
        setHtml(refVal_html);
    }
    return ok;
}

utility::string_t Email::getId() const
{
    return m_Id;
}

void Email::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Email::idIsSet() const
{
    return m_IdIsSet;
}

void Email::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Email::getUserId() const
{
    return m_UserId;
}

void Email::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool Email::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void Email::unsetUserId()
{
    m_UserIdIsSet = false;
}
utility::string_t Email::getInboxId() const
{
    return m_InboxId;
}

void Email::setInboxId(const utility::string_t& value)
{
    m_InboxId = value;
    m_InboxIdIsSet = true;
}

bool Email::inboxIdIsSet() const
{
    return m_InboxIdIsSet;
}

void Email::unsetInboxId()
{
    m_InboxIdIsSet = false;
}
utility::string_t Email::getDomainId() const
{
    return m_DomainId;
}

void Email::setDomainId(const utility::string_t& value)
{
    m_DomainId = value;
    m_DomainIdIsSet = true;
}

bool Email::domainIdIsSet() const
{
    return m_DomainIdIsSet;
}

void Email::unsetDomainId()
{
    m_DomainIdIsSet = false;
}
std::vector<utility::string_t>& Email::getTo()
{
    return m_To;
}

void Email::setTo(const std::vector<utility::string_t>& value)
{
    m_To = value;
    m_ToIsSet = true;
}

bool Email::toIsSet() const
{
    return m_ToIsSet;
}

void Email::unsetTo()
{
    m_ToIsSet = false;
}
utility::string_t Email::getFrom() const
{
    return m_From;
}

void Email::setFrom(const utility::string_t& value)
{
    m_From = value;
    m_FromIsSet = true;
}

bool Email::fromIsSet() const
{
    return m_FromIsSet;
}

void Email::unsetFrom()
{
    m_FromIsSet = false;
}
std::shared_ptr<Sender> Email::getSender() const
{
    return m_Sender;
}

void Email::setSender(const std::shared_ptr<Sender>& value)
{
    m_Sender = value;
    m_SenderIsSet = true;
}

bool Email::senderIsSet() const
{
    return m_SenderIsSet;
}

void Email::unsetSender()
{
    m_SenderIsSet = false;
}
std::shared_ptr<EmailRecipients> Email::getRecipients() const
{
    return m_Recipients;
}

void Email::setRecipients(const std::shared_ptr<EmailRecipients>& value)
{
    m_Recipients = value;
    m_RecipientsIsSet = true;
}

bool Email::recipientsIsSet() const
{
    return m_RecipientsIsSet;
}

void Email::unsetRecipients()
{
    m_RecipientsIsSet = false;
}
utility::string_t Email::getReplyTo() const
{
    return m_ReplyTo;
}

void Email::setReplyTo(const utility::string_t& value)
{
    m_ReplyTo = value;
    m_ReplyToIsSet = true;
}

bool Email::replyToIsSet() const
{
    return m_ReplyToIsSet;
}

void Email::unsetReplyTo()
{
    m_ReplyToIsSet = false;
}
std::vector<utility::string_t>& Email::getCc()
{
    return m_Cc;
}

void Email::setCc(const std::vector<utility::string_t>& value)
{
    m_Cc = value;
    m_CcIsSet = true;
}

bool Email::ccIsSet() const
{
    return m_CcIsSet;
}

void Email::unsetCc()
{
    m_CcIsSet = false;
}
std::vector<utility::string_t>& Email::getBcc()
{
    return m_Bcc;
}

void Email::setBcc(const std::vector<utility::string_t>& value)
{
    m_Bcc = value;
    m_BccIsSet = true;
}

bool Email::bccIsSet() const
{
    return m_BccIsSet;
}

void Email::unsetBcc()
{
    m_BccIsSet = false;
}
std::map<utility::string_t, utility::string_t>& Email::getHeaders()
{
    return m_Headers;
}

void Email::setHeaders(const std::map<utility::string_t, utility::string_t>& value)
{
    m_Headers = value;
    m_HeadersIsSet = true;
}

bool Email::headersIsSet() const
{
    return m_HeadersIsSet;
}

void Email::unsetHeaders()
{
    m_HeadersIsSet = false;
}
std::vector<utility::string_t>& Email::getAttachments()
{
    return m_Attachments;
}

void Email::setAttachments(const std::vector<utility::string_t>& value)
{
    m_Attachments = value;
    m_AttachmentsIsSet = true;
}

bool Email::attachmentsIsSet() const
{
    return m_AttachmentsIsSet;
}

void Email::unsetAttachments()
{
    m_AttachmentsIsSet = false;
}
utility::string_t Email::getSubject() const
{
    return m_Subject;
}

void Email::setSubject(const utility::string_t& value)
{
    m_Subject = value;
    m_SubjectIsSet = true;
}

bool Email::subjectIsSet() const
{
    return m_SubjectIsSet;
}

void Email::unsetSubject()
{
    m_SubjectIsSet = false;
}
utility::string_t Email::getBody() const
{
    return m_Body;
}

void Email::setBody(const utility::string_t& value)
{
    m_Body = value;
    m_BodyIsSet = true;
}

bool Email::bodyIsSet() const
{
    return m_BodyIsSet;
}

void Email::unsetBody()
{
    m_BodyIsSet = false;
}
utility::string_t Email::getBodyExcerpt() const
{
    return m_BodyExcerpt;
}

void Email::setBodyExcerpt(const utility::string_t& value)
{
    m_BodyExcerpt = value;
    m_BodyExcerptIsSet = true;
}

bool Email::bodyExcerptIsSet() const
{
    return m_BodyExcerptIsSet;
}

void Email::unsetBodyExcerpt()
{
    m_BodyExcerptIsSet = false;
}
utility::string_t Email::getBodyMD5Hash() const
{
    return m_BodyMD5Hash;
}

void Email::setBodyMD5Hash(const utility::string_t& value)
{
    m_BodyMD5Hash = value;
    m_BodyMD5HashIsSet = true;
}

bool Email::bodyMD5HashIsSet() const
{
    return m_BodyMD5HashIsSet;
}

void Email::unsetBodyMD5Hash()
{
    m_BodyMD5HashIsSet = false;
}
bool Email::isIsHTML() const
{
    return m_IsHTML;
}

void Email::setIsHTML(bool value)
{
    m_IsHTML = value;
    m_IsHTMLIsSet = true;
}

bool Email::isHTMLIsSet() const
{
    return m_IsHTMLIsSet;
}

void Email::unsetIsHTML()
{
    m_IsHTMLIsSet = false;
}
utility::string_t Email::getCharset() const
{
    return m_Charset;
}

void Email::setCharset(const utility::string_t& value)
{
    m_Charset = value;
    m_CharsetIsSet = true;
}

bool Email::charsetIsSet() const
{
    return m_CharsetIsSet;
}

void Email::unsetCharset()
{
    m_CharsetIsSet = false;
}
std::shared_ptr<EmailAnalysis> Email::getAnalysis() const
{
    return m_Analysis;
}

void Email::setAnalysis(const std::shared_ptr<EmailAnalysis>& value)
{
    m_Analysis = value;
    m_AnalysisIsSet = true;
}

bool Email::analysisIsSet() const
{
    return m_AnalysisIsSet;
}

void Email::unsetAnalysis()
{
    m_AnalysisIsSet = false;
}
utility::datetime Email::getCreatedAt() const
{
    return m_CreatedAt;
}

void Email::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool Email::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void Email::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::datetime Email::getUpdatedAt() const
{
    return m_UpdatedAt;
}

void Email::setUpdatedAt(const utility::datetime& value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}

bool Email::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void Email::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
bool Email::isRead() const
{
    return m_Read;
}

void Email::setRead(bool value)
{
    m_Read = value;
    m_ReadIsSet = true;
}

bool Email::readIsSet() const
{
    return m_ReadIsSet;
}

void Email::unsetRead()
{
    m_ReadIsSet = false;
}
bool Email::isTeamAccess() const
{
    return m_TeamAccess;
}

void Email::setTeamAccess(bool value)
{
    m_TeamAccess = value;
    m_TeamAccessIsSet = true;
}

bool Email::teamAccessIsSet() const
{
    return m_TeamAccessIsSet;
}

void Email::unsetTeamAccess()
{
    m_TeamAccessIsSet = false;
}
bool Email::isHtml() const
{
    return m_Html;
}

void Email::setHtml(bool value)
{
    m_Html = value;
    m_HtmlIsSet = true;
}

bool Email::htmlIsSet() const
{
    return m_HtmlIsSet;
}

void Email::unsetHtml()
{
    m_HtmlIsSet = false;
}
}
}
}
}


