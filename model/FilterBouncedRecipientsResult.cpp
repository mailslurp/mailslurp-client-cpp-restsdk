/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "FilterBouncedRecipientsResult.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




FilterBouncedRecipientsResult::FilterBouncedRecipientsResult()
{
    m_FilteredRecipientsIsSet = false;
}

FilterBouncedRecipientsResult::~FilterBouncedRecipientsResult()
{
}

void FilterBouncedRecipientsResult::validate()
{
    // TODO: implement validation
}

web::json::value FilterBouncedRecipientsResult::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FilteredRecipientsIsSet)
    {
        val[utility::conversions::to_string_t("filteredRecipients")] = ModelBase::toJson(m_FilteredRecipients);
    }

    return val;
}

bool FilterBouncedRecipientsResult::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("filteredRecipients")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("filteredRecipients"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_filteredRecipients;
            ok &= ModelBase::fromJson(fieldValue, refVal_filteredRecipients);
            setFilteredRecipients(refVal_filteredRecipients);
        }
    }
    return ok;
}

void FilterBouncedRecipientsResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_FilteredRecipientsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("filteredRecipients"), m_FilteredRecipients));
    }
}

bool FilterBouncedRecipientsResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("filteredRecipients")))
    {
        std::vector<utility::string_t> refVal_filteredRecipients;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("filteredRecipients")), refVal_filteredRecipients );
        setFilteredRecipients(refVal_filteredRecipients);
    }
    return ok;
}

std::vector<utility::string_t>& FilterBouncedRecipientsResult::getFilteredRecipients()
{
    return m_FilteredRecipients;
}

void FilterBouncedRecipientsResult::setFilteredRecipients(const std::vector<utility::string_t>& value)
{
    m_FilteredRecipients = value;
    m_FilteredRecipientsIsSet = true;
}

bool FilterBouncedRecipientsResult::filteredRecipientsIsSet() const
{
    return m_FilteredRecipientsIsSet;
}

void FilterBouncedRecipientsResult::unsetFilteredRecipients()
{
    m_FilteredRecipientsIsSet = false;
}
}
}
}
}


