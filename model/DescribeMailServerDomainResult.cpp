/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DescribeMailServerDomainResult.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




DescribeMailServerDomainResult::DescribeMailServerDomainResult()
{
    m_Domain = utility::conversions::to_string_t("");
    m_DomainIsSet = false;
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
    m_MxRecordsIsSet = false;
}

DescribeMailServerDomainResult::~DescribeMailServerDomainResult()
{
}

void DescribeMailServerDomainResult::validate()
{
    // TODO: implement validation
}

web::json::value DescribeMailServerDomainResult::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DomainIsSet)
    {
        val[utility::conversions::to_string_t("domain")] = ModelBase::toJson(m_Domain);
    }
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t("message")] = ModelBase::toJson(m_Message);
    }
    if(m_MxRecordsIsSet)
    {
        val[utility::conversions::to_string_t("mxRecords")] = ModelBase::toJson(m_MxRecords);
    }

    return val;
}

bool DescribeMailServerDomainResult::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("domain")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("domain"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_domain;
            ok &= ModelBase::fromJson(fieldValue, refVal_domain);
            setDomain(refVal_domain);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("message")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("message"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_message;
            ok &= ModelBase::fromJson(fieldValue, refVal_message);
            setMessage(refVal_message);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mxRecords")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mxRecords"));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<NameServerRecord>> refVal_mxRecords;
            ok &= ModelBase::fromJson(fieldValue, refVal_mxRecords);
            setMxRecords(refVal_mxRecords);
        }
    }
    return ok;
}

void DescribeMailServerDomainResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_DomainIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("domain"), m_Domain));
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("message"), m_Message));
    }
    if(m_MxRecordsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mxRecords"), m_MxRecords));
    }
}

bool DescribeMailServerDomainResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("domain")))
    {
        utility::string_t refVal_domain;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("domain")), refVal_domain );
        setDomain(refVal_domain);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("message")))
    {
        utility::string_t refVal_message;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("message")), refVal_message );
        setMessage(refVal_message);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mxRecords")))
    {
        std::vector<std::shared_ptr<NameServerRecord>> refVal_mxRecords;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mxRecords")), refVal_mxRecords );
        setMxRecords(refVal_mxRecords);
    }
    return ok;
}

utility::string_t DescribeMailServerDomainResult::getDomain() const
{
    return m_Domain;
}

void DescribeMailServerDomainResult::setDomain(const utility::string_t& value)
{
    m_Domain = value;
    m_DomainIsSet = true;
}

bool DescribeMailServerDomainResult::domainIsSet() const
{
    return m_DomainIsSet;
}

void DescribeMailServerDomainResult::unsetDomain()
{
    m_DomainIsSet = false;
}
utility::string_t DescribeMailServerDomainResult::getMessage() const
{
    return m_Message;
}

void DescribeMailServerDomainResult::setMessage(const utility::string_t& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}

bool DescribeMailServerDomainResult::messageIsSet() const
{
    return m_MessageIsSet;
}

void DescribeMailServerDomainResult::unsetMessage()
{
    m_MessageIsSet = false;
}
std::vector<std::shared_ptr<NameServerRecord>>& DescribeMailServerDomainResult::getMxRecords()
{
    return m_MxRecords;
}

void DescribeMailServerDomainResult::setMxRecords(const std::vector<std::shared_ptr<NameServerRecord>>& value)
{
    m_MxRecords = value;
    m_MxRecordsIsSet = true;
}

bool DescribeMailServerDomainResult::mxRecordsIsSet() const
{
    return m_MxRecordsIsSet;
}

void DescribeMailServerDomainResult::unsetMxRecords()
{
    m_MxRecordsIsSet = false;
}
}
}
}
}


