/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * InboxForwarderTestResult.h
 *
 * Results of inbox forwarder test
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_InboxForwarderTestResult_H_
#define COM_MAILSLURP_CLIENT_MODEL_InboxForwarderTestResult_H_


#include "../ModelBase.h"

#include <map>
#include <vector>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// Results of inbox forwarder test
/// </summary>
class  InboxForwarderTestResult
    : public ModelBase
{
public:
    InboxForwarderTestResult();
    virtual ~InboxForwarderTestResult();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// InboxForwarderTestResult members

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, bool>& getMatches();
    bool matchesIsSet() const;
    void unsetMatches();

    void setMatches(std::map<utility::string_t, bool> value);

    /// <summary>
    /// 
    /// </summary>
    bool isDoesMatch() const;
    bool doesMatchIsSet() const;
    void unsetDoesMatch();

    void setDoesMatch(bool value);


protected:
    std::map<utility::string_t, bool> m_Matches;
    bool m_MatchesIsSet;
    bool m_DoesMatch;
    bool m_DoesMatchIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_InboxForwarderTestResult_H_ */
