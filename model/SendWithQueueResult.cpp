/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SendWithQueueResult.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




SendWithQueueResult::SendWithQueueResult()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_Subject = utility::conversions::to_string_t("");
    m_SubjectIsSet = false;
    m_InboxId = utility::conversions::to_string_t("");
    m_InboxIdIsSet = false;
    m_HeaderId = utility::conversions::to_string_t("");
    m_HeaderIdIsSet = false;
    m_Delivered = false;
    m_DeliveredIsSet = false;
    m_ExceptionName = utility::conversions::to_string_t("");
    m_ExceptionNameIsSet = false;
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_UpdatedAt = utility::datetime();
    m_UpdatedAtIsSet = false;
}

SendWithQueueResult::~SendWithQueueResult()
{
}

void SendWithQueueResult::validate()
{
    // TODO: implement validation
}

web::json::value SendWithQueueResult::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t("userId")] = ModelBase::toJson(m_UserId);
    }
    if(m_SubjectIsSet)
    {
        val[utility::conversions::to_string_t("subject")] = ModelBase::toJson(m_Subject);
    }
    if(m_InboxIdIsSet)
    {
        val[utility::conversions::to_string_t("inboxId")] = ModelBase::toJson(m_InboxId);
    }
    if(m_HeaderIdIsSet)
    {
        val[utility::conversions::to_string_t("headerId")] = ModelBase::toJson(m_HeaderId);
    }
    if(m_DeliveredIsSet)
    {
        val[utility::conversions::to_string_t("delivered")] = ModelBase::toJson(m_Delivered);
    }
    if(m_ExceptionNameIsSet)
    {
        val[utility::conversions::to_string_t("exceptionName")] = ModelBase::toJson(m_ExceptionName);
    }
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t("message")] = ModelBase::toJson(m_Message);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t("createdAt")] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_UpdatedAtIsSet)
    {
        val[utility::conversions::to_string_t("updatedAt")] = ModelBase::toJson(m_UpdatedAt);
    }

    return val;
}

bool SendWithQueueResult::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("userId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("userId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_userId;
            ok &= ModelBase::fromJson(fieldValue, refVal_userId);
            setUserId(refVal_userId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subject")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subject"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_subject;
            ok &= ModelBase::fromJson(fieldValue, refVal_subject);
            setSubject(refVal_subject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("inboxId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("inboxId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_inboxId;
            ok &= ModelBase::fromJson(fieldValue, refVal_inboxId);
            setInboxId(refVal_inboxId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("headerId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("headerId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_headerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_headerId);
            setHeaderId(refVal_headerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("delivered")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("delivered"));
        if(!fieldValue.is_null())
        {
            bool refVal_delivered;
            ok &= ModelBase::fromJson(fieldValue, refVal_delivered);
            setDelivered(refVal_delivered);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("exceptionName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("exceptionName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_exceptionName;
            ok &= ModelBase::fromJson(fieldValue, refVal_exceptionName);
            setExceptionName(refVal_exceptionName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("message")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("message"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_message;
            ok &= ModelBase::fromJson(fieldValue, refVal_message);
            setMessage(refVal_message);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_createdAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAt);
            setCreatedAt(refVal_createdAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("updatedAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("updatedAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_updatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_updatedAt);
            setUpdatedAt(refVal_updatedAt);
        }
    }
    return ok;
}

void SendWithQueueResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("userId"), m_UserId));
    }
    if(m_SubjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subject"), m_Subject));
    }
    if(m_InboxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("inboxId"), m_InboxId));
    }
    if(m_HeaderIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("headerId"), m_HeaderId));
    }
    if(m_DeliveredIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("delivered"), m_Delivered));
    }
    if(m_ExceptionNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("exceptionName"), m_ExceptionName));
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("message"), m_Message));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("updatedAt"), m_UpdatedAt));
    }
}

bool SendWithQueueResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userId")))
    {
        utility::string_t refVal_userId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("userId")), refVal_userId );
        setUserId(refVal_userId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subject")))
    {
        utility::string_t refVal_subject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subject")), refVal_subject );
        setSubject(refVal_subject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("inboxId")))
    {
        utility::string_t refVal_inboxId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("inboxId")), refVal_inboxId );
        setInboxId(refVal_inboxId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("headerId")))
    {
        utility::string_t refVal_headerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("headerId")), refVal_headerId );
        setHeaderId(refVal_headerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("delivered")))
    {
        bool refVal_delivered;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("delivered")), refVal_delivered );
        setDelivered(refVal_delivered);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("exceptionName")))
    {
        utility::string_t refVal_exceptionName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("exceptionName")), refVal_exceptionName );
        setExceptionName(refVal_exceptionName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("message")))
    {
        utility::string_t refVal_message;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("message")), refVal_message );
        setMessage(refVal_message);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdAt")))
    {
        utility::datetime refVal_createdAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt")), refVal_createdAt );
        setCreatedAt(refVal_createdAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("updatedAt")))
    {
        utility::datetime refVal_updatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("updatedAt")), refVal_updatedAt );
        setUpdatedAt(refVal_updatedAt);
    }
    return ok;
}

utility::string_t SendWithQueueResult::getId() const
{
    return m_Id;
}

void SendWithQueueResult::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool SendWithQueueResult::idIsSet() const
{
    return m_IdIsSet;
}

void SendWithQueueResult::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t SendWithQueueResult::getUserId() const
{
    return m_UserId;
}

void SendWithQueueResult::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool SendWithQueueResult::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void SendWithQueueResult::unsetUserId()
{
    m_UserIdIsSet = false;
}
utility::string_t SendWithQueueResult::getSubject() const
{
    return m_Subject;
}

void SendWithQueueResult::setSubject(const utility::string_t& value)
{
    m_Subject = value;
    m_SubjectIsSet = true;
}

bool SendWithQueueResult::subjectIsSet() const
{
    return m_SubjectIsSet;
}

void SendWithQueueResult::unsetSubject()
{
    m_SubjectIsSet = false;
}
utility::string_t SendWithQueueResult::getInboxId() const
{
    return m_InboxId;
}

void SendWithQueueResult::setInboxId(const utility::string_t& value)
{
    m_InboxId = value;
    m_InboxIdIsSet = true;
}

bool SendWithQueueResult::inboxIdIsSet() const
{
    return m_InboxIdIsSet;
}

void SendWithQueueResult::unsetInboxId()
{
    m_InboxIdIsSet = false;
}
utility::string_t SendWithQueueResult::getHeaderId() const
{
    return m_HeaderId;
}

void SendWithQueueResult::setHeaderId(const utility::string_t& value)
{
    m_HeaderId = value;
    m_HeaderIdIsSet = true;
}

bool SendWithQueueResult::headerIdIsSet() const
{
    return m_HeaderIdIsSet;
}

void SendWithQueueResult::unsetHeaderId()
{
    m_HeaderIdIsSet = false;
}
bool SendWithQueueResult::isDelivered() const
{
    return m_Delivered;
}

void SendWithQueueResult::setDelivered(bool value)
{
    m_Delivered = value;
    m_DeliveredIsSet = true;
}

bool SendWithQueueResult::deliveredIsSet() const
{
    return m_DeliveredIsSet;
}

void SendWithQueueResult::unsetDelivered()
{
    m_DeliveredIsSet = false;
}
utility::string_t SendWithQueueResult::getExceptionName() const
{
    return m_ExceptionName;
}

void SendWithQueueResult::setExceptionName(const utility::string_t& value)
{
    m_ExceptionName = value;
    m_ExceptionNameIsSet = true;
}

bool SendWithQueueResult::exceptionNameIsSet() const
{
    return m_ExceptionNameIsSet;
}

void SendWithQueueResult::unsetExceptionName()
{
    m_ExceptionNameIsSet = false;
}
utility::string_t SendWithQueueResult::getMessage() const
{
    return m_Message;
}

void SendWithQueueResult::setMessage(const utility::string_t& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}

bool SendWithQueueResult::messageIsSet() const
{
    return m_MessageIsSet;
}

void SendWithQueueResult::unsetMessage()
{
    m_MessageIsSet = false;
}
utility::datetime SendWithQueueResult::getCreatedAt() const
{
    return m_CreatedAt;
}

void SendWithQueueResult::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool SendWithQueueResult::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void SendWithQueueResult::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::datetime SendWithQueueResult::getUpdatedAt() const
{
    return m_UpdatedAt;
}

void SendWithQueueResult::setUpdatedAt(const utility::datetime& value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}

bool SendWithQueueResult::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void SendWithQueueResult::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
}
}
}
}


