/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DNSLookupOptions.h
 *
 * Options for DNS query. 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_DNSLookupOptions_H_
#define COM_MAILSLURP_CLIENT_MODEL_DNSLookupOptions_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// Options for DNS query. 
/// </summary>
class  DNSLookupOptions
    : public ModelBase
{
public:
    DNSLookupOptions();
    virtual ~DNSLookupOptions();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// DNSLookupOptions members

    /// <summary>
    /// List of record types you wish to query such as MX, DNS, TXT, NS, A etc.
    /// </summary>
    utility::string_t getHostname() const;
    bool hostnameIsSet() const;
    void unsetHostname();

    void setHostname(const utility::string_t& value);

    /// <summary>
    /// Optionally control whether to omit the final dot in full DNS name values.
    /// </summary>
    bool isOmitFinalDNSDot() const;
    bool omitFinalDNSDotIsSet() const;
    void unsetOmitFinalDNSDot();

    void setOmitFinalDNSDot(bool value);

    /// <summary>
    /// List of record types you wish to query such as MX, DNS, TXT, NS, A etc.
    /// </summary>
    std::vector<utility::string_t>& getRecordTypes();
    bool recordTypesIsSet() const;
    void unsetRecordTypes();

    void setRecordTypes(const std::vector<utility::string_t>& value);


protected:
    utility::string_t m_Hostname;
    bool m_HostnameIsSet;
    bool m_OmitFinalDNSDot;
    bool m_OmitFinalDNSDotIsSet;
    std::vector<utility::string_t> m_RecordTypes;
    bool m_RecordTypesIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_DNSLookupOptions_H_ */
