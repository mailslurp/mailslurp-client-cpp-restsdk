/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "MissedEmailDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




MissedEmailDto::MissedEmailDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_Subject = utility::conversions::to_string_t("");
    m_SubjectIsSet = false;
    m_BodyExcerpt = utility::conversions::to_string_t("");
    m_BodyExcerptIsSet = false;
    m_AttachmentCount = 0;
    m_AttachmentCountIsSet = false;
    m_From = utility::conversions::to_string_t("");
    m_FromIsSet = false;
    m_RawUrl = utility::conversions::to_string_t("");
    m_RawUrlIsSet = false;
    m_RawKey = utility::conversions::to_string_t("");
    m_RawKeyIsSet = false;
    m_RawBucket = utility::conversions::to_string_t("");
    m_RawBucketIsSet = false;
    m_CanRestore = false;
    m_CanRestoreIsSet = false;
    m_ToIsSet = false;
    m_CcIsSet = false;
    m_BccIsSet = false;
    m_InboxIdsIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_UpdatedAt = utility::datetime();
    m_UpdatedAtIsSet = false;
}

MissedEmailDto::~MissedEmailDto()
{
}

void MissedEmailDto::validate()
{
    // TODO: implement validation
}

web::json::value MissedEmailDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t("userId")] = ModelBase::toJson(m_UserId);
    }
    if(m_SubjectIsSet)
    {
        val[utility::conversions::to_string_t("subject")] = ModelBase::toJson(m_Subject);
    }
    if(m_BodyExcerptIsSet)
    {
        val[utility::conversions::to_string_t("bodyExcerpt")] = ModelBase::toJson(m_BodyExcerpt);
    }
    if(m_AttachmentCountIsSet)
    {
        val[utility::conversions::to_string_t("attachmentCount")] = ModelBase::toJson(m_AttachmentCount);
    }
    if(m_FromIsSet)
    {
        val[utility::conversions::to_string_t("from")] = ModelBase::toJson(m_From);
    }
    if(m_RawUrlIsSet)
    {
        val[utility::conversions::to_string_t("rawUrl")] = ModelBase::toJson(m_RawUrl);
    }
    if(m_RawKeyIsSet)
    {
        val[utility::conversions::to_string_t("rawKey")] = ModelBase::toJson(m_RawKey);
    }
    if(m_RawBucketIsSet)
    {
        val[utility::conversions::to_string_t("rawBucket")] = ModelBase::toJson(m_RawBucket);
    }
    if(m_CanRestoreIsSet)
    {
        val[utility::conversions::to_string_t("canRestore")] = ModelBase::toJson(m_CanRestore);
    }
    if(m_ToIsSet)
    {
        val[utility::conversions::to_string_t("to")] = ModelBase::toJson(m_To);
    }
    if(m_CcIsSet)
    {
        val[utility::conversions::to_string_t("cc")] = ModelBase::toJson(m_Cc);
    }
    if(m_BccIsSet)
    {
        val[utility::conversions::to_string_t("bcc")] = ModelBase::toJson(m_Bcc);
    }
    if(m_InboxIdsIsSet)
    {
        val[utility::conversions::to_string_t("inboxIds")] = ModelBase::toJson(m_InboxIds);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t("createdAt")] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_UpdatedAtIsSet)
    {
        val[utility::conversions::to_string_t("updatedAt")] = ModelBase::toJson(m_UpdatedAt);
    }

    return val;
}

bool MissedEmailDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("userId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("userId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_userId;
            ok &= ModelBase::fromJson(fieldValue, refVal_userId);
            setUserId(refVal_userId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subject")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subject"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_subject;
            ok &= ModelBase::fromJson(fieldValue, refVal_subject);
            setSubject(refVal_subject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bodyExcerpt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bodyExcerpt"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_bodyExcerpt;
            ok &= ModelBase::fromJson(fieldValue, refVal_bodyExcerpt);
            setBodyExcerpt(refVal_bodyExcerpt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("attachmentCount")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("attachmentCount"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_attachmentCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_attachmentCount);
            setAttachmentCount(refVal_attachmentCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("from")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("from"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_from;
            ok &= ModelBase::fromJson(fieldValue, refVal_from);
            setFrom(refVal_from);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rawUrl")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rawUrl"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_rawUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_rawUrl);
            setRawUrl(refVal_rawUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rawKey")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rawKey"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_rawKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_rawKey);
            setRawKey(refVal_rawKey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("rawBucket")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("rawBucket"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_rawBucket;
            ok &= ModelBase::fromJson(fieldValue, refVal_rawBucket);
            setRawBucket(refVal_rawBucket);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("canRestore")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("canRestore"));
        if(!fieldValue.is_null())
        {
            bool refVal_canRestore;
            ok &= ModelBase::fromJson(fieldValue, refVal_canRestore);
            setCanRestore(refVal_canRestore);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("to")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("to"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_to;
            ok &= ModelBase::fromJson(fieldValue, refVal_to);
            setTo(refVal_to);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("cc")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("cc"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_cc;
            ok &= ModelBase::fromJson(fieldValue, refVal_cc);
            setCc(refVal_cc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("bcc")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("bcc"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_bcc;
            ok &= ModelBase::fromJson(fieldValue, refVal_bcc);
            setBcc(refVal_bcc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("inboxIds")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("inboxIds"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_inboxIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_inboxIds);
            setInboxIds(refVal_inboxIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_createdAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAt);
            setCreatedAt(refVal_createdAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("updatedAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("updatedAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_updatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_updatedAt);
            setUpdatedAt(refVal_updatedAt);
        }
    }
    return ok;
}

void MissedEmailDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("userId"), m_UserId));
    }
    if(m_SubjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subject"), m_Subject));
    }
    if(m_BodyExcerptIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bodyExcerpt"), m_BodyExcerpt));
    }
    if(m_AttachmentCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("attachmentCount"), m_AttachmentCount));
    }
    if(m_FromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("from"), m_From));
    }
    if(m_RawUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rawUrl"), m_RawUrl));
    }
    if(m_RawKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rawKey"), m_RawKey));
    }
    if(m_RawBucketIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("rawBucket"), m_RawBucket));
    }
    if(m_CanRestoreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("canRestore"), m_CanRestore));
    }
    if(m_ToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("to"), m_To));
    }
    if(m_CcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("cc"), m_Cc));
    }
    if(m_BccIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("bcc"), m_Bcc));
    }
    if(m_InboxIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("inboxIds"), m_InboxIds));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("updatedAt"), m_UpdatedAt));
    }
}

bool MissedEmailDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userId")))
    {
        utility::string_t refVal_userId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("userId")), refVal_userId );
        setUserId(refVal_userId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subject")))
    {
        utility::string_t refVal_subject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subject")), refVal_subject );
        setSubject(refVal_subject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bodyExcerpt")))
    {
        utility::string_t refVal_bodyExcerpt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bodyExcerpt")), refVal_bodyExcerpt );
        setBodyExcerpt(refVal_bodyExcerpt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("attachmentCount")))
    {
        int32_t refVal_attachmentCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("attachmentCount")), refVal_attachmentCount );
        setAttachmentCount(refVal_attachmentCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("from")))
    {
        utility::string_t refVal_from;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("from")), refVal_from );
        setFrom(refVal_from);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rawUrl")))
    {
        utility::string_t refVal_rawUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rawUrl")), refVal_rawUrl );
        setRawUrl(refVal_rawUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rawKey")))
    {
        utility::string_t refVal_rawKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rawKey")), refVal_rawKey );
        setRawKey(refVal_rawKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("rawBucket")))
    {
        utility::string_t refVal_rawBucket;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("rawBucket")), refVal_rawBucket );
        setRawBucket(refVal_rawBucket);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("canRestore")))
    {
        bool refVal_canRestore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("canRestore")), refVal_canRestore );
        setCanRestore(refVal_canRestore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("to")))
    {
        std::vector<utility::string_t> refVal_to;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("to")), refVal_to );
        setTo(refVal_to);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("cc")))
    {
        std::vector<utility::string_t> refVal_cc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("cc")), refVal_cc );
        setCc(refVal_cc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("bcc")))
    {
        std::vector<utility::string_t> refVal_bcc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("bcc")), refVal_bcc );
        setBcc(refVal_bcc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("inboxIds")))
    {
        std::vector<utility::string_t> refVal_inboxIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("inboxIds")), refVal_inboxIds );
        setInboxIds(refVal_inboxIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdAt")))
    {
        utility::datetime refVal_createdAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt")), refVal_createdAt );
        setCreatedAt(refVal_createdAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("updatedAt")))
    {
        utility::datetime refVal_updatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("updatedAt")), refVal_updatedAt );
        setUpdatedAt(refVal_updatedAt);
    }
    return ok;
}

utility::string_t MissedEmailDto::getId() const
{
    return m_Id;
}

void MissedEmailDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool MissedEmailDto::idIsSet() const
{
    return m_IdIsSet;
}

void MissedEmailDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t MissedEmailDto::getUserId() const
{
    return m_UserId;
}

void MissedEmailDto::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool MissedEmailDto::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void MissedEmailDto::unsetUserId()
{
    m_UserIdIsSet = false;
}
utility::string_t MissedEmailDto::getSubject() const
{
    return m_Subject;
}

void MissedEmailDto::setSubject(const utility::string_t& value)
{
    m_Subject = value;
    m_SubjectIsSet = true;
}

bool MissedEmailDto::subjectIsSet() const
{
    return m_SubjectIsSet;
}

void MissedEmailDto::unsetSubject()
{
    m_SubjectIsSet = false;
}
utility::string_t MissedEmailDto::getBodyExcerpt() const
{
    return m_BodyExcerpt;
}

void MissedEmailDto::setBodyExcerpt(const utility::string_t& value)
{
    m_BodyExcerpt = value;
    m_BodyExcerptIsSet = true;
}

bool MissedEmailDto::bodyExcerptIsSet() const
{
    return m_BodyExcerptIsSet;
}

void MissedEmailDto::unsetBodyExcerpt()
{
    m_BodyExcerptIsSet = false;
}
int32_t MissedEmailDto::getAttachmentCount() const
{
    return m_AttachmentCount;
}

void MissedEmailDto::setAttachmentCount(int32_t value)
{
    m_AttachmentCount = value;
    m_AttachmentCountIsSet = true;
}

bool MissedEmailDto::attachmentCountIsSet() const
{
    return m_AttachmentCountIsSet;
}

void MissedEmailDto::unsetAttachmentCount()
{
    m_AttachmentCountIsSet = false;
}
utility::string_t MissedEmailDto::getFrom() const
{
    return m_From;
}

void MissedEmailDto::setFrom(const utility::string_t& value)
{
    m_From = value;
    m_FromIsSet = true;
}

bool MissedEmailDto::fromIsSet() const
{
    return m_FromIsSet;
}

void MissedEmailDto::unsetFrom()
{
    m_FromIsSet = false;
}
utility::string_t MissedEmailDto::getRawUrl() const
{
    return m_RawUrl;
}

void MissedEmailDto::setRawUrl(const utility::string_t& value)
{
    m_RawUrl = value;
    m_RawUrlIsSet = true;
}

bool MissedEmailDto::rawUrlIsSet() const
{
    return m_RawUrlIsSet;
}

void MissedEmailDto::unsetRawUrl()
{
    m_RawUrlIsSet = false;
}
utility::string_t MissedEmailDto::getRawKey() const
{
    return m_RawKey;
}

void MissedEmailDto::setRawKey(const utility::string_t& value)
{
    m_RawKey = value;
    m_RawKeyIsSet = true;
}

bool MissedEmailDto::rawKeyIsSet() const
{
    return m_RawKeyIsSet;
}

void MissedEmailDto::unsetRawKey()
{
    m_RawKeyIsSet = false;
}
utility::string_t MissedEmailDto::getRawBucket() const
{
    return m_RawBucket;
}

void MissedEmailDto::setRawBucket(const utility::string_t& value)
{
    m_RawBucket = value;
    m_RawBucketIsSet = true;
}

bool MissedEmailDto::rawBucketIsSet() const
{
    return m_RawBucketIsSet;
}

void MissedEmailDto::unsetRawBucket()
{
    m_RawBucketIsSet = false;
}
bool MissedEmailDto::isCanRestore() const
{
    return m_CanRestore;
}

void MissedEmailDto::setCanRestore(bool value)
{
    m_CanRestore = value;
    m_CanRestoreIsSet = true;
}

bool MissedEmailDto::canRestoreIsSet() const
{
    return m_CanRestoreIsSet;
}

void MissedEmailDto::unsetCanRestore()
{
    m_CanRestoreIsSet = false;
}
std::vector<utility::string_t>& MissedEmailDto::getTo()
{
    return m_To;
}

void MissedEmailDto::setTo(const std::vector<utility::string_t>& value)
{
    m_To = value;
    m_ToIsSet = true;
}

bool MissedEmailDto::toIsSet() const
{
    return m_ToIsSet;
}

void MissedEmailDto::unsetTo()
{
    m_ToIsSet = false;
}
std::vector<utility::string_t>& MissedEmailDto::getCc()
{
    return m_Cc;
}

void MissedEmailDto::setCc(const std::vector<utility::string_t>& value)
{
    m_Cc = value;
    m_CcIsSet = true;
}

bool MissedEmailDto::ccIsSet() const
{
    return m_CcIsSet;
}

void MissedEmailDto::unsetCc()
{
    m_CcIsSet = false;
}
std::vector<utility::string_t>& MissedEmailDto::getBcc()
{
    return m_Bcc;
}

void MissedEmailDto::setBcc(const std::vector<utility::string_t>& value)
{
    m_Bcc = value;
    m_BccIsSet = true;
}

bool MissedEmailDto::bccIsSet() const
{
    return m_BccIsSet;
}

void MissedEmailDto::unsetBcc()
{
    m_BccIsSet = false;
}
std::vector<utility::string_t>& MissedEmailDto::getInboxIds()
{
    return m_InboxIds;
}

void MissedEmailDto::setInboxIds(const std::vector<utility::string_t>& value)
{
    m_InboxIds = value;
    m_InboxIdsIsSet = true;
}

bool MissedEmailDto::inboxIdsIsSet() const
{
    return m_InboxIdsIsSet;
}

void MissedEmailDto::unsetInboxIds()
{
    m_InboxIdsIsSet = false;
}
utility::datetime MissedEmailDto::getCreatedAt() const
{
    return m_CreatedAt;
}

void MissedEmailDto::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool MissedEmailDto::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void MissedEmailDto::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::datetime MissedEmailDto::getUpdatedAt() const
{
    return m_UpdatedAt;
}

void MissedEmailDto::setUpdatedAt(const utility::datetime& value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}

bool MissedEmailDto::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void MissedEmailDto::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
}
}
}
}


