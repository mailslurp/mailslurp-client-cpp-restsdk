/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "AliasVerificationResult.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




AliasVerificationResult::AliasVerificationResult()
{
    m_AliasId = utility::conversions::to_string_t("");
    m_AliasIdIsSet = false;
    m_IsVerified = false;
    m_IsVerifiedIsSet = false;
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
}

AliasVerificationResult::~AliasVerificationResult()
{
}

void AliasVerificationResult::validate()
{
    // TODO: implement validation
}

web::json::value AliasVerificationResult::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AliasIdIsSet)
    {
        val[utility::conversions::to_string_t("aliasId")] = ModelBase::toJson(m_AliasId);
    }
    if(m_IsVerifiedIsSet)
    {
        val[utility::conversions::to_string_t("isVerified")] = ModelBase::toJson(m_IsVerified);
    }
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t("message")] = ModelBase::toJson(m_Message);
    }

    return val;
}

bool AliasVerificationResult::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("aliasId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("aliasId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_aliasId;
            ok &= ModelBase::fromJson(fieldValue, refVal_aliasId);
            setAliasId(refVal_aliasId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isVerified")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isVerified"));
        if(!fieldValue.is_null())
        {
            bool refVal_isVerified;
            ok &= ModelBase::fromJson(fieldValue, refVal_isVerified);
            setIsVerified(refVal_isVerified);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("message")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("message"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_message;
            ok &= ModelBase::fromJson(fieldValue, refVal_message);
            setMessage(refVal_message);
        }
    }
    return ok;
}

void AliasVerificationResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_AliasIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("aliasId"), m_AliasId));
    }
    if(m_IsVerifiedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isVerified"), m_IsVerified));
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("message"), m_Message));
    }
}

bool AliasVerificationResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("aliasId")))
    {
        utility::string_t refVal_aliasId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("aliasId")), refVal_aliasId );
        setAliasId(refVal_aliasId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isVerified")))
    {
        bool refVal_isVerified;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isVerified")), refVal_isVerified );
        setIsVerified(refVal_isVerified);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("message")))
    {
        utility::string_t refVal_message;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("message")), refVal_message );
        setMessage(refVal_message);
    }
    return ok;
}

utility::string_t AliasVerificationResult::getAliasId() const
{
    return m_AliasId;
}

void AliasVerificationResult::setAliasId(const utility::string_t& value)
{
    m_AliasId = value;
    m_AliasIdIsSet = true;
}

bool AliasVerificationResult::aliasIdIsSet() const
{
    return m_AliasIdIsSet;
}

void AliasVerificationResult::unsetAliasId()
{
    m_AliasIdIsSet = false;
}
bool AliasVerificationResult::isIsVerified() const
{
    return m_IsVerified;
}

void AliasVerificationResult::setIsVerified(bool value)
{
    m_IsVerified = value;
    m_IsVerifiedIsSet = true;
}

bool AliasVerificationResult::isVerifiedIsSet() const
{
    return m_IsVerifiedIsSet;
}

void AliasVerificationResult::unsetIsVerified()
{
    m_IsVerifiedIsSet = false;
}
utility::string_t AliasVerificationResult::getMessage() const
{
    return m_Message;
}

void AliasVerificationResult::setMessage(const utility::string_t& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}

bool AliasVerificationResult::messageIsSet() const
{
    return m_MessageIsSet;
}

void AliasVerificationResult::unsetMessage()
{
    m_MessageIsSet = false;
}
}
}
}
}


