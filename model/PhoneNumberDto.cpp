/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "PhoneNumberDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




PhoneNumberDto::PhoneNumberDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_ComplianceAddress = utility::conversions::to_string_t("");
    m_ComplianceAddressIsSet = false;
    m_EmergencyAddress = utility::conversions::to_string_t("");
    m_EmergencyAddressIsSet = false;
    m_PhoneNumber = utility::conversions::to_string_t("");
    m_PhoneNumberIsSet = false;
    m_PhoneCountry = utility::conversions::to_string_t("");
    m_PhoneCountryIsSet = false;
    m_PhonePlan = utility::conversions::to_string_t("");
    m_PhonePlanIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_UpdatedAt = utility::datetime();
    m_UpdatedAtIsSet = false;
}

PhoneNumberDto::~PhoneNumberDto()
{
}

void PhoneNumberDto::validate()
{
    // TODO: implement validation
}

web::json::value PhoneNumberDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t("userId")] = ModelBase::toJson(m_UserId);
    }
    if(m_ComplianceAddressIsSet)
    {
        val[utility::conversions::to_string_t("complianceAddress")] = ModelBase::toJson(m_ComplianceAddress);
    }
    if(m_EmergencyAddressIsSet)
    {
        val[utility::conversions::to_string_t("emergencyAddress")] = ModelBase::toJson(m_EmergencyAddress);
    }
    if(m_PhoneNumberIsSet)
    {
        val[utility::conversions::to_string_t("phoneNumber")] = ModelBase::toJson(m_PhoneNumber);
    }
    if(m_PhoneCountryIsSet)
    {
        val[utility::conversions::to_string_t("phoneCountry")] = ModelBase::toJson(m_PhoneCountry);
    }
    if(m_PhonePlanIsSet)
    {
        val[utility::conversions::to_string_t("phonePlan")] = ModelBase::toJson(m_PhonePlan);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t("createdAt")] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_UpdatedAtIsSet)
    {
        val[utility::conversions::to_string_t("updatedAt")] = ModelBase::toJson(m_UpdatedAt);
    }

    return val;
}

bool PhoneNumberDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("userId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("userId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_userId;
            ok &= ModelBase::fromJson(fieldValue, refVal_userId);
            setUserId(refVal_userId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("complianceAddress")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("complianceAddress"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_complianceAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_complianceAddress);
            setComplianceAddress(refVal_complianceAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("emergencyAddress")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("emergencyAddress"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_emergencyAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_emergencyAddress);
            setEmergencyAddress(refVal_emergencyAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("phoneNumber")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("phoneNumber"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_phoneNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_phoneNumber);
            setPhoneNumber(refVal_phoneNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("phoneCountry")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("phoneCountry"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_phoneCountry;
            ok &= ModelBase::fromJson(fieldValue, refVal_phoneCountry);
            setPhoneCountry(refVal_phoneCountry);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("phonePlan")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("phonePlan"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_phonePlan;
            ok &= ModelBase::fromJson(fieldValue, refVal_phonePlan);
            setPhonePlan(refVal_phonePlan);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_createdAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAt);
            setCreatedAt(refVal_createdAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("updatedAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("updatedAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_updatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_updatedAt);
            setUpdatedAt(refVal_updatedAt);
        }
    }
    return ok;
}

void PhoneNumberDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("userId"), m_UserId));
    }
    if(m_ComplianceAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("complianceAddress"), m_ComplianceAddress));
    }
    if(m_EmergencyAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("emergencyAddress"), m_EmergencyAddress));
    }
    if(m_PhoneNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("phoneNumber"), m_PhoneNumber));
    }
    if(m_PhoneCountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("phoneCountry"), m_PhoneCountry));
    }
    if(m_PhonePlanIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("phonePlan"), m_PhonePlan));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("updatedAt"), m_UpdatedAt));
    }
}

bool PhoneNumberDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userId")))
    {
        utility::string_t refVal_userId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("userId")), refVal_userId );
        setUserId(refVal_userId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("complianceAddress")))
    {
        utility::string_t refVal_complianceAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("complianceAddress")), refVal_complianceAddress );
        setComplianceAddress(refVal_complianceAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("emergencyAddress")))
    {
        utility::string_t refVal_emergencyAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("emergencyAddress")), refVal_emergencyAddress );
        setEmergencyAddress(refVal_emergencyAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("phoneNumber")))
    {
        utility::string_t refVal_phoneNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("phoneNumber")), refVal_phoneNumber );
        setPhoneNumber(refVal_phoneNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("phoneCountry")))
    {
        utility::string_t refVal_phoneCountry;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("phoneCountry")), refVal_phoneCountry );
        setPhoneCountry(refVal_phoneCountry);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("phonePlan")))
    {
        utility::string_t refVal_phonePlan;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("phonePlan")), refVal_phonePlan );
        setPhonePlan(refVal_phonePlan);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdAt")))
    {
        utility::datetime refVal_createdAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt")), refVal_createdAt );
        setCreatedAt(refVal_createdAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("updatedAt")))
    {
        utility::datetime refVal_updatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("updatedAt")), refVal_updatedAt );
        setUpdatedAt(refVal_updatedAt);
    }
    return ok;
}

utility::string_t PhoneNumberDto::getId() const
{
    return m_Id;
}

void PhoneNumberDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool PhoneNumberDto::idIsSet() const
{
    return m_IdIsSet;
}

void PhoneNumberDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t PhoneNumberDto::getUserId() const
{
    return m_UserId;
}

void PhoneNumberDto::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool PhoneNumberDto::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void PhoneNumberDto::unsetUserId()
{
    m_UserIdIsSet = false;
}
utility::string_t PhoneNumberDto::getComplianceAddress() const
{
    return m_ComplianceAddress;
}

void PhoneNumberDto::setComplianceAddress(const utility::string_t& value)
{
    m_ComplianceAddress = value;
    m_ComplianceAddressIsSet = true;
}

bool PhoneNumberDto::complianceAddressIsSet() const
{
    return m_ComplianceAddressIsSet;
}

void PhoneNumberDto::unsetComplianceAddress()
{
    m_ComplianceAddressIsSet = false;
}
utility::string_t PhoneNumberDto::getEmergencyAddress() const
{
    return m_EmergencyAddress;
}

void PhoneNumberDto::setEmergencyAddress(const utility::string_t& value)
{
    m_EmergencyAddress = value;
    m_EmergencyAddressIsSet = true;
}

bool PhoneNumberDto::emergencyAddressIsSet() const
{
    return m_EmergencyAddressIsSet;
}

void PhoneNumberDto::unsetEmergencyAddress()
{
    m_EmergencyAddressIsSet = false;
}
utility::string_t PhoneNumberDto::getPhoneNumber() const
{
    return m_PhoneNumber;
}

void PhoneNumberDto::setPhoneNumber(const utility::string_t& value)
{
    m_PhoneNumber = value;
    m_PhoneNumberIsSet = true;
}

bool PhoneNumberDto::phoneNumberIsSet() const
{
    return m_PhoneNumberIsSet;
}

void PhoneNumberDto::unsetPhoneNumber()
{
    m_PhoneNumberIsSet = false;
}
utility::string_t PhoneNumberDto::getPhoneCountry() const
{
    return m_PhoneCountry;
}

void PhoneNumberDto::setPhoneCountry(const utility::string_t& value)
{
    m_PhoneCountry = value;
    m_PhoneCountryIsSet = true;
}

bool PhoneNumberDto::phoneCountryIsSet() const
{
    return m_PhoneCountryIsSet;
}

void PhoneNumberDto::unsetPhoneCountry()
{
    m_PhoneCountryIsSet = false;
}
utility::string_t PhoneNumberDto::getPhonePlan() const
{
    return m_PhonePlan;
}

void PhoneNumberDto::setPhonePlan(const utility::string_t& value)
{
    m_PhonePlan = value;
    m_PhonePlanIsSet = true;
}

bool PhoneNumberDto::phonePlanIsSet() const
{
    return m_PhonePlanIsSet;
}

void PhoneNumberDto::unsetPhonePlan()
{
    m_PhonePlanIsSet = false;
}
utility::datetime PhoneNumberDto::getCreatedAt() const
{
    return m_CreatedAt;
}

void PhoneNumberDto::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool PhoneNumberDto::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void PhoneNumberDto::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::datetime PhoneNumberDto::getUpdatedAt() const
{
    return m_UpdatedAt;
}

void PhoneNumberDto::setUpdatedAt(const utility::datetime& value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}

bool PhoneNumberDto::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void PhoneNumberDto::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
}
}
}
}


