/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * EmailPreviewUrls.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_EmailPreviewUrls_H_
#define COM_MAILSLURP_CLIENT_MODEL_EmailPreviewUrls_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  EmailPreviewUrls
    : public ModelBase
{
public:
    EmailPreviewUrls();
    virtual ~EmailPreviewUrls();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// EmailPreviewUrls members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRawSmtpMessageUrl() const;
    bool rawSmtpMessageUrlIsSet() const;
    void unsetRawSmtpMessageUrl();

    void setRawSmtpMessageUrl(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPlainHtmlBodyUrl() const;
    bool plainHtmlBodyUrlIsSet() const;
    void unsetPlainHtmlBodyUrl();

    void setPlainHtmlBodyUrl(const utility::string_t& value);


protected:
    utility::string_t m_RawSmtpMessageUrl;
    bool m_RawSmtpMessageUrlIsSet;
    utility::string_t m_PlainHtmlBodyUrl;
    bool m_PlainHtmlBodyUrlIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_EmailPreviewUrls_H_ */
