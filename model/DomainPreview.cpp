/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DomainPreview.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




DomainPreview::DomainPreview()
{
    m_CatchAllInboxId = utility::conversions::to_string_t("");
    m_CatchAllInboxIdIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_Domain = utility::conversions::to_string_t("");
    m_DomainIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
}

DomainPreview::~DomainPreview()
{
}

void DomainPreview::validate()
{
    // TODO: implement validation
}

web::json::value DomainPreview::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CatchAllInboxIdIsSet)
    {
        val[utility::conversions::to_string_t("catchAllInboxId")] = ModelBase::toJson(m_CatchAllInboxId);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t("createdAt")] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_DomainIsSet)
    {
        val[utility::conversions::to_string_t("domain")] = ModelBase::toJson(m_Domain);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }

    return val;
}

bool DomainPreview::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("catchAllInboxId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("catchAllInboxId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_catchAllInboxId;
            ok &= ModelBase::fromJson(fieldValue, refVal_catchAllInboxId);
            setCatchAllInboxId(refVal_catchAllInboxId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_createdAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAt);
            setCreatedAt(refVal_createdAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("domain")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("domain"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_domain;
            ok &= ModelBase::fromJson(fieldValue, refVal_domain);
            setDomain(refVal_domain);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    return ok;
}

void DomainPreview::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_CatchAllInboxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("catchAllInboxId"), m_CatchAllInboxId));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    }
    if(m_DomainIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("domain"), m_Domain));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
}

bool DomainPreview::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("catchAllInboxId")))
    {
        utility::string_t refVal_catchAllInboxId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("catchAllInboxId")), refVal_catchAllInboxId );
        setCatchAllInboxId(refVal_catchAllInboxId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdAt")))
    {
        utility::datetime refVal_createdAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt")), refVal_createdAt );
        setCreatedAt(refVal_createdAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("domain")))
    {
        utility::string_t refVal_domain;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("domain")), refVal_domain );
        setDomain(refVal_domain);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    return ok;
}

utility::string_t DomainPreview::getCatchAllInboxId() const
{
    return m_CatchAllInboxId;
}

void DomainPreview::setCatchAllInboxId(const utility::string_t& value)
{
    m_CatchAllInboxId = value;
    m_CatchAllInboxIdIsSet = true;
}

bool DomainPreview::catchAllInboxIdIsSet() const
{
    return m_CatchAllInboxIdIsSet;
}

void DomainPreview::unsetCatchAllInboxId()
{
    m_CatchAllInboxIdIsSet = false;
}
utility::datetime DomainPreview::getCreatedAt() const
{
    return m_CreatedAt;
}

void DomainPreview::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool DomainPreview::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void DomainPreview::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::string_t DomainPreview::getDomain() const
{
    return m_Domain;
}

void DomainPreview::setDomain(const utility::string_t& value)
{
    m_Domain = value;
    m_DomainIsSet = true;
}

bool DomainPreview::domainIsSet() const
{
    return m_DomainIsSet;
}

void DomainPreview::unsetDomain()
{
    m_DomainIsSet = false;
}
utility::string_t DomainPreview::getId() const
{
    return m_Id;
}

void DomainPreview::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool DomainPreview::idIsSet() const
{
    return m_IdIsSet;
}

void DomainPreview::unsetId()
{
    m_IdIsSet = false;
}
}
}
}
}


