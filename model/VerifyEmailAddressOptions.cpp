/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "VerifyEmailAddressOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




VerifyEmailAddressOptions::VerifyEmailAddressOptions()
{
    m_MailServerDomain = utility::conversions::to_string_t("");
    m_MailServerDomainIsSet = false;
    m_EmailAddress = utility::conversions::to_string_t("");
    m_EmailAddressIsSet = false;
    m_SenderEmailAddress = utility::conversions::to_string_t("");
    m_SenderEmailAddressIsSet = false;
    m_Port = 0;
    m_PortIsSet = false;
}

VerifyEmailAddressOptions::~VerifyEmailAddressOptions()
{
}

void VerifyEmailAddressOptions::validate()
{
    // TODO: implement validation
}

web::json::value VerifyEmailAddressOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MailServerDomainIsSet)
    {
        val[utility::conversions::to_string_t("mailServerDomain")] = ModelBase::toJson(m_MailServerDomain);
    }
    if(m_EmailAddressIsSet)
    {
        val[utility::conversions::to_string_t("emailAddress")] = ModelBase::toJson(m_EmailAddress);
    }
    if(m_SenderEmailAddressIsSet)
    {
        val[utility::conversions::to_string_t("senderEmailAddress")] = ModelBase::toJson(m_SenderEmailAddress);
    }
    if(m_PortIsSet)
    {
        val[utility::conversions::to_string_t("port")] = ModelBase::toJson(m_Port);
    }

    return val;
}

bool VerifyEmailAddressOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("mailServerDomain")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mailServerDomain"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_mailServerDomain;
            ok &= ModelBase::fromJson(fieldValue, refVal_mailServerDomain);
            setMailServerDomain(refVal_mailServerDomain);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("emailAddress")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("emailAddress"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_emailAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_emailAddress);
            setEmailAddress(refVal_emailAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("senderEmailAddress")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("senderEmailAddress"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_senderEmailAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_senderEmailAddress);
            setSenderEmailAddress(refVal_senderEmailAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("port")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("port"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_port;
            ok &= ModelBase::fromJson(fieldValue, refVal_port);
            setPort(refVal_port);
        }
    }
    return ok;
}

void VerifyEmailAddressOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_MailServerDomainIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mailServerDomain"), m_MailServerDomain));
    }
    if(m_EmailAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("emailAddress"), m_EmailAddress));
    }
    if(m_SenderEmailAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("senderEmailAddress"), m_SenderEmailAddress));
    }
    if(m_PortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("port"), m_Port));
    }
}

bool VerifyEmailAddressOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("mailServerDomain")))
    {
        utility::string_t refVal_mailServerDomain;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mailServerDomain")), refVal_mailServerDomain );
        setMailServerDomain(refVal_mailServerDomain);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("emailAddress")))
    {
        utility::string_t refVal_emailAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("emailAddress")), refVal_emailAddress );
        setEmailAddress(refVal_emailAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("senderEmailAddress")))
    {
        utility::string_t refVal_senderEmailAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("senderEmailAddress")), refVal_senderEmailAddress );
        setSenderEmailAddress(refVal_senderEmailAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("port")))
    {
        int32_t refVal_port;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("port")), refVal_port );
        setPort(refVal_port);
    }
    return ok;
}

utility::string_t VerifyEmailAddressOptions::getMailServerDomain() const
{
    return m_MailServerDomain;
}

void VerifyEmailAddressOptions::setMailServerDomain(const utility::string_t& value)
{
    m_MailServerDomain = value;
    m_MailServerDomainIsSet = true;
}

bool VerifyEmailAddressOptions::mailServerDomainIsSet() const
{
    return m_MailServerDomainIsSet;
}

void VerifyEmailAddressOptions::unsetMailServerDomain()
{
    m_MailServerDomainIsSet = false;
}
utility::string_t VerifyEmailAddressOptions::getEmailAddress() const
{
    return m_EmailAddress;
}

void VerifyEmailAddressOptions::setEmailAddress(const utility::string_t& value)
{
    m_EmailAddress = value;
    m_EmailAddressIsSet = true;
}

bool VerifyEmailAddressOptions::emailAddressIsSet() const
{
    return m_EmailAddressIsSet;
}

void VerifyEmailAddressOptions::unsetEmailAddress()
{
    m_EmailAddressIsSet = false;
}
utility::string_t VerifyEmailAddressOptions::getSenderEmailAddress() const
{
    return m_SenderEmailAddress;
}

void VerifyEmailAddressOptions::setSenderEmailAddress(const utility::string_t& value)
{
    m_SenderEmailAddress = value;
    m_SenderEmailAddressIsSet = true;
}

bool VerifyEmailAddressOptions::senderEmailAddressIsSet() const
{
    return m_SenderEmailAddressIsSet;
}

void VerifyEmailAddressOptions::unsetSenderEmailAddress()
{
    m_SenderEmailAddressIsSet = false;
}
int32_t VerifyEmailAddressOptions::getPort() const
{
    return m_Port;
}

void VerifyEmailAddressOptions::setPort(int32_t value)
{
    m_Port = value;
    m_PortIsSet = true;
}

bool VerifyEmailAddressOptions::portIsSet() const
{
    return m_PortIsSet;
}

void VerifyEmailAddressOptions::unsetPort()
{
    m_PortIsSet = false;
}
}
}
}
}


