/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "EmailLinksResult.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




EmailLinksResult::EmailLinksResult()
{
    m_LinksIsSet = false;
    m_Body = utility::conversions::to_string_t("");
    m_BodyIsSet = false;
}

EmailLinksResult::~EmailLinksResult()
{
}

void EmailLinksResult::validate()
{
    // TODO: implement validation
}

web::json::value EmailLinksResult::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_LinksIsSet)
    {
        val[utility::conversions::to_string_t("links")] = ModelBase::toJson(m_Links);
    }
    if(m_BodyIsSet)
    {
        val[utility::conversions::to_string_t("body")] = ModelBase::toJson(m_Body);
    }

    return val;
}

bool EmailLinksResult::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("links")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("links"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_links;
            ok &= ModelBase::fromJson(fieldValue, refVal_links);
            setLinks(refVal_links);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("body")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("body"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_body;
            ok &= ModelBase::fromJson(fieldValue, refVal_body);
            setBody(refVal_body);
        }
    }
    return ok;
}

void EmailLinksResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_LinksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("links"), m_Links));
    }
    if(m_BodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("body"), m_Body));
    }
}

bool EmailLinksResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("links")))
    {
        std::vector<utility::string_t> refVal_links;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("links")), refVal_links );
        setLinks(refVal_links);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("body")))
    {
        utility::string_t refVal_body;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("body")), refVal_body );
        setBody(refVal_body);
    }
    return ok;
}

std::vector<utility::string_t>& EmailLinksResult::getLinks()
{
    return m_Links;
}

void EmailLinksResult::setLinks(const std::vector<utility::string_t>& value)
{
    m_Links = value;
    m_LinksIsSet = true;
}

bool EmailLinksResult::linksIsSet() const
{
    return m_LinksIsSet;
}

void EmailLinksResult::unsetLinks()
{
    m_LinksIsSet = false;
}
utility::string_t EmailLinksResult::getBody() const
{
    return m_Body;
}

void EmailLinksResult::setBody(const utility::string_t& value)
{
    m_Body = value;
    m_BodyIsSet = true;
}

bool EmailLinksResult::bodyIsSet() const
{
    return m_BodyIsSet;
}

void EmailLinksResult::unsetBody()
{
    m_BodyIsSet = false;
}
}
}
}
}


