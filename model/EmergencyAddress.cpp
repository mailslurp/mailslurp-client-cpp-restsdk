/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "EmergencyAddress.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




EmergencyAddress::EmergencyAddress()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Sid = utility::conversions::to_string_t("");
    m_SidIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_DisplayName = utility::conversions::to_string_t("");
    m_DisplayNameIsSet = false;
    m_CustomerName = utility::conversions::to_string_t("");
    m_CustomerNameIsSet = false;
    m_Address1 = utility::conversions::to_string_t("");
    m_Address1IsSet = false;
    m_City = utility::conversions::to_string_t("");
    m_CityIsSet = false;
    m_Region = utility::conversions::to_string_t("");
    m_RegionIsSet = false;
    m_PostalCode = utility::conversions::to_string_t("");
    m_PostalCodeIsSet = false;
    m_PhoneCountry = utility::conversions::to_string_t("");
    m_PhoneCountryIsSet = false;
    m_AccountSid = utility::conversions::to_string_t("");
    m_AccountSidIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_UpdatedAt = utility::datetime();
    m_UpdatedAtIsSet = false;
}

EmergencyAddress::~EmergencyAddress()
{
}

void EmergencyAddress::validate()
{
    // TODO: implement validation
}

web::json::value EmergencyAddress::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_SidIsSet)
    {
        val[utility::conversions::to_string_t("sid")] = ModelBase::toJson(m_Sid);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t("userId")] = ModelBase::toJson(m_UserId);
    }
    if(m_DisplayNameIsSet)
    {
        val[utility::conversions::to_string_t("displayName")] = ModelBase::toJson(m_DisplayName);
    }
    if(m_CustomerNameIsSet)
    {
        val[utility::conversions::to_string_t("customerName")] = ModelBase::toJson(m_CustomerName);
    }
    if(m_Address1IsSet)
    {
        val[utility::conversions::to_string_t("address1")] = ModelBase::toJson(m_Address1);
    }
    if(m_CityIsSet)
    {
        val[utility::conversions::to_string_t("city")] = ModelBase::toJson(m_City);
    }
    if(m_RegionIsSet)
    {
        val[utility::conversions::to_string_t("region")] = ModelBase::toJson(m_Region);
    }
    if(m_PostalCodeIsSet)
    {
        val[utility::conversions::to_string_t("postalCode")] = ModelBase::toJson(m_PostalCode);
    }
    if(m_PhoneCountryIsSet)
    {
        val[utility::conversions::to_string_t("phoneCountry")] = ModelBase::toJson(m_PhoneCountry);
    }
    if(m_AccountSidIsSet)
    {
        val[utility::conversions::to_string_t("accountSid")] = ModelBase::toJson(m_AccountSid);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t("createdAt")] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_UpdatedAtIsSet)
    {
        val[utility::conversions::to_string_t("updatedAt")] = ModelBase::toJson(m_UpdatedAt);
    }

    return val;
}

bool EmergencyAddress::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sid")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sid"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sid;
            ok &= ModelBase::fromJson(fieldValue, refVal_sid);
            setSid(refVal_sid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("userId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("userId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_userId;
            ok &= ModelBase::fromJson(fieldValue, refVal_userId);
            setUserId(refVal_userId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("displayName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("displayName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_displayName;
            ok &= ModelBase::fromJson(fieldValue, refVal_displayName);
            setDisplayName(refVal_displayName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("customerName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("customerName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_customerName;
            ok &= ModelBase::fromJson(fieldValue, refVal_customerName);
            setCustomerName(refVal_customerName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("address1")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("address1"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_address1;
            ok &= ModelBase::fromJson(fieldValue, refVal_address1);
            setAddress1(refVal_address1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("city")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("city"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_city;
            ok &= ModelBase::fromJson(fieldValue, refVal_city);
            setCity(refVal_city);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("region")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("region"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_region;
            ok &= ModelBase::fromJson(fieldValue, refVal_region);
            setRegion(refVal_region);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("postalCode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("postalCode"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_postalCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_postalCode);
            setPostalCode(refVal_postalCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("phoneCountry")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("phoneCountry"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_phoneCountry;
            ok &= ModelBase::fromJson(fieldValue, refVal_phoneCountry);
            setPhoneCountry(refVal_phoneCountry);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("accountSid")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("accountSid"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_accountSid;
            ok &= ModelBase::fromJson(fieldValue, refVal_accountSid);
            setAccountSid(refVal_accountSid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_createdAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAt);
            setCreatedAt(refVal_createdAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("updatedAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("updatedAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_updatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_updatedAt);
            setUpdatedAt(refVal_updatedAt);
        }
    }
    return ok;
}

void EmergencyAddress::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_SidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sid"), m_Sid));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("userId"), m_UserId));
    }
    if(m_DisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("displayName"), m_DisplayName));
    }
    if(m_CustomerNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("customerName"), m_CustomerName));
    }
    if(m_Address1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("address1"), m_Address1));
    }
    if(m_CityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("city"), m_City));
    }
    if(m_RegionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("region"), m_Region));
    }
    if(m_PostalCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("postalCode"), m_PostalCode));
    }
    if(m_PhoneCountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("phoneCountry"), m_PhoneCountry));
    }
    if(m_AccountSidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("accountSid"), m_AccountSid));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("updatedAt"), m_UpdatedAt));
    }
}

bool EmergencyAddress::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sid")))
    {
        utility::string_t refVal_sid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sid")), refVal_sid );
        setSid(refVal_sid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userId")))
    {
        utility::string_t refVal_userId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("userId")), refVal_userId );
        setUserId(refVal_userId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("displayName")))
    {
        utility::string_t refVal_displayName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("displayName")), refVal_displayName );
        setDisplayName(refVal_displayName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("customerName")))
    {
        utility::string_t refVal_customerName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("customerName")), refVal_customerName );
        setCustomerName(refVal_customerName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("address1")))
    {
        utility::string_t refVal_address1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("address1")), refVal_address1 );
        setAddress1(refVal_address1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("city")))
    {
        utility::string_t refVal_city;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("city")), refVal_city );
        setCity(refVal_city);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("region")))
    {
        utility::string_t refVal_region;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("region")), refVal_region );
        setRegion(refVal_region);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("postalCode")))
    {
        utility::string_t refVal_postalCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("postalCode")), refVal_postalCode );
        setPostalCode(refVal_postalCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("phoneCountry")))
    {
        utility::string_t refVal_phoneCountry;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("phoneCountry")), refVal_phoneCountry );
        setPhoneCountry(refVal_phoneCountry);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("accountSid")))
    {
        utility::string_t refVal_accountSid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("accountSid")), refVal_accountSid );
        setAccountSid(refVal_accountSid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdAt")))
    {
        utility::datetime refVal_createdAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt")), refVal_createdAt );
        setCreatedAt(refVal_createdAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("updatedAt")))
    {
        utility::datetime refVal_updatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("updatedAt")), refVal_updatedAt );
        setUpdatedAt(refVal_updatedAt);
    }
    return ok;
}

utility::string_t EmergencyAddress::getId() const
{
    return m_Id;
}

void EmergencyAddress::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool EmergencyAddress::idIsSet() const
{
    return m_IdIsSet;
}

void EmergencyAddress::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t EmergencyAddress::getSid() const
{
    return m_Sid;
}

void EmergencyAddress::setSid(const utility::string_t& value)
{
    m_Sid = value;
    m_SidIsSet = true;
}

bool EmergencyAddress::sidIsSet() const
{
    return m_SidIsSet;
}

void EmergencyAddress::unsetSid()
{
    m_SidIsSet = false;
}
utility::string_t EmergencyAddress::getUserId() const
{
    return m_UserId;
}

void EmergencyAddress::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool EmergencyAddress::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void EmergencyAddress::unsetUserId()
{
    m_UserIdIsSet = false;
}
utility::string_t EmergencyAddress::getDisplayName() const
{
    return m_DisplayName;
}

void EmergencyAddress::setDisplayName(const utility::string_t& value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}

bool EmergencyAddress::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}

void EmergencyAddress::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}
utility::string_t EmergencyAddress::getCustomerName() const
{
    return m_CustomerName;
}

void EmergencyAddress::setCustomerName(const utility::string_t& value)
{
    m_CustomerName = value;
    m_CustomerNameIsSet = true;
}

bool EmergencyAddress::customerNameIsSet() const
{
    return m_CustomerNameIsSet;
}

void EmergencyAddress::unsetCustomerName()
{
    m_CustomerNameIsSet = false;
}
utility::string_t EmergencyAddress::getAddress1() const
{
    return m_Address1;
}

void EmergencyAddress::setAddress1(const utility::string_t& value)
{
    m_Address1 = value;
    m_Address1IsSet = true;
}

bool EmergencyAddress::address1IsSet() const
{
    return m_Address1IsSet;
}

void EmergencyAddress::unsetAddress1()
{
    m_Address1IsSet = false;
}
utility::string_t EmergencyAddress::getCity() const
{
    return m_City;
}

void EmergencyAddress::setCity(const utility::string_t& value)
{
    m_City = value;
    m_CityIsSet = true;
}

bool EmergencyAddress::cityIsSet() const
{
    return m_CityIsSet;
}

void EmergencyAddress::unsetCity()
{
    m_CityIsSet = false;
}
utility::string_t EmergencyAddress::getRegion() const
{
    return m_Region;
}

void EmergencyAddress::setRegion(const utility::string_t& value)
{
    m_Region = value;
    m_RegionIsSet = true;
}

bool EmergencyAddress::regionIsSet() const
{
    return m_RegionIsSet;
}

void EmergencyAddress::unsetRegion()
{
    m_RegionIsSet = false;
}
utility::string_t EmergencyAddress::getPostalCode() const
{
    return m_PostalCode;
}

void EmergencyAddress::setPostalCode(const utility::string_t& value)
{
    m_PostalCode = value;
    m_PostalCodeIsSet = true;
}

bool EmergencyAddress::postalCodeIsSet() const
{
    return m_PostalCodeIsSet;
}

void EmergencyAddress::unsetPostalCode()
{
    m_PostalCodeIsSet = false;
}
utility::string_t EmergencyAddress::getPhoneCountry() const
{
    return m_PhoneCountry;
}

void EmergencyAddress::setPhoneCountry(const utility::string_t& value)
{
    m_PhoneCountry = value;
    m_PhoneCountryIsSet = true;
}

bool EmergencyAddress::phoneCountryIsSet() const
{
    return m_PhoneCountryIsSet;
}

void EmergencyAddress::unsetPhoneCountry()
{
    m_PhoneCountryIsSet = false;
}
utility::string_t EmergencyAddress::getAccountSid() const
{
    return m_AccountSid;
}

void EmergencyAddress::setAccountSid(const utility::string_t& value)
{
    m_AccountSid = value;
    m_AccountSidIsSet = true;
}

bool EmergencyAddress::accountSidIsSet() const
{
    return m_AccountSidIsSet;
}

void EmergencyAddress::unsetAccountSid()
{
    m_AccountSidIsSet = false;
}
utility::datetime EmergencyAddress::getCreatedAt() const
{
    return m_CreatedAt;
}

void EmergencyAddress::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool EmergencyAddress::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void EmergencyAddress::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::datetime EmergencyAddress::getUpdatedAt() const
{
    return m_UpdatedAt;
}

void EmergencyAddress::setUpdatedAt(const utility::datetime& value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}

bool EmergencyAddress::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void EmergencyAddress::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
}
}
}
}


