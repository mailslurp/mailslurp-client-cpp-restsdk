/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "DeliveryStatusDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




DeliveryStatusDto::DeliveryStatusDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_SentId = utility::conversions::to_string_t("");
    m_SentIdIsSet = false;
    m_RemoteMtaIp = utility::conversions::to_string_t("");
    m_RemoteMtaIpIsSet = false;
    m_InboxId = utility::conversions::to_string_t("");
    m_InboxIdIsSet = false;
    m_ReportingMta = utility::conversions::to_string_t("");
    m_ReportingMtaIsSet = false;
    m_RecipientsIsSet = false;
    m_SmtpResponse = utility::conversions::to_string_t("");
    m_SmtpResponseIsSet = false;
    m_SmtpStatusCode = 0;
    m_SmtpStatusCodeIsSet = false;
    m_ProcessingTimeMillis = 0L;
    m_ProcessingTimeMillisIsSet = false;
    m_Received = utility::datetime();
    m_ReceivedIsSet = false;
    m_Subject = utility::conversions::to_string_t("");
    m_SubjectIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_UpdatedAt = utility::datetime();
    m_UpdatedAtIsSet = false;
}

DeliveryStatusDto::~DeliveryStatusDto()
{
}

void DeliveryStatusDto::validate()
{
    // TODO: implement validation
}

web::json::value DeliveryStatusDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t("userId")] = ModelBase::toJson(m_UserId);
    }
    if(m_SentIdIsSet)
    {
        val[utility::conversions::to_string_t("sentId")] = ModelBase::toJson(m_SentId);
    }
    if(m_RemoteMtaIpIsSet)
    {
        val[utility::conversions::to_string_t("remoteMtaIp")] = ModelBase::toJson(m_RemoteMtaIp);
    }
    if(m_InboxIdIsSet)
    {
        val[utility::conversions::to_string_t("inboxId")] = ModelBase::toJson(m_InboxId);
    }
    if(m_ReportingMtaIsSet)
    {
        val[utility::conversions::to_string_t("reportingMta")] = ModelBase::toJson(m_ReportingMta);
    }
    if(m_RecipientsIsSet)
    {
        val[utility::conversions::to_string_t("recipients")] = ModelBase::toJson(m_Recipients);
    }
    if(m_SmtpResponseIsSet)
    {
        val[utility::conversions::to_string_t("smtpResponse")] = ModelBase::toJson(m_SmtpResponse);
    }
    if(m_SmtpStatusCodeIsSet)
    {
        val[utility::conversions::to_string_t("smtpStatusCode")] = ModelBase::toJson(m_SmtpStatusCode);
    }
    if(m_ProcessingTimeMillisIsSet)
    {
        val[utility::conversions::to_string_t("processingTimeMillis")] = ModelBase::toJson(m_ProcessingTimeMillis);
    }
    if(m_ReceivedIsSet)
    {
        val[utility::conversions::to_string_t("received")] = ModelBase::toJson(m_Received);
    }
    if(m_SubjectIsSet)
    {
        val[utility::conversions::to_string_t("subject")] = ModelBase::toJson(m_Subject);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t("createdAt")] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_UpdatedAtIsSet)
    {
        val[utility::conversions::to_string_t("updatedAt")] = ModelBase::toJson(m_UpdatedAt);
    }

    return val;
}

bool DeliveryStatusDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("userId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("userId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_userId;
            ok &= ModelBase::fromJson(fieldValue, refVal_userId);
            setUserId(refVal_userId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("sentId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("sentId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_sentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_sentId);
            setSentId(refVal_sentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("remoteMtaIp")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("remoteMtaIp"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_remoteMtaIp;
            ok &= ModelBase::fromJson(fieldValue, refVal_remoteMtaIp);
            setRemoteMtaIp(refVal_remoteMtaIp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("inboxId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("inboxId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_inboxId;
            ok &= ModelBase::fromJson(fieldValue, refVal_inboxId);
            setInboxId(refVal_inboxId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("reportingMta")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("reportingMta"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_reportingMta;
            ok &= ModelBase::fromJson(fieldValue, refVal_reportingMta);
            setReportingMta(refVal_reportingMta);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("recipients")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("recipients"));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_recipients;
            ok &= ModelBase::fromJson(fieldValue, refVal_recipients);
            setRecipients(refVal_recipients);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("smtpResponse")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("smtpResponse"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_smtpResponse;
            ok &= ModelBase::fromJson(fieldValue, refVal_smtpResponse);
            setSmtpResponse(refVal_smtpResponse);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("smtpStatusCode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("smtpStatusCode"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_smtpStatusCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_smtpStatusCode);
            setSmtpStatusCode(refVal_smtpStatusCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("processingTimeMillis")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("processingTimeMillis"));
        if(!fieldValue.is_null())
        {
            int64_t refVal_processingTimeMillis;
            ok &= ModelBase::fromJson(fieldValue, refVal_processingTimeMillis);
            setProcessingTimeMillis(refVal_processingTimeMillis);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("received")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("received"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_received;
            ok &= ModelBase::fromJson(fieldValue, refVal_received);
            setReceived(refVal_received);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("subject")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("subject"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_subject;
            ok &= ModelBase::fromJson(fieldValue, refVal_subject);
            setSubject(refVal_subject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_createdAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAt);
            setCreatedAt(refVal_createdAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("updatedAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("updatedAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_updatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_updatedAt);
            setUpdatedAt(refVal_updatedAt);
        }
    }
    return ok;
}

void DeliveryStatusDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("userId"), m_UserId));
    }
    if(m_SentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("sentId"), m_SentId));
    }
    if(m_RemoteMtaIpIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("remoteMtaIp"), m_RemoteMtaIp));
    }
    if(m_InboxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("inboxId"), m_InboxId));
    }
    if(m_ReportingMtaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("reportingMta"), m_ReportingMta));
    }
    if(m_RecipientsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("recipients"), m_Recipients));
    }
    if(m_SmtpResponseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("smtpResponse"), m_SmtpResponse));
    }
    if(m_SmtpStatusCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("smtpStatusCode"), m_SmtpStatusCode));
    }
    if(m_ProcessingTimeMillisIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("processingTimeMillis"), m_ProcessingTimeMillis));
    }
    if(m_ReceivedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("received"), m_Received));
    }
    if(m_SubjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("subject"), m_Subject));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("updatedAt"), m_UpdatedAt));
    }
}

bool DeliveryStatusDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userId")))
    {
        utility::string_t refVal_userId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("userId")), refVal_userId );
        setUserId(refVal_userId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("sentId")))
    {
        utility::string_t refVal_sentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("sentId")), refVal_sentId );
        setSentId(refVal_sentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("remoteMtaIp")))
    {
        utility::string_t refVal_remoteMtaIp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("remoteMtaIp")), refVal_remoteMtaIp );
        setRemoteMtaIp(refVal_remoteMtaIp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("inboxId")))
    {
        utility::string_t refVal_inboxId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("inboxId")), refVal_inboxId );
        setInboxId(refVal_inboxId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("reportingMta")))
    {
        utility::string_t refVal_reportingMta;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("reportingMta")), refVal_reportingMta );
        setReportingMta(refVal_reportingMta);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("recipients")))
    {
        std::vector<utility::string_t> refVal_recipients;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("recipients")), refVal_recipients );
        setRecipients(refVal_recipients);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("smtpResponse")))
    {
        utility::string_t refVal_smtpResponse;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("smtpResponse")), refVal_smtpResponse );
        setSmtpResponse(refVal_smtpResponse);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("smtpStatusCode")))
    {
        int32_t refVal_smtpStatusCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("smtpStatusCode")), refVal_smtpStatusCode );
        setSmtpStatusCode(refVal_smtpStatusCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("processingTimeMillis")))
    {
        int64_t refVal_processingTimeMillis;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("processingTimeMillis")), refVal_processingTimeMillis );
        setProcessingTimeMillis(refVal_processingTimeMillis);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("received")))
    {
        utility::datetime refVal_received;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("received")), refVal_received );
        setReceived(refVal_received);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("subject")))
    {
        utility::string_t refVal_subject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("subject")), refVal_subject );
        setSubject(refVal_subject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdAt")))
    {
        utility::datetime refVal_createdAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt")), refVal_createdAt );
        setCreatedAt(refVal_createdAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("updatedAt")))
    {
        utility::datetime refVal_updatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("updatedAt")), refVal_updatedAt );
        setUpdatedAt(refVal_updatedAt);
    }
    return ok;
}

utility::string_t DeliveryStatusDto::getId() const
{
    return m_Id;
}

void DeliveryStatusDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool DeliveryStatusDto::idIsSet() const
{
    return m_IdIsSet;
}

void DeliveryStatusDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t DeliveryStatusDto::getUserId() const
{
    return m_UserId;
}

void DeliveryStatusDto::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool DeliveryStatusDto::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void DeliveryStatusDto::unsetUserId()
{
    m_UserIdIsSet = false;
}
utility::string_t DeliveryStatusDto::getSentId() const
{
    return m_SentId;
}

void DeliveryStatusDto::setSentId(const utility::string_t& value)
{
    m_SentId = value;
    m_SentIdIsSet = true;
}

bool DeliveryStatusDto::sentIdIsSet() const
{
    return m_SentIdIsSet;
}

void DeliveryStatusDto::unsetSentId()
{
    m_SentIdIsSet = false;
}
utility::string_t DeliveryStatusDto::getRemoteMtaIp() const
{
    return m_RemoteMtaIp;
}

void DeliveryStatusDto::setRemoteMtaIp(const utility::string_t& value)
{
    m_RemoteMtaIp = value;
    m_RemoteMtaIpIsSet = true;
}

bool DeliveryStatusDto::remoteMtaIpIsSet() const
{
    return m_RemoteMtaIpIsSet;
}

void DeliveryStatusDto::unsetRemoteMtaIp()
{
    m_RemoteMtaIpIsSet = false;
}
utility::string_t DeliveryStatusDto::getInboxId() const
{
    return m_InboxId;
}

void DeliveryStatusDto::setInboxId(const utility::string_t& value)
{
    m_InboxId = value;
    m_InboxIdIsSet = true;
}

bool DeliveryStatusDto::inboxIdIsSet() const
{
    return m_InboxIdIsSet;
}

void DeliveryStatusDto::unsetInboxId()
{
    m_InboxIdIsSet = false;
}
utility::string_t DeliveryStatusDto::getReportingMta() const
{
    return m_ReportingMta;
}

void DeliveryStatusDto::setReportingMta(const utility::string_t& value)
{
    m_ReportingMta = value;
    m_ReportingMtaIsSet = true;
}

bool DeliveryStatusDto::reportingMtaIsSet() const
{
    return m_ReportingMtaIsSet;
}

void DeliveryStatusDto::unsetReportingMta()
{
    m_ReportingMtaIsSet = false;
}
std::vector<utility::string_t>& DeliveryStatusDto::getRecipients()
{
    return m_Recipients;
}

void DeliveryStatusDto::setRecipients(const std::vector<utility::string_t>& value)
{
    m_Recipients = value;
    m_RecipientsIsSet = true;
}

bool DeliveryStatusDto::recipientsIsSet() const
{
    return m_RecipientsIsSet;
}

void DeliveryStatusDto::unsetRecipients()
{
    m_RecipientsIsSet = false;
}
utility::string_t DeliveryStatusDto::getSmtpResponse() const
{
    return m_SmtpResponse;
}

void DeliveryStatusDto::setSmtpResponse(const utility::string_t& value)
{
    m_SmtpResponse = value;
    m_SmtpResponseIsSet = true;
}

bool DeliveryStatusDto::smtpResponseIsSet() const
{
    return m_SmtpResponseIsSet;
}

void DeliveryStatusDto::unsetSmtpResponse()
{
    m_SmtpResponseIsSet = false;
}
int32_t DeliveryStatusDto::getSmtpStatusCode() const
{
    return m_SmtpStatusCode;
}

void DeliveryStatusDto::setSmtpStatusCode(int32_t value)
{
    m_SmtpStatusCode = value;
    m_SmtpStatusCodeIsSet = true;
}

bool DeliveryStatusDto::smtpStatusCodeIsSet() const
{
    return m_SmtpStatusCodeIsSet;
}

void DeliveryStatusDto::unsetSmtpStatusCode()
{
    m_SmtpStatusCodeIsSet = false;
}
int64_t DeliveryStatusDto::getProcessingTimeMillis() const
{
    return m_ProcessingTimeMillis;
}

void DeliveryStatusDto::setProcessingTimeMillis(int64_t value)
{
    m_ProcessingTimeMillis = value;
    m_ProcessingTimeMillisIsSet = true;
}

bool DeliveryStatusDto::processingTimeMillisIsSet() const
{
    return m_ProcessingTimeMillisIsSet;
}

void DeliveryStatusDto::unsetProcessingTimeMillis()
{
    m_ProcessingTimeMillisIsSet = false;
}
utility::datetime DeliveryStatusDto::getReceived() const
{
    return m_Received;
}

void DeliveryStatusDto::setReceived(const utility::datetime& value)
{
    m_Received = value;
    m_ReceivedIsSet = true;
}

bool DeliveryStatusDto::receivedIsSet() const
{
    return m_ReceivedIsSet;
}

void DeliveryStatusDto::unsetReceived()
{
    m_ReceivedIsSet = false;
}
utility::string_t DeliveryStatusDto::getSubject() const
{
    return m_Subject;
}

void DeliveryStatusDto::setSubject(const utility::string_t& value)
{
    m_Subject = value;
    m_SubjectIsSet = true;
}

bool DeliveryStatusDto::subjectIsSet() const
{
    return m_SubjectIsSet;
}

void DeliveryStatusDto::unsetSubject()
{
    m_SubjectIsSet = false;
}
utility::datetime DeliveryStatusDto::getCreatedAt() const
{
    return m_CreatedAt;
}

void DeliveryStatusDto::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool DeliveryStatusDto::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void DeliveryStatusDto::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::datetime DeliveryStatusDto::getUpdatedAt() const
{
    return m_UpdatedAt;
}

void DeliveryStatusDto::setUpdatedAt(const utility::datetime& value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}

bool DeliveryStatusDto::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void DeliveryStatusDto::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
}
}
}
}


