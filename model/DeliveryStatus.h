/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DeliveryStatus.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_DeliveryStatus_H_
#define COM_MAILSLURP_CLIENT_MODEL_DeliveryStatus_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  DeliveryStatus
    : public ModelBase
{
public:
    DeliveryStatus();
    virtual ~DeliveryStatus();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// DeliveryStatus members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUserId() const;
    bool userIdIsSet() const;
    void unsetUserId();

    void setUserId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSentId() const;
    bool sentIdIsSet() const;
    void unsetSentId();

    void setSentId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRemoteMtaIp() const;
    bool remoteMtaIpIsSet() const;
    void unsetRemoteMtaIp();

    void setRemoteMtaIp(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getInboxId() const;
    bool inboxIdIsSet() const;
    void unsetInboxId();

    void setInboxId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getReportingMta() const;
    bool reportingMtaIsSet() const;
    void unsetReportingMta();

    void setReportingMta(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getRecipients();
    bool recipientsIsSet() const;
    void unsetRecipients();

    void setRecipients(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSmtpResponse() const;
    bool smtpResponseIsSet() const;
    void unsetSmtpResponse();

    void setSmtpResponse(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getProcessingTimeMillis() const;
    bool processingTimeMillisIsSet() const;
    void unsetProcessingTimeMillis();

    void setProcessingTimeMillis(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getReceived() const;
    bool receivedIsSet() const;
    void unsetReceived();

    void setReceived(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSubject() const;
    bool subjectIsSet() const;
    void unsetSubject();

    void setSubject(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreatedAt();

    void setCreatedAt(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getUpdatedAt() const;
    bool updatedAtIsSet() const;
    void unsetUpdatedAt();

    void setUpdatedAt(const utility::datetime& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_UserId;
    bool m_UserIdIsSet;
    utility::string_t m_SentId;
    bool m_SentIdIsSet;
    utility::string_t m_RemoteMtaIp;
    bool m_RemoteMtaIpIsSet;
    utility::string_t m_InboxId;
    bool m_InboxIdIsSet;
    utility::string_t m_ReportingMta;
    bool m_ReportingMtaIsSet;
    std::vector<utility::string_t> m_Recipients;
    bool m_RecipientsIsSet;
    utility::string_t m_SmtpResponse;
    bool m_SmtpResponseIsSet;
    int64_t m_ProcessingTimeMillis;
    bool m_ProcessingTimeMillisIsSet;
    utility::datetime m_Received;
    bool m_ReceivedIsSet;
    utility::string_t m_Subject;
    bool m_SubjectIsSet;
    utility::datetime m_CreatedAt;
    bool m_CreatedAtIsSet;
    utility::datetime m_UpdatedAt;
    bool m_UpdatedAtIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_DeliveryStatus_H_ */
