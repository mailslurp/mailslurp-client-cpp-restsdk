/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "SmsMatchOption.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




SmsMatchOption::SmsMatchOption()
{
    m_Field = utility::conversions::to_string_t("");
    m_FieldIsSet = false;
    m_Should = utility::conversions::to_string_t("");
    m_ShouldIsSet = false;
    m_Value = utility::conversions::to_string_t("");
    m_ValueIsSet = false;
}

SmsMatchOption::~SmsMatchOption()
{
}

void SmsMatchOption::validate()
{
    // TODO: implement validation
}

web::json::value SmsMatchOption::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FieldIsSet)
    {
        val[utility::conversions::to_string_t("field")] = ModelBase::toJson(m_Field);
    }
    if(m_ShouldIsSet)
    {
        val[utility::conversions::to_string_t("should")] = ModelBase::toJson(m_Should);
    }
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t("value")] = ModelBase::toJson(m_Value);
    }

    return val;
}

bool SmsMatchOption::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("field")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("field"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_field;
            ok &= ModelBase::fromJson(fieldValue, refVal_field);
            setField(refVal_field);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("should")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("should"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_should;
            ok &= ModelBase::fromJson(fieldValue, refVal_should);
            setShould(refVal_should);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("value")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("value"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_value;
            ok &= ModelBase::fromJson(fieldValue, refVal_value);
            setValue(refVal_value);
        }
    }
    return ok;
}

void SmsMatchOption::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_FieldIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("field"), m_Field));
    }
    if(m_ShouldIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("should"), m_Should));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("value"), m_Value));
    }
}

bool SmsMatchOption::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("field")))
    {
        utility::string_t refVal_field;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("field")), refVal_field );
        setField(refVal_field);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("should")))
    {
        utility::string_t refVal_should;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("should")), refVal_should );
        setShould(refVal_should);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("value")))
    {
        utility::string_t refVal_value;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("value")), refVal_value );
        setValue(refVal_value);
    }
    return ok;
}

utility::string_t SmsMatchOption::getField() const
{
    return m_Field;
}

void SmsMatchOption::setField(const utility::string_t& value)
{
    m_Field = value;
    m_FieldIsSet = true;
}

bool SmsMatchOption::fieldIsSet() const
{
    return m_FieldIsSet;
}

void SmsMatchOption::unsetField()
{
    m_FieldIsSet = false;
}
utility::string_t SmsMatchOption::getShould() const
{
    return m_Should;
}

void SmsMatchOption::setShould(const utility::string_t& value)
{
    m_Should = value;
    m_ShouldIsSet = true;
}

bool SmsMatchOption::shouldIsSet() const
{
    return m_ShouldIsSet;
}

void SmsMatchOption::unsetShould()
{
    m_ShouldIsSet = false;
}
utility::string_t SmsMatchOption::getValue() const
{
    return m_Value;
}

void SmsMatchOption::setValue(const utility::string_t& value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool SmsMatchOption::valueIsSet() const
{
    return m_ValueIsSet;
}

void SmsMatchOption::unsetValue()
{
    m_ValueIsSet = false;
}
}
}
}
}


