/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "WebhookTestResponse.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




WebhookTestResponse::WebhookTestResponse()
{
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
    m_StatusCode = 0;
    m_StatusCodeIsSet = false;
}

WebhookTestResponse::~WebhookTestResponse()
{
}

void WebhookTestResponse::validate()
{
    // TODO: implement validation
}

web::json::value WebhookTestResponse::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t("message")] = ModelBase::toJson(m_Message);
    }
    if(m_StatusCodeIsSet)
    {
        val[utility::conversions::to_string_t("statusCode")] = ModelBase::toJson(m_StatusCode);
    }

    return val;
}

bool WebhookTestResponse::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("message")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("message"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_message;
            ok &= ModelBase::fromJson(fieldValue, refVal_message);
            setMessage(refVal_message);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("statusCode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("statusCode"));
        if(!fieldValue.is_null())
        {
            int32_t refVal_statusCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_statusCode);
            setStatusCode(refVal_statusCode);
        }
    }
    return ok;
}

void WebhookTestResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("message"), m_Message));
    }
    if(m_StatusCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("statusCode"), m_StatusCode));
    }
}

bool WebhookTestResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("message")))
    {
        utility::string_t refVal_message;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("message")), refVal_message );
        setMessage(refVal_message);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("statusCode")))
    {
        int32_t refVal_statusCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("statusCode")), refVal_statusCode );
        setStatusCode(refVal_statusCode);
    }
    return ok;
}

utility::string_t WebhookTestResponse::getMessage() const
{
    return m_Message;
}

void WebhookTestResponse::setMessage(const utility::string_t& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}

bool WebhookTestResponse::messageIsSet() const
{
    return m_MessageIsSet;
}

void WebhookTestResponse::unsetMessage()
{
    m_MessageIsSet = false;
}
int32_t WebhookTestResponse::getStatusCode() const
{
    return m_StatusCode;
}

void WebhookTestResponse::setStatusCode(int32_t value)
{
    m_StatusCode = value;
    m_StatusCodeIsSet = true;
}

bool WebhookTestResponse::statusCodeIsSet() const
{
    return m_StatusCodeIsSet;
}

void WebhookTestResponse::unsetStatusCode()
{
    m_StatusCodeIsSet = false;
}
}
}
}
}


