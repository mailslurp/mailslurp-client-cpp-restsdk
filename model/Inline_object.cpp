/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Inline_object.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




Inline_object::Inline_object()
{
    m_ContentTypeHeader = utility::conversions::to_string_t("");
    m_ContentTypeHeaderIsSet = false;
    m_fileIsSet = false;
}

Inline_object::~Inline_object()
{
}

void Inline_object::validate()
{
    // TODO: implement validation
}

web::json::value Inline_object::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ContentTypeHeaderIsSet)
    {
        val[utility::conversions::to_string_t("contentTypeHeader")] = ModelBase::toJson(m_ContentTypeHeader);
    }
    if(m_fileIsSet)
    {
        val[utility::conversions::to_string_t("file")] = ModelBase::toJson(m_file);
    }

    return val;
}

bool Inline_object::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("contentTypeHeader")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("contentTypeHeader"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_contentTypeHeader;
            ok &= ModelBase::fromJson(fieldValue, refVal_contentTypeHeader);
            setContentTypeHeader(refVal_contentTypeHeader);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("file")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("file"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<HttpContent> refVal_file;
            ok &= ModelBase::fromJson(fieldValue, refVal_file);
            setFile(refVal_file);
        }
    }
    return ok;
}

void Inline_object::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_ContentTypeHeaderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("contentTypeHeader"), m_ContentTypeHeader));
    }
    if(m_fileIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("file"), m_file));
    }
}

bool Inline_object::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("contentTypeHeader")))
    {
        utility::string_t refVal_contentTypeHeader;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("contentTypeHeader")), refVal_contentTypeHeader );
        setContentTypeHeader(refVal_contentTypeHeader);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("file")))
    {
        std::shared_ptr<HttpContent> refVal_file;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("file")), refVal_file );
        setFile(refVal_file);
    }
    return ok;
}

utility::string_t Inline_object::getContentTypeHeader() const
{
    return m_ContentTypeHeader;
}

void Inline_object::setContentTypeHeader(const utility::string_t& value)
{
    m_ContentTypeHeader = value;
    m_ContentTypeHeaderIsSet = true;
}

bool Inline_object::contentTypeHeaderIsSet() const
{
    return m_ContentTypeHeaderIsSet;
}

void Inline_object::unsetContentTypeHeader()
{
    m_ContentTypeHeaderIsSet = false;
}
std::shared_ptr<HttpContent> Inline_object::getFile() const
{
    return m_file;
}

void Inline_object::setFile(const std::shared_ptr<HttpContent>& value)
{
    m_file = value;
    m_fileIsSet = true;
}

bool Inline_object::fileIsSet() const
{
    return m_fileIsSet;
}

void Inline_object::unsetfile()
{
    m_fileIsSet = false;
}
}
}
}
}


