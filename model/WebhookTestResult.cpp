/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "WebhookTestResult.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




WebhookTestResult::WebhookTestResult()
{
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
    m_RequestIsSet = false;
    m_ResponseIsSet = false;
}

WebhookTestResult::~WebhookTestResult()
{
}

void WebhookTestResult::validate()
{
    // TODO: implement validation
}

web::json::value WebhookTestResult::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t("message")] = ModelBase::toJson(m_Message);
    }
    if(m_RequestIsSet)
    {
        val[utility::conversions::to_string_t("request")] = ModelBase::toJson(m_Request);
    }
    if(m_ResponseIsSet)
    {
        val[utility::conversions::to_string_t("response")] = ModelBase::toJson(m_Response);
    }

    return val;
}

bool WebhookTestResult::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("message")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("message"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_message;
            ok &= ModelBase::fromJson(fieldValue, refVal_message);
            setMessage(refVal_message);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("request")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("request"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<WebhookTestRequest> refVal_request;
            ok &= ModelBase::fromJson(fieldValue, refVal_request);
            setRequest(refVal_request);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("response")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("response"));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<WebhookTestResponse> refVal_response;
            ok &= ModelBase::fromJson(fieldValue, refVal_response);
            setResponse(refVal_response);
        }
    }
    return ok;
}

void WebhookTestResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("message"), m_Message));
    }
    if(m_RequestIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("request"), m_Request));
    }
    if(m_ResponseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("response"), m_Response));
    }
}

bool WebhookTestResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("message")))
    {
        utility::string_t refVal_message;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("message")), refVal_message );
        setMessage(refVal_message);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("request")))
    {
        std::shared_ptr<WebhookTestRequest> refVal_request;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("request")), refVal_request );
        setRequest(refVal_request);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("response")))
    {
        std::shared_ptr<WebhookTestResponse> refVal_response;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("response")), refVal_response );
        setResponse(refVal_response);
    }
    return ok;
}

utility::string_t WebhookTestResult::getMessage() const
{
    return m_Message;
}

void WebhookTestResult::setMessage(const utility::string_t& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}

bool WebhookTestResult::messageIsSet() const
{
    return m_MessageIsSet;
}

void WebhookTestResult::unsetMessage()
{
    m_MessageIsSet = false;
}
std::shared_ptr<WebhookTestRequest> WebhookTestResult::getRequest() const
{
    return m_Request;
}

void WebhookTestResult::setRequest(const std::shared_ptr<WebhookTestRequest>& value)
{
    m_Request = value;
    m_RequestIsSet = true;
}

bool WebhookTestResult::requestIsSet() const
{
    return m_RequestIsSet;
}

void WebhookTestResult::unsetRequest()
{
    m_RequestIsSet = false;
}
std::shared_ptr<WebhookTestResponse> WebhookTestResult::getResponse() const
{
    return m_Response;
}

void WebhookTestResult::setResponse(const std::shared_ptr<WebhookTestResponse>& value)
{
    m_Response = value;
    m_ResponseIsSet = true;
}

bool WebhookTestResult::responseIsSet() const
{
    return m_ResponseIsSet;
}

void WebhookTestResult::unsetResponse()
{
    m_ResponseIsSet = false;
}
}
}
}
}


