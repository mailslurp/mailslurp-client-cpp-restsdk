/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * EmailAnalysis.h
 *
 * Analysis result for email. Each verdict property is a string PASS|FAIL|GRAY or dynamic error message
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_EmailAnalysis_H_
#define COM_MAILSLURP_CLIENT_MODEL_EmailAnalysis_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// Analysis result for email. Each verdict property is a string PASS|FAIL|GRAY or dynamic error message
/// </summary>
class  EmailAnalysis
    : public ModelBase
{
public:
    EmailAnalysis();
    virtual ~EmailAnalysis();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// EmailAnalysis members

    /// <summary>
    /// Verdict of spam ranking analysis
    /// </summary>
    utility::string_t getSpamVerdict() const;
    bool spamVerdictIsSet() const;
    void unsetSpamVerdict();

    void setSpamVerdict(const utility::string_t& value);

    /// <summary>
    /// Verdict of virus scan analysis
    /// </summary>
    utility::string_t getVirusVerdict() const;
    bool virusVerdictIsSet() const;
    void unsetVirusVerdict();

    void setVirusVerdict(const utility::string_t& value);

    /// <summary>
    /// Verdict of Send Policy Framework record spoofing analysis
    /// </summary>
    utility::string_t getSpfVerdict() const;
    bool spfVerdictIsSet() const;
    void unsetSpfVerdict();

    void setSpfVerdict(const utility::string_t& value);

    /// <summary>
    /// Verdict of DomainKeys Identified Mail analysis
    /// </summary>
    utility::string_t getDkimVerdict() const;
    bool dkimVerdictIsSet() const;
    void unsetDkimVerdict();

    void setDkimVerdict(const utility::string_t& value);

    /// <summary>
    /// Verdict of Domain-based Message Authentication Reporting and Conformance analysis
    /// </summary>
    utility::string_t getDmarcVerdict() const;
    bool dmarcVerdictIsSet() const;
    void unsetDmarcVerdict();

    void setDmarcVerdict(const utility::string_t& value);


protected:
    utility::string_t m_SpamVerdict;
    bool m_SpamVerdictIsSet;
    utility::string_t m_VirusVerdict;
    bool m_VirusVerdictIsSet;
    utility::string_t m_SpfVerdict;
    bool m_SpfVerdictIsSet;
    utility::string_t m_DkimVerdict;
    bool m_DkimVerdictIsSet;
    utility::string_t m_DmarcVerdict;
    bool m_DmarcVerdictIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_EmailAnalysis_H_ */
