/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ValidationDto.h
 *
 * Response object for email validation operation
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_ValidationDto_H_
#define COM_MAILSLURP_CLIENT_MODEL_ValidationDto_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "HTMLValidationResult.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// Response object for email validation operation
/// </summary>
class  ValidationDto
    : public ModelBase
{
public:
    ValidationDto();
    virtual ~ValidationDto();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ValidationDto members

    /// <summary>
    /// ID of the email validated
    /// </summary>
    utility::string_t getEmailId() const;
    bool emailIdIsSet() const;
    void unsetEmailId();

    void setEmailId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<HTMLValidationResult> getHtml() const;
    bool htmlIsSet() const;
    void unsetHtml();

    void setHtml(const std::shared_ptr<HTMLValidationResult>& value);


protected:
    utility::string_t m_EmailId;
    bool m_EmailIdIsSet;
    std::shared_ptr<HTMLValidationResult> m_Html;
    bool m_HtmlIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_ValidationDto_H_ */
