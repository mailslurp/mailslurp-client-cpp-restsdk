/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 5.1.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "Complaint.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




Complaint::Complaint()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_EventType = utility::conversions::to_string_t("");
    m_EventTypeIsSet = false;
    m_MailSource = utility::conversions::to_string_t("");
    m_MailSourceIsSet = false;
    m_MailMessageId = utility::conversions::to_string_t("");
    m_MailMessageIdIsSet = false;
    m_ComplaintRecipient = utility::conversions::to_string_t("");
    m_ComplaintRecipientIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_UpdatedAt = utility::datetime();
    m_UpdatedAtIsSet = false;
}

Complaint::~Complaint()
{
}

void Complaint::validate()
{
    // TODO: implement validation
}

web::json::value Complaint::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t("id")] = ModelBase::toJson(m_Id);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t("userId")] = ModelBase::toJson(m_UserId);
    }
    if(m_EventTypeIsSet)
    {
        val[utility::conversions::to_string_t("eventType")] = ModelBase::toJson(m_EventType);
    }
    if(m_MailSourceIsSet)
    {
        val[utility::conversions::to_string_t("mailSource")] = ModelBase::toJson(m_MailSource);
    }
    if(m_MailMessageIdIsSet)
    {
        val[utility::conversions::to_string_t("mailMessageId")] = ModelBase::toJson(m_MailMessageId);
    }
    if(m_ComplaintRecipientIsSet)
    {
        val[utility::conversions::to_string_t("complaintRecipient")] = ModelBase::toJson(m_ComplaintRecipient);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t("createdAt")] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_UpdatedAtIsSet)
    {
        val[utility::conversions::to_string_t("updatedAt")] = ModelBase::toJson(m_UpdatedAt);
    }

    return val;
}

bool Complaint::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("id")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("id"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_id;
            ok &= ModelBase::fromJson(fieldValue, refVal_id);
            setId(refVal_id);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("userId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("userId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_userId;
            ok &= ModelBase::fromJson(fieldValue, refVal_userId);
            setUserId(refVal_userId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("eventType")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("eventType"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_eventType;
            ok &= ModelBase::fromJson(fieldValue, refVal_eventType);
            setEventType(refVal_eventType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mailSource")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mailSource"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_mailSource;
            ok &= ModelBase::fromJson(fieldValue, refVal_mailSource);
            setMailSource(refVal_mailSource);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("mailMessageId")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("mailMessageId"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_mailMessageId;
            ok &= ModelBase::fromJson(fieldValue, refVal_mailMessageId);
            setMailMessageId(refVal_mailMessageId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("complaintRecipient")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("complaintRecipient"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_complaintRecipient;
            ok &= ModelBase::fromJson(fieldValue, refVal_complaintRecipient);
            setComplaintRecipient(refVal_complaintRecipient);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("createdAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("createdAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_createdAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_createdAt);
            setCreatedAt(refVal_createdAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("updatedAt")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("updatedAt"));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_updatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_updatedAt);
            setUpdatedAt(refVal_updatedAt);
        }
    }
    return ok;
}

void Complaint::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("id"), m_Id));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("userId"), m_UserId));
    }
    if(m_EventTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("eventType"), m_EventType));
    }
    if(m_MailSourceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mailSource"), m_MailSource));
    }
    if(m_MailMessageIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("mailMessageId"), m_MailMessageId));
    }
    if(m_ComplaintRecipientIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("complaintRecipient"), m_ComplaintRecipient));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("createdAt"), m_CreatedAt));
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("updatedAt"), m_UpdatedAt));
    }
}

bool Complaint::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("id")))
    {
        utility::string_t refVal_id;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("id")), refVal_id );
        setId(refVal_id);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("userId")))
    {
        utility::string_t refVal_userId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("userId")), refVal_userId );
        setUserId(refVal_userId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("eventType")))
    {
        utility::string_t refVal_eventType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("eventType")), refVal_eventType );
        setEventType(refVal_eventType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mailSource")))
    {
        utility::string_t refVal_mailSource;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mailSource")), refVal_mailSource );
        setMailSource(refVal_mailSource);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("mailMessageId")))
    {
        utility::string_t refVal_mailMessageId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("mailMessageId")), refVal_mailMessageId );
        setMailMessageId(refVal_mailMessageId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("complaintRecipient")))
    {
        utility::string_t refVal_complaintRecipient;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("complaintRecipient")), refVal_complaintRecipient );
        setComplaintRecipient(refVal_complaintRecipient);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("createdAt")))
    {
        utility::datetime refVal_createdAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("createdAt")), refVal_createdAt );
        setCreatedAt(refVal_createdAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("updatedAt")))
    {
        utility::datetime refVal_updatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("updatedAt")), refVal_updatedAt );
        setUpdatedAt(refVal_updatedAt);
    }
    return ok;
}

utility::string_t Complaint::getId() const
{
    return m_Id;
}

void Complaint::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Complaint::idIsSet() const
{
    return m_IdIsSet;
}

void Complaint::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Complaint::getUserId() const
{
    return m_UserId;
}

void Complaint::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool Complaint::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void Complaint::unsetUserId()
{
    m_UserIdIsSet = false;
}
utility::string_t Complaint::getEventType() const
{
    return m_EventType;
}

void Complaint::setEventType(const utility::string_t& value)
{
    m_EventType = value;
    m_EventTypeIsSet = true;
}

bool Complaint::eventTypeIsSet() const
{
    return m_EventTypeIsSet;
}

void Complaint::unsetEventType()
{
    m_EventTypeIsSet = false;
}
utility::string_t Complaint::getMailSource() const
{
    return m_MailSource;
}

void Complaint::setMailSource(const utility::string_t& value)
{
    m_MailSource = value;
    m_MailSourceIsSet = true;
}

bool Complaint::mailSourceIsSet() const
{
    return m_MailSourceIsSet;
}

void Complaint::unsetMailSource()
{
    m_MailSourceIsSet = false;
}
utility::string_t Complaint::getMailMessageId() const
{
    return m_MailMessageId;
}

void Complaint::setMailMessageId(const utility::string_t& value)
{
    m_MailMessageId = value;
    m_MailMessageIdIsSet = true;
}

bool Complaint::mailMessageIdIsSet() const
{
    return m_MailMessageIdIsSet;
}

void Complaint::unsetMailMessageId()
{
    m_MailMessageIdIsSet = false;
}
utility::string_t Complaint::getComplaintRecipient() const
{
    return m_ComplaintRecipient;
}

void Complaint::setComplaintRecipient(const utility::string_t& value)
{
    m_ComplaintRecipient = value;
    m_ComplaintRecipientIsSet = true;
}

bool Complaint::complaintRecipientIsSet() const
{
    return m_ComplaintRecipientIsSet;
}

void Complaint::unsetComplaintRecipient()
{
    m_ComplaintRecipientIsSet = false;
}
utility::datetime Complaint::getCreatedAt() const
{
    return m_CreatedAt;
}

void Complaint::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool Complaint::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void Complaint::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::datetime Complaint::getUpdatedAt() const
{
    return m_UpdatedAt;
}

void Complaint::setUpdatedAt(const utility::datetime& value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}

bool Complaint::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void Complaint::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
}
}
}
}


