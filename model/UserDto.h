/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UserDto.h
 *
 * Representation a user&#39;s account
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_UserDto_H_
#define COM_MAILSLURP_CLIENT_MODEL_UserDto_H_


#include "../ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// Representation a user&#39;s account
/// </summary>
class  UserDto
    : public ModelBase
{
public:
    UserDto();
    virtual ~UserDto();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UserDto members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getApiKey() const;
    bool apiKeyIsSet() const;
    void unsetApiKey();

    void setApiKey(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEmailAddress() const;
    bool emailAddressIsSet() const;
    void unsetEmailAddress();

    void setEmailAddress(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEmailAddressMd5() const;
    bool emailAddressMd5IsSet() const;
    void unsetEmailAddressMd5();

    void setEmailAddressMd5(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getCreated() const;
    bool createdIsSet() const;
    void unsetCreated();

    void setCreated(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUserType() const;
    bool userTypeIsSet() const;
    void unsetUserType();

    void setUserType(const utility::string_t& value);

    /// <summary>
    /// Does user belong to an organization
    /// </summary>
    utility::string_t getOrganization() const;
    bool organizationIsSet() const;
    void unsetOrganization();

    void setOrganization(const utility::string_t& value);

    /// <summary>
    /// Has user accepted an organization invite
    /// </summary>
    utility::string_t getVerified() const;
    bool verifiedIsSet() const;
    void unsetVerified();

    void setVerified(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isHasPassword() const;
    bool hasPasswordIsSet() const;
    void unsetHasPassword();

    void setHasPassword(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsFrozen() const;
    bool isFrozenIsSet() const;
    void unsetIsFrozen();

    void setIsFrozen(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isAddNewContacts() const;
    bool addNewContactsIsSet() const;
    void unsetAddNewContacts();

    void setAddNewContacts(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSsoProvider() const;
    bool ssoProviderIsSet() const;
    void unsetSsoProvider();

    void setSsoProvider(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCustomerId() const;
    bool customerIdIsSet() const;
    void unsetCustomerId();

    void setCustomerId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isHasOnboarded() const;
    bool hasOnboardedIsSet() const;
    void unsetHasOnboarded();

    void setHasOnboarded(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getImapUsername() const;
    bool imapUsernameIsSet() const;
    void unsetImapUsername();

    void setImapUsername(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getImapPassword() const;
    bool imapPasswordIsSet() const;
    void unsetImapPassword();

    void setImapPassword(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSmtpUsername() const;
    bool smtpUsernameIsSet() const;
    void unsetSmtpUsername();

    void setSmtpUsername(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSmtpPassword() const;
    bool smtpPasswordIsSet() const;
    void unsetSmtpPassword();

    void setSmtpPassword(const utility::string_t& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_ApiKey;
    bool m_ApiKeyIsSet;
    utility::string_t m_EmailAddress;
    bool m_EmailAddressIsSet;
    utility::string_t m_EmailAddressMd5;
    bool m_EmailAddressMd5IsSet;
    utility::datetime m_Created;
    bool m_CreatedIsSet;
    utility::string_t m_UserType;
    bool m_UserTypeIsSet;
    utility::string_t m_Organization;
    bool m_OrganizationIsSet;
    utility::string_t m_Verified;
    bool m_VerifiedIsSet;
    bool m_HasPassword;
    bool m_HasPasswordIsSet;
    bool m_IsFrozen;
    bool m_IsFrozenIsSet;
    bool m_AddNewContacts;
    bool m_AddNewContactsIsSet;
    utility::string_t m_SsoProvider;
    bool m_SsoProviderIsSet;
    utility::string_t m_CustomerId;
    bool m_CustomerIdIsSet;
    bool m_HasOnboarded;
    bool m_HasOnboardedIsSet;
    utility::string_t m_ImapUsername;
    bool m_ImapUsernameIsSet;
    utility::string_t m_ImapPassword;
    bool m_ImapPasswordIsSet;
    utility::string_t m_SmtpUsername;
    bool m_SmtpUsernameIsSet;
    utility::string_t m_SmtpPassword;
    bool m_SmtpPasswordIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_UserDto_H_ */
