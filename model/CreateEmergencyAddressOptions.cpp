/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CreateEmergencyAddressOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {




CreateEmergencyAddressOptions::CreateEmergencyAddressOptions()
{
    m_CustomerName = utility::conversions::to_string_t("");
    m_CustomerNameIsSet = false;
    m_Address1 = utility::conversions::to_string_t("");
    m_Address1IsSet = false;
    m_City = utility::conversions::to_string_t("");
    m_CityIsSet = false;
    m_Region = utility::conversions::to_string_t("");
    m_RegionIsSet = false;
    m_PostalCode = utility::conversions::to_string_t("");
    m_PostalCodeIsSet = false;
    m_IsoCountryCode = utility::conversions::to_string_t("");
    m_IsoCountryCodeIsSet = false;
    m_DisplayName = utility::conversions::to_string_t("");
    m_DisplayNameIsSet = false;
}

CreateEmergencyAddressOptions::~CreateEmergencyAddressOptions()
{
}

void CreateEmergencyAddressOptions::validate()
{
    // TODO: implement validation
}

web::json::value CreateEmergencyAddressOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CustomerNameIsSet)
    {
        val[utility::conversions::to_string_t("customerName")] = ModelBase::toJson(m_CustomerName);
    }
    if(m_Address1IsSet)
    {
        val[utility::conversions::to_string_t("address1")] = ModelBase::toJson(m_Address1);
    }
    if(m_CityIsSet)
    {
        val[utility::conversions::to_string_t("city")] = ModelBase::toJson(m_City);
    }
    if(m_RegionIsSet)
    {
        val[utility::conversions::to_string_t("region")] = ModelBase::toJson(m_Region);
    }
    if(m_PostalCodeIsSet)
    {
        val[utility::conversions::to_string_t("postalCode")] = ModelBase::toJson(m_PostalCode);
    }
    if(m_IsoCountryCodeIsSet)
    {
        val[utility::conversions::to_string_t("isoCountryCode")] = ModelBase::toJson(m_IsoCountryCode);
    }
    if(m_DisplayNameIsSet)
    {
        val[utility::conversions::to_string_t("displayName")] = ModelBase::toJson(m_DisplayName);
    }

    return val;
}

bool CreateEmergencyAddressOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t("customerName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("customerName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_customerName;
            ok &= ModelBase::fromJson(fieldValue, refVal_customerName);
            setCustomerName(refVal_customerName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("address1")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("address1"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_address1;
            ok &= ModelBase::fromJson(fieldValue, refVal_address1);
            setAddress1(refVal_address1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("city")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("city"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_city;
            ok &= ModelBase::fromJson(fieldValue, refVal_city);
            setCity(refVal_city);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("region")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("region"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_region;
            ok &= ModelBase::fromJson(fieldValue, refVal_region);
            setRegion(refVal_region);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("postalCode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("postalCode"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_postalCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_postalCode);
            setPostalCode(refVal_postalCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("isoCountryCode")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("isoCountryCode"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_isoCountryCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_isoCountryCode);
            setIsoCountryCode(refVal_isoCountryCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t("displayName")))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t("displayName"));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_displayName;
            ok &= ModelBase::fromJson(fieldValue, refVal_displayName);
            setDisplayName(refVal_displayName);
        }
    }
    return ok;
}

void CreateEmergencyAddressOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }
    if(m_CustomerNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("customerName"), m_CustomerName));
    }
    if(m_Address1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("address1"), m_Address1));
    }
    if(m_CityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("city"), m_City));
    }
    if(m_RegionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("region"), m_Region));
    }
    if(m_PostalCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("postalCode"), m_PostalCode));
    }
    if(m_IsoCountryCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("isoCountryCode"), m_IsoCountryCode));
    }
    if(m_DisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t("displayName"), m_DisplayName));
    }
}

bool CreateEmergencyAddressOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t("."))
    {
        namePrefix += utility::conversions::to_string_t(".");
    }

    if(multipart->hasContent(utility::conversions::to_string_t("customerName")))
    {
        utility::string_t refVal_customerName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("customerName")), refVal_customerName );
        setCustomerName(refVal_customerName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("address1")))
    {
        utility::string_t refVal_address1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("address1")), refVal_address1 );
        setAddress1(refVal_address1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("city")))
    {
        utility::string_t refVal_city;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("city")), refVal_city );
        setCity(refVal_city);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("region")))
    {
        utility::string_t refVal_region;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("region")), refVal_region );
        setRegion(refVal_region);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("postalCode")))
    {
        utility::string_t refVal_postalCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("postalCode")), refVal_postalCode );
        setPostalCode(refVal_postalCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("isoCountryCode")))
    {
        utility::string_t refVal_isoCountryCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("isoCountryCode")), refVal_isoCountryCode );
        setIsoCountryCode(refVal_isoCountryCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t("displayName")))
    {
        utility::string_t refVal_displayName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t("displayName")), refVal_displayName );
        setDisplayName(refVal_displayName);
    }
    return ok;
}

utility::string_t CreateEmergencyAddressOptions::getCustomerName() const
{
    return m_CustomerName;
}

void CreateEmergencyAddressOptions::setCustomerName(const utility::string_t& value)
{
    m_CustomerName = value;
    m_CustomerNameIsSet = true;
}

bool CreateEmergencyAddressOptions::customerNameIsSet() const
{
    return m_CustomerNameIsSet;
}

void CreateEmergencyAddressOptions::unsetCustomerName()
{
    m_CustomerNameIsSet = false;
}
utility::string_t CreateEmergencyAddressOptions::getAddress1() const
{
    return m_Address1;
}

void CreateEmergencyAddressOptions::setAddress1(const utility::string_t& value)
{
    m_Address1 = value;
    m_Address1IsSet = true;
}

bool CreateEmergencyAddressOptions::address1IsSet() const
{
    return m_Address1IsSet;
}

void CreateEmergencyAddressOptions::unsetAddress1()
{
    m_Address1IsSet = false;
}
utility::string_t CreateEmergencyAddressOptions::getCity() const
{
    return m_City;
}

void CreateEmergencyAddressOptions::setCity(const utility::string_t& value)
{
    m_City = value;
    m_CityIsSet = true;
}

bool CreateEmergencyAddressOptions::cityIsSet() const
{
    return m_CityIsSet;
}

void CreateEmergencyAddressOptions::unsetCity()
{
    m_CityIsSet = false;
}
utility::string_t CreateEmergencyAddressOptions::getRegion() const
{
    return m_Region;
}

void CreateEmergencyAddressOptions::setRegion(const utility::string_t& value)
{
    m_Region = value;
    m_RegionIsSet = true;
}

bool CreateEmergencyAddressOptions::regionIsSet() const
{
    return m_RegionIsSet;
}

void CreateEmergencyAddressOptions::unsetRegion()
{
    m_RegionIsSet = false;
}
utility::string_t CreateEmergencyAddressOptions::getPostalCode() const
{
    return m_PostalCode;
}

void CreateEmergencyAddressOptions::setPostalCode(const utility::string_t& value)
{
    m_PostalCode = value;
    m_PostalCodeIsSet = true;
}

bool CreateEmergencyAddressOptions::postalCodeIsSet() const
{
    return m_PostalCodeIsSet;
}

void CreateEmergencyAddressOptions::unsetPostalCode()
{
    m_PostalCodeIsSet = false;
}
utility::string_t CreateEmergencyAddressOptions::getIsoCountryCode() const
{
    return m_IsoCountryCode;
}

void CreateEmergencyAddressOptions::setIsoCountryCode(const utility::string_t& value)
{
    m_IsoCountryCode = value;
    m_IsoCountryCodeIsSet = true;
}

bool CreateEmergencyAddressOptions::isoCountryCodeIsSet() const
{
    return m_IsoCountryCodeIsSet;
}

void CreateEmergencyAddressOptions::unsetIsoCountryCode()
{
    m_IsoCountryCodeIsSet = false;
}
utility::string_t CreateEmergencyAddressOptions::getDisplayName() const
{
    return m_DisplayName;
}

void CreateEmergencyAddressOptions::setDisplayName(const utility::string_t& value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}

bool CreateEmergencyAddressOptions::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}

void CreateEmergencyAddressOptions::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}
}
}
}
}


