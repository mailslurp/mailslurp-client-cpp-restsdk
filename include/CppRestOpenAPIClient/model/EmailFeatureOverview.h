/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * EmailFeatureOverview.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_EmailFeatureOverview_H_
#define COM_MAILSLURP_CLIENT_MODEL_EmailFeatureOverview_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/EmailFeatureFamilyStatistics.h"
#include "CppRestOpenAPIClient/model/Set.h"
#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>

namespace com {
namespace mailslurp {
namespace client {
namespace model {

class EmailFeatureFamilyStatistics;

/// <summary>
/// 
/// </summary>
class  EmailFeatureOverview
    : public ModelBase
{
public:
    EmailFeatureOverview();
    virtual ~EmailFeatureOverview();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// EmailFeatureOverview members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFeature() const;
    bool featureIsSet() const;
    void unsetFeature();

    void setFeature(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTitle() const;
    bool titleIsSet() const;
    void unsetTitle();

    void setTitle(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCategory() const;
    bool categoryIsSet() const;
    void unsetCategory();

    void setCategory(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNotes() const;
    bool notesIsSet() const;
    void unsetNotes();

    void setNotes(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, utility::string_t>& getNotesNumbers();
    bool notesNumbersIsSet() const;
    void unsetNotesNumbers();

    void setNotesNumbers(const std::map<utility::string_t, utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<EmailFeatureFamilyStatistics>>& getFeatureStatistics();
    bool featureStatisticsIsSet() const;
    void unsetFeatureStatistics();

    void setFeatureStatistics(const std::vector<std::shared_ptr<EmailFeatureFamilyStatistics>>& value);

    /// <summary>
    /// 
    /// </summary>
    Set<utility::string_t>& getStatuses();
    bool statusesIsSet() const;
    void unsetStatuses();

    void setStatuses(const Set<utility::string_t>& value);


protected:
    utility::string_t m_Feature;
    bool m_FeatureIsSet;
    utility::string_t m_Title;
    bool m_TitleIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    utility::string_t m_Category;
    bool m_CategoryIsSet;
    utility::string_t m_Notes;
    bool m_NotesIsSet;
    std::map<utility::string_t, utility::string_t> m_NotesNumbers;
    bool m_NotesNumbersIsSet;
    std::vector<std::shared_ptr<EmailFeatureFamilyStatistics>> m_FeatureStatistics;
    bool m_FeatureStatisticsIsSet;
    Set<utility::string_t> m_Statuses;
    bool m_StatusesIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_EmailFeatureOverview_H_ */
