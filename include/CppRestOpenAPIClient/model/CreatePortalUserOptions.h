/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreatePortalUserOptions.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_CreatePortalUserOptions_H_
#define COM_MAILSLURP_CLIENT_MODEL_CreatePortalUserOptions_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/CreateInboxDto.h"
#include <cpprest/details/basic_types.h>

namespace com {
namespace mailslurp {
namespace client {
namespace model {

class CreateInboxDto;

/// <summary>
/// 
/// </summary>
class  CreatePortalUserOptions
    : public ModelBase
{
public:
    CreatePortalUserOptions();
    virtual ~CreatePortalUserOptions();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CreatePortalUserOptions members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPassword() const;
    bool passwordIsSet() const;
    void unsetPassword();

    void setPassword(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUsername() const;
    bool usernameIsSet() const;
    void unsetUsername();

    void setUsername(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isSkipInboxCreation() const;
    bool skipInboxCreationIsSet() const;
    void unsetSkipInboxCreation();

    void setSkipInboxCreation(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getInboxId() const;
    bool inboxIdIsSet() const;
    void unsetInboxId();

    void setInboxId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<CreateInboxDto> getCreateInboxOptions() const;
    bool createInboxOptionsIsSet() const;
    void unsetCreateInboxOptions();

    void setCreateInboxOptions(const std::shared_ptr<CreateInboxDto>& value);


protected:
    utility::string_t m_Password;
    bool m_PasswordIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Username;
    bool m_UsernameIsSet;
    bool m_SkipInboxCreation;
    bool m_SkipInboxCreationIsSet;
    utility::string_t m_InboxId;
    bool m_InboxIdIsSet;
    std::shared_ptr<CreateInboxDto> m_CreateInboxOptions;
    bool m_CreateInboxOptionsIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_CreatePortalUserOptions_H_ */
