/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ImapServerListOptions.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_ImapServerListOptions_H_
#define COM_MAILSLURP_CLIENT_MODEL_ImapServerListOptions_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  ImapServerListOptions
    : public ModelBase
{
public:
    ImapServerListOptions();
    virtual ~ImapServerListOptions();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ImapServerListOptions members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUidSet() const;
    bool uidSetIsSet() const;
    void unsetUidSet();

    void setUidSet(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSeqSet() const;
    bool seqSetIsSet() const;
    void unsetSeqSet();

    void setSeqSet(const utility::string_t& value);


protected:
    utility::string_t m_UidSet;
    bool m_UidSetIsSet;
    utility::string_t m_SeqSet;
    bool m_SeqSetIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_ImapServerListOptions_H_ */
