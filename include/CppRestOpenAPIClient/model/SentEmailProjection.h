/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SentEmailProjection.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_SentEmailProjection_H_
#define COM_MAILSLURP_CLIENT_MODEL_SentEmailProjection_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/EmailRecipients.h"
#include <cpprest/details/basic_types.h>
#include <vector>
#include "CppRestOpenAPIClient/model/Sender.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {

class Sender;
class EmailRecipients;

/// <summary>
/// 
/// </summary>
class  SentEmailProjection
    : public ModelBase
{
public:
    SentEmailProjection();
    virtual ~SentEmailProjection();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SentEmailProjection members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSubject() const;
    bool subjectIsSet() const;
    void unsetSubject();

    void setSubject(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getThreadId() const;
    bool threadIdIsSet() const;
    void unsetThreadId();

    void setThreadId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getInReplyTo() const;
    bool inReplyToIsSet() const;
    void unsetInReplyTo();

    void setInReplyTo(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFrom() const;
    bool fromIsSet() const;
    void unsetFrom();

    void setFrom(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Sender> getSender() const;
    bool senderIsSet() const;
    void unsetSender();

    void setSender(const std::shared_ptr<Sender>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<EmailRecipients> getRecipients() const;
    bool recipientsIsSet() const;
    void unsetRecipients();

    void setRecipients(const std::shared_ptr<EmailRecipients>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getAttachments();
    bool attachmentsIsSet() const;
    void unsetAttachments();

    void setAttachments(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getInboxId() const;
    bool inboxIdIsSet() const;
    void unsetInboxId();

    void setInboxId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUserId() const;
    bool userIdIsSet() const;
    void unsetUserId();

    void setUserId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreatedAt();

    void setCreatedAt(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getTo();
    bool toIsSet() const;
    void unsetTo();

    void setTo(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getCc();
    bool ccIsSet() const;
    void unsetCc();

    void setCc(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getBcc();
    bool bccIsSet() const;
    void unsetBcc();

    void setBcc(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMessageId() const;
    bool messageIdIsSet() const;
    void unsetMessageId();

    void setMessageId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBodyExcerpt() const;
    bool bodyExcerptIsSet() const;
    void unsetBodyExcerpt();

    void setBodyExcerpt(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTextExcerpt() const;
    bool textExcerptIsSet() const;
    void unsetTextExcerpt();

    void setTextExcerpt(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBodyMD5Hash() const;
    bool bodyMD5HashIsSet() const;
    void unsetBodyMD5Hash();

    void setBodyMD5Hash(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isVirtualSend() const;
    bool virtualSendIsSet() const;
    void unsetVirtualSend();

    void setVirtualSend(bool value);


protected:
    utility::string_t m_Subject;
    bool m_SubjectIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_ThreadId;
    bool m_ThreadIdIsSet;
    utility::string_t m_InReplyTo;
    bool m_InReplyToIsSet;
    utility::string_t m_From;
    bool m_FromIsSet;
    std::shared_ptr<Sender> m_Sender;
    bool m_SenderIsSet;
    std::shared_ptr<EmailRecipients> m_Recipients;
    bool m_RecipientsIsSet;
    std::vector<utility::string_t> m_Attachments;
    bool m_AttachmentsIsSet;
    utility::string_t m_InboxId;
    bool m_InboxIdIsSet;
    utility::string_t m_UserId;
    bool m_UserIdIsSet;
    utility::datetime m_CreatedAt;
    bool m_CreatedAtIsSet;
    std::vector<utility::string_t> m_To;
    bool m_ToIsSet;
    std::vector<utility::string_t> m_Cc;
    bool m_CcIsSet;
    std::vector<utility::string_t> m_Bcc;
    bool m_BccIsSet;
    utility::string_t m_MessageId;
    bool m_MessageIdIsSet;
    utility::string_t m_BodyExcerpt;
    bool m_BodyExcerptIsSet;
    utility::string_t m_TextExcerpt;
    bool m_TextExcerptIsSet;
    utility::string_t m_BodyMD5Hash;
    bool m_BodyMD5HashIsSet;
    bool m_VirtualSend;
    bool m_VirtualSendIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_SentEmailProjection_H_ */
