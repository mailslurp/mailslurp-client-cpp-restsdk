/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ImapServerSearchOptions.h
 *
 * IMAP server search options
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_ImapServerSearchOptions_H_
#define COM_MAILSLURP_CLIENT_MODEL_ImapServerSearchOptions_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// IMAP server search options
/// </summary>
class  ImapServerSearchOptions
    : public ModelBase
{
public:
    ImapServerSearchOptions();
    virtual ~ImapServerSearchOptions();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ImapServerSearchOptions members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSeqNum() const;
    bool seqNumIsSet() const;
    void unsetSeqNum();

    void setSeqNum(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUid() const;
    bool uidIsSet() const;
    void unsetUid();

    void setUid(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getSince() const;
    bool sinceIsSet() const;
    void unsetSince();

    void setSince(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getBefore() const;
    bool beforeIsSet() const;
    void unsetBefore();

    void setBefore(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getSentSince() const;
    bool sentSinceIsSet() const;
    void unsetSentSince();

    void setSentSince(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getSentBefore() const;
    bool sentBeforeIsSet() const;
    void unsetSentBefore();

    void setSentBefore(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, std::vector<utility::string_t>>& getHeader();
    bool headerIsSet() const;
    void unsetHeader();

    void setHeader(const std::map<utility::string_t, std::vector<utility::string_t>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getBody();
    bool bodyIsSet() const;
    void unsetBody();

    void setBody(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getText();
    bool textIsSet() const;
    void unsetText();

    void setText(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getWithFlags();
    bool withFlagsIsSet() const;
    void unsetWithFlags();

    void setWithFlags(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getWithoutFlags();
    bool withoutFlagsIsSet() const;
    void unsetWithoutFlags();

    void setWithoutFlags(const std::vector<utility::string_t>& value);


protected:
    utility::string_t m_SeqNum;
    bool m_SeqNumIsSet;
    utility::string_t m_Uid;
    bool m_UidIsSet;
    utility::datetime m_Since;
    bool m_SinceIsSet;
    utility::datetime m_Before;
    bool m_BeforeIsSet;
    utility::datetime m_SentSince;
    bool m_SentSinceIsSet;
    utility::datetime m_SentBefore;
    bool m_SentBeforeIsSet;
    std::map<utility::string_t, std::vector<utility::string_t>> m_Header;
    bool m_HeaderIsSet;
    std::vector<utility::string_t> m_Body;
    bool m_BodyIsSet;
    std::vector<utility::string_t> m_Text;
    bool m_TextIsSet;
    std::vector<utility::string_t> m_WithFlags;
    bool m_WithFlagsIsSet;
    std::vector<utility::string_t> m_WithoutFlags;
    bool m_WithoutFlagsIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_ImapServerSearchOptions_H_ */
