/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SearchEmailsOptions.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_SearchEmailsOptions_H_
#define COM_MAILSLURP_CLIENT_MODEL_SearchEmailsOptions_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  SearchEmailsOptions
    : public ModelBase
{
public:
    SearchEmailsOptions();
    virtual ~SearchEmailsOptions();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SearchEmailsOptions members

    /// <summary>
    /// Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account.
    /// </summary>
    std::vector<utility::string_t>& getInboxIds();
    bool inboxIdsIsSet() const;
    void unsetInboxIds();

    void setInboxIds(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Optional page index in email list pagination
    /// </summary>
    int32_t getPageIndex() const;
    bool pageIndexIsSet() const;
    void unsetPageIndex();

    void setPageIndex(int32_t value);

    /// <summary>
    /// Optional page size in email list pagination. Maximum size is 100. Use page index and sort to page through larger results
    /// </summary>
    int32_t getPageSize() const;
    bool pageSizeIsSet() const;
    void unsetPageSize();

    void setPageSize(int32_t value);

    /// <summary>
    /// Optional createdAt sort direction ASC or DESC
    /// </summary>
    utility::string_t getSortDirection() const;
    bool sortDirectionIsSet() const;
    void unsetSortDirection();

    void setSortDirection(const utility::string_t& value);

    /// <summary>
    /// Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly
    /// </summary>
    bool isUnreadOnly() const;
    bool unreadOnlyIsSet() const;
    void unsetUnreadOnly();

    void setUnreadOnly(bool value);

    /// <summary>
    /// Optional search filter. Searches email recipients, sender, subject, email address and ID. Does not search email body
    /// </summary>
    utility::string_t getSearchFilter() const;
    bool searchFilterIsSet() const;
    void unsetSearchFilter();

    void setSearchFilter(const utility::string_t& value);

    /// <summary>
    /// Optional filter emails received after given date time
    /// </summary>
    utility::datetime getSince() const;
    bool sinceIsSet() const;
    void unsetSince();

    void setSince(const utility::datetime& value);

    /// <summary>
    /// Optional filter emails received before given date time
    /// </summary>
    utility::datetime getBefore() const;
    bool beforeIsSet() const;
    void unsetBefore();

    void setBefore(const utility::datetime& value);


protected:
    std::vector<utility::string_t> m_InboxIds;
    bool m_InboxIdsIsSet;
    int32_t m_PageIndex;
    bool m_PageIndexIsSet;
    int32_t m_PageSize;
    bool m_PageSizeIsSet;
    utility::string_t m_SortDirection;
    bool m_SortDirectionIsSet;
    bool m_UnreadOnly;
    bool m_UnreadOnlyIsSet;
    utility::string_t m_SearchFilter;
    bool m_SearchFilterIsSet;
    utility::datetime m_Since;
    bool m_SinceIsSet;
    utility::datetime m_Before;
    bool m_BeforeIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_SearchEmailsOptions_H_ */
