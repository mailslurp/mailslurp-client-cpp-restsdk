/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GenerateDmarcRecordOptions.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_GenerateDmarcRecordOptions_H_
#define COM_MAILSLURP_CLIENT_MODEL_GenerateDmarcRecordOptions_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  GenerateDmarcRecordOptions
    : public ModelBase
{
public:
    GenerateDmarcRecordOptions();
    virtual ~GenerateDmarcRecordOptions();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// GenerateDmarcRecordOptions members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDomain() const;
    bool domainIsSet() const;
    void unsetDomain();

    void setDomain(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getVersion() const;
    bool versionIsSet() const;
    void unsetVersion();

    void setVersion(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPolicy() const;
    bool policyIsSet() const;
    void unsetPolicy();

    void setPolicy(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSubdomainPolicy() const;
    bool subdomainPolicyIsSet() const;
    void unsetSubdomainPolicy();

    void setSubdomainPolicy(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getReportEmailAddress();
    bool reportEmailAddressIsSet() const;
    void unsetReportEmailAddress();

    void setReportEmailAddress(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getForensicEmailAddress();
    bool forensicEmailAddressIsSet() const;
    void unsetForensicEmailAddress();

    void setForensicEmailAddress(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getPercentage() const;
    bool percentageIsSet() const;
    void unsetPercentage();

    void setPercentage(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getReportFormat() const;
    bool reportFormatIsSet() const;
    void unsetReportFormat();

    void setReportFormat(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getSecondsBetweenReports() const;
    bool secondsBetweenReportsIsSet() const;
    void unsetSecondsBetweenReports();

    void setSecondsBetweenReports(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAdkim() const;
    bool adkimIsSet() const;
    void unsetAdkim();

    void setAdkim(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAspf() const;
    bool aspfIsSet() const;
    void unsetAspf();

    void setAspf(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFo() const;
    bool foIsSet() const;
    void unsetFo();

    void setFo(const utility::string_t& value);


protected:
    utility::string_t m_Domain;
    bool m_DomainIsSet;
    utility::string_t m_Version;
    bool m_VersionIsSet;
    utility::string_t m_Policy;
    bool m_PolicyIsSet;
    utility::string_t m_SubdomainPolicy;
    bool m_SubdomainPolicyIsSet;
    std::vector<utility::string_t> m_ReportEmailAddress;
    bool m_ReportEmailAddressIsSet;
    std::vector<utility::string_t> m_ForensicEmailAddress;
    bool m_ForensicEmailAddressIsSet;
    int32_t m_Percentage;
    bool m_PercentageIsSet;
    utility::string_t m_ReportFormat;
    bool m_ReportFormatIsSet;
    int32_t m_SecondsBetweenReports;
    bool m_SecondsBetweenReportsIsSet;
    utility::string_t m_Adkim;
    bool m_AdkimIsSet;
    utility::string_t m_Aspf;
    bool m_AspfIsSet;
    utility::string_t m_Fo;
    bool m_FoIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_GenerateDmarcRecordOptions_H_ */
