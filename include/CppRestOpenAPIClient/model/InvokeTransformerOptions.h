/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * InvokeTransformerOptions.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_InvokeTransformerOptions_H_
#define COM_MAILSLURP_CLIENT_MODEL_InvokeTransformerOptions_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/StructuredOutputSchema.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace com {
namespace mailslurp {
namespace client {
namespace model {

class StructuredOutputSchema;

/// <summary>
/// 
/// </summary>
class  InvokeTransformerOptions
    : public ModelBase
{
public:
    InvokeTransformerOptions();
    virtual ~InvokeTransformerOptions();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// InvokeTransformerOptions members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAiTransformId() const;
    bool aiTransformIdIsSet() const;
    void unsetAiTransformId();

    void setAiTransformId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAiTransformMappingId() const;
    bool aiTransformMappingIdIsSet() const;
    void unsetAiTransformMappingId();

    void setAiTransformMappingId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRawInput() const;
    bool rawInputIsSet() const;
    void unsetRawInput();

    void setRawInput(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEntityId() const;
    bool entityIdIsSet() const;
    void unsetEntityId();

    void setEntityId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEntityType() const;
    bool entityTypeIsSet() const;
    void unsetEntityType();

    void setEntityType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getRawConditions();
    bool rawConditionsIsSet() const;
    void unsetRawConditions();

    void setRawConditions(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getRawInstructions();
    bool rawInstructionsIsSet() const;
    void unsetRawInstructions();

    void setRawInstructions(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<StructuredOutputSchema> getRawOutputSchema() const;
    bool rawOutputSchemaIsSet() const;
    void unsetRawOutputSchema();

    void setRawOutputSchema(const std::shared_ptr<StructuredOutputSchema>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getContentSelector() const;
    bool contentSelectorIsSet() const;
    void unsetContentSelector();

    void setContentSelector(const utility::string_t& value);


protected:
    utility::string_t m_AiTransformId;
    bool m_AiTransformIdIsSet;
    utility::string_t m_AiTransformMappingId;
    bool m_AiTransformMappingIdIsSet;
    utility::string_t m_RawInput;
    bool m_RawInputIsSet;
    utility::string_t m_EntityId;
    bool m_EntityIdIsSet;
    utility::string_t m_EntityType;
    bool m_EntityTypeIsSet;
    std::vector<utility::string_t> m_RawConditions;
    bool m_RawConditionsIsSet;
    std::vector<utility::string_t> m_RawInstructions;
    bool m_RawInstructionsIsSet;
    std::shared_ptr<StructuredOutputSchema> m_RawOutputSchema;
    bool m_RawOutputSchemaIsSet;
    utility::string_t m_ContentSelector;
    bool m_ContentSelectorIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_InvokeTransformerOptions_H_ */
