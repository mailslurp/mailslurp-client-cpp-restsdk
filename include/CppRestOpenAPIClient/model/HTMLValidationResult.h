/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * HTMLValidationResult.h
 *
 * HTML Validation Results
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_HTMLValidationResult_H_
#define COM_MAILSLURP_CLIENT_MODEL_HTMLValidationResult_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/ValidationMessage.h"
#include <vector>

namespace com {
namespace mailslurp {
namespace client {
namespace model {

class ValidationMessage;

/// <summary>
/// HTML Validation Results
/// </summary>
class  HTMLValidationResult
    : public ModelBase
{
public:
    HTMLValidationResult();
    virtual ~HTMLValidationResult();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// HTMLValidationResult members

    /// <summary>
    /// Is HTML validation result valid
    /// </summary>
    bool isIsValid() const;
    bool isValidIsSet() const;
    void unsetIsValid();

    void setIsValid(bool value);

    /// <summary>
    /// Optional infos resulting from HTML validation
    /// </summary>
    std::vector<std::shared_ptr<ValidationMessage>>& getInfos();
    bool infosIsSet() const;
    void unsetInfos();

    void setInfos(const std::vector<std::shared_ptr<ValidationMessage>>& value);

    /// <summary>
    /// Optional errors resulting from HTML validation
    /// </summary>
    std::vector<std::shared_ptr<ValidationMessage>>& getErrors();
    bool errorsIsSet() const;
    void unsetErrors();

    void setErrors(const std::vector<std::shared_ptr<ValidationMessage>>& value);

    /// <summary>
    /// Optional warnings resulting from HTML validation
    /// </summary>
    std::vector<std::shared_ptr<ValidationMessage>>& getWarnings();
    bool warningsIsSet() const;
    void unsetWarnings();

    void setWarnings(const std::vector<std::shared_ptr<ValidationMessage>>& value);


protected:
    bool m_IsValid;
    bool m_IsValidIsSet;
    std::vector<std::shared_ptr<ValidationMessage>> m_Infos;
    bool m_InfosIsSet;
    std::vector<std::shared_ptr<ValidationMessage>> m_Errors;
    bool m_ErrorsIsSet;
    std::vector<std::shared_ptr<ValidationMessage>> m_Warnings;
    bool m_WarningsIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_HTMLValidationResult_H_ */
