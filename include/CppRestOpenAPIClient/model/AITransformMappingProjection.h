/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AITransformMappingProjection.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_AITransformMappingProjection_H_
#define COM_MAILSLURP_CLIENT_MODEL_AITransformMappingProjection_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  AITransformMappingProjection
    : public ModelBase
{
public:
    AITransformMappingProjection();
    virtual ~AITransformMappingProjection();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// AITransformMappingProjection members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUserId() const;
    bool userIdIsSet() const;
    void unsetUserId();

    void setUserId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAiTransformId() const;
    bool aiTransformIdIsSet() const;
    void unsetAiTransformId();

    void setAiTransformId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEntityId() const;
    bool entityIdIsSet() const;
    void unsetEntityId();

    void setEntityId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEntityType() const;
    bool entityTypeIsSet() const;
    void unsetEntityType();

    void setEntityType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getContentSelector() const;
    bool contentSelectorIsSet() const;
    void unsetContentSelector();

    void setContentSelector(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTriggerSelector() const;
    bool triggerSelectorIsSet() const;
    void unsetTriggerSelector();

    void setTriggerSelector(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);


protected:
    utility::string_t m_UserId;
    bool m_UserIdIsSet;
    utility::string_t m_AiTransformId;
    bool m_AiTransformIdIsSet;
    utility::string_t m_EntityId;
    bool m_EntityIdIsSet;
    utility::string_t m_EntityType;
    bool m_EntityTypeIsSet;
    utility::string_t m_ContentSelector;
    bool m_ContentSelectorIsSet;
    utility::string_t m_TriggerSelector;
    bool m_TriggerSelectorIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_AITransformMappingProjection_H_ */
