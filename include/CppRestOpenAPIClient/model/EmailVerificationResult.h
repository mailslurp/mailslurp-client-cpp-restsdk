/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * EmailVerificationResult.h
 *
 * Email verification result. Valid means email address exists according to response from mail server running at the domain and port given.
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_EmailVerificationResult_H_
#define COM_MAILSLURP_CLIENT_MODEL_EmailVerificationResult_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// Email verification result. Valid means email address exists according to response from mail server running at the domain and port given.
/// </summary>
class  EmailVerificationResult
    : public ModelBase
{
public:
    EmailVerificationResult();
    virtual ~EmailVerificationResult();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// EmailVerificationResult members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDomainName() const;
    bool domainNameIsSet() const;
    void unsetDomainName();

    void setDomainName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getPort() const;
    bool portIsSet() const;
    void unsetPort();

    void setPort(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEmailAddress() const;
    bool emailAddressIsSet() const;
    void unsetEmailAddress();

    void setEmailAddress(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsValid() const;
    bool isValidIsSet() const;
    void unsetIsValid();

    void setIsValid(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getError() const;
    bool errorIsSet() const;
    void unsetError();

    void setError(const utility::string_t& value);


protected:
    utility::string_t m_DomainName;
    bool m_DomainNameIsSet;
    int32_t m_Port;
    bool m_PortIsSet;
    utility::string_t m_EmailAddress;
    bool m_EmailAddressIsSet;
    bool m_IsValid;
    bool m_IsValidIsSet;
    utility::string_t m_Error;
    bool m_ErrorIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_EmailVerificationResult_H_ */
