/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PhoneMessageThreadProjection.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_PhoneMessageThreadProjection_H_
#define COM_MAILSLURP_CLIENT_MODEL_PhoneMessageThreadProjection_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  PhoneMessageThreadProjection
    : public ModelBase
{
public:
    PhoneMessageThreadProjection();
    virtual ~PhoneMessageThreadProjection();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PhoneMessageThreadProjection members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLastBody() const;
    bool lastBodyIsSet() const;
    void unsetLastBody();

    void setLastBody(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPhoneNumber() const;
    bool phoneNumberIsSet() const;
    void unsetPhoneNumber();

    void setPhoneNumber(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPhoneNumberId() const;
    bool phoneNumberIdIsSet() const;
    void unsetPhoneNumberId();

    void setPhoneNumberId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOtherPhoneNumber() const;
    bool otherPhoneNumberIsSet() const;
    void unsetOtherPhoneNumber();

    void setOtherPhoneNumber(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLastMessageDirection() const;
    bool lastMessageDirectionIsSet() const;
    void unsetLastMessageDirection();

    void setLastMessageDirection(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getLastCreated() const;
    bool lastCreatedIsSet() const;
    void unsetLastCreated();

    void setLastCreated(const utility::datetime& value);


protected:
    utility::string_t m_LastBody;
    bool m_LastBodyIsSet;
    utility::string_t m_PhoneNumber;
    bool m_PhoneNumberIsSet;
    utility::string_t m_PhoneNumberId;
    bool m_PhoneNumberIdIsSet;
    utility::string_t m_OtherPhoneNumber;
    bool m_OtherPhoneNumberIsSet;
    utility::string_t m_LastMessageDirection;
    bool m_LastMessageDirectionIsSet;
    utility::datetime m_LastCreated;
    bool m_LastCreatedIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_PhoneMessageThreadProjection_H_ */
