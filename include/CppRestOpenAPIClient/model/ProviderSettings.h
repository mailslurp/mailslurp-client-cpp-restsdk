/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ProviderSettings.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_ProviderSettings_H_
#define COM_MAILSLURP_CLIENT_MODEL_ProviderSettings_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  ProviderSettings
    : public ModelBase
{
public:
    ProviderSettings();
    virtual ~ProviderSettings();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ProviderSettings members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMailProvider() const;
    bool mailProviderIsSet() const;
    void unsetMailProvider();

    void setMailProvider(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getImapHost() const;
    bool imapHostIsSet() const;
    void unsetImapHost();

    void setImapHost(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getImapPort() const;
    bool imapPortIsSet() const;
    void unsetImapPort();

    void setImapPort(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isImapSsl() const;
    bool imapSslIsSet() const;
    void unsetImapSsl();

    void setImapSsl(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isImapStartTls() const;
    bool imapStartTlsIsSet() const;
    void unsetImapStartTls();

    void setImapStartTls(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSmtpHost() const;
    bool smtpHostIsSet() const;
    void unsetSmtpHost();

    void setSmtpHost(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getSmtpPort() const;
    bool smtpPortIsSet() const;
    void unsetSmtpPort();

    void setSmtpPort(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isSmtpSsl() const;
    bool smtpSslIsSet() const;
    void unsetSmtpSsl();

    void setSmtpSsl(bool value);

    /// <summary>
    /// 
    /// </summary>
    bool isSmtpStartTls() const;
    bool smtpStartTlsIsSet() const;
    void unsetSmtpStartTls();

    void setSmtpStartTls(bool value);


protected:
    utility::string_t m_MailProvider;
    bool m_MailProviderIsSet;
    utility::string_t m_ImapHost;
    bool m_ImapHostIsSet;
    int32_t m_ImapPort;
    bool m_ImapPortIsSet;
    bool m_ImapSsl;
    bool m_ImapSslIsSet;
    bool m_ImapStartTls;
    bool m_ImapStartTlsIsSet;
    utility::string_t m_SmtpHost;
    bool m_SmtpHostIsSet;
    int32_t m_SmtpPort;
    bool m_SmtpPortIsSet;
    bool m_SmtpSsl;
    bool m_SmtpSslIsSet;
    bool m_SmtpStartTls;
    bool m_SmtpStartTlsIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_ProviderSettings_H_ */
