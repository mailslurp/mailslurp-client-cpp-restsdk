/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * EmergencyAddress.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_EmergencyAddress_H_
#define COM_MAILSLURP_CLIENT_MODEL_EmergencyAddress_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  EmergencyAddress
    : public ModelBase
{
public:
    EmergencyAddress();
    virtual ~EmergencyAddress();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// EmergencyAddress members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSid() const;
    bool sidIsSet() const;
    void unsetSid();

    void setSid(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUserId() const;
    bool userIdIsSet() const;
    void unsetUserId();

    void setUserId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDisplayName() const;
    bool displayNameIsSet() const;
    void unsetDisplayName();

    void setDisplayName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCustomerName() const;
    bool customerNameIsSet() const;
    void unsetCustomerName();

    void setCustomerName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAddress1() const;
    bool address1IsSet() const;
    void unsetAddress1();

    void setAddress1(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCity() const;
    bool cityIsSet() const;
    void unsetCity();

    void setCity(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getRegion() const;
    bool regionIsSet() const;
    void unsetRegion();

    void setRegion(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPostalCode() const;
    bool postalCodeIsSet() const;
    void unsetPostalCode();

    void setPostalCode(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPhoneCountry() const;
    bool phoneCountryIsSet() const;
    void unsetPhoneCountry();

    void setPhoneCountry(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAccountSid() const;
    bool accountSidIsSet() const;
    void unsetAccountSid();

    void setAccountSid(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreatedAt();

    void setCreatedAt(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getUpdatedAt() const;
    bool updatedAtIsSet() const;
    void unsetUpdatedAt();

    void setUpdatedAt(const utility::datetime& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_Sid;
    bool m_SidIsSet;
    utility::string_t m_UserId;
    bool m_UserIdIsSet;
    utility::string_t m_DisplayName;
    bool m_DisplayNameIsSet;
    utility::string_t m_CustomerName;
    bool m_CustomerNameIsSet;
    utility::string_t m_Address1;
    bool m_Address1IsSet;
    utility::string_t m_City;
    bool m_CityIsSet;
    utility::string_t m_Region;
    bool m_RegionIsSet;
    utility::string_t m_PostalCode;
    bool m_PostalCodeIsSet;
    utility::string_t m_PhoneCountry;
    bool m_PhoneCountryIsSet;
    utility::string_t m_AccountSid;
    bool m_AccountSidIsSet;
    utility::datetime m_CreatedAt;
    bool m_CreatedAtIsSet;
    utility::datetime m_UpdatedAt;
    bool m_UpdatedAtIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_EmergencyAddress_H_ */
