/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * EmailRecipientsProjection.h
 *
 * Recipients of original email in thread
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_EmailRecipientsProjection_H_
#define COM_MAILSLURP_CLIENT_MODEL_EmailRecipientsProjection_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/RecipientProjection.h"
#include <vector>

namespace com {
namespace mailslurp {
namespace client {
namespace model {

class RecipientProjection;

/// <summary>
/// Recipients of original email in thread
/// </summary>
class  EmailRecipientsProjection
    : public ModelBase
{
public:
    EmailRecipientsProjection();
    virtual ~EmailRecipientsProjection();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// EmailRecipientsProjection members

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<RecipientProjection>>& getTo();
    bool toIsSet() const;
    void unsetTo();

    void setTo(const std::vector<std::shared_ptr<RecipientProjection>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<RecipientProjection>>& getCc();
    bool ccIsSet() const;
    void unsetCc();

    void setCc(const std::vector<std::shared_ptr<RecipientProjection>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<RecipientProjection>>& getBcc();
    bool bccIsSet() const;
    void unsetBcc();

    void setBcc(const std::vector<std::shared_ptr<RecipientProjection>>& value);


protected:
    std::vector<std::shared_ptr<RecipientProjection>> m_To;
    bool m_ToIsSet;
    std::vector<std::shared_ptr<RecipientProjection>> m_Cc;
    bool m_CcIsSet;
    std::vector<std::shared_ptr<RecipientProjection>> m_Bcc;
    bool m_BccIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_EmailRecipientsProjection_H_ */
