/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ConnectorSyncRequestResult.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_ConnectorSyncRequestResult_H_
#define COM_MAILSLURP_CLIENT_MODEL_ConnectorSyncRequestResult_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/ConnectorSyncResult.h"
#include <cpprest/details/basic_types.h>

namespace com {
namespace mailslurp {
namespace client {
namespace model {

class ConnectorSyncResult;

/// <summary>
/// 
/// </summary>
class  ConnectorSyncRequestResult
    : public ModelBase
{
public:
    ConnectorSyncRequestResult();
    virtual ~ConnectorSyncRequestResult();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ConnectorSyncRequestResult members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ConnectorSyncResult> getSyncResult() const;
    bool syncResultIsSet() const;
    void unsetSyncResult();

    void setSyncResult(const std::shared_ptr<ConnectorSyncResult>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getException() const;
    bool exceptionIsSet() const;
    void unsetException();

    void setException(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEventId() const;
    bool eventIdIsSet() const;
    void unsetEventId();

    void setEventId(const utility::string_t& value);


protected:
    std::shared_ptr<ConnectorSyncResult> m_SyncResult;
    bool m_SyncResultIsSet;
    utility::string_t m_Exception;
    bool m_ExceptionIsSet;
    utility::string_t m_EventId;
    bool m_EventIdIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_ConnectorSyncRequestResult_H_ */
