/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ImapMailboxStatus.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_ImapMailboxStatus_H_
#define COM_MAILSLURP_CLIENT_MODEL_ImapMailboxStatus_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/Object.h"
#include <map>
#include <vector>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  ImapMailboxStatus
    : public ModelBase
{
public:
    ImapMailboxStatus();
    virtual ~ImapMailboxStatus();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ImapMailboxStatus members

    /// <summary>
    /// The mailbox name.
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// True if the mailbox is open in read-only mode.
    /// </summary>
    bool isReadOnly() const;
    bool readOnlyIsSet() const;
    void unsetReadOnly();

    void setReadOnly(bool value);

    /// <summary>
    /// Results map
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<Object>>& getItems();
    bool itemsIsSet() const;
    void unsetItems();

    void setItems(const std::map<utility::string_t, std::shared_ptr<Object>>& value);

    /// <summary>
    /// The mailbox flags.
    /// </summary>
    std::vector<utility::string_t>& getFlags();
    bool flagsIsSet() const;
    void unsetFlags();

    void setFlags(const std::vector<utility::string_t>& value);

    /// <summary>
    /// The mailbox permanent flags.
    /// </summary>
    std::vector<utility::string_t>& getPermanentFlags();
    bool permanentFlagsIsSet() const;
    void unsetPermanentFlags();

    void setPermanentFlags(const std::vector<utility::string_t>& value);

    /// <summary>
    /// The sequence number of the first unseen message in the mailbox.
    /// </summary>
    int64_t getUnseenSeqNum() const;
    bool unseenSeqNumIsSet() const;
    void unsetUnseenSeqNum();

    void setUnseenSeqNum(int64_t value);

    /// <summary>
    /// The number of messages in this mailbox.
    /// </summary>
    int32_t getMessages() const;
    bool messagesIsSet() const;
    void unsetMessages();

    void setMessages(int32_t value);

    /// <summary>
    /// The number of messages not seen since the last time the mailbox was opened.
    /// </summary>
    int32_t getRecent() const;
    bool recentIsSet() const;
    void unsetRecent();

    void setRecent(int32_t value);

    /// <summary>
    /// The number of unread messages.
    /// </summary>
    int32_t getUnseen() const;
    bool unseenIsSet() const;
    void unsetUnseen();

    void setUnseen(int32_t value);

    /// <summary>
    /// The next UID.
    /// </summary>
    int64_t getUidNext() const;
    bool uidNextIsSet() const;
    void unsetUidNext();

    void setUidNext(int64_t value);

    /// <summary>
    /// Together with a UID, it is a unique identifier for a message. Must be greater than or equal to 1.
    /// </summary>
    int32_t getUidValidity() const;
    bool uidValidityIsSet() const;
    void unsetUidValidity();

    void setUidValidity(int32_t value);

    /// <summary>
    /// Per-mailbox limit of message size. Set only if server supports the APPENDLIMIT extension
    /// </summary>
    int32_t getAppendLimit() const;
    bool appendLimitIsSet() const;
    void unsetAppendLimit();

    void setAppendLimit(int32_t value);


protected:
    utility::string_t m_Name;
    bool m_NameIsSet;
    bool m_ReadOnly;
    bool m_ReadOnlyIsSet;
    std::map<utility::string_t, std::shared_ptr<Object>> m_Items;
    bool m_ItemsIsSet;
    std::vector<utility::string_t> m_Flags;
    bool m_FlagsIsSet;
    std::vector<utility::string_t> m_PermanentFlags;
    bool m_PermanentFlagsIsSet;
    int64_t m_UnseenSeqNum;
    bool m_UnseenSeqNumIsSet;
    int32_t m_Messages;
    bool m_MessagesIsSet;
    int32_t m_Recent;
    bool m_RecentIsSet;
    int32_t m_Unseen;
    bool m_UnseenIsSet;
    int64_t m_UidNext;
    bool m_UidNextIsSet;
    int32_t m_UidValidity;
    bool m_UidValidityIsSet;
    int32_t m_AppendLimit;
    bool m_AppendLimitIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_ImapMailboxStatus_H_ */
