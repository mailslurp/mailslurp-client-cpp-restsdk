/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PhoneMessageThreadItemProjection.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_PhoneMessageThreadItemProjection_H_
#define COM_MAILSLURP_CLIENT_MODEL_PhoneMessageThreadItemProjection_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  PhoneMessageThreadItemProjection
    : public ModelBase
{
public:
    PhoneMessageThreadItemProjection();
    virtual ~PhoneMessageThreadItemProjection();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PhoneMessageThreadItemProjection members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBody() const;
    bool bodyIsSet() const;
    void unsetBody();

    void setBody(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPhoneNumberId() const;
    bool phoneNumberIdIsSet() const;
    void unsetPhoneNumberId();

    void setPhoneNumberId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getCreated() const;
    bool createdIsSet() const;
    void unsetCreated();

    void setCreated(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMessageDirection() const;
    bool messageDirectionIsSet() const;
    void unsetMessageDirection();

    void setMessageDirection(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getToPhoneNumber() const;
    bool toPhoneNumberIsSet() const;
    void unsetToPhoneNumber();

    void setToPhoneNumber(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getFromPhoneNumber() const;
    bool fromPhoneNumberIsSet() const;
    void unsetFromPhoneNumber();

    void setFromPhoneNumber(const utility::string_t& value);


protected:
    utility::string_t m_Body;
    bool m_BodyIsSet;
    utility::string_t m_PhoneNumberId;
    bool m_PhoneNumberIdIsSet;
    utility::datetime m_Created;
    bool m_CreatedIsSet;
    utility::string_t m_MessageDirection;
    bool m_MessageDirectionIsSet;
    utility::string_t m_ToPhoneNumber;
    bool m_ToPhoneNumberIsSet;
    utility::string_t m_FromPhoneNumber;
    bool m_FromPhoneNumberIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_PhoneMessageThreadItemProjection_H_ */
