/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ImapServerListResult.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_ImapServerListResult_H_
#define COM_MAILSLURP_CLIENT_MODEL_ImapServerListResult_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/ImapEmailProjection.h"
#include <vector>

namespace com {
namespace mailslurp {
namespace client {
namespace model {

class ImapEmailProjection;

/// <summary>
/// 
/// </summary>
class  ImapServerListResult
    : public ModelBase
{
public:
    ImapServerListResult();
    virtual ~ImapServerListResult();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ImapServerListResult members

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<ImapEmailProjection>>& getResults();
    bool resultsIsSet() const;
    void unsetResults();

    void setResults(const std::vector<std::shared_ptr<ImapEmailProjection>>& value);


protected:
    std::vector<std::shared_ptr<ImapEmailProjection>> m_Results;
    bool m_ResultsIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_ImapServerListResult_H_ */
