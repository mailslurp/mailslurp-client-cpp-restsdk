/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * WebhookNewAITransformResultPayload.h
 *
 * NEW_AI_TRANSFORM_RESULT webhook payload. Sent to your webhook url endpoint via HTTP POST when a structured data result is generated by the AI Transformer that your webhook is attached to. Use the AI Transform Result ID to fetch the full details.
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_WebhookNewAITransformResultPayload_H_
#define COM_MAILSLURP_CLIENT_MODEL_WebhookNewAITransformResultPayload_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// NEW_AI_TRANSFORM_RESULT webhook payload. Sent to your webhook url endpoint via HTTP POST when a structured data result is generated by the AI Transformer that your webhook is attached to. Use the AI Transform Result ID to fetch the full details.
/// </summary>
class  WebhookNewAITransformResultPayload
    : public ModelBase
{
public:
    WebhookNewAITransformResultPayload();
    virtual ~WebhookNewAITransformResultPayload();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// WebhookNewAITransformResultPayload members

    /// <summary>
    /// Idempotent message ID. Store this ID locally or in a database to prevent message duplication.
    /// </summary>
    utility::string_t getMessageId() const;
    bool messageIdIsSet() const;
    void unsetMessageId();

    void setMessageId(const utility::string_t& value);

    /// <summary>
    /// ID of webhook entity being triggered
    /// </summary>
    utility::string_t getWebhookId() const;
    bool webhookIdIsSet() const;
    void unsetWebhookId();

    void setWebhookId(const utility::string_t& value);

    /// <summary>
    /// Name of the event type webhook is being triggered for.
    /// </summary>
    utility::string_t getEventName() const;
    bool eventNameIsSet() const;
    void unsetEventName();

    void setEventName(const utility::string_t& value);

    /// <summary>
    /// Name of the webhook being triggered
    /// </summary>
    utility::string_t getWebhookName() const;
    bool webhookNameIsSet() const;
    void unsetWebhookName();

    void setWebhookName(const utility::string_t& value);

    /// <summary>
    /// AI Transform ID of event
    /// </summary>
    utility::string_t getAiTransformResultId() const;
    bool aiTransformResultIdIsSet() const;
    void unsetAiTransformResultId();

    void setAiTransformResultId(const utility::string_t& value);

    /// <summary>
    /// User ID of event
    /// </summary>
    utility::string_t getUserId() const;
    bool userIdIsSet() const;
    void unsetUserId();

    void setUserId(const utility::string_t& value);

    /// <summary>
    /// ID of AI Transform
    /// </summary>
    utility::string_t getAiTransformId() const;
    bool aiTransformIdIsSet() const;
    void unsetAiTransformId();

    void setAiTransformId(const utility::string_t& value);

    /// <summary>
    /// ID of AI Transform mapping
    /// </summary>
    utility::string_t getAiTransformMappingId() const;
    bool aiTransformMappingIdIsSet() const;
    void unsetAiTransformMappingId();

    void setAiTransformMappingId(const utility::string_t& value);

    /// <summary>
    /// ID of entity that triggered the transformation
    /// </summary>
    utility::string_t getEntityId() const;
    bool entityIdIsSet() const;
    void unsetEntityId();

    void setEntityId(const utility::string_t& value);

    /// <summary>
    /// Entity type that triggered the transformation
    /// </summary>
    utility::string_t getEntityType() const;
    bool entityTypeIsSet() const;
    void unsetEntityType();

    void setEntityType(const utility::string_t& value);

    /// <summary>
    /// JSON string result of the AI transformation
    /// </summary>
    utility::string_t getResult() const;
    bool resultIsSet() const;
    void unsetResult();

    void setResult(const utility::string_t& value);


protected:
    utility::string_t m_MessageId;
    bool m_MessageIdIsSet;
    utility::string_t m_WebhookId;
    bool m_WebhookIdIsSet;
    utility::string_t m_EventName;
    bool m_EventNameIsSet;
    utility::string_t m_WebhookName;
    bool m_WebhookNameIsSet;
    utility::string_t m_AiTransformResultId;
    bool m_AiTransformResultIdIsSet;
    utility::string_t m_UserId;
    bool m_UserIdIsSet;
    utility::string_t m_AiTransformId;
    bool m_AiTransformIdIsSet;
    utility::string_t m_AiTransformMappingId;
    bool m_AiTransformMappingIdIsSet;
    utility::string_t m_EntityId;
    bool m_EntityIdIsSet;
    utility::string_t m_EntityType;
    bool m_EntityTypeIsSet;
    utility::string_t m_Result;
    bool m_ResultIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_WebhookNewAITransformResultPayload_H_ */
