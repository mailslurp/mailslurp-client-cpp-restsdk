/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UpdateInboxReplierOptions.h
 *
 * Options for updating an inbox replier
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_UpdateInboxReplierOptions_H_
#define COM_MAILSLURP_CLIENT_MODEL_UpdateInboxReplierOptions_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/Object.h"
#include <map>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// Options for updating an inbox replier
/// </summary>
class  UpdateInboxReplierOptions
    : public ModelBase
{
public:
    UpdateInboxReplierOptions();
    virtual ~UpdateInboxReplierOptions();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UpdateInboxReplierOptions members

    /// <summary>
    /// Inbox ID to attach replier to
    /// </summary>
    utility::string_t getInboxId() const;
    bool inboxIdIsSet() const;
    void unsetInboxId();

    void setInboxId(const utility::string_t& value);

    /// <summary>
    /// Name for replier
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Field to match against to trigger inbox replier for inbound email
    /// </summary>
    utility::string_t getField() const;
    bool fieldIsSet() const;
    void unsetField();

    void setField(const utility::string_t& value);

    /// <summary>
    /// String or wildcard style match for field specified when evaluating reply rules
    /// </summary>
    utility::string_t getMatch() const;
    bool matchIsSet() const;
    void unsetMatch();

    void setMatch(const utility::string_t& value);

    /// <summary>
    /// Reply-to email address when sending replying
    /// </summary>
    utility::string_t getReplyTo() const;
    bool replyToIsSet() const;
    void unsetReplyTo();

    void setReplyTo(const utility::string_t& value);

    /// <summary>
    /// Subject override when replying to email
    /// </summary>
    utility::string_t getSubject() const;
    bool subjectIsSet() const;
    void unsetSubject();

    void setSubject(const utility::string_t& value);

    /// <summary>
    /// Send email from address
    /// </summary>
    utility::string_t getFrom() const;
    bool fromIsSet() const;
    void unsetFrom();

    void setFrom(const utility::string_t& value);

    /// <summary>
    /// Email reply charset
    /// </summary>
    utility::string_t getCharset() const;
    bool charsetIsSet() const;
    void unsetCharset();

    void setCharset(const utility::string_t& value);

    /// <summary>
    /// Send HTML email
    /// </summary>
    bool isIsHTML() const;
    bool isHTMLIsSet() const;
    void unsetIsHTML();

    void setIsHTML(bool value);

    /// <summary>
    /// Ignore sender replyTo when responding. Send directly to the sender if enabled.
    /// </summary>
    bool isIgnoreReplyTo() const;
    bool ignoreReplyToIsSet() const;
    void unsetIgnoreReplyTo();

    void setIgnoreReplyTo(bool value);

    /// <summary>
    /// Email body for reply
    /// </summary>
    utility::string_t getBody() const;
    bool bodyIsSet() const;
    void unsetBody();

    void setBody(const utility::string_t& value);

    /// <summary>
    /// ID of template to use when sending a reply
    /// </summary>
    utility::string_t getTemplateId() const;
    bool templateIdIsSet() const;
    void unsetTemplateId();

    void setTemplateId(const utility::string_t& value);

    /// <summary>
    /// Template variable values
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<Object>>& getTemplateVariables();
    bool templateVariablesIsSet() const;
    void unsetTemplateVariables();

    void setTemplateVariables(const std::map<utility::string_t, std::shared_ptr<Object>>& value);


protected:
    utility::string_t m_InboxId;
    bool m_InboxIdIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Field;
    bool m_FieldIsSet;
    utility::string_t m_Match;
    bool m_MatchIsSet;
    utility::string_t m_ReplyTo;
    bool m_ReplyToIsSet;
    utility::string_t m_Subject;
    bool m_SubjectIsSet;
    utility::string_t m_From;
    bool m_FromIsSet;
    utility::string_t m_Charset;
    bool m_CharsetIsSet;
    bool m_IsHTML;
    bool m_IsHTMLIsSet;
    bool m_IgnoreReplyTo;
    bool m_IgnoreReplyToIsSet;
    utility::string_t m_Body;
    bool m_BodyIsSet;
    utility::string_t m_TemplateId;
    bool m_TemplateIdIsSet;
    std::map<utility::string_t, std::shared_ptr<Object>> m_TemplateVariables;
    bool m_TemplateVariablesIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_UpdateInboxReplierOptions_H_ */
