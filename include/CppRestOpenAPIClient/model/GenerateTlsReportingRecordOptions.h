/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GenerateTlsReportingRecordOptions.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_GenerateTlsReportingRecordOptions_H_
#define COM_MAILSLURP_CLIENT_MODEL_GenerateTlsReportingRecordOptions_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  GenerateTlsReportingRecordOptions
    : public ModelBase
{
public:
    GenerateTlsReportingRecordOptions();
    virtual ~GenerateTlsReportingRecordOptions();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// GenerateTlsReportingRecordOptions members

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getReportingAddresses();
    bool reportingAddressesIsSet() const;
    void unsetReportingAddresses();

    void setReportingAddresses(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getReportingUrl() const;
    bool reportingUrlIsSet() const;
    void unsetReportingUrl();

    void setReportingUrl(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getHost() const;
    bool hostIsSet() const;
    void unsetHost();

    void setHost(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getVersion() const;
    bool versionIsSet() const;
    void unsetVersion();

    void setVersion(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTtl() const;
    bool ttlIsSet() const;
    void unsetTtl();

    void setTtl(int32_t value);


protected:
    std::vector<utility::string_t> m_ReportingAddresses;
    bool m_ReportingAddressesIsSet;
    utility::string_t m_ReportingUrl;
    bool m_ReportingUrlIsSet;
    utility::string_t m_Host;
    bool m_HostIsSet;
    utility::string_t m_Version;
    bool m_VersionIsSet;
    int32_t m_Ttl;
    bool m_TtlIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_GenerateTlsReportingRecordOptions_H_ */
