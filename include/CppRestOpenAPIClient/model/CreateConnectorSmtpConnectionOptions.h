/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateConnectorSmtpConnectionOptions.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_CreateConnectorSmtpConnectionOptions_H_
#define COM_MAILSLURP_CLIENT_MODEL_CreateConnectorSmtpConnectionOptions_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  CreateConnectorSmtpConnectionOptions
    : public ModelBase
{
public:
    CreateConnectorSmtpConnectionOptions();
    virtual ~CreateConnectorSmtpConnectionOptions();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CreateConnectorSmtpConnectionOptions members

    /// <summary>
    /// 
    /// </summary>
    bool isEnabled() const;
    bool enabledIsSet() const;
    void unsetEnabled();

    void setEnabled(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSmtpHost() const;
    bool smtpHostIsSet() const;
    void unsetSmtpHost();

    void setSmtpHost(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getSmtpPort() const;
    bool smtpPortIsSet() const;
    void unsetSmtpPort();

    void setSmtpPort(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isSmtpSsl() const;
    bool smtpSslIsSet() const;
    void unsetSmtpSsl();

    void setSmtpSsl(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSmtpUsername() const;
    bool smtpUsernameIsSet() const;
    void unsetSmtpUsername();

    void setSmtpUsername(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSmtpPassword() const;
    bool smtpPasswordIsSet() const;
    void unsetSmtpPassword();

    void setSmtpPassword(const utility::string_t& value);


protected:
    bool m_Enabled;
    bool m_EnabledIsSet;
    utility::string_t m_SmtpHost;
    bool m_SmtpHostIsSet;
    int32_t m_SmtpPort;
    bool m_SmtpPortIsSet;
    bool m_SmtpSsl;
    bool m_SmtpSslIsSet;
    utility::string_t m_SmtpUsername;
    bool m_SmtpUsernameIsSet;
    utility::string_t m_SmtpPassword;
    bool m_SmtpPasswordIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_CreateConnectorSmtpConnectionOptions_H_ */
