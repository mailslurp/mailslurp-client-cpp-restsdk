/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * EmailThreadProjection.h
 *
 * An email thread is a message thread created for a email based on Message-ID, In-Reply-To, and References headers
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_EmailThreadProjection_H_
#define COM_MAILSLURP_CLIENT_MODEL_EmailThreadProjection_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/EmailRecipientsProjection.h"
#include "CppRestOpenAPIClient/model/SenderProjection.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace com {
namespace mailslurp {
namespace client {
namespace model {

class EmailRecipientsProjection;
class SenderProjection;

/// <summary>
/// An email thread is a message thread created for a email based on Message-ID, In-Reply-To, and References headers
/// </summary>
class  EmailThreadProjection
    : public ModelBase
{
public:
    EmailThreadProjection();
    virtual ~EmailThreadProjection();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// EmailThreadProjection members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<EmailRecipientsProjection> getRecipients() const;
    bool recipientsIsSet() const;
    void unsetRecipients();

    void setRecipients(const std::shared_ptr<EmailRecipientsProjection>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SenderProjection> getSender() const;
    bool senderIsSet() const;
    void unsetSender();

    void setSender(const std::shared_ptr<SenderProjection>& value);

    /// <summary>
    /// Inbox ID
    /// </summary>
    utility::string_t getInboxId() const;
    bool inboxIdIsSet() const;
    void unsetInboxId();

    void setInboxId(const utility::string_t& value);

    /// <summary>
    /// User ID
    /// </summary>
    utility::string_t getUserId() const;
    bool userIdIsSet() const;
    void unsetUserId();

    void setUserId(const utility::string_t& value);

    /// <summary>
    /// Updated at DateTime
    /// </summary>
    utility::datetime getUpdatedAt() const;
    bool updatedAtIsSet() const;
    void unsetUpdatedAt();

    void setUpdatedAt(const utility::datetime& value);

    /// <summary>
    /// Created at DateTime
    /// </summary>
    utility::datetime getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreatedAt();

    void setCreatedAt(const utility::datetime& value);

    /// <summary>
    /// To recipients
    /// </summary>
    std::vector<utility::string_t>& getTo();
    bool toIsSet() const;
    void unsetTo();

    void setTo(const std::vector<utility::string_t>& value);

    /// <summary>
    /// CC recipients
    /// </summary>
    std::vector<utility::string_t>& getCc();
    bool ccIsSet() const;
    void unsetCc();

    void setCc(const std::vector<utility::string_t>& value);

    /// <summary>
    /// BCC recipients
    /// </summary>
    std::vector<utility::string_t>& getBcc();
    bool bccIsSet() const;
    void unsetBcc();

    void setBcc(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Has attachments
    /// </summary>
    bool isHasAttachments() const;
    bool hasAttachmentsIsSet() const;
    void unsetHasAttachments();

    void setHasAttachments(bool value);

    /// <summary>
    /// Has unread
    /// </summary>
    bool isUnread() const;
    bool unreadIsSet() const;
    void unsetUnread();

    void setUnread(bool value);

    /// <summary>
    /// Number of messages in the thread
    /// </summary>
    int32_t getMessageCount() const;
    bool messageCountIsSet() const;
    void unsetMessageCount();

    void setMessageCount(int32_t value);

    /// <summary>
    /// Last body excerpt
    /// </summary>
    utility::string_t getLastBodyExcerpt() const;
    bool lastBodyExcerptIsSet() const;
    void unsetLastBodyExcerpt();

    void setLastBodyExcerpt(const utility::string_t& value);

    /// <summary>
    /// Last text excerpt
    /// </summary>
    utility::string_t getLastTextExcerpt() const;
    bool lastTextExcerptIsSet() const;
    void unsetLastTextExcerpt();

    void setLastTextExcerpt(const utility::string_t& value);

    /// <summary>
    /// Last email created time
    /// </summary>
    utility::datetime getLastCreatedAt() const;
    bool lastCreatedAtIsSet() const;
    void unsetLastCreatedAt();

    void setLastCreatedAt(const utility::datetime& value);

    /// <summary>
    /// Last sender
    /// </summary>
    utility::string_t getLastFrom() const;
    bool lastFromIsSet() const;
    void unsetLastFrom();

    void setLastFrom(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SenderProjection> getLastSender() const;
    bool lastSenderIsSet() const;
    void unsetLastSender();

    void setLastSender(const std::shared_ptr<SenderProjection>& value);

    /// <summary>
    /// Thread topic subject
    /// </summary>
    utility::string_t getSubject() const;
    bool subjectIsSet() const;
    void unsetSubject();

    void setSubject(const utility::string_t& value);

    /// <summary>
    /// ID of email thread
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// From sender
    /// </summary>
    utility::string_t getFrom() const;
    bool fromIsSet() const;
    void unsetFrom();

    void setFrom(const utility::string_t& value);


protected:
    std::shared_ptr<EmailRecipientsProjection> m_Recipients;
    bool m_RecipientsIsSet;
    std::shared_ptr<SenderProjection> m_Sender;
    bool m_SenderIsSet;
    utility::string_t m_InboxId;
    bool m_InboxIdIsSet;
    utility::string_t m_UserId;
    bool m_UserIdIsSet;
    utility::datetime m_UpdatedAt;
    bool m_UpdatedAtIsSet;
    utility::datetime m_CreatedAt;
    bool m_CreatedAtIsSet;
    std::vector<utility::string_t> m_To;
    bool m_ToIsSet;
    std::vector<utility::string_t> m_Cc;
    bool m_CcIsSet;
    std::vector<utility::string_t> m_Bcc;
    bool m_BccIsSet;
    bool m_HasAttachments;
    bool m_HasAttachmentsIsSet;
    bool m_Unread;
    bool m_UnreadIsSet;
    int32_t m_MessageCount;
    bool m_MessageCountIsSet;
    utility::string_t m_LastBodyExcerpt;
    bool m_LastBodyExcerptIsSet;
    utility::string_t m_LastTextExcerpt;
    bool m_LastTextExcerptIsSet;
    utility::datetime m_LastCreatedAt;
    bool m_LastCreatedAtIsSet;
    utility::string_t m_LastFrom;
    bool m_LastFromIsSet;
    std::shared_ptr<SenderProjection> m_LastSender;
    bool m_LastSenderIsSet;
    utility::string_t m_Subject;
    bool m_SubjectIsSet;
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_From;
    bool m_FromIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_EmailThreadProjection_H_ */
