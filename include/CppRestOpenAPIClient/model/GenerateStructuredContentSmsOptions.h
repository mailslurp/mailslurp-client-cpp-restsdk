/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GenerateStructuredContentSmsOptions.h
 *
 * Options for generating structured content output from an SMS
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_GenerateStructuredContentSmsOptions_H_
#define COM_MAILSLURP_CLIENT_MODEL_GenerateStructuredContentSmsOptions_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/StructuredOutputSchema.h"
#include <cpprest/details/basic_types.h>

namespace com {
namespace mailslurp {
namespace client {
namespace model {

class StructuredOutputSchema;

/// <summary>
/// Options for generating structured content output from an SMS
/// </summary>
class  GenerateStructuredContentSmsOptions
    : public ModelBase
{
public:
    GenerateStructuredContentSmsOptions();
    virtual ~GenerateStructuredContentSmsOptions();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// GenerateStructuredContentSmsOptions members

    /// <summary>
    /// SMS ID to read and pass to AI
    /// </summary>
    utility::string_t getSmsId() const;
    bool smsIdIsSet() const;
    void unsetSmsId();

    void setSmsId(const utility::string_t& value);

    /// <summary>
    /// Optional instructions for the AI to follow. Try to be precise and clear. You can include examples and hints.
    /// </summary>
    utility::string_t getInstructions() const;
    bool instructionsIsSet() const;
    void unsetInstructions();

    void setInstructions(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<StructuredOutputSchema> getOutputSchema() const;
    bool outputSchemaIsSet() const;
    void unsetOutputSchema();

    void setOutputSchema(const std::shared_ptr<StructuredOutputSchema>& value);

    /// <summary>
    /// ID of transformer to apply
    /// </summary>
    utility::string_t getTransformId() const;
    bool transformIdIsSet() const;
    void unsetTransformId();

    void setTransformId(const utility::string_t& value);


protected:
    utility::string_t m_SmsId;
    bool m_SmsIdIsSet;
    utility::string_t m_Instructions;
    bool m_InstructionsIsSet;
    std::shared_ptr<StructuredOutputSchema> m_OutputSchema;
    bool m_OutputSchemaIsSet;
    utility::string_t m_TransformId;
    bool m_TransformIdIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_GenerateStructuredContentSmsOptions_H_ */
