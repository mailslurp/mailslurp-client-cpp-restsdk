/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GuestPortalUserCreateDto.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_GuestPortalUserCreateDto_H_
#define COM_MAILSLURP_CLIENT_MODEL_GuestPortalUserCreateDto_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/GuestPortalUserDto.h"
#include <cpprest/details/basic_types.h>

namespace com {
namespace mailslurp {
namespace client {
namespace model {

class GuestPortalUserDto;

/// <summary>
/// 
/// </summary>
class  GuestPortalUserCreateDto
    : public ModelBase
{
public:
    GuestPortalUserCreateDto();
    virtual ~GuestPortalUserCreateDto();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// GuestPortalUserCreateDto members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<GuestPortalUserDto> getGuest() const;
    bool guestIsSet() const;
    void unsetGuest();

    void setGuest(const std::shared_ptr<GuestPortalUserDto>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPassword() const;
    bool passwordIsSet() const;
    void unsetPassword();

    void setPassword(const utility::string_t& value);


protected:
    std::shared_ptr<GuestPortalUserDto> m_Guest;
    bool m_GuestIsSet;
    utility::string_t m_Password;
    bool m_PasswordIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_GuestPortalUserCreateDto_H_ */
