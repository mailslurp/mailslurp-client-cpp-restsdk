/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ImapAccessDetails.h
 *
 * Access details for inbox using IMAP
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_ImapAccessDetails_H_
#define COM_MAILSLURP_CLIENT_MODEL_ImapAccessDetails_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// Access details for inbox using IMAP
/// </summary>
class  ImapAccessDetails
    : public ModelBase
{
public:
    ImapAccessDetails();
    virtual ~ImapAccessDetails();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ImapAccessDetails members

    /// <summary>
    /// Secure TLS IMAP server host domain
    /// </summary>
    utility::string_t getSecureImapServerHost() const;
    bool secureImapServerHostIsSet() const;
    void unsetSecureImapServerHost();

    void setSecureImapServerHost(const utility::string_t& value);

    /// <summary>
    /// Secure TLS IMAP server host port
    /// </summary>
    int32_t getSecureImapServerPort() const;
    bool secureImapServerPortIsSet() const;
    void unsetSecureImapServerPort();

    void setSecureImapServerPort(int32_t value);

    /// <summary>
    /// Secure TLS IMAP username for login
    /// </summary>
    utility::string_t getSecureImapUsername() const;
    bool secureImapUsernameIsSet() const;
    void unsetSecureImapUsername();

    void setSecureImapUsername(const utility::string_t& value);

    /// <summary>
    /// Secure TLS IMAP password for login
    /// </summary>
    utility::string_t getSecureImapPassword() const;
    bool secureImapPasswordIsSet() const;
    void unsetSecureImapPassword();

    void setSecureImapPassword(const utility::string_t& value);

    /// <summary>
    /// IMAP server host domain
    /// </summary>
    utility::string_t getImapServerHost() const;
    bool imapServerHostIsSet() const;
    void unsetImapServerHost();

    void setImapServerHost(const utility::string_t& value);

    /// <summary>
    /// IMAP server host port
    /// </summary>
    int32_t getImapServerPort() const;
    bool imapServerPortIsSet() const;
    void unsetImapServerPort();

    void setImapServerPort(int32_t value);

    /// <summary>
    /// IMAP username for login
    /// </summary>
    utility::string_t getImapUsername() const;
    bool imapUsernameIsSet() const;
    void unsetImapUsername();

    void setImapUsername(const utility::string_t& value);

    /// <summary>
    /// IMAP password for login
    /// </summary>
    utility::string_t getImapPassword() const;
    bool imapPasswordIsSet() const;
    void unsetImapPassword();

    void setImapPassword(const utility::string_t& value);

    /// <summary>
    /// IMAP mailbox to SELECT
    /// </summary>
    utility::string_t getImapMailbox() const;
    bool imapMailboxIsSet() const;
    void unsetImapMailbox();

    void setImapMailbox(const utility::string_t& value);


protected:
    utility::string_t m_SecureImapServerHost;
    bool m_SecureImapServerHostIsSet;
    int32_t m_SecureImapServerPort;
    bool m_SecureImapServerPortIsSet;
    utility::string_t m_SecureImapUsername;
    bool m_SecureImapUsernameIsSet;
    utility::string_t m_SecureImapPassword;
    bool m_SecureImapPasswordIsSet;
    utility::string_t m_ImapServerHost;
    bool m_ImapServerHostIsSet;
    int32_t m_ImapServerPort;
    bool m_ImapServerPortIsSet;
    utility::string_t m_ImapUsername;
    bool m_ImapUsernameIsSet;
    utility::string_t m_ImapPassword;
    bool m_ImapPasswordIsSet;
    utility::string_t m_ImapMailbox;
    bool m_ImapMailboxIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_ImapAccessDetails_H_ */
