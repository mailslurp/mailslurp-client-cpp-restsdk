/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Complaint.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_Complaint_H_
#define COM_MAILSLURP_CLIENT_MODEL_Complaint_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  Complaint
    : public ModelBase
{
public:
    Complaint();
    virtual ~Complaint();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Complaint members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUserId() const;
    bool userIdIsSet() const;
    void unsetUserId();

    void setUserId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getEventType() const;
    bool eventTypeIsSet() const;
    void unsetEventType();

    void setEventType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMailSource() const;
    bool mailSourceIsSet() const;
    void unsetMailSource();

    void setMailSource(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMailMessageId() const;
    bool mailMessageIdIsSet() const;
    void unsetMailMessageId();

    void setMailMessageId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getComplaintRecipient() const;
    bool complaintRecipientIsSet() const;
    void unsetComplaintRecipient();

    void setComplaintRecipient(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreatedAt();

    void setCreatedAt(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getUpdatedAt() const;
    bool updatedAtIsSet() const;
    void unsetUpdatedAt();

    void setUpdatedAt(const utility::datetime& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    utility::string_t m_UserId;
    bool m_UserIdIsSet;
    utility::string_t m_EventType;
    bool m_EventTypeIsSet;
    utility::string_t m_MailSource;
    bool m_MailSourceIsSet;
    utility::string_t m_MailMessageId;
    bool m_MailMessageIdIsSet;
    utility::string_t m_ComplaintRecipient;
    bool m_ComplaintRecipientIsSet;
    utility::datetime m_CreatedAt;
    bool m_CreatedAtIsSet;
    utility::datetime m_UpdatedAt;
    bool m_UpdatedAtIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_Complaint_H_ */
