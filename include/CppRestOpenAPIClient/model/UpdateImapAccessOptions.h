/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UpdateImapAccessOptions.h
 *
 * Edit access details for inbox using IMAP
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_UpdateImapAccessOptions_H_
#define COM_MAILSLURP_CLIENT_MODEL_UpdateImapAccessOptions_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// Edit access details for inbox using IMAP
/// </summary>
class  UpdateImapAccessOptions
    : public ModelBase
{
public:
    UpdateImapAccessOptions();
    virtual ~UpdateImapAccessOptions();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// UpdateImapAccessOptions members

    /// <summary>
    /// IMAP username for login
    /// </summary>
    utility::string_t getImapUsername() const;
    bool imapUsernameIsSet() const;
    void unsetImapUsername();

    void setImapUsername(const utility::string_t& value);

    /// <summary>
    /// IMAP password for login
    /// </summary>
    utility::string_t getImapPassword() const;
    bool imapPasswordIsSet() const;
    void unsetImapPassword();

    void setImapPassword(const utility::string_t& value);


protected:
    utility::string_t m_ImapUsername;
    bool m_ImapUsernameIsSet;
    utility::string_t m_ImapPassword;
    bool m_ImapPasswordIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_UpdateImapAccessOptions_H_ */
