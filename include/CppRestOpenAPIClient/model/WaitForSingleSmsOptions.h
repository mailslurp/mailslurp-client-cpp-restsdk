/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * WaitForSingleSmsOptions.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_WaitForSingleSmsOptions_H_
#define COM_MAILSLURP_CLIENT_MODEL_WaitForSingleSmsOptions_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  WaitForSingleSmsOptions
    : public ModelBase
{
public:
    WaitForSingleSmsOptions();
    virtual ~WaitForSingleSmsOptions();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// WaitForSingleSmsOptions members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPhoneNumberId() const;
    bool phoneNumberIdIsSet() const;
    void unsetPhoneNumberId();

    void setPhoneNumberId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getTimeout() const;
    bool timeoutIsSet() const;
    void unsetTimeout();

    void setTimeout(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isUnreadOnly() const;
    bool unreadOnlyIsSet() const;
    void unsetUnreadOnly();

    void setUnreadOnly(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getBefore() const;
    bool beforeIsSet() const;
    void unsetBefore();

    void setBefore(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getSince() const;
    bool sinceIsSet() const;
    void unsetSince();

    void setSince(const utility::datetime& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSortDirection() const;
    bool sortDirectionIsSet() const;
    void unsetSortDirection();

    void setSortDirection(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getDelay() const;
    bool delayIsSet() const;
    void unsetDelay();

    void setDelay(int64_t value);


protected:
    utility::string_t m_PhoneNumberId;
    bool m_PhoneNumberIdIsSet;
    int64_t m_Timeout;
    bool m_TimeoutIsSet;
    bool m_UnreadOnly;
    bool m_UnreadOnlyIsSet;
    utility::datetime m_Before;
    bool m_BeforeIsSet;
    utility::datetime m_Since;
    bool m_SinceIsSet;
    utility::string_t m_SortDirection;
    bool m_SortDirectionIsSet;
    int64_t m_Delay;
    bool m_DelayIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_WaitForSingleSmsOptions_H_ */
