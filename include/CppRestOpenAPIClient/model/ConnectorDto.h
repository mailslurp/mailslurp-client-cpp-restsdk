/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ConnectorDto.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_ConnectorDto_H_
#define COM_MAILSLURP_CLIENT_MODEL_ConnectorDto_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  ConnectorDto
    : public ModelBase
{
public:
    ConnectorDto();
    virtual ~ConnectorDto();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ConnectorDto members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isEnabled() const;
    bool enabledIsSet() const;
    void unsetEnabled();

    void setEnabled(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUserId() const;
    bool userIdIsSet() const;
    void unsetUserId();

    void setUserId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getConnectorType() const;
    bool connectorTypeIsSet() const;
    void unsetConnectorType();

    void setConnectorType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getConnectorAuthType() const;
    bool connectorAuthTypeIsSet() const;
    void unsetConnectorAuthType();

    void setConnectorAuthType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isSyncEnabled() const;
    bool syncEnabledIsSet() const;
    void unsetSyncEnabled();

    void setSyncEnabled(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSyncScheduleType() const;
    bool syncScheduleTypeIsSet() const;
    void unsetSyncScheduleType();

    void setSyncScheduleType(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getSyncInterval() const;
    bool syncIntervalIsSet() const;
    void unsetSyncInterval();

    void setSyncInterval(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getImapHost() const;
    bool imapHostIsSet() const;
    void unsetImapHost();

    void setImapHost(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getImapPort() const;
    bool imapPortIsSet() const;
    void unsetImapPort();

    void setImapPort(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getImapUsername() const;
    bool imapUsernameIsSet() const;
    void unsetImapUsername();

    void setImapUsername(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getImapPassword() const;
    bool imapPasswordIsSet() const;
    void unsetImapPassword();

    void setImapPassword(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isImapSsl() const;
    bool imapSslIsSet() const;
    void unsetImapSsl();

    void setImapSsl(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSelectFolder() const;
    bool selectFolderIsSet() const;
    void unsetSelectFolder();

    void setSelectFolder(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSearchTerms() const;
    bool searchTermsIsSet() const;
    void unsetSearchTerms();

    void setSearchTerms(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::datetime getCreatedAt() const;
    bool createdAtIsSet() const;
    void unsetCreatedAt();

    void setCreatedAt(const utility::datetime& value);


protected:
    utility::string_t m_Id;
    bool m_IdIsSet;
    bool m_Enabled;
    bool m_EnabledIsSet;
    utility::string_t m_UserId;
    bool m_UserIdIsSet;
    utility::string_t m_ConnectorType;
    bool m_ConnectorTypeIsSet;
    utility::string_t m_ConnectorAuthType;
    bool m_ConnectorAuthTypeIsSet;
    bool m_SyncEnabled;
    bool m_SyncEnabledIsSet;
    utility::string_t m_SyncScheduleType;
    bool m_SyncScheduleTypeIsSet;
    int32_t m_SyncInterval;
    bool m_SyncIntervalIsSet;
    utility::string_t m_ImapHost;
    bool m_ImapHostIsSet;
    int32_t m_ImapPort;
    bool m_ImapPortIsSet;
    utility::string_t m_ImapUsername;
    bool m_ImapUsernameIsSet;
    utility::string_t m_ImapPassword;
    bool m_ImapPasswordIsSet;
    bool m_ImapSsl;
    bool m_ImapSslIsSet;
    utility::string_t m_SelectFolder;
    bool m_SelectFolderIsSet;
    utility::string_t m_SearchTerms;
    bool m_SearchTermsIsSet;
    utility::datetime m_CreatedAt;
    bool m_CreatedAtIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_ConnectorDto_H_ */
