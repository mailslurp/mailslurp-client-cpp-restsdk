/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DNSLookupsOptions.h
 *
 * Options for multiple DNS queries
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_DNSLookupsOptions_H_
#define COM_MAILSLURP_CLIENT_MODEL_DNSLookupsOptions_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <vector>
#include "CppRestOpenAPIClient/model/DNSLookupOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {

class DNSLookupOptions;

/// <summary>
/// Options for multiple DNS queries
/// </summary>
class  DNSLookupsOptions
    : public ModelBase
{
public:
    DNSLookupsOptions();
    virtual ~DNSLookupsOptions();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// DNSLookupsOptions members

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<DNSLookupOptions>>& getLookups();
    bool lookupsIsSet() const;
    void unsetLookups();

    void setLookups(const std::vector<std::shared_ptr<DNSLookupOptions>>& value);


protected:
    std::vector<std::shared_ptr<DNSLookupOptions>> m_Lookups;
    bool m_LookupsIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_DNSLookupsOptions_H_ */
