/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateConnectorSyncSettingsOptions.h
 *
 * Options for creating automatic syncing between an inbox connection and an external mail provider
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_CreateConnectorSyncSettingsOptions_H_
#define COM_MAILSLURP_CLIENT_MODEL_CreateConnectorSyncSettingsOptions_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// Options for creating automatic syncing between an inbox connection and an external mail provider
/// </summary>
class  CreateConnectorSyncSettingsOptions
    : public ModelBase
{
public:
    CreateConnectorSyncSettingsOptions();
    virtual ~CreateConnectorSyncSettingsOptions();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CreateConnectorSyncSettingsOptions members

    /// <summary>
    /// Enable automatic background sync
    /// </summary>
    bool isSyncEnabled() const;
    bool syncEnabledIsSet() const;
    void unsetSyncEnabled();

    void setSyncEnabled(bool value);

    /// <summary>
    /// Sync schedule type
    /// </summary>
    utility::string_t getSyncScheduleType() const;
    bool syncScheduleTypeIsSet() const;
    void unsetSyncScheduleType();

    void setSyncScheduleType(const utility::string_t& value);

    /// <summary>
    /// Sync interval in minutes
    /// </summary>
    int32_t getSyncInterval() const;
    bool syncIntervalIsSet() const;
    void unsetSyncInterval();

    void setSyncInterval(int32_t value);


protected:
    bool m_SyncEnabled;
    bool m_SyncEnabledIsSet;
    utility::string_t m_SyncScheduleType;
    bool m_SyncScheduleTypeIsSet;
    int32_t m_SyncInterval;
    bool m_SyncIntervalIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_CreateConnectorSyncSettingsOptions_H_ */
