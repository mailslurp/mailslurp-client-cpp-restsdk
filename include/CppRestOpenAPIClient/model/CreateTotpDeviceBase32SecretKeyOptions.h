/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateTotpDeviceBase32SecretKeyOptions.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_CreateTotpDeviceBase32SecretKeyOptions_H_
#define COM_MAILSLURP_CLIENT_MODEL_CreateTotpDeviceBase32SecretKeyOptions_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  CreateTotpDeviceBase32SecretKeyOptions
    : public ModelBase
{
public:
    CreateTotpDeviceBase32SecretKeyOptions();
    virtual ~CreateTotpDeviceBase32SecretKeyOptions();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CreateTotpDeviceBase32SecretKeyOptions members

    /// <summary>
    /// Base32 secret key for TOTP device as alternative to OTP Auth URI or QR code.
    /// </summary>
    utility::string_t getBase32SecretKey() const;
    bool base32SecretKeyIsSet() const;
    void unsetBase32SecretKey();

    void setBase32SecretKey(const utility::string_t& value);

    /// <summary>
    /// Name for labeling the TOTP device
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Optional username for the TOTP device
    /// </summary>
    utility::string_t getUsername() const;
    bool usernameIsSet() const;
    void unsetUsername();

    void setUsername(const utility::string_t& value);

    /// <summary>
    /// Optional issuer override for the TOTP device
    /// </summary>
    utility::string_t getIssuer() const;
    bool issuerIsSet() const;
    void unsetIssuer();

    void setIssuer(const utility::string_t& value);

    /// <summary>
    /// Optional number of digits in TOTP code
    /// </summary>
    int32_t getDigits() const;
    bool digitsIsSet() const;
    void unsetDigits();

    void setDigits(int32_t value);

    /// <summary>
    /// Optional period in seconds for TOTP code expiration
    /// </summary>
    int32_t getPeriod() const;
    bool periodIsSet() const;
    void unsetPeriod();

    void setPeriod(int32_t value);

    /// <summary>
    /// Optional algorithm override
    /// </summary>
    utility::string_t getAlgorithm() const;
    bool algorithmIsSet() const;
    void unsetAlgorithm();

    void setAlgorithm(const utility::string_t& value);


protected:
    utility::string_t m_Base32SecretKey;
    bool m_Base32SecretKeyIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Username;
    bool m_UsernameIsSet;
    utility::string_t m_Issuer;
    bool m_IssuerIsSet;
    int32_t m_Digits;
    bool m_DigitsIsSet;
    int32_t m_Period;
    bool m_PeriodIsSet;
    utility::string_t m_Algorithm;
    bool m_AlgorithmIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_CreateTotpDeviceBase32SecretKeyOptions_H_ */
