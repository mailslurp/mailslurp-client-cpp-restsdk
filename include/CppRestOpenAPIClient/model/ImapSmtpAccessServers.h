/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ImapSmtpAccessServers.h
 *
 * IMAP and SMTP server endpoints for MailSlurp
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_ImapSmtpAccessServers_H_
#define COM_MAILSLURP_CLIENT_MODEL_ImapSmtpAccessServers_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/ServerEndpoints.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {

class ServerEndpoints;

/// <summary>
/// IMAP and SMTP server endpoints for MailSlurp
/// </summary>
class  ImapSmtpAccessServers
    : public ModelBase
{
public:
    ImapSmtpAccessServers();
    virtual ~ImapSmtpAccessServers();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ImapSmtpAccessServers members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ServerEndpoints> getImapServer() const;
    bool imapServerIsSet() const;
    void unsetImapServer();

    void setImapServer(const std::shared_ptr<ServerEndpoints>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ServerEndpoints> getSecureImapServer() const;
    bool secureImapServerIsSet() const;
    void unsetSecureImapServer();

    void setSecureImapServer(const std::shared_ptr<ServerEndpoints>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ServerEndpoints> getSmtpServer() const;
    bool smtpServerIsSet() const;
    void unsetSmtpServer();

    void setSmtpServer(const std::shared_ptr<ServerEndpoints>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ServerEndpoints> getSecureSmtpServer() const;
    bool secureSmtpServerIsSet() const;
    void unsetSecureSmtpServer();

    void setSecureSmtpServer(const std::shared_ptr<ServerEndpoints>& value);


protected:
    std::shared_ptr<ServerEndpoints> m_ImapServer;
    bool m_ImapServerIsSet;
    std::shared_ptr<ServerEndpoints> m_SecureImapServer;
    bool m_SecureImapServerIsSet;
    std::shared_ptr<ServerEndpoints> m_SmtpServer;
    bool m_SmtpServerIsSet;
    std::shared_ptr<ServerEndpoints> m_SecureSmtpServer;
    bool m_SecureSmtpServerIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_ImapSmtpAccessServers_H_ */
