/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SearchInboxesOptions.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_SearchInboxesOptions_H_
#define COM_MAILSLURP_CLIENT_MODEL_SearchInboxesOptions_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  SearchInboxesOptions
    : public ModelBase
{
public:
    SearchInboxesOptions();
    virtual ~SearchInboxesOptions();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// SearchInboxesOptions members

    /// <summary>
    /// Optional page index in list pagination
    /// </summary>
    int32_t getPageIndex() const;
    bool pageIndexIsSet() const;
    void unsetPageIndex();

    void setPageIndex(int32_t value);

    /// <summary>
    /// Optional page size in list pagination
    /// </summary>
    int32_t getPageSize() const;
    bool pageSizeIsSet() const;
    void unsetPageSize();

    void setPageSize(int32_t value);

    /// <summary>
    /// Optional createdAt sort direction ASC or DESC
    /// </summary>
    utility::string_t getSortDirection() const;
    bool sortDirectionIsSet() const;
    void unsetSortDirection();

    void setSortDirection(const utility::string_t& value);

    /// <summary>
    /// Optionally filter results for favourites only
    /// </summary>
    bool isFavourite() const;
    bool favouriteIsSet() const;
    void unsetFavourite();

    void setFavourite(bool value);

    /// <summary>
    /// Optionally filter by search words partial matching ID, tags, name, and email address
    /// </summary>
    utility::string_t getSearch() const;
    bool searchIsSet() const;
    void unsetSearch();

    void setSearch(const utility::string_t& value);

    /// <summary>
    /// Optionally filter by tags. Will return inboxes that include given tags
    /// </summary>
    utility::string_t getTag() const;
    bool tagIsSet() const;
    void unsetTag();

    void setTag(const utility::string_t& value);

    /// <summary>
    /// Optional filter by created after given date time
    /// </summary>
    utility::datetime getSince() const;
    bool sinceIsSet() const;
    void unsetSince();

    void setSince(const utility::datetime& value);

    /// <summary>
    /// Optional filter by created before given date time
    /// </summary>
    utility::datetime getBefore() const;
    bool beforeIsSet() const;
    void unsetBefore();

    void setBefore(const utility::datetime& value);

    /// <summary>
    /// Type of inbox. HTTP inboxes are faster and better for most cases. SMTP inboxes are more suited for public facing inbound messages (but cannot send).
    /// </summary>
    utility::string_t getInboxType() const;
    bool inboxTypeIsSet() const;
    void unsetInboxType();

    void setInboxType(const utility::string_t& value);

    /// <summary>
    /// Optional filter by inbox function
    /// </summary>
    utility::string_t getInboxFunction() const;
    bool inboxFunctionIsSet() const;
    void unsetInboxFunction();

    void setInboxFunction(const utility::string_t& value);

    /// <summary>
    /// Optional domain ID filter
    /// </summary>
    utility::string_t getDomainId() const;
    bool domainIdIsSet() const;
    void unsetDomainId();

    void setDomainId(const utility::string_t& value);


protected:
    int32_t m_PageIndex;
    bool m_PageIndexIsSet;
    int32_t m_PageSize;
    bool m_PageSizeIsSet;
    utility::string_t m_SortDirection;
    bool m_SortDirectionIsSet;
    bool m_Favourite;
    bool m_FavouriteIsSet;
    utility::string_t m_Search;
    bool m_SearchIsSet;
    utility::string_t m_Tag;
    bool m_TagIsSet;
    utility::datetime m_Since;
    bool m_SinceIsSet;
    utility::datetime m_Before;
    bool m_BeforeIsSet;
    utility::string_t m_InboxType;
    bool m_InboxTypeIsSet;
    utility::string_t m_InboxFunction;
    bool m_InboxFunctionIsSet;
    utility::string_t m_DomainId;
    bool m_DomainIdIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_SearchInboxesOptions_H_ */
