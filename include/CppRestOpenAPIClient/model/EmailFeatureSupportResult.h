/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * EmailFeatureSupportResult.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_EmailFeatureSupportResult_H_
#define COM_MAILSLURP_CLIENT_MODEL_EmailFeatureSupportResult_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/Set.h"
#include "CppRestOpenAPIClient/model/EmailFeatureSupportStatusPercentage.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/EmailFeatureNames.h"
#include "CppRestOpenAPIClient/model/EmailFeatureOverview.h"
#include <vector>

namespace com {
namespace mailslurp {
namespace client {
namespace model {

class EmailFeatureNames;
class EmailFeatureOverview;
class EmailFeatureSupportStatusPercentage;

/// <summary>
/// 
/// </summary>
class  EmailFeatureSupportResult
    : public ModelBase
{
public:
    EmailFeatureSupportResult();
    virtual ~EmailFeatureSupportResult();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// EmailFeatureSupportResult members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<EmailFeatureNames> getNames() const;
    bool namesIsSet() const;
    void unsetNames();

    void setNames(const std::shared_ptr<EmailFeatureNames>& value);

    /// <summary>
    /// 
    /// </summary>
    Set<utility::string_t>& getDetectedFeatures();
    bool detectedFeaturesIsSet() const;
    void unsetDetectedFeatures();

    void setDetectedFeatures(const Set<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<EmailFeatureOverview>>& getFeatureOverviews();
    bool featureOverviewsIsSet() const;
    void unsetFeatureOverviews();

    void setFeatureOverviews(const std::vector<std::shared_ptr<EmailFeatureOverview>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<EmailFeatureSupportStatusPercentage>>& getFeaturePercentages();
    bool featurePercentagesIsSet() const;
    void unsetFeaturePercentages();

    void setFeaturePercentages(const std::vector<std::shared_ptr<EmailFeatureSupportStatusPercentage>>& value);


protected:
    std::shared_ptr<EmailFeatureNames> m_Names;
    bool m_NamesIsSet;
    Set<utility::string_t> m_DetectedFeatures;
    bool m_DetectedFeaturesIsSet;
    std::vector<std::shared_ptr<EmailFeatureOverview>> m_FeatureOverviews;
    bool m_FeatureOverviewsIsSet;
    std::vector<std::shared_ptr<EmailFeatureSupportStatusPercentage>> m_FeaturePercentages;
    bool m_FeaturePercentagesIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_EmailFeatureSupportResult_H_ */
