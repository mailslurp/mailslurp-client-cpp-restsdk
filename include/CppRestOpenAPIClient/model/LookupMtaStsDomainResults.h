/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * LookupMtaStsDomainResults.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_LookupMtaStsDomainResults_H_
#define COM_MAILSLURP_CLIENT_MODEL_LookupMtaStsDomainResults_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/DNSLookupResult.h"
#include <cpprest/details/basic_types.h>
#include <vector>
#include "CppRestOpenAPIClient/model/DNSLookupOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {

class DNSLookupOptions;
class DNSLookupResult;

/// <summary>
/// 
/// </summary>
class  LookupMtaStsDomainResults
    : public ModelBase
{
public:
    LookupMtaStsDomainResults();
    virtual ~LookupMtaStsDomainResults();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// LookupMtaStsDomainResults members

    /// <summary>
    /// 
    /// </summary>
    bool isValid() const;
    bool validIsSet() const;
    void unsetValid();

    void setValid(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<DNSLookupOptions> getQuery() const;
    bool queryIsSet() const;
    void unsetQuery();

    void setQuery(const std::shared_ptr<DNSLookupOptions>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<DNSLookupResult>>& getRecords();
    bool recordsIsSet() const;
    void unsetRecords();

    void setRecords(const std::vector<std::shared_ptr<DNSLookupResult>>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getWellKnownQuery() const;
    bool wellKnownQueryIsSet() const;
    void unsetWellKnownQuery();

    void setWellKnownQuery(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isWellKnownPresent() const;
    bool wellKnownPresentIsSet() const;
    void unsetWellKnownPresent();

    void setWellKnownPresent(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getWellKnownValue() const;
    bool wellKnownValueIsSet() const;
    void unsetWellKnownValue();

    void setWellKnownValue(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getErrors();
    bool errorsIsSet() const;
    void unsetErrors();

    void setErrors(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getWarnings();
    bool warningsIsSet() const;
    void unsetWarnings();

    void setWarnings(const std::vector<utility::string_t>& value);


protected:
    bool m_Valid;
    bool m_ValidIsSet;
    std::shared_ptr<DNSLookupOptions> m_Query;
    bool m_QueryIsSet;
    std::vector<std::shared_ptr<DNSLookupResult>> m_Records;
    bool m_RecordsIsSet;
    utility::string_t m_WellKnownQuery;
    bool m_WellKnownQueryIsSet;
    bool m_WellKnownPresent;
    bool m_WellKnownPresentIsSet;
    utility::string_t m_WellKnownValue;
    bool m_WellKnownValueIsSet;
    std::vector<utility::string_t> m_Errors;
    bool m_ErrorsIsSet;
    std::vector<utility::string_t> m_Warnings;
    bool m_WarningsIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_LookupMtaStsDomainResults_H_ */
