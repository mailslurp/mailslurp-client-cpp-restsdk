/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CheckEmailBodyResults.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_CheckEmailBodyResults_H_
#define COM_MAILSLURP_CLIENT_MODEL_CheckEmailBodyResults_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/SpellingIssue.h"
#include "CppRestOpenAPIClient/model/LinkIssue.h"
#include <vector>
#include "CppRestOpenAPIClient/model/ImageIssue.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {

class LinkIssue;
class ImageIssue;
class SpellingIssue;

/// <summary>
/// 
/// </summary>
class  CheckEmailBodyResults
    : public ModelBase
{
public:
    CheckEmailBodyResults();
    virtual ~CheckEmailBodyResults();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CheckEmailBodyResults members

    /// <summary>
    /// 
    /// </summary>
    bool isHasIssues() const;
    bool hasIssuesIsSet() const;
    void unsetHasIssues();

    void setHasIssues(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<LinkIssue>>& getLinkIssues();
    bool linkIssuesIsSet() const;
    void unsetLinkIssues();

    void setLinkIssues(const std::vector<std::shared_ptr<LinkIssue>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<ImageIssue>>& getImageIssues();
    bool imageIssuesIsSet() const;
    void unsetImageIssues();

    void setImageIssues(const std::vector<std::shared_ptr<ImageIssue>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<SpellingIssue>>& getSpellingIssues();
    bool spellingIssuesIsSet() const;
    void unsetSpellingIssues();

    void setSpellingIssues(const std::vector<std::shared_ptr<SpellingIssue>>& value);


protected:
    bool m_HasIssues;
    bool m_HasIssuesIsSet;
    std::vector<std::shared_ptr<LinkIssue>> m_LinkIssues;
    bool m_LinkIssuesIsSet;
    std::vector<std::shared_ptr<ImageIssue>> m_ImageIssues;
    bool m_ImageIssuesIsSet;
    std::vector<std::shared_ptr<SpellingIssue>> m_SpellingIssues;
    bool m_SpellingIssuesIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_CheckEmailBodyResults_H_ */
