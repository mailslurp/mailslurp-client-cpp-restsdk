/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * WaitForSmsConditions.h
 *
 * Conditions to apply to emails that you are waiting for
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_WaitForSmsConditions_H_
#define COM_MAILSLURP_CLIENT_MODEL_WaitForSmsConditions_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>
#include "CppRestOpenAPIClient/model/SmsMatchOption.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {

class SmsMatchOption;

/// <summary>
/// Conditions to apply to emails that you are waiting for
/// </summary>
class  WaitForSmsConditions
    : public ModelBase
{
public:
    WaitForSmsConditions();
    virtual ~WaitForSmsConditions();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// WaitForSmsConditions members

    /// <summary>
    /// ID of phone number to search within and apply conditions to. Essentially filtering the SMS found to give a count.
    /// </summary>
    utility::string_t getPhoneNumberId() const;
    bool phoneNumberIdIsSet() const;
    void unsetPhoneNumberId();

    void setPhoneNumberId(const utility::string_t& value);

    /// <summary>
    /// Limit results
    /// </summary>
    int32_t getLimit() const;
    bool limitIsSet() const;
    void unsetLimit();

    void setLimit(int32_t value);

    /// <summary>
    /// Number of results that should match conditions. Either exactly or at least this amount based on the &#x60;countType&#x60;. If count condition is not met and the timeout has not been reached the &#x60;waitFor&#x60; method will retry the operation.
    /// </summary>
    int64_t getCount() const;
    bool countIsSet() const;
    void unsetCount();

    void setCount(int64_t value);

    /// <summary>
    /// Max time in milliseconds to wait between retries if a &#x60;timeout&#x60; is specified.
    /// </summary>
    int64_t getDelayTimeout() const;
    bool delayTimeoutIsSet() const;
    void unsetDelayTimeout();

    void setDelayTimeout(int64_t value);

    /// <summary>
    /// Max time in milliseconds to retry the &#x60;waitFor&#x60; operation until conditions are met.
    /// </summary>
    int64_t getTimeout() const;
    bool timeoutIsSet() const;
    void unsetTimeout();

    void setTimeout(int64_t value);

    /// <summary>
    /// Apply conditions only to **unread** SMS. All SMS messages begin with &#x60;read&#x3D;false&#x60;. An SMS is marked &#x60;read&#x3D;true&#x60; when an &#x60;SMS&#x60; has been returned to the user at least once. For example you have called &#x60;getSms&#x60; or &#x60;waitForSms&#x60; etc., or you have viewed the SMS in the dashboard.
    /// </summary>
    bool isUnreadOnly() const;
    bool unreadOnlyIsSet() const;
    void unsetUnreadOnly();

    void setUnreadOnly(bool value);

    /// <summary>
    /// How result size should be compared with the expected size. Exactly or at-least matching result?
    /// </summary>
    utility::string_t getCountType() const;
    bool countTypeIsSet() const;
    void unsetCountType();

    void setCountType(const utility::string_t& value);

    /// <summary>
    /// Conditions that should be matched for an SMS to qualify for results. Each condition will be applied in order to each SMS within a phone number to filter a result list of matching SMSs you are waiting for.
    /// </summary>
    std::vector<std::shared_ptr<SmsMatchOption>>& getMatches();
    bool matchesIsSet() const;
    void unsetMatches();

    void setMatches(const std::vector<std::shared_ptr<SmsMatchOption>>& value);

    /// <summary>
    /// Direction to sort matching SMSs by created time
    /// </summary>
    utility::string_t getSortDirection() const;
    bool sortDirectionIsSet() const;
    void unsetSortDirection();

    void setSortDirection(const utility::string_t& value);

    /// <summary>
    /// ISO Date Time earliest time of SMS to consider. Filter for matching SMSs that were received after this date
    /// </summary>
    utility::datetime getSince() const;
    bool sinceIsSet() const;
    void unsetSince();

    void setSince(const utility::datetime& value);

    /// <summary>
    /// ISO Date Time latest time of SMS to consider. Filter for matching SMSs that were received before this date
    /// </summary>
    utility::datetime getBefore() const;
    bool beforeIsSet() const;
    void unsetBefore();

    void setBefore(const utility::datetime& value);


protected:
    utility::string_t m_PhoneNumberId;
    bool m_PhoneNumberIdIsSet;
    int32_t m_Limit;
    bool m_LimitIsSet;
    int64_t m_Count;
    bool m_CountIsSet;
    int64_t m_DelayTimeout;
    bool m_DelayTimeoutIsSet;
    int64_t m_Timeout;
    bool m_TimeoutIsSet;
    bool m_UnreadOnly;
    bool m_UnreadOnlyIsSet;
    utility::string_t m_CountType;
    bool m_CountTypeIsSet;
    std::vector<std::shared_ptr<SmsMatchOption>> m_Matches;
    bool m_MatchesIsSet;
    utility::string_t m_SortDirection;
    bool m_SortDirectionIsSet;
    utility::datetime m_Since;
    bool m_SinceIsSet;
    utility::datetime m_Before;
    bool m_BeforeIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_WaitForSmsConditions_H_ */
