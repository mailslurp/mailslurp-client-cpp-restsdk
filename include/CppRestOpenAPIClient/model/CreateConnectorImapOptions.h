/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CreateConnectorImapOptions.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_MODEL_CreateConnectorImapOptions_H_
#define COM_MAILSLURP_CLIENT_MODEL_CreateConnectorImapOptions_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace com {
namespace mailslurp {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  CreateConnectorImapOptions
    : public ModelBase
{
public:
    CreateConnectorImapOptions();
    virtual ~CreateConnectorImapOptions();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// CreateConnectorImapOptions members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getHost() const;
    bool hostIsSet() const;
    void unsetHost();

    void setHost(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getPort() const;
    bool portIsSet() const;
    void unsetPort();

    void setPort(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUsername() const;
    bool usernameIsSet() const;
    void unsetUsername();

    void setUsername(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPassword() const;
    bool passwordIsSet() const;
    void unsetPassword();

    void setPassword(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isUseSSL() const;
    bool useSSLIsSet() const;
    void unsetUseSSL();

    void setUseSSL(bool value);


protected:
    utility::string_t m_Host;
    bool m_HostIsSet;
    int32_t m_Port;
    bool m_PortIsSet;
    utility::string_t m_Username;
    bool m_UsernameIsSet;
    utility::string_t m_Password;
    bool m_PasswordIsSet;
    bool m_UseSSL;
    bool m_UseSSLIsSet;
};


}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_MODEL_CreateConnectorImapOptions_H_ */
