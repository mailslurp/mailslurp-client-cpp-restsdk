/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * MFAControllerApi.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_API_MFAControllerApi_H_
#define COM_MAILSLURP_CLIENT_API_MFAControllerApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/CreateTotpDeviceOtpAuthUrlOptions.h"
#include "CppRestOpenAPIClient/model/TotpDeviceCodeDto.h"
#include "CppRestOpenAPIClient/model/TotpDeviceDto.h"
#include "CppRestOpenAPIClient/model/TotpDeviceOptionalDto.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace com {
namespace mailslurp {
namespace client {
namespace api {

using namespace com::mailslurp::client::model;



class  MFAControllerApi 
{
public:

    explicit MFAControllerApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~MFAControllerApi();

    /// <summary>
    /// Create a TOTP device from custom options
    /// </summary>
    /// <remarks>
    /// Create a virtual TOTP device for custom options specifying all parameters of the TOTP device.
    /// </remarks>
    /// <param name="createTotpDeviceOtpAuthUrlOptions"></param>
    pplx::task<std::shared_ptr<TotpDeviceDto>> createTotpDeviceForCustom(
        std::shared_ptr<CreateTotpDeviceOtpAuthUrlOptions> createTotpDeviceOtpAuthUrlOptions
    ) const;
    /// <summary>
    /// Create a TOTP device from an OTP Auth URL
    /// </summary>
    /// <remarks>
    /// Create a virtual TOTP device for a given OTP Auth URL such as otpauth://totp/MyApp:alice@example.com?secret&#x3D;ABC123&amp;issuer&#x3D;MyApp&amp;period&#x3D;30&amp;digits&#x3D;6&amp;algorithm&#x3D;SHA1. You can provider overrides in the options for each component of the URL.
    /// </remarks>
    /// <param name="createTotpDeviceOtpAuthUrlOptions"></param>
    pplx::task<std::shared_ptr<TotpDeviceDto>> createTotpDeviceForOtpAuthUrl(
        std::shared_ptr<CreateTotpDeviceOtpAuthUrlOptions> createTotpDeviceOtpAuthUrlOptions
    ) const;
    /// <summary>
    /// Get a TOTP device by ID
    /// </summary>
    /// <remarks>
    /// Get Time-Based One-Time Password (TOTP) device by its ID.
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<TotpDeviceDto>> getTotpDevice(
        utility::string_t id
    ) const;
    /// <summary>
    /// Get a TOTP device by username, issuer, or name. Returns empty if not found.
    /// </summary>
    /// <remarks>
    /// Get Time-Based One-Time Password (TOTP) device by its username and issuer mapping.
    /// </remarks>
    /// <param name="name">Optional name filter (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="issuer">Optional issuer filter (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="username">Optional username filter (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<TotpDeviceOptionalDto>> getTotpDeviceBy(
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> issuer,
        boost::optional<utility::string_t> username
    ) const;
    /// <summary>
    /// Get a TOTP device code by device ID
    /// </summary>
    /// <remarks>
    /// Get Time-Based One-Time Password for a device by its ID.
    /// </remarks>
    /// <param name="id">ID of the TOTP device to get the code for</param>
    /// <param name="at">Optional time to get code for. If not provided, current time is used. (optional, default to utility::datetime())</param>
    /// <param name="minSecondsUntilExpire">Optional minimum time until code expires. Will hold thread open until period reached. (optional, default to 0)</param>
    pplx::task<std::shared_ptr<TotpDeviceCodeDto>> getTotpDeviceCode(
        utility::string_t id,
        boost::optional<utility::datetime> at,
        boost::optional<int32_t> minSecondsUntilExpire
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_API_MFAControllerApi_H_ */

