/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * GuestPortalControllerApi.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_API_GuestPortalControllerApi_H_
#define COM_MAILSLURP_CLIENT_API_GuestPortalControllerApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/CreatePortalOptions.h"
#include "CppRestOpenAPIClient/model/CreatePortalUserOptions.h"
#include "CppRestOpenAPIClient/model/GuestPortalDto.h"
#include "CppRestOpenAPIClient/model/GuestPortalUserCreateDto.h"
#include "CppRestOpenAPIClient/model/GuestPortalUserDto.h"
#include "CppRestOpenAPIClient/model/PageGuestPortalUsers.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace com {
namespace mailslurp {
namespace client {
namespace api {

using namespace com::mailslurp::client::model;



class  GuestPortalControllerApi 
{
public:

    explicit GuestPortalControllerApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~GuestPortalControllerApi();

    /// <summary>
    /// Create a portal page for your customers or clients to log into email accounts and view emails.
    /// </summary>
    /// <remarks>
    /// Create a guest login page for customers or clients to access assigned email addresses
    /// </remarks>
    /// <param name="createPortalOptions"></param>
    pplx::task<std::shared_ptr<GuestPortalDto>> createGuestPortal(
        std::shared_ptr<CreatePortalOptions> createPortalOptions
    ) const;
    /// <summary>
    /// Create a portal guest user
    /// </summary>
    /// <remarks>
    /// Add customer to portal
    /// </remarks>
    /// <param name="portalId"></param>
    /// <param name="createPortalUserOptions"></param>
    pplx::task<std::shared_ptr<GuestPortalUserCreateDto>> createGuestPortalUser(
        utility::string_t portalId,
        std::shared_ptr<CreatePortalUserOptions> createPortalUserOptions
    ) const;
    /// <summary>
    /// Get all guest users for portal
    /// </summary>
    /// <remarks>
    /// Get all customers for a portal
    /// </remarks>
    /// <param name="portalId">Optional portal ID (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="search">Optional search term (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
    /// <param name="size">Optional page size in list pagination (optional, default to 0)</param>
    /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="since">Filter by created at after the given timestamp (optional, default to utility::datetime())</param>
    /// <param name="before">Filter by created at before the given timestamp (optional, default to utility::datetime())</param>
    pplx::task<std::shared_ptr<PageGuestPortalUsers>> getAllGuestPortalUsers(
        boost::optional<utility::string_t> portalId,
        boost::optional<utility::string_t> search,
        boost::optional<int32_t> page,
        boost::optional<int32_t> size,
        boost::optional<utility::string_t> sort,
        boost::optional<utility::datetime> since,
        boost::optional<utility::datetime> before
    ) const;
    /// <summary>
    /// Get a client email portal
    /// </summary>
    /// <remarks>
    /// Fetch a customer guest portal
    /// </remarks>
    /// <param name="portalId"></param>
    pplx::task<std::shared_ptr<GuestPortalDto>> getGuestPortal(
        utility::string_t portalId
    ) const;
    /// <summary>
    /// Get guest user for portal
    /// </summary>
    /// <remarks>
    /// Get customer for portal
    /// </remarks>
    /// <param name="portalId"></param>
    /// <param name="guestId"></param>
    pplx::task<std::shared_ptr<GuestPortalUserDto>> getGuestPortalUser(
        utility::string_t portalId,
        utility::string_t guestId
    ) const;
    /// <summary>
    /// Get guest user
    /// </summary>
    /// <remarks>
    /// Get customer by ID
    /// </remarks>
    /// <param name="guestId"></param>
    pplx::task<std::shared_ptr<GuestPortalUserDto>> getGuestPortalUserById(
        utility::string_t guestId
    ) const;
    /// <summary>
    /// Get all guest users for portal
    /// </summary>
    /// <remarks>
    /// Get customers for a portal
    /// </remarks>
    /// <param name="portalId"></param>
    /// <param name="search">Optional search term (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="page">Optional page index in list pagination (optional, default to 0)</param>
    /// <param name="size">Optional page size in list pagination (optional, default to 0)</param>
    /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="since">Filter by created at after the given timestamp (optional, default to utility::datetime())</param>
    /// <param name="before">Filter by created at before the given timestamp (optional, default to utility::datetime())</param>
    pplx::task<std::shared_ptr<PageGuestPortalUsers>> getGuestPortalUsers(
        utility::string_t portalId,
        boost::optional<utility::string_t> search,
        boost::optional<int32_t> page,
        boost::optional<int32_t> size,
        boost::optional<utility::string_t> sort,
        boost::optional<utility::datetime> since,
        boost::optional<utility::datetime> before
    ) const;
    /// <summary>
    /// Get guest portals
    /// </summary>
    /// <remarks>
    /// Get portals
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<GuestPortalDto>>> getGuestPortals(
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_API_GuestPortalControllerApi_H_ */

