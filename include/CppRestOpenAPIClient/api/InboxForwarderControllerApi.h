/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * InboxForwarderControllerApi.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_API_InboxForwarderControllerApi_H_
#define COM_MAILSLURP_CLIENT_API_InboxForwarderControllerApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/CreateInboxForwarderOptions.h"
#include "CppRestOpenAPIClient/model/InboxForwarderDto.h"
#include "CppRestOpenAPIClient/model/InboxForwarderEventDto.h"
#include "CppRestOpenAPIClient/model/InboxForwarderTestOptions.h"
#include "CppRestOpenAPIClient/model/InboxForwarderTestResult.h"
#include "CppRestOpenAPIClient/model/PageInboxForwarderDto.h"
#include "CppRestOpenAPIClient/model/PageInboxForwarderEvents.h"
#include "CppRestOpenAPIClient/model/TestNewInboxForwarderOptions.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace com {
namespace mailslurp {
namespace client {
namespace api {

using namespace com::mailslurp::client::model;



class  InboxForwarderControllerApi 
{
public:

    explicit InboxForwarderControllerApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~InboxForwarderControllerApi();

    /// <summary>
    /// Create an inbox forwarder
    /// </summary>
    /// <remarks>
    /// Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
    /// </remarks>
    /// <param name="inboxId">Inbox id to attach forwarder to</param>
    /// <param name="createInboxForwarderOptions"></param>
    pplx::task<std::shared_ptr<InboxForwarderDto>> createNewInboxForwarder(
        utility::string_t inboxId,
        std::shared_ptr<CreateInboxForwarderOptions> createInboxForwarderOptions
    ) const;
    /// <summary>
    /// Delete an inbox forwarder
    /// </summary>
    /// <remarks>
    /// Delete inbox forwarder
    /// </remarks>
    /// <param name="id">ID of inbox forwarder</param>
    pplx::task<void> deleteInboxForwarder(
        utility::string_t id
    ) const;
    /// <summary>
    /// Delete inbox forwarders
    /// </summary>
    /// <remarks>
    /// Delete inbox forwarders. Accepts optional inboxId filter.
    /// </remarks>
    /// <param name="inboxId">Optional inbox id to attach forwarder to (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<void> deleteInboxForwarders(
        boost::optional<utility::string_t> inboxId
    ) const;
    /// <summary>
    /// Get all inbox forwarder events
    /// </summary>
    /// <remarks>
    /// Get all inbox forwarder events
    /// </remarks>
    /// <param name="page">Optional page index in inbox forwarder event list pagination (optional, default to 0)</param>
    /// <param name="size">Optional page size in inbox forwarder event list pagination (optional, default to 0)</param>
    /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<PageInboxForwarderEvents>> getAllInboxForwarderEvents(
        boost::optional<int32_t> page,
        boost::optional<int32_t> size,
        boost::optional<utility::string_t> sort
    ) const;
    /// <summary>
    /// Get a forwarder event
    /// </summary>
    /// <remarks>
    /// Get forwarder event
    /// </remarks>
    /// <param name="eventId">ID of inbox forwarder event</param>
    pplx::task<std::shared_ptr<InboxForwarderEventDto>> getForwarderEvent(
        utility::string_t eventId
    ) const;
    /// <summary>
    /// Get an inbox forwarder
    /// </summary>
    /// <remarks>
    /// Get inbox forwarder
    /// </remarks>
    /// <param name="id">ID of inbox forwarder</param>
    pplx::task<std::shared_ptr<InboxForwarderDto>> getInboxForwarder(
        utility::string_t id
    ) const;
    /// <summary>
    /// Get an inbox forwarder event
    /// </summary>
    /// <remarks>
    /// Get inbox forwarder event
    /// </remarks>
    /// <param name="id">ID of inbox forwarder</param>
    /// <param name="eventId">ID of inbox forwarder event</param>
    pplx::task<std::shared_ptr<InboxForwarderEventDto>> getInboxForwarderEvent(
        utility::string_t id,
        utility::string_t eventId
    ) const;
    /// <summary>
    /// Get an inbox forwarder event list
    /// </summary>
    /// <remarks>
    /// Get inbox forwarder events
    /// </remarks>
    /// <param name="id">ID of inbox forwarder</param>
    /// <param name="page">Optional page index in inbox forwarder event list pagination (optional, default to 0)</param>
    /// <param name="size">Optional page size in inbox forwarder event list pagination (optional, default to 0)</param>
    /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<PageInboxForwarderEvents>> getInboxForwarderEvents(
        utility::string_t id,
        boost::optional<int32_t> page,
        boost::optional<int32_t> size,
        boost::optional<utility::string_t> sort
    ) const;
    /// <summary>
    /// List inbox forwarders
    /// </summary>
    /// <remarks>
    /// List all forwarders attached to an inbox
    /// </remarks>
    /// <param name="inboxId">Optional inbox id to get forwarders from (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="page">Optional page index in inbox forwarder list pagination (optional, default to 0)</param>
    /// <param name="size">Optional page size in inbox forwarder list pagination (optional, default to 0)</param>
    /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="searchFilter">Optional search filter (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="since">Filter by created at after the given timestamp (optional, default to utility::datetime())</param>
    /// <param name="before">Filter by created at before the given timestamp (optional, default to utility::datetime())</param>
    pplx::task<std::shared_ptr<PageInboxForwarderDto>> getInboxForwarders(
        boost::optional<utility::string_t> inboxId,
        boost::optional<int32_t> page,
        boost::optional<int32_t> size,
        boost::optional<utility::string_t> sort,
        boost::optional<utility::string_t> searchFilter,
        boost::optional<utility::datetime> since,
        boost::optional<utility::datetime> before
    ) const;
    /// <summary>
    /// Test an inbox forwarder
    /// </summary>
    /// <remarks>
    /// Test an inbox forwarder
    /// </remarks>
    /// <param name="id">ID of inbox forwarder</param>
    /// <param name="inboxForwarderTestOptions"></param>
    pplx::task<std::shared_ptr<InboxForwarderTestResult>> testInboxForwarder(
        utility::string_t id,
        std::shared_ptr<InboxForwarderTestOptions> inboxForwarderTestOptions
    ) const;
    /// <summary>
    /// Test inbox forwarders for inbox
    /// </summary>
    /// <remarks>
    /// Test inbox forwarders for inbox
    /// </remarks>
    /// <param name="inboxId">ID of inbox</param>
    /// <param name="inboxForwarderTestOptions"></param>
    pplx::task<std::shared_ptr<InboxForwarderTestResult>> testInboxForwardersForInbox(
        utility::string_t inboxId,
        std::shared_ptr<InboxForwarderTestOptions> inboxForwarderTestOptions
    ) const;
    /// <summary>
    /// Test new inbox forwarder
    /// </summary>
    /// <remarks>
    /// Test new inbox forwarder
    /// </remarks>
    /// <param name="testNewInboxForwarderOptions"></param>
    pplx::task<std::shared_ptr<InboxForwarderTestResult>> testNewInboxForwarder(
        std::shared_ptr<TestNewInboxForwarderOptions> testNewInboxForwarderOptions
    ) const;
    /// <summary>
    /// Update an inbox forwarder
    /// </summary>
    /// <remarks>
    /// Update inbox forwarder
    /// </remarks>
    /// <param name="id">ID of inbox forwarder</param>
    /// <param name="createInboxForwarderOptions"></param>
    pplx::task<std::shared_ptr<InboxForwarderDto>> updateInboxForwarder(
        utility::string_t id,
        std::shared_ptr<CreateInboxForwarderOptions> createInboxForwarderOptions
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_API_InboxForwarderControllerApi_H_ */

