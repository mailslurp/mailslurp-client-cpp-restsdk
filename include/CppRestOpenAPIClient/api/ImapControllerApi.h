/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ImapControllerApi.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_API_ImapControllerApi_H_
#define COM_MAILSLURP_CLIENT_API_ImapControllerApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/ImapServerFetchResult.h"
#include "CppRestOpenAPIClient/model/ImapServerListOptions.h"
#include "CppRestOpenAPIClient/model/ImapServerListResult.h"
#include "CppRestOpenAPIClient/model/ImapServerSearchOptions.h"
#include "CppRestOpenAPIClient/model/ImapServerSearchResult.h"
#include "CppRestOpenAPIClient/model/ImapServerStatusOptions.h"
#include "CppRestOpenAPIClient/model/ImapServerStatusResult.h"
#include "CppRestOpenAPIClient/model/ImapUpdateFlagsOptions.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace com {
namespace mailslurp {
namespace client {
namespace api {

using namespace com::mailslurp::client::model;



class  ImapControllerApi 
{
public:

    explicit ImapControllerApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~ImapControllerApi();

    /// <summary>
    /// Fetch message in an inbox
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="seqNum"></param>
    /// <param name="inboxId">Inbox ID to search (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ImapServerFetchResult>> imapServerFetch(
        int64_t seqNum,
        boost::optional<utility::string_t> inboxId
    ) const;
    /// <summary>
    /// List messages in an inbox
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="imapServerListOptions"></param>
    /// <param name="inboxId">Inbox ID to list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ImapServerListResult>> imapServerList(
        std::shared_ptr<ImapServerListOptions> imapServerListOptions,
        boost::optional<utility::string_t> inboxId
    ) const;
    /// <summary>
    /// Search messages in an inbox
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="imapServerSearchOptions"></param>
    /// <param name="inboxId">Inbox ID to search (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ImapServerSearchResult>> imapServerSearch(
        std::shared_ptr<ImapServerSearchOptions> imapServerSearchOptions,
        boost::optional<utility::string_t> inboxId
    ) const;
    /// <summary>
    /// Get status for mailbox
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="imapServerStatusOptions"></param>
    /// <param name="inboxId">Inbox ID to list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ImapServerStatusResult>> imapServerStatus(
        std::shared_ptr<ImapServerStatusOptions> imapServerStatusOptions,
        boost::optional<utility::string_t> inboxId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Update message flags
    /// </remarks>
    /// <param name="imapUpdateFlagsOptions"></param>
    /// <param name="inboxId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<void> imapServerUpdateFlags(
        std::shared_ptr<ImapUpdateFlagsOptions> imapUpdateFlagsOptions,
        boost::optional<utility::string_t> inboxId
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_API_ImapControllerApi_H_ */

