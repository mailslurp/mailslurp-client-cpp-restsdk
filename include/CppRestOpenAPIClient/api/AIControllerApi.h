/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AIControllerApi.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_API_AIControllerApi_H_
#define COM_MAILSLURP_CLIENT_API_AIControllerApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/AITransformCreateOptions.h"
#include "CppRestOpenAPIClient/model/AITransformDto.h"
#include "CppRestOpenAPIClient/model/AITransformMappingDto.h"
#include "CppRestOpenAPIClient/model/AITransformResultDto.h"
#include "CppRestOpenAPIClient/model/ConditionalStructuredContentResult.h"
#include "CppRestOpenAPIClient/model/CreateAITransformerMappingOptions.h"
#include "CppRestOpenAPIClient/model/GenerateStructuredContentAttachmentOptions.h"
#include "CppRestOpenAPIClient/model/GenerateStructuredContentEmailOptions.h"
#include "CppRestOpenAPIClient/model/GenerateStructuredContentSmsOptions.h"
#include "CppRestOpenAPIClient/model/InvokeTransformerOptions.h"
#include "CppRestOpenAPIClient/model/PageAITransformMappingProjection.h"
#include "CppRestOpenAPIClient/model/PageAITransformProjection.h"
#include "CppRestOpenAPIClient/model/PageAITransformResultProjection.h"
#include "CppRestOpenAPIClient/model/StructuredContentResultDto.h"
#include "CppRestOpenAPIClient/model/StructuredOutputSchema.h"
#include "CppRestOpenAPIClient/model/StructuredOutputSchemaValidation.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace com {
namespace mailslurp {
namespace client {
namespace api {

using namespace com::mailslurp::client::model;



class  AIControllerApi 
{
public:

    explicit AIControllerApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~AIControllerApi();

    /// <summary>
    /// Create a transformer for reuse in automations
    /// </summary>
    /// <remarks>
    /// Save an AI transform instructions and schema for use with webhooks and automations
    /// </remarks>
    /// <param name="aITransformCreateOptions"></param>
    pplx::task<std::shared_ptr<AITransformDto>> createTransformer(
        std::shared_ptr<AITransformCreateOptions> aITransformCreateOptions
    ) const;
    /// <summary>
    /// Create transformer mapping
    /// </summary>
    /// <remarks>
    /// Create AI transformer mappings to other entities
    /// </remarks>
    /// <param name="createAITransformerMappingOptions"></param>
    pplx::task<std::shared_ptr<AITransformMappingDto>> createTransformerMappings(
        std::shared_ptr<CreateAITransformerMappingOptions> createAITransformerMappingOptions
    ) const;
    /// <summary>
    /// Delete all transformer mapping
    /// </summary>
    /// <remarks>
    /// Delete all AI transformer mappings
    /// </remarks>
    pplx::task<void> deleteAllTransformerMappings(
    ) const;
    /// <summary>
    /// Delete a transformer
    /// </summary>
    /// <remarks>
    /// Delete an AI transformer and schemas by ID
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteTransformer(
        utility::string_t id
    ) const;
    /// <summary>
    /// Delete transformer mapping
    /// </summary>
    /// <remarks>
    /// Delete an AI transformer mapping
    /// </remarks>
    /// <param name="id">ID of transform mapping</param>
    pplx::task<void> deleteTransformerMapping(
        utility::string_t id
    ) const;
    /// <summary>
    /// Delete all transformers
    /// </summary>
    /// <remarks>
    /// Delete all AI transformers and schemas
    /// </remarks>
    pplx::task<void> deleteTransformers(
    ) const;
    /// <summary>
    /// Generate structured content for an attachment
    /// </summary>
    /// <remarks>
    /// Use output schemas to extract data from an attachment using AI
    /// </remarks>
    /// <param name="generateStructuredContentAttachmentOptions"></param>
    pplx::task<std::shared_ptr<StructuredContentResultDto>> generateStructuredContentFromAttachment(
        std::shared_ptr<GenerateStructuredContentAttachmentOptions> generateStructuredContentAttachmentOptions
    ) const;
    /// <summary>
    /// Generate structured content for an email
    /// </summary>
    /// <remarks>
    /// Use output schemas to extract data from an email using AI
    /// </remarks>
    /// <param name="generateStructuredContentEmailOptions"></param>
    pplx::task<std::shared_ptr<StructuredContentResultDto>> generateStructuredContentFromEmail(
        std::shared_ptr<GenerateStructuredContentEmailOptions> generateStructuredContentEmailOptions
    ) const;
    /// <summary>
    /// Generate structured content for a TXT message
    /// </summary>
    /// <remarks>
    /// Use output schemas to extract data from an SMS using AI
    /// </remarks>
    /// <param name="generateStructuredContentSmsOptions"></param>
    pplx::task<std::shared_ptr<StructuredContentResultDto>> generateStructuredContentFromSms(
        std::shared_ptr<GenerateStructuredContentSmsOptions> generateStructuredContentSmsOptions
    ) const;
    /// <summary>
    /// Get a transformer
    /// </summary>
    /// <remarks>
    /// Get AI transformer and schemas by ID
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<AITransformDto>> getTransformer(
        utility::string_t id
    ) const;
    /// <summary>
    /// Get transformer mapping
    /// </summary>
    /// <remarks>
    /// Get an AI transformer mapping
    /// </remarks>
    /// <param name="id">ID of transform mapping</param>
    pplx::task<std::shared_ptr<AITransformMappingDto>> getTransformerMapping(
        utility::string_t id
    ) const;
    /// <summary>
    /// Get transformer mappings
    /// </summary>
    /// <remarks>
    /// Get AI transformer mappings to other entities
    /// </remarks>
    /// <param name="aiTransformId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="entityId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="entityType"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="page"> (optional, default to 0)</param>
    /// <param name="size">Optional page size. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 0)</param>
    /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<PageAITransformMappingProjection>> getTransformerMappings(
        boost::optional<utility::string_t> aiTransformId,
        boost::optional<utility::string_t> entityId,
        boost::optional<utility::string_t> entityType,
        boost::optional<int32_t> page,
        boost::optional<int32_t> size,
        boost::optional<utility::string_t> sort
    ) const;
    /// <summary>
    /// Get transformer result
    /// </summary>
    /// <remarks>
    /// Get AI transformer result
    /// </remarks>
    /// <param name="id">ID of transform result</param>
    pplx::task<std::shared_ptr<AITransformResultDto>> getTransformerResult(
        utility::string_t id
    ) const;
    /// <summary>
    /// Get transformer results
    /// </summary>
    /// <remarks>
    /// Get AI transformer results
    /// </remarks>
    /// <param name="aiTransformId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="aiTransformMappingId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="entityId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="entityType"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="page"> (optional, default to 0)</param>
    /// <param name="size">Optional page size. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 0)</param>
    /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<PageAITransformResultProjection>> getTransformerResults(
        boost::optional<utility::string_t> aiTransformId,
        boost::optional<utility::string_t> aiTransformMappingId,
        boost::optional<utility::string_t> entityId,
        boost::optional<utility::string_t> entityType,
        boost::optional<int32_t> page,
        boost::optional<int32_t> size,
        boost::optional<utility::string_t> sort
    ) const;
    /// <summary>
    /// List transformers
    /// </summary>
    /// <remarks>
    /// List all AI transforms
    /// </remarks>
    /// <param name="page"> (optional, default to 0)</param>
    /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 0)</param>
    /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="include">Optional list of IDs to include in result (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    pplx::task<std::shared_ptr<PageAITransformProjection>> getTransformers(
        boost::optional<int32_t> page,
        boost::optional<int32_t> size,
        boost::optional<utility::string_t> sort,
        boost::optional<std::vector<utility::string_t>> include
    ) const;
    /// <summary>
    /// Invoke a transformer
    /// </summary>
    /// <remarks>
    /// Execute an AI transformer to generate structured content
    /// </remarks>
    /// <param name="invokeTransformerOptions"></param>
    pplx::task<std::shared_ptr<ConditionalStructuredContentResult>> invokeTransformer(
        std::shared_ptr<InvokeTransformerOptions> invokeTransformerOptions
    ) const;
    /// <summary>
    /// Validate structured content schema
    /// </summary>
    /// <remarks>
    /// Check if a schema is valid and can be used to extract data using AI
    /// </remarks>
    /// <param name="structuredOutputSchema"></param>
    pplx::task<std::shared_ptr<StructuredOutputSchemaValidation>> validateStructuredOutputSchema(
        std::shared_ptr<StructuredOutputSchema> structuredOutputSchema
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_API_AIControllerApi_H_ */

