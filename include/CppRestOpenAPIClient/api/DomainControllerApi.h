/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DomainControllerApi.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_API_DomainControllerApi_H_
#define COM_MAILSLURP_CLIENT_API_DomainControllerApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/CreateDomainOptions.h"
#include "CppRestOpenAPIClient/model/DomainDto.h"
#include "CppRestOpenAPIClient/model/DomainIssuesDto.h"
#include "CppRestOpenAPIClient/model/DomainPreview.h"
#include "CppRestOpenAPIClient/model/InboxDto.h"
#include "CppRestOpenAPIClient/model/UpdateDomainOptions.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace com {
namespace mailslurp {
namespace client {
namespace api {

using namespace com::mailslurp::client::model;



class  DomainControllerApi 
{
public:

    explicit DomainControllerApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~DomainControllerApi();

    /// <summary>
    /// Add catch all wild card inbox to domain
    /// </summary>
    /// <remarks>
    /// Add a catch all inbox to a domain so that any emails sent to it that cannot be matched will be sent to the catch all inbox generated
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<DomainDto>> addDomainWildcardCatchAll(
        utility::string_t id
    ) const;
    /// <summary>
    /// Create Domain
    /// </summary>
    /// <remarks>
    /// Link a domain that you own with MailSlurp so you can create email addresses using it. Endpoint returns DNS records used for validation. You must add these verification records to your host provider&#39;s DNS setup to verify the domain.
    /// </remarks>
    /// <param name="createDomainOptions"></param>
    pplx::task<std::shared_ptr<DomainDto>> createDomain(
        std::shared_ptr<CreateDomainOptions> createDomainOptions
    ) const;
    /// <summary>
    /// Delete a domain
    /// </summary>
    /// <remarks>
    /// Delete a domain. This will disable any existing inboxes that use this domain.
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::vector<utility::string_t>> deleteDomain(
        utility::string_t id
    ) const;
    /// <summary>
    /// Get a domain
    /// </summary>
    /// <remarks>
    /// Returns domain verification status and tokens for a given domain
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="checkForErrors"> (optional, default to false)</param>
    pplx::task<std::shared_ptr<DomainDto>> getDomain(
        utility::string_t id,
        boost::optional<bool> checkForErrors
    ) const;
    /// <summary>
    /// Get domain issues
    /// </summary>
    /// <remarks>
    /// List domain issues for domains you have created
    /// </remarks>
    pplx::task<std::shared_ptr<DomainIssuesDto>> getDomainIssues(
    ) const;
    /// <summary>
    /// Get catch all wild card inbox for domain
    /// </summary>
    /// <remarks>
    /// Get the catch all inbox for a domain for missed emails
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<InboxDto>> getDomainWildcardCatchAllInbox(
        utility::string_t id
    ) const;
    /// <summary>
    /// Get domains
    /// </summary>
    /// <remarks>
    /// List all custom domains you have created
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<DomainPreview>>> getDomains(
    ) const;
    /// <summary>
    /// Update a domain
    /// </summary>
    /// <remarks>
    /// Update values on a domain. Note you cannot change the domain name as it is immutable. Recreate the domain if you need to alter this.
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="updateDomainOptions"></param>
    pplx::task<std::shared_ptr<DomainDto>> updateDomain(
        utility::string_t id,
        std::shared_ptr<UpdateDomainOptions> updateDomainOptions
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_API_DomainControllerApi_H_ */

