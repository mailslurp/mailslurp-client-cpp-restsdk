/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SmsControllerApi.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_API_SmsControllerApi_H_
#define COM_MAILSLURP_CLIENT_API_SmsControllerApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/CountDto.h"
#include "CppRestOpenAPIClient/model/PageSentSmsProjection.h"
#include "CppRestOpenAPIClient/model/PageSmsProjection.h"
#include "CppRestOpenAPIClient/model/ReplyForSms.h"
#include "CppRestOpenAPIClient/model/SentSmsDto.h"
#include "CppRestOpenAPIClient/model/SmsDto.h"
#include "CppRestOpenAPIClient/model/SmsReplyOptions.h"
#include "CppRestOpenAPIClient/model/SmsSendOptions.h"
#include "CppRestOpenAPIClient/model/UnreadCount.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace com {
namespace mailslurp {
namespace client {
namespace api {

using namespace com::mailslurp::client::model;



class  SmsControllerApi 
{
public:

    explicit SmsControllerApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~SmsControllerApi();

    /// <summary>
    /// Delete sent SMS message.
    /// </summary>
    /// <remarks>
    /// Delete a sent SMS message
    /// </remarks>
    /// <param name="sentSmsId"></param>
    pplx::task<void> deleteSentSmsMessage(
        utility::string_t sentSmsId
    ) const;
    /// <summary>
    /// Delete all sent SMS messages
    /// </summary>
    /// <remarks>
    /// Delete all sent SMS messages or all messages for a given phone number
    /// </remarks>
    /// <param name="phoneNumberId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<void> deleteSentSmsMessages(
        boost::optional<utility::string_t> phoneNumberId
    ) const;
    /// <summary>
    /// Delete SMS message.
    /// </summary>
    /// <remarks>
    /// Delete an SMS message
    /// </remarks>
    /// <param name="smsId"></param>
    pplx::task<void> deleteSmsMessage(
        utility::string_t smsId
    ) const;
    /// <summary>
    /// Delete all SMS messages
    /// </summary>
    /// <remarks>
    /// Delete all SMS messages or all messages for a given phone number
    /// </remarks>
    /// <param name="phoneNumberId"> (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<void> deleteSmsMessages(
        boost::optional<utility::string_t> phoneNumberId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="phoneNumber">Optional receiving phone number to filter SMS messages for (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
    /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 0)</param>
    /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="since">Optional filter SMSs received after given date time (optional, default to utility::datetime())</param>
    /// <param name="before">Optional filter SMSs received before given date time (optional, default to utility::datetime())</param>
    /// <param name="search">Optional search filter (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="favourite">Optionally filter results for favourites only (optional, default to false)</param>
    pplx::task<std::shared_ptr<PageSmsProjection>> getAllSmsMessages(
        boost::optional<utility::string_t> phoneNumber,
        boost::optional<int32_t> page,
        boost::optional<int32_t> size,
        boost::optional<utility::string_t> sort,
        boost::optional<utility::datetime> since,
        boost::optional<utility::datetime> before,
        boost::optional<utility::string_t> search,
        boost::optional<bool> favourite
    ) const;
    /// <summary>
    /// Get reply for an SMS message
    /// </summary>
    /// <remarks>
    /// Get reply for an SMS message.
    /// </remarks>
    /// <param name="smsId"></param>
    pplx::task<std::shared_ptr<ReplyForSms>> getReplyForSmsMessage(
        utility::string_t smsId
    ) const;
    /// <summary>
    /// Get sent SMS count
    /// </summary>
    /// <remarks>
    /// Get number of sent SMS
    /// </remarks>
    pplx::task<std::shared_ptr<CountDto>> getSentSmsCount(
    ) const;
    /// <summary>
    /// Get sent SMS content including body. Expects sent SMS to exist by ID.
    /// </summary>
    /// <remarks>
    /// Returns an SMS summary object with content.
    /// </remarks>
    /// <param name="sentSmsId"></param>
    pplx::task<std::shared_ptr<SentSmsDto>> getSentSmsMessage(
        utility::string_t sentSmsId
    ) const;
    /// <summary>
    /// Get all SMS messages in all phone numbers in paginated form. .
    /// </summary>
    /// <remarks>
    /// By default returns all SMS messages across all phone numbers sorted by ascending created at date. Responses are paginated. You can restrict results to a list of phone number IDs. You can also filter out read messages
    /// </remarks>
    /// <param name="phoneNumber">Optional phone number to filter sent SMS messages for (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="page">Optional page index in SMS list pagination (optional, default to 0)</param>
    /// <param name="size">Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 0)</param>
    /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="since">Optional filter SMSs received after given date time (optional, default to utility::datetime())</param>
    /// <param name="before">Optional filter SMSs received before given date time (optional, default to utility::datetime())</param>
    /// <param name="search">Optional search filter (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<PageSentSmsProjection>> getSentSmsMessagesPaginated(
        boost::optional<utility::string_t> phoneNumber,
        boost::optional<int32_t> page,
        boost::optional<int32_t> size,
        boost::optional<utility::string_t> sort,
        boost::optional<utility::datetime> since,
        boost::optional<utility::datetime> before,
        boost::optional<utility::string_t> search
    ) const;
    /// <summary>
    /// Get SMS count
    /// </summary>
    /// <remarks>
    /// Get number of SMS
    /// </remarks>
    pplx::task<std::shared_ptr<CountDto>> getSmsCount(
    ) const;
    /// <summary>
    /// Get SMS content including body. Expects SMS to exist by ID. For SMS that may not have arrived yet use the WaitForController.
    /// </summary>
    /// <remarks>
    /// Returns a SMS summary object with content.
    /// </remarks>
    /// <param name="smsId"></param>
    pplx::task<std::shared_ptr<SmsDto>> getSmsMessage(
        utility::string_t smsId
    ) const;
    /// <summary>
    /// Get unread SMS count
    /// </summary>
    /// <remarks>
    /// Get number of SMS unread. Unread means has not been viewed in dashboard or returned in an email API response
    /// </remarks>
    pplx::task<std::shared_ptr<UnreadCount>> getUnreadSmsCount(
    ) const;
    /// <summary>
    /// Send a reply to a received SMS message. Replies are sent from the receiving number.
    /// </summary>
    /// <remarks>
    /// Reply to an SMS message.
    /// </remarks>
    /// <param name="smsId"></param>
    /// <param name="smsReplyOptions"></param>
    pplx::task<std::shared_ptr<SentSmsDto>> replyToSmsMessage(
        utility::string_t smsId,
        std::shared_ptr<SmsReplyOptions> smsReplyOptions
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="smsSendOptions"></param>
    /// <param name="fromPhoneNumber">Phone number to send from in E.164 format (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="fromPhoneId">Phone number ID to send from in UUID form (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<SentSmsDto>> sendSms(
        std::shared_ptr<SmsSendOptions> smsSendOptions,
        boost::optional<utility::string_t> fromPhoneNumber,
        boost::optional<utility::string_t> fromPhoneId
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="smsId">ID of SMS to set favourite state</param>
    /// <param name="favourited"></param>
    pplx::task<std::shared_ptr<SmsDto>> setSmsFavourited(
        utility::string_t smsId,
        bool favourited
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_API_SmsControllerApi_H_ */

