/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * WaitForControllerApi.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_API_WaitForControllerApi_H_
#define COM_MAILSLURP_CLIENT_API_WaitForControllerApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/Email.h"
#include "CppRestOpenAPIClient/model/EmailPreview.h"
#include "CppRestOpenAPIClient/model/MatchOptions.h"
#include "CppRestOpenAPIClient/model/SmsDto.h"
#include "CppRestOpenAPIClient/model/SmsPreview.h"
#include "CppRestOpenAPIClient/model/WaitForConditions.h"
#include "CppRestOpenAPIClient/model/WaitForSingleSmsOptions.h"
#include "CppRestOpenAPIClient/model/WaitForSmsConditions.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace com {
namespace mailslurp {
namespace client {
namespace api {

using namespace com::mailslurp::client::model;



class  WaitForControllerApi 
{
public:

    explicit WaitForControllerApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~WaitForControllerApi();

    /// <summary>
    /// Wait for an email to match the provided filter conditions such as subject contains keyword.
    /// </summary>
    /// <remarks>
    /// Generic waitFor method that will wait until an inbox meets given conditions or return immediately if already met
    /// </remarks>
    /// <param name="waitForConditions"></param>
    pplx::task<std::vector<std::shared_ptr<EmailPreview>>> waitFor(
        std::shared_ptr<WaitForConditions> waitForConditions
    ) const;
    /// <summary>
    /// Wait for and return count number of emails. Hold connection until inbox count matches expected or timeout occurs
    /// </summary>
    /// <remarks>
    /// If inbox contains count or more emails at time of request then return count worth of emails. If not wait until the count is reached and return those or return an error if timeout is exceeded.
    /// </remarks>
    /// <param name="inboxId">Id of the inbox we are fetching emails from</param>
    /// <param name="count">Number of emails to wait for. Must be greater that 1</param>
    /// <param name="timeout">Max milliseconds to wait (optional, default to 0L)</param>
    /// <param name="unreadOnly">Optional filter for unread only (optional, default to false)</param>
    /// <param name="before">Filter for emails that were received before the given timestamp (optional, default to utility::datetime())</param>
    /// <param name="since">Filter for emails that were received after the given timestamp (optional, default to utility::datetime())</param>
    /// <param name="sort">Sort direction (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="delay">Max milliseconds delay between calls (optional, default to 0L)</param>
    pplx::task<std::vector<std::shared_ptr<EmailPreview>>> waitForEmailCount(
        utility::string_t inboxId,
        int32_t count,
        boost::optional<int64_t> timeout,
        boost::optional<bool> unreadOnly,
        boost::optional<utility::datetime> before,
        boost::optional<utility::datetime> since,
        boost::optional<utility::string_t> sort,
        boost::optional<int64_t> delay
    ) const;
    /// <summary>
    /// Fetch inbox&#39;s latest email or if empty wait for an email to arrive
    /// </summary>
    /// <remarks>
    /// Will return either the last received email or wait for an email to arrive and return that. If you need to wait for an email for a non-empty inbox set &#x60;unreadOnly&#x3D;true&#x60; or see the other receive methods such as &#x60;waitForNthEmail&#x60; or &#x60;waitForEmailCount&#x60;.
    /// </remarks>
    /// <param name="inboxId">Id of the inbox we are fetching emails from (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="timeout">Max milliseconds to wait (optional, default to 0L)</param>
    /// <param name="unreadOnly">Optional filter for unread only. (optional, default to false)</param>
    /// <param name="before">Filter for emails that were before after the given timestamp (optional, default to utility::datetime())</param>
    /// <param name="since">Filter for emails that were received after the given timestamp (optional, default to utility::datetime())</param>
    /// <param name="sort">Sort direction (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="delay">Max milliseconds delay between calls (optional, default to 0L)</param>
    pplx::task<std::shared_ptr<Email>> waitForLatestEmail(
        boost::optional<utility::string_t> inboxId,
        boost::optional<int64_t> timeout,
        boost::optional<bool> unreadOnly,
        boost::optional<utility::datetime> before,
        boost::optional<utility::datetime> since,
        boost::optional<utility::string_t> sort,
        boost::optional<int64_t> delay
    ) const;
    /// <summary>
    /// Wait for the latest SMS message to match the provided filter conditions such as body contains keyword.
    /// </summary>
    /// <remarks>
    /// Wait until a phone number meets given conditions or return immediately if already met
    /// </remarks>
    /// <param name="waitForSingleSmsOptions"></param>
    pplx::task<std::shared_ptr<SmsDto>> waitForLatestSms(
        std::shared_ptr<WaitForSingleSmsOptions> waitForSingleSmsOptions
    ) const;
    /// <summary>
    /// Wait or return list of emails that match simple matching patterns
    /// </summary>
    /// <remarks>
    /// Perform a search of emails in an inbox with the given patterns. If results match expected count then return or else retry the search until results are found or timeout is reached. Match options allow simple CONTAINS or EQUALS filtering on SUBJECT, TO, BCC, CC, and FROM. See the &#x60;MatchOptions&#x60; object for options. An example payload is &#x60;{ matches: [{field: &#39;SUBJECT&#39;,should:&#39;CONTAIN&#39;,value:&#39;needle&#39;}] }&#x60;. You can use an array of matches and they will be applied sequentially to filter out emails. If you want to perform matches and extractions of content using Regex patterns see the EmailController &#x60;getEmailContentMatch&#x60; method.
    /// </remarks>
    /// <param name="inboxId">Id of the inbox we are fetching emails from</param>
    /// <param name="count">Number of emails to wait for. Must be greater or equal to 1</param>
    /// <param name="matchOptions"></param>
    /// <param name="before">Filter for emails that were received before the given timestamp (optional, default to utility::datetime())</param>
    /// <param name="since">Filter for emails that were received after the given timestamp (optional, default to utility::datetime())</param>
    /// <param name="sort">Sort direction (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="delay">Max milliseconds delay between calls (optional, default to 0L)</param>
    /// <param name="timeout">Max milliseconds to wait (optional, default to 0L)</param>
    /// <param name="unreadOnly">Optional filter for unread only (optional, default to false)</param>
    pplx::task<std::vector<std::shared_ptr<EmailPreview>>> waitForMatchingEmails(
        utility::string_t inboxId,
        int32_t count,
        std::shared_ptr<MatchOptions> matchOptions,
        boost::optional<utility::datetime> before,
        boost::optional<utility::datetime> since,
        boost::optional<utility::string_t> sort,
        boost::optional<int64_t> delay,
        boost::optional<int64_t> timeout,
        boost::optional<bool> unreadOnly
    ) const;
    /// <summary>
    /// Wait for or return the first email that matches provided MatchOptions array
    /// </summary>
    /// <remarks>
    /// Perform a search of emails in an inbox with the given patterns. If a result if found then return or else retry the search until a result is found or timeout is reached. Match options allow simple CONTAINS or EQUALS filtering on SUBJECT, TO, BCC, CC, and FROM. See the &#x60;MatchOptions&#x60; object for options. An example payload is &#x60;{ matches: [{field: &#39;SUBJECT&#39;,should:&#39;CONTAIN&#39;,value:&#39;needle&#39;}] }&#x60;. You can use an array of matches and they will be applied sequentially to filter out emails. If you want to perform matches and extractions of content using Regex patterns see the EmailController &#x60;getEmailContentMatch&#x60; method.
    /// </remarks>
    /// <param name="inboxId">Id of the inbox we are matching an email for</param>
    /// <param name="matchOptions"></param>
    /// <param name="timeout">Max milliseconds to wait (optional, default to 0L)</param>
    /// <param name="unreadOnly">Optional filter for unread only (optional, default to false)</param>
    /// <param name="since">Filter for emails that were received after the given timestamp (optional, default to utility::datetime())</param>
    /// <param name="before">Filter for emails that were received before the given timestamp (optional, default to utility::datetime())</param>
    /// <param name="sort">Sort direction (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="delay">Max milliseconds delay between calls (optional, default to 0L)</param>
    pplx::task<std::shared_ptr<Email>> waitForMatchingFirstEmail(
        utility::string_t inboxId,
        std::shared_ptr<MatchOptions> matchOptions,
        boost::optional<int64_t> timeout,
        boost::optional<bool> unreadOnly,
        boost::optional<utility::datetime> since,
        boost::optional<utility::datetime> before,
        boost::optional<utility::string_t> sort,
        boost::optional<int64_t> delay
    ) const;
    /// <summary>
    /// Wait for or fetch the email with a given index in the inbox specified. If index doesn&#39;t exist waits for it to exist or timeout to occur.
    /// </summary>
    /// <remarks>
    /// If nth email is already present in inbox then return it. If not hold the connection open until timeout expires or the nth email is received and returned.
    /// </remarks>
    /// <param name="inboxId">Id of the inbox you are fetching emails from (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="index">Zero based index of the email to wait for. If an inbox has 1 email already and you want to wait for the 2nd email pass index&#x3D;1 (optional, default to 0)</param>
    /// <param name="timeout">Max milliseconds to wait for the nth email if not already present (optional, default to 0L)</param>
    /// <param name="unreadOnly">Optional filter for unread only (optional, default to false)</param>
    /// <param name="since">Filter for emails that were received after the given timestamp (optional, default to utility::datetime())</param>
    /// <param name="before">Filter for emails that were received before the given timestamp (optional, default to utility::datetime())</param>
    /// <param name="sort">Sort direction (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="delay">Max milliseconds delay between calls (optional, default to 0L)</param>
    pplx::task<std::shared_ptr<Email>> waitForNthEmail(
        boost::optional<utility::string_t> inboxId,
        boost::optional<int32_t> index,
        boost::optional<int64_t> timeout,
        boost::optional<bool> unreadOnly,
        boost::optional<utility::datetime> since,
        boost::optional<utility::datetime> before,
        boost::optional<utility::string_t> sort,
        boost::optional<int64_t> delay
    ) const;
    /// <summary>
    /// Wait for an SMS message to match the provided filter conditions such as body contains keyword.
    /// </summary>
    /// <remarks>
    /// Generic waitFor method that will wait until a phone number meets given conditions or return immediately if already met
    /// </remarks>
    /// <param name="waitForSmsConditions"></param>
    pplx::task<std::vector<std::shared_ptr<SmsPreview>>> waitForSms(
        std::shared_ptr<WaitForSmsConditions> waitForSmsConditions
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_API_WaitForControllerApi_H_ */

