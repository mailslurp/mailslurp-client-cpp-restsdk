/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ConnectorControllerApi.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_API_ConnectorControllerApi_H_
#define COM_MAILSLURP_CLIENT_API_ConnectorControllerApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/ConnectorDto.h"
#include "CppRestOpenAPIClient/model/ConnectorEventDto.h"
#include "CppRestOpenAPIClient/model/ConnectorImapConnectionDto.h"
#include "CppRestOpenAPIClient/model/ConnectorImapConnectionTestResult.h"
#include "CppRestOpenAPIClient/model/ConnectorProviderSettingsDto.h"
#include "CppRestOpenAPIClient/model/ConnectorSmtpConnectionDto.h"
#include "CppRestOpenAPIClient/model/ConnectorSmtpConnectionTestResult.h"
#include "CppRestOpenAPIClient/model/ConnectorSyncRequestResult.h"
#include "CppRestOpenAPIClient/model/ConnectorSyncSettingsDto.h"
#include "CppRestOpenAPIClient/model/CreateConnectorImapConnectionOptions.h"
#include "CppRestOpenAPIClient/model/CreateConnectorOptions.h"
#include "CppRestOpenAPIClient/model/CreateConnectorSmtpConnectionOptions.h"
#include "CppRestOpenAPIClient/model/CreateConnectorSyncSettingsOptions.h"
#include "CppRestOpenAPIClient/model/CreateConnectorWithOptions.h"
#include "CppRestOpenAPIClient/model/OptionalConnectorDto.h"
#include "CppRestOpenAPIClient/model/OptionalConnectorImapConnectionDto.h"
#include "CppRestOpenAPIClient/model/OptionalConnectorSmtpConnectionDto.h"
#include "CppRestOpenAPIClient/model/OptionalConnectorSyncSettingsDto.h"
#include "CppRestOpenAPIClient/model/PageConnector.h"
#include "CppRestOpenAPIClient/model/PageConnectorEvents.h"
#include "CppRestOpenAPIClient/model/SendEmailOptions.h"
#include "CppRestOpenAPIClient/model/SentEmailDto.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace com {
namespace mailslurp {
namespace client {
namespace api {

using namespace com::mailslurp::client::model;



class  ConnectorControllerApi 
{
public:

    explicit ConnectorControllerApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~ConnectorControllerApi();

    /// <summary>
    /// Create an inbox connector
    /// </summary>
    /// <remarks>
    /// Sync emails between external mailboxes and MailSlurp inboxes
    /// </remarks>
    /// <param name="createConnectorOptions"></param>
    /// <param name="inboxId">Optional inbox ID to associate with the connector (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ConnectorDto>> createConnector(
        std::shared_ptr<CreateConnectorOptions> createConnectorOptions,
        boost::optional<utility::string_t> inboxId
    ) const;
    /// <summary>
    /// Create an inbox connector IMAP connection
    /// </summary>
    /// <remarks>
    /// Allows the reading of emails in an external mailbox and syncing to a MailSlurp inbox
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="createConnectorImapConnectionOptions"></param>
    pplx::task<std::shared_ptr<ConnectorImapConnectionDto>> createConnectorImapConnection(
        utility::string_t id,
        std::shared_ptr<CreateConnectorImapConnectionOptions> createConnectorImapConnectionOptions
    ) const;
    /// <summary>
    /// Create an inbox connector SMTP connection
    /// </summary>
    /// <remarks>
    /// Allows sending via connector and email is routed to connected inbox and sent via SMTP
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="createConnectorSmtpConnectionOptions"></param>
    pplx::task<std::shared_ptr<ConnectorSmtpConnectionDto>> createConnectorSmtpConnection(
        utility::string_t id,
        std::shared_ptr<CreateConnectorSmtpConnectionOptions> createConnectorSmtpConnectionOptions
    ) const;
    /// <summary>
    /// Create an inbox connector sync settings
    /// </summary>
    /// <remarks>
    /// Configure automatic pull or emails from external inboxes using an interval or schedule
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="createConnectorSyncSettingsOptions"></param>
    pplx::task<std::shared_ptr<ConnectorSyncSettingsDto>> createConnectorSyncSettings(
        utility::string_t id,
        std::shared_ptr<CreateConnectorSyncSettingsOptions> createConnectorSyncSettingsOptions
    ) const;
    /// <summary>
    /// Create an inbox connector with options
    /// </summary>
    /// <remarks>
    /// Sync emails between external mailboxes and MailSlurp inboxes
    /// </remarks>
    /// <param name="createConnectorWithOptions"></param>
    /// <param name="inboxId">Optional inbox ID to associate with the connector (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<ConnectorDto>> createConnectorWithOptions(
        std::shared_ptr<CreateConnectorWithOptions> createConnectorWithOptions,
        boost::optional<utility::string_t> inboxId
    ) const;
    /// <summary>
    /// Delete all inbox connectors
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<void> deleteAllConnector(
    ) const;
    /// <summary>
    /// Delete an inbox connector
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteConnector(
        utility::string_t id
    ) const;
    /// <summary>
    /// Delete an inbox connector IMAP connection
    /// </summary>
    /// <remarks>
    /// Delete IMAP connection for external inbox
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteConnectorImapConnection(
        utility::string_t id
    ) const;
    /// <summary>
    /// Delete an inbox connector SMTP connection
    /// </summary>
    /// <remarks>
    /// Delete SMTP connection for external inbox
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteConnectorSmtpConnection(
        utility::string_t id
    ) const;
    /// <summary>
    /// Create an inbox connector sync settings
    /// </summary>
    /// <remarks>
    /// Configure automatic pull or emails from external inboxes using an interval or schedule
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteConnectorSyncSettings(
        utility::string_t id
    ) const;
    /// <summary>
    /// Get all inbox connector events
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">Optional connector ID (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
    /// <param name="size">Optional page size in connector list pagination (optional, default to 0)</param>
    /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="since">Filter by created at after the given timestamp (optional, default to utility::datetime())</param>
    /// <param name="before">Filter by created at before the given timestamp (optional, default to utility::datetime())</param>
    /// <param name="eventType">Filter by event type (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<PageConnectorEvents>> getAllConnectorEvents(
        boost::optional<utility::string_t> id,
        boost::optional<int32_t> page,
        boost::optional<int32_t> size,
        boost::optional<utility::string_t> sort,
        boost::optional<utility::datetime> since,
        boost::optional<utility::datetime> before,
        boost::optional<utility::string_t> eventType
    ) const;
    /// <summary>
    /// Get an inbox connector
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<ConnectorDto>> getConnector(
        utility::string_t id
    ) const;
    /// <summary>
    /// Get connector by email address
    /// </summary>
    /// <remarks>
    /// Find an inbox connector by email address
    /// </remarks>
    /// <param name="emailAddress">Email address to search for connector by</param>
    pplx::task<std::shared_ptr<OptionalConnectorDto>> getConnectorByEmailAddress(
        utility::string_t emailAddress
    ) const;
    /// <summary>
    /// Get connector by inbox ID
    /// </summary>
    /// <remarks>
    /// Find an inbox connector by inbox ID
    /// </remarks>
    /// <param name="inboxId">Inbox ID to search for connector by</param>
    pplx::task<std::shared_ptr<OptionalConnectorDto>> getConnectorByInboxId(
        utility::string_t inboxId
    ) const;
    /// <summary>
    /// Get connector by name
    /// </summary>
    /// <remarks>
    /// Find an inbox connector by name
    /// </remarks>
    /// <param name="name">Name to search for connector by</param>
    pplx::task<std::shared_ptr<OptionalConnectorDto>> getConnectorByName(
        utility::string_t name
    ) const;
    /// <summary>
    /// Get an inbox connector event
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<ConnectorEventDto>> getConnectorEvent(
        utility::string_t id
    ) const;
    /// <summary>
    /// Get an inbox connector events
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
    /// <param name="size">Optional page size in connector list pagination (optional, default to 0)</param>
    /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="since">Filter by created at after the given timestamp (optional, default to utility::datetime())</param>
    /// <param name="before">Filter by created at before the given timestamp (optional, default to utility::datetime())</param>
    /// <param name="eventType">Filter by event type (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<PageConnectorEvents>> getConnectorEvents(
        utility::string_t id,
        boost::optional<int32_t> page,
        boost::optional<int32_t> size,
        boost::optional<utility::string_t> sort,
        boost::optional<utility::datetime> since,
        boost::optional<utility::datetime> before,
        boost::optional<utility::string_t> eventType
    ) const;
    /// <summary>
    /// Get an inbox connector IMAP connection
    /// </summary>
    /// <remarks>
    /// Get IMAP connection for external inbox
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<OptionalConnectorImapConnectionDto>> getConnectorImapConnection(
        utility::string_t id
    ) const;
    /// <summary>
    /// Get SMTP and IMAP connection settings for common mail providers
    /// </summary>
    /// <remarks>
    /// Get common mail provider SMTP and IMAP connection settings
    /// </remarks>
    pplx::task<std::shared_ptr<ConnectorProviderSettingsDto>> getConnectorProviderSettings(
    ) const;
    /// <summary>
    /// Get an inbox connector SMTP connection
    /// </summary>
    /// <remarks>
    /// Get SMTP connection for external inbox
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<OptionalConnectorSmtpConnectionDto>> getConnectorSmtpConnection(
        utility::string_t id
    ) const;
    /// <summary>
    /// Get an inbox connector sync settings
    /// </summary>
    /// <remarks>
    /// Get sync settings for connection with external inbox
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<OptionalConnectorSyncSettingsDto>> getConnectorSyncSettings(
        utility::string_t id
    ) const;
    /// <summary>
    /// Get inbox connectors
    /// </summary>
    /// <remarks>
    /// List inbox connectors that sync external emails to MailSlurp inboxes
    /// </remarks>
    /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
    /// <param name="size">Optional page size in connector list pagination (optional, default to 0)</param>
    /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="since">Filter by created at after the given timestamp (optional, default to utility::datetime())</param>
    /// <param name="before">Filter by created at before the given timestamp (optional, default to utility::datetime())</param>
    pplx::task<std::shared_ptr<PageConnector>> getConnectors(
        boost::optional<int32_t> page,
        boost::optional<int32_t> size,
        boost::optional<utility::string_t> sort,
        boost::optional<utility::datetime> since,
        boost::optional<utility::datetime> before
    ) const;
    /// <summary>
    /// Send from an inbox connector
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="sendEmailOptions"></param>
    /// <param name="useFallback"> (optional, default to false)</param>
    pplx::task<std::shared_ptr<SentEmailDto>> sendEmailFromConnector(
        utility::string_t id,
        std::shared_ptr<SendEmailOptions> sendEmailOptions,
        boost::optional<bool> useFallback
    ) const;
    /// <summary>
    /// Sync an inbox connector
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="since">Date to request emails since (optional, default to utility::datetime())</param>
    /// <param name="folder">Which folder to sync emails with (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="logging">Enable or disable logging for the sync operation (optional, default to false)</param>
    pplx::task<std::shared_ptr<ConnectorSyncRequestResult>> syncConnector(
        utility::string_t id,
        boost::optional<utility::datetime> since,
        boost::optional<utility::string_t> folder,
        boost::optional<bool> logging
    ) const;
    /// <summary>
    /// Test an inbox connector IMAP connection
    /// </summary>
    /// <remarks>
    /// Test the IMAP connection for a connector
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="createConnectorImapConnectionOptions"> (optional)</param>
    pplx::task<std::shared_ptr<ConnectorImapConnectionTestResult>> testConnectorImapConnection(
        utility::string_t id,
        boost::optional<std::shared_ptr<CreateConnectorImapConnectionOptions>> createConnectorImapConnectionOptions
    ) const;
    /// <summary>
    /// Test an inbox connector IMAP connection options
    /// </summary>
    /// <remarks>
    /// Test the IMAP connection options for a connector
    /// </remarks>
    /// <param name="createConnectorImapConnectionOptions"></param>
    pplx::task<std::shared_ptr<ConnectorImapConnectionTestResult>> testConnectorImapConnectionOptions(
        std::shared_ptr<CreateConnectorImapConnectionOptions> createConnectorImapConnectionOptions
    ) const;
    /// <summary>
    /// Test an inbox connector SMTP connection
    /// </summary>
    /// <remarks>
    /// Test the SMTP connection for a connector
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="createConnectorSmtpConnectionOptions"> (optional)</param>
    pplx::task<std::shared_ptr<ConnectorSmtpConnectionTestResult>> testConnectorSmtpConnection(
        utility::string_t id,
        boost::optional<std::shared_ptr<CreateConnectorSmtpConnectionOptions>> createConnectorSmtpConnectionOptions
    ) const;
    /// <summary>
    /// Test an inbox connector SMTP connection options
    /// </summary>
    /// <remarks>
    /// Test the SMTP connection options for a connector
    /// </remarks>
    /// <param name="createConnectorSmtpConnectionOptions"></param>
    pplx::task<std::shared_ptr<ConnectorSmtpConnectionTestResult>> testConnectorSmtpConnectionOptions(
        std::shared_ptr<CreateConnectorSmtpConnectionOptions> createConnectorSmtpConnectionOptions
    ) const;
    /// <summary>
    /// Update an inbox connector
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="createConnectorOptions"></param>
    pplx::task<std::shared_ptr<ConnectorDto>> updateConnector(
        utility::string_t id,
        std::shared_ptr<CreateConnectorOptions> createConnectorOptions
    ) const;
    /// <summary>
    /// Update an inbox connector IMAP connection
    /// </summary>
    /// <remarks>
    /// Update IMAP connection for external inbox
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="createConnectorImapConnectionOptions"></param>
    pplx::task<std::shared_ptr<ConnectorImapConnectionDto>> updateConnectorImapConnection(
        utility::string_t id,
        std::shared_ptr<CreateConnectorImapConnectionOptions> createConnectorImapConnectionOptions
    ) const;
    /// <summary>
    /// Update an inbox connector SMTP connection
    /// </summary>
    /// <remarks>
    /// Update SMTP connection for external inbox
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="createConnectorSmtpConnectionOptions"></param>
    pplx::task<std::shared_ptr<ConnectorSmtpConnectionDto>> updateConnectorSmtpConnection(
        utility::string_t id,
        std::shared_ptr<CreateConnectorSmtpConnectionOptions> createConnectorSmtpConnectionOptions
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_API_ConnectorControllerApi_H_ */

