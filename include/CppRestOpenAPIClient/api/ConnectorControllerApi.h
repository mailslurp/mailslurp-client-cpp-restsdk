/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ConnectorControllerApi.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_API_ConnectorControllerApi_H_
#define COM_MAILSLURP_CLIENT_API_ConnectorControllerApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/ConnectorDto.h"
#include "CppRestOpenAPIClient/model/ConnectorSyncEventDto.h"
#include "CppRestOpenAPIClient/model/ConnectorSyncRequestResult.h"
#include "CppRestOpenAPIClient/model/CreateConnectorOptions.h"
#include "CppRestOpenAPIClient/model/PageConnector.h"
#include "CppRestOpenAPIClient/model/PageConnectorSyncEvents.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace com {
namespace mailslurp {
namespace client {
namespace api {

using namespace com::mailslurp::client::model;



class  ConnectorControllerApi 
{
public:

    explicit ConnectorControllerApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~ConnectorControllerApi();

    /// <summary>
    /// Create an inbox connector
    /// </summary>
    /// <remarks>
    /// Sync emails between external mailboxes and MailSlurp inboxes
    /// </remarks>
    /// <param name="createConnectorOptions"></param>
    pplx::task<std::shared_ptr<ConnectorDto>> createConnector(
        std::shared_ptr<CreateConnectorOptions> createConnectorOptions
    ) const;
    /// <summary>
    /// Delete all inbox connectors
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<void> deleteAllConnector(
    ) const;
    /// <summary>
    /// Delete an inbox connector
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> deleteConnector(
        utility::string_t id
    ) const;
    /// <summary>
    /// Get all inbox connector sync events
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
    /// <param name="size">Optional page size in connector list pagination (optional, default to 0)</param>
    /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="since">Filter by created at after the given timestamp (optional, default to utility::datetime())</param>
    /// <param name="before">Filter by created at before the given timestamp (optional, default to utility::datetime())</param>
    pplx::task<std::shared_ptr<PageConnectorSyncEvents>> getAllConnectorSyncEvents(
        boost::optional<int32_t> page,
        boost::optional<int32_t> size,
        boost::optional<utility::string_t> sort,
        boost::optional<utility::datetime> since,
        boost::optional<utility::datetime> before
    ) const;
    /// <summary>
    /// Get an inbox connector
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<ConnectorDto>> getConnector(
        utility::string_t id
    ) const;
    /// <summary>
    /// Get an inbox connector sync event
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<ConnectorSyncEventDto>> getConnectorSyncEvent(
        utility::string_t id
    ) const;
    /// <summary>
    /// Get an inbox connector sync events
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
    /// <param name="size">Optional page size in connector list pagination (optional, default to 0)</param>
    /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="since">Filter by created at after the given timestamp (optional, default to utility::datetime())</param>
    /// <param name="before">Filter by created at before the given timestamp (optional, default to utility::datetime())</param>
    pplx::task<std::shared_ptr<PageConnectorSyncEvents>> getConnectorSyncEvents(
        utility::string_t id,
        boost::optional<int32_t> page,
        boost::optional<int32_t> size,
        boost::optional<utility::string_t> sort,
        boost::optional<utility::datetime> since,
        boost::optional<utility::datetime> before
    ) const;
    /// <summary>
    /// Get inbox connectors
    /// </summary>
    /// <remarks>
    /// List inbox connectors that sync external emails to MailSlurp inboxes
    /// </remarks>
    /// <param name="page">Optional page index in connector list pagination (optional, default to 0)</param>
    /// <param name="size">Optional page size in connector list pagination (optional, default to 0)</param>
    /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="since">Filter by created at after the given timestamp (optional, default to utility::datetime())</param>
    /// <param name="before">Filter by created at before the given timestamp (optional, default to utility::datetime())</param>
    pplx::task<std::shared_ptr<PageConnector>> getConnectors(
        boost::optional<int32_t> page,
        boost::optional<int32_t> size,
        boost::optional<utility::string_t> sort,
        boost::optional<utility::datetime> since,
        boost::optional<utility::datetime> before
    ) const;
    /// <summary>
    /// Sync an inbox connector
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<ConnectorSyncRequestResult>> syncConnector(
        utility::string_t id
    ) const;
    /// <summary>
    /// Update an inbox connector
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="createConnectorOptions"></param>
    pplx::task<std::shared_ptr<ConnectorDto>> updateConnector(
        utility::string_t id,
        std::shared_ptr<CreateConnectorOptions> createConnectorOptions
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_API_ConnectorControllerApi_H_ */

