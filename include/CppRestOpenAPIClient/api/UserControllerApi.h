/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * UserControllerApi.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_API_UserControllerApi_H_
#define COM_MAILSLURP_CLIENT_API_UserControllerApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/Object.h"
#include "CppRestOpenAPIClient/model/PageEntityAutomationItems.h"
#include "CppRestOpenAPIClient/model/PageEntityEventItems.h"
#include "CppRestOpenAPIClient/model/PageEntityFavouriteItems.h"
#include "CppRestOpenAPIClient/model/UserInfoDto.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace com {
namespace mailslurp {
namespace client {
namespace api {

using namespace com::mailslurp::client::model;



class  UserControllerApi 
{
public:

    explicit UserControllerApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~UserControllerApi();

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Optional page index (optional, default to 0)</param>
    /// <param name="size">Optional page size (optional, default to 0)</param>
    /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="since">Filter by created at after the given timestamp (optional, default to utility::datetime())</param>
    /// <param name="before">Filter by created at before the given timestamp (optional, default to utility::datetime())</param>
    /// <param name="inboxId">Optional inbox ID (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="phoneId">Optional phone ID (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="filter">Optional automation type filter (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<PageEntityAutomationItems>> getEntityAutomations(
        boost::optional<int32_t> page,
        boost::optional<int32_t> size,
        boost::optional<utility::string_t> sort,
        boost::optional<utility::datetime> since,
        boost::optional<utility::datetime> before,
        boost::optional<utility::string_t> inboxId,
        boost::optional<utility::string_t> phoneId,
        boost::optional<utility::string_t> filter
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Optional page index (optional, default to 0)</param>
    /// <param name="size">Optional page size (optional, default to 0)</param>
    /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="since">Filter by created at after the given timestamp (optional, default to utility::datetime())</param>
    /// <param name="before">Filter by created at before the given timestamp (optional, default to utility::datetime())</param>
    /// <param name="inboxId">Optional inbox ID (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="emailId">Optional email ID (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="phoneId">Optional phone ID (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="smsId">Optional SMS ID (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="attachmentId">Optional attachment ID (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="filter">Optional type filter (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<PageEntityEventItems>> getEntityEvents(
        boost::optional<int32_t> page,
        boost::optional<int32_t> size,
        boost::optional<utility::string_t> sort,
        boost::optional<utility::datetime> since,
        boost::optional<utility::datetime> before,
        boost::optional<utility::string_t> inboxId,
        boost::optional<utility::string_t> emailId,
        boost::optional<utility::string_t> phoneId,
        boost::optional<utility::string_t> smsId,
        boost::optional<utility::string_t> attachmentId,
        boost::optional<utility::string_t> filter
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Optional page index (optional, default to 0)</param>
    /// <param name="size">Optional page size (optional, default to 0)</param>
    /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="since">Filter by created at after the given timestamp (optional, default to utility::datetime())</param>
    /// <param name="before">Filter by created at before the given timestamp (optional, default to utility::datetime())</param>
    /// <param name="filter">Optional type filter (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<PageEntityFavouriteItems>> getEntityFavorites(
        boost::optional<int32_t> page,
        boost::optional<int32_t> size,
        boost::optional<utility::string_t> sort,
        boost::optional<utility::datetime> since,
        boost::optional<utility::datetime> before,
        boost::optional<utility::string_t> filter
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Utility function to extract properties from JSON objects in language where this is cumbersome.
    /// </remarks>
    /// <param name="property">JSON property name or dot separated path selector such as &#x60;a.b.c&#x60;</param>
    /// <param name="body"></param>
    pplx::task<utility::string_t> getJsonPropertyAsString(
        utility::string_t property,
        std::shared_ptr<Object> body
    ) const;
    /// <summary>
    /// 
    /// </summary>
    /// <remarks>
    /// Get account information for your user
    /// </remarks>
    pplx::task<std::shared_ptr<UserInfoDto>> getUserInfo(
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_API_UserControllerApi_H_ */

