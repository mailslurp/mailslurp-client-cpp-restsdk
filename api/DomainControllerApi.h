/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DomainControllerApi.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_API_DomainControllerApi_H_
#define COM_MAILSLURP_CLIENT_API_DomainControllerApi_H_


#include "../ApiClient.h"

#include "CreateDomainOptions.h"
#include "DomainDto.h"
#include "DomainPreview.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace com {
namespace mailslurp {
namespace client {
namespace api {

using namespace com::mailslurp::client::model;



class  DomainControllerApi 
{
public:

    explicit DomainControllerApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~DomainControllerApi();

    /// <summary>
    /// Create Domain
    /// </summary>
    /// <remarks>
    /// Link a domain that you own with MailSlurp so you can create email addresses using it. Endpoint returns DNS records used for validation. You must add these verification records to your host provider&#39;s DNS setup to verify the domain.
    /// </remarks>
    /// <param name="domainOptions">domainOptions</param>
    pplx::task<std::shared_ptr<DomainDto>> createDomain(
        std::shared_ptr<CreateDomainOptions> domainOptions
    ) const;
    /// <summary>
    /// Delete a domain
    /// </summary>
    /// <remarks>
    /// Delete a domain. This will disable any existing inboxes that use this domain.
    /// </remarks>
    /// <param name="id">id</param>
    pplx::task<void> deleteDomain(
        std::shared_ptr<utility::string_t> id
    ) const;
    /// <summary>
    /// Get a domain
    /// </summary>
    /// <remarks>
    /// Returns domain verification status and tokens for a given domain
    /// </remarks>
    /// <param name="id">id</param>
    pplx::task<std::shared_ptr<DomainDto>> getDomain(
        std::shared_ptr<utility::string_t> id
    ) const;
    /// <summary>
    /// Get domains
    /// </summary>
    /// <remarks>
    /// List all custom domains you have created
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<DomainPreview>>> getDomains(
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_API_DomainControllerApi_H_ */

