/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ContactControllerApi.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_API_ContactControllerApi_H_
#define COM_MAILSLURP_CLIENT_API_ContactControllerApi_H_


#include "../ApiClient.h"

#include "ContactDto.h"
#include "ContactProjection.h"
#include "CreateContactOptions.h"
#include "PageContactProjection.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace com {
namespace mailslurp {
namespace client {
namespace api {

using namespace com::mailslurp::client::model;



class  ContactControllerApi 
{
public:

    explicit ContactControllerApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~ContactControllerApi();

    /// <summary>
    /// Create a contact
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createContactOptions">createContactOptions</param>
    pplx::task<std::shared_ptr<ContactDto>> createContact(
        std::shared_ptr<CreateContactOptions> createContactOptions
    ) const;
    /// <summary>
    /// Delete contact
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="contactId">contactId</param>
    pplx::task<void> deleteContact(
        std::shared_ptr<utility::string_t> contactId
    ) const;
    /// <summary>
    /// Get all contacts
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="page">Optional page index in inbox list pagination (optional, default to 0)</param>
    /// <param name="size">Optional page size in inbox list pagination (optional, default to 0)</param>
    /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<PageContactProjection>> getAllContacts(
        boost::optional<int32_t> page,
        boost::optional<int32_t> size,
        boost::optional<utility::string_t> sort
    ) const;
    /// <summary>
    /// Get contact
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="contactId">contactId</param>
    pplx::task<std::shared_ptr<ContactDto>> getContact(
        std::shared_ptr<utility::string_t> contactId
    ) const;
    /// <summary>
    /// Get contact vCard vcf file
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="contactId">contactId</param>
    pplx::task<utility::string_t> getContactVCard(
        std::shared_ptr<utility::string_t> contactId
    ) const;
    /// <summary>
    /// Get all contacts
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::vector<std::shared_ptr<ContactProjection>>> getContacts(
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_API_ContactControllerApi_H_ */

