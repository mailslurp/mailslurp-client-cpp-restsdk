/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AttachmentControllerApi.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_API_AttachmentControllerApi_H_
#define COM_MAILSLURP_CLIENT_API_AttachmentControllerApi_H_


#include "../ApiClient.h"

#include "HttpContent.h"
#include "UploadAttachmentOptions.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace com {
namespace mailslurp {
namespace client {
namespace api {

using namespace com::mailslurp::client::model;



class  AttachmentControllerApi 
{
public:

    explicit AttachmentControllerApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~AttachmentControllerApi();

    /// <summary>
    /// Upload an attachment for sending
    /// </summary>
    /// <remarks>
    /// When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
    /// </remarks>
    /// <param name="uploadOptions">uploadOptions</param>
    pplx::task<std::vector<utility::string_t>> uploadAttachment(
        std::shared_ptr<UploadAttachmentOptions> uploadOptions
    ) const;
    /// <summary>
    /// Upload an attachment for sending using Multipart Form
    /// </summary>
    /// <remarks>
    /// When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
    /// </remarks>
    /// <param name="file">file</param>
    /// <param name="contentType">contentType (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="filename">filename (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="xFilename">x-filename (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::vector<utility::string_t>> uploadMultipartForm(
        std::shared_ptr<HttpContent> file,
        boost::optional<utility::string_t> contentType,
        boost::optional<utility::string_t> filename,
        boost::optional<utility::string_t> xFilename
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_API_AttachmentControllerApi_H_ */

