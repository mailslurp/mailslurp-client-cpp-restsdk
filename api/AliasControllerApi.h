/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AliasControllerApi.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_API_AliasControllerApi_H_
#define COM_MAILSLURP_CLIENT_API_AliasControllerApi_H_


#include "../ApiClient.h"

#include "Alias.h"
#include "AliasDto.h"
#include "CreateAliasOptions.h"
#include "PageAlias.h"
#include "PageThreadProjection.h"
#include "UpdateAliasOptions.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace com {
namespace mailslurp {
namespace client {
namespace api {

using namespace com::mailslurp::client::model;



class  AliasControllerApi 
{
public:

    explicit AliasControllerApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~AliasControllerApi();

    /// <summary>
    /// Create an email alias. Must be verified by clicking link inside verification email that will be sent to the address. Once verified the alias will be active.
    /// </summary>
    /// <remarks>
    /// Email aliases use a MailSlurp randomly generated email address (or a custom domain inbox that you provide) to mask or proxy a real email address. Emails sent to the alias address will be forwarded to the hidden email address it was created for. If you want to send a reply use the threadId attached
    /// </remarks>
    /// <param name="createAliasOptions">createAliasOptions</param>
    pplx::task<std::shared_ptr<AliasDto>> createAlias(
        std::shared_ptr<CreateAliasOptions> createAliasOptions
    ) const;
    /// <summary>
    /// Delete an email alias
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="aliasId">aliasId</param>
    pplx::task<void> deleteAlias(
        std::shared_ptr<utility::string_t> aliasId
    ) const;
    /// <summary>
    /// Get an email alias
    /// </summary>
    /// <remarks>
    /// Get an email alias by ID
    /// </remarks>
    /// <param name="aliasId">aliasId</param>
    pplx::task<std::shared_ptr<AliasDto>> getAlias(
        std::shared_ptr<utility::string_t> aliasId
    ) const;
    /// <summary>
    /// Get threads created for an alias
    /// </summary>
    /// <remarks>
    /// Returns threads created for an email alias in paginated form
    /// </remarks>
    /// <param name="aliasId">aliasId</param>
    /// <param name="page">Optional page index in thread list pagination (optional, default to 0)</param>
    /// <param name="size">Optional page size in thread list pagination (optional, default to 0)</param>
    /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<PageThreadProjection>> getAliasThreads(
        std::shared_ptr<utility::string_t> aliasId,
        boost::optional<int32_t> page,
        boost::optional<int32_t> size,
        boost::optional<utility::string_t> sort
    ) const;
    /// <summary>
    /// Get all email aliases you have created
    /// </summary>
    /// <remarks>
    /// Get all email aliases in paginated form
    /// </remarks>
    /// <param name="page">Optional page index in alias list pagination (optional, default to 0)</param>
    /// <param name="size">Optional page size in alias list pagination (optional, default to 0)</param>
    /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<PageAlias>> getAliases(
        boost::optional<int32_t> page,
        boost::optional<int32_t> size,
        boost::optional<utility::string_t> sort
    ) const;
    /// <summary>
    /// Update an email alias
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="aliasId">aliasId</param>
    /// <param name="updateAliasOptions">updateAliasOptions</param>
    pplx::task<void> updateAlias(
        std::shared_ptr<utility::string_t> aliasId,
        std::shared_ptr<UpdateAliasOptions> updateAliasOptions
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_API_AliasControllerApi_H_ */

