/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * AliasControllerApi.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_API_AliasControllerApi_H_
#define COM_MAILSLURP_CLIENT_API_AliasControllerApi_H_


#include "../ApiClient.h"

#include "Alias.h"
#include "CreateAnonymousAliasOptions.h"
#include "CreateOwnedAliasOptions.h"
#include "PageAlias.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace com {
namespace mailslurp {
namespace client {
namespace api {

using namespace com::mailslurp::client::model;



class  AliasControllerApi 
{
public:

    explicit AliasControllerApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~AliasControllerApi();

    /// <summary>
    /// Create an email alias
    /// </summary>
    /// <remarks>
    /// Create an email alias belonging to a user ID. To create anonymous aliases use the &#x60;createAnonymousAlias&#x60; method.
    /// </remarks>
    /// <param name="createOwnedAliasOptions">createOwnedAliasOptions</param>
    pplx::task<void> createAlias(
        std::shared_ptr<CreateOwnedAliasOptions> createOwnedAliasOptions
    ) const;
    /// <summary>
    /// Create an anonymous email alias
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="createAnonymousAliasOptions">createAnonymousAliasOptions</param>
    pplx::task<std::shared_ptr<Alias>> createAnonymousAlias(
        std::shared_ptr<CreateAnonymousAliasOptions> createAnonymousAliasOptions
    ) const;
    /// <summary>
    /// Delete an owned alias
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="aliasId">aliasId</param>
    pplx::task<void> deleteAlias(
        std::shared_ptr<utility::string_t> aliasId
    ) const;
    /// <summary>
    /// Get an email alias
    /// </summary>
    /// <remarks>
    /// Get an email alias by ID
    /// </remarks>
    /// <param name="aliasId">aliasId</param>
    pplx::task<std::shared_ptr<Alias>> getAlias(
        std::shared_ptr<utility::string_t> aliasId
    ) const;
    /// <summary>
    /// Get all email aliases
    /// </summary>
    /// <remarks>
    /// Get all email aliases in paginated form
    /// </remarks>
    /// <param name="page">Optional page index in alias list pagination (optional, default to 0)</param>
    /// <param name="size">Optional page size in alias list pagination (optional, default to 0)</param>
    /// <param name="sort">Optional createdAt sort direction ASC or DESC (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<PageAlias>> getAliases(
        boost::optional<int32_t> page,
        boost::optional<int32_t> size,
        boost::optional<utility::string_t> sort
    ) const;
    /// <summary>
    /// Update an owned alias
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="aliasId">aliasId</param>
    /// <param name="createOwnedAliasOptions">createOwnedAliasOptions</param>
    pplx::task<void> updateAlias(
        std::shared_ptr<utility::string_t> aliasId,
        std::shared_ptr<CreateOwnedAliasOptions> createOwnedAliasOptions
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_API_AliasControllerApi_H_ */

