/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 4.3.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * CommonActionsControllerApi.h
 *
 * 
 */

#ifndef COM_MAILSLURP_CLIENT_API_CommonActionsControllerApi_H_
#define COM_MAILSLURP_CLIENT_API_CommonActionsControllerApi_H_


#include "../ApiClient.h"

#include "Inbox.h"
#include "SimpleSendEmailOptions.h"
#include <cpprest/details/basic_types.h>


#include <boost/optional.hpp>

namespace com {
namespace mailslurp {
namespace client {
namespace api {

using namespace com::mailslurp::client::model;



class  CommonActionsControllerApi 
{
public:

    explicit CommonActionsControllerApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~CommonActionsControllerApi();

    /// <summary>
    /// Create new random inbox
    /// </summary>
    /// <remarks>
    /// Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
    /// </remarks>
    /// <param name="allowTeamAccess">allowTeamAccess (optional, default to false)</param>
    /// <param name="description">description (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="emailAddress">emailAddress (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="expiresAt">expiresAt (optional, default to utility::datetime())</param>
    /// <param name="expiresIn">expiresIn (optional, default to 0L)</param>
    /// <param name="favourite">favourite (optional, default to false)</param>
    /// <param name="inboxType">inboxType (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="name">name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="tags">tags (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="useDomainPool">useDomainPool (optional, default to false)</param>
    pplx::task<std::shared_ptr<Inbox>> createNewEmailAddress(
        boost::optional<bool> allowTeamAccess,
        boost::optional<utility::string_t> description,
        boost::optional<utility::string_t> emailAddress,
        boost::optional<utility::datetime> expiresAt,
        boost::optional<int64_t> expiresIn,
        boost::optional<bool> favourite,
        boost::optional<utility::string_t> inboxType,
        boost::optional<utility::string_t> name,
        boost::optional<std::vector<utility::string_t>> tags,
        boost::optional<bool> useDomainPool
    ) const;
    /// <summary>
    /// Create new random inbox
    /// </summary>
    /// <remarks>
    /// Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
    /// </remarks>
    /// <param name="allowTeamAccess">allowTeamAccess (optional, default to false)</param>
    /// <param name="description">description (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="emailAddress">emailAddress (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="expiresAt">expiresAt (optional, default to utility::datetime())</param>
    /// <param name="expiresIn">expiresIn (optional, default to 0L)</param>
    /// <param name="favourite">favourite (optional, default to false)</param>
    /// <param name="inboxType">inboxType (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="name">name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="tags">tags (optional, default to std::vector&lt;std::shared_ptr&lt;utility::string_t&gt;&gt;())</param>
    /// <param name="useDomainPool">useDomainPool (optional, default to false)</param>
    pplx::task<std::shared_ptr<Inbox>> createNewEmailAddress1(
        boost::optional<bool> allowTeamAccess,
        boost::optional<utility::string_t> description,
        boost::optional<utility::string_t> emailAddress,
        boost::optional<utility::datetime> expiresAt,
        boost::optional<int64_t> expiresIn,
        boost::optional<bool> favourite,
        boost::optional<utility::string_t> inboxType,
        boost::optional<utility::string_t> name,
        boost::optional<std::vector<utility::string_t>> tags,
        boost::optional<bool> useDomainPool
    ) const;
    /// <summary>
    /// Delete all emails in an inbox
    /// </summary>
    /// <remarks>
    /// Deletes all emails
    /// </remarks>
    /// <param name="inboxId">inboxId</param>
    pplx::task<void> emptyInbox(
        std::shared_ptr<utility::string_t> inboxId
    ) const;
    /// <summary>
    /// Send an email
    /// </summary>
    /// <remarks>
    /// If no senderId or inboxId provided a random email address will be used to send from.
    /// </remarks>
    /// <param name="emailOptions">emailOptions</param>
    pplx::task<void> sendEmailSimple(
        std::shared_ptr<SimpleSendEmailOptions> emailOptions
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* COM_MAILSLURP_CLIENT_API_CommonActionsControllerApi_H_ */

