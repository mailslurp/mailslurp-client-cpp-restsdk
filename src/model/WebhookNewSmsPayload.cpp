/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/WebhookNewSmsPayload.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



WebhookNewSmsPayload::WebhookNewSmsPayload()
{
    m_MessageId = utility::conversions::to_string_t("");
    m_MessageIdIsSet = false;
    m_WebhookId = utility::conversions::to_string_t("");
    m_WebhookIdIsSet = false;
    m_EventName = utility::conversions::to_string_t("");
    m_EventNameIsSet = false;
    m_WebhookName = utility::conversions::to_string_t("");
    m_WebhookNameIsSet = false;
    m_SmsId = utility::conversions::to_string_t("");
    m_SmsIdIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_PhoneNumber = utility::conversions::to_string_t("");
    m_PhoneNumberIsSet = false;
    m_ToNumber = utility::conversions::to_string_t("");
    m_ToNumberIsSet = false;
    m_FromNumber = utility::conversions::to_string_t("");
    m_FromNumberIsSet = false;
    m_Body = utility::conversions::to_string_t("");
    m_BodyIsSet = false;
    m_Read = false;
    m_ReadIsSet = false;
}

WebhookNewSmsPayload::~WebhookNewSmsPayload()
{
}

void WebhookNewSmsPayload::validate()
{
    // TODO: implement validation
}

web::json::value WebhookNewSmsPayload::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MessageIdIsSet)
    {
        val[utility::conversions::to_string_t(U("messageId"))] = ModelBase::toJson(m_MessageId);
    }
    if(m_WebhookIdIsSet)
    {
        val[utility::conversions::to_string_t(U("webhookId"))] = ModelBase::toJson(m_WebhookId);
    }
    if(m_EventNameIsSet)
    {
        val[utility::conversions::to_string_t(U("eventName"))] = ModelBase::toJson(m_EventName);
    }
    if(m_WebhookNameIsSet)
    {
        val[utility::conversions::to_string_t(U("webhookName"))] = ModelBase::toJson(m_WebhookName);
    }
    if(m_SmsIdIsSet)
    {
        val[utility::conversions::to_string_t(U("smsId"))] = ModelBase::toJson(m_SmsId);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t(U("userId"))] = ModelBase::toJson(m_UserId);
    }
    if(m_PhoneNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("phoneNumber"))] = ModelBase::toJson(m_PhoneNumber);
    }
    if(m_ToNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("toNumber"))] = ModelBase::toJson(m_ToNumber);
    }
    if(m_FromNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("fromNumber"))] = ModelBase::toJson(m_FromNumber);
    }
    if(m_BodyIsSet)
    {
        val[utility::conversions::to_string_t(U("body"))] = ModelBase::toJson(m_Body);
    }
    if(m_ReadIsSet)
    {
        val[utility::conversions::to_string_t(U("read"))] = ModelBase::toJson(m_Read);
    }

    return val;
}

bool WebhookNewSmsPayload::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("messageId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("messageId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMessageId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessageId);
            setMessageId(refVal_setMessageId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("webhookId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("webhookId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWebhookId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWebhookId);
            setWebhookId(refVal_setWebhookId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("eventName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("eventName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEventName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEventName);
            setEventName(refVal_setEventName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("webhookName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("webhookName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWebhookName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWebhookName);
            setWebhookName(refVal_setWebhookName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("smsId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("smsId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSmsId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSmsId);
            setSmsId(refVal_setSmsId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("userId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("userId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserId);
            setUserId(refVal_setUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("phoneNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("phoneNumber")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPhoneNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPhoneNumber);
            setPhoneNumber(refVal_setPhoneNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("toNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("toNumber")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setToNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setToNumber);
            setToNumber(refVal_setToNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fromNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fromNumber")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFromNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFromNumber);
            setFromNumber(refVal_setFromNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("body"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("body")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBody;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBody);
            setBody(refVal_setBody);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("read"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("read")));
        if(!fieldValue.is_null())
        {
            bool refVal_setRead;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRead);
            setRead(refVal_setRead);
        }
    }
    return ok;
}

void WebhookNewSmsPayload::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_MessageIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("messageId")), m_MessageId));
    }
    if(m_WebhookIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("webhookId")), m_WebhookId));
    }
    if(m_EventNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("eventName")), m_EventName));
    }
    if(m_WebhookNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("webhookName")), m_WebhookName));
    }
    if(m_SmsIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("smsId")), m_SmsId));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("userId")), m_UserId));
    }
    if(m_PhoneNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("phoneNumber")), m_PhoneNumber));
    }
    if(m_ToNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("toNumber")), m_ToNumber));
    }
    if(m_FromNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fromNumber")), m_FromNumber));
    }
    if(m_BodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("body")), m_Body));
    }
    if(m_ReadIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("read")), m_Read));
    }
}

bool WebhookNewSmsPayload::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("messageId"))))
    {
        utility::string_t refVal_setMessageId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("messageId"))), refVal_setMessageId );
        setMessageId(refVal_setMessageId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("webhookId"))))
    {
        utility::string_t refVal_setWebhookId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("webhookId"))), refVal_setWebhookId );
        setWebhookId(refVal_setWebhookId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("eventName"))))
    {
        utility::string_t refVal_setEventName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("eventName"))), refVal_setEventName );
        setEventName(refVal_setEventName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("webhookName"))))
    {
        utility::string_t refVal_setWebhookName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("webhookName"))), refVal_setWebhookName );
        setWebhookName(refVal_setWebhookName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("smsId"))))
    {
        utility::string_t refVal_setSmsId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("smsId"))), refVal_setSmsId );
        setSmsId(refVal_setSmsId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("userId"))))
    {
        utility::string_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("userId"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("phoneNumber"))))
    {
        utility::string_t refVal_setPhoneNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("phoneNumber"))), refVal_setPhoneNumber );
        setPhoneNumber(refVal_setPhoneNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("toNumber"))))
    {
        utility::string_t refVal_setToNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("toNumber"))), refVal_setToNumber );
        setToNumber(refVal_setToNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fromNumber"))))
    {
        utility::string_t refVal_setFromNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fromNumber"))), refVal_setFromNumber );
        setFromNumber(refVal_setFromNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("body"))))
    {
        utility::string_t refVal_setBody;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("body"))), refVal_setBody );
        setBody(refVal_setBody);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("read"))))
    {
        bool refVal_setRead;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("read"))), refVal_setRead );
        setRead(refVal_setRead);
    }
    return ok;
}

utility::string_t WebhookNewSmsPayload::getMessageId() const
{
    return m_MessageId;
}

void WebhookNewSmsPayload::setMessageId(const utility::string_t& value)
{
    m_MessageId = value;
    m_MessageIdIsSet = true;
}

bool WebhookNewSmsPayload::messageIdIsSet() const
{
    return m_MessageIdIsSet;
}

void WebhookNewSmsPayload::unsetMessageId()
{
    m_MessageIdIsSet = false;
}
utility::string_t WebhookNewSmsPayload::getWebhookId() const
{
    return m_WebhookId;
}

void WebhookNewSmsPayload::setWebhookId(const utility::string_t& value)
{
    m_WebhookId = value;
    m_WebhookIdIsSet = true;
}

bool WebhookNewSmsPayload::webhookIdIsSet() const
{
    return m_WebhookIdIsSet;
}

void WebhookNewSmsPayload::unsetWebhookId()
{
    m_WebhookIdIsSet = false;
}
utility::string_t WebhookNewSmsPayload::getEventName() const
{
    return m_EventName;
}

void WebhookNewSmsPayload::setEventName(const utility::string_t& value)
{
    m_EventName = value;
    m_EventNameIsSet = true;
}

bool WebhookNewSmsPayload::eventNameIsSet() const
{
    return m_EventNameIsSet;
}

void WebhookNewSmsPayload::unsetEventName()
{
    m_EventNameIsSet = false;
}
utility::string_t WebhookNewSmsPayload::getWebhookName() const
{
    return m_WebhookName;
}

void WebhookNewSmsPayload::setWebhookName(const utility::string_t& value)
{
    m_WebhookName = value;
    m_WebhookNameIsSet = true;
}

bool WebhookNewSmsPayload::webhookNameIsSet() const
{
    return m_WebhookNameIsSet;
}

void WebhookNewSmsPayload::unsetWebhookName()
{
    m_WebhookNameIsSet = false;
}
utility::string_t WebhookNewSmsPayload::getSmsId() const
{
    return m_SmsId;
}

void WebhookNewSmsPayload::setSmsId(const utility::string_t& value)
{
    m_SmsId = value;
    m_SmsIdIsSet = true;
}

bool WebhookNewSmsPayload::smsIdIsSet() const
{
    return m_SmsIdIsSet;
}

void WebhookNewSmsPayload::unsetSmsId()
{
    m_SmsIdIsSet = false;
}
utility::string_t WebhookNewSmsPayload::getUserId() const
{
    return m_UserId;
}

void WebhookNewSmsPayload::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool WebhookNewSmsPayload::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void WebhookNewSmsPayload::unsetUserId()
{
    m_UserIdIsSet = false;
}
utility::string_t WebhookNewSmsPayload::getPhoneNumber() const
{
    return m_PhoneNumber;
}

void WebhookNewSmsPayload::setPhoneNumber(const utility::string_t& value)
{
    m_PhoneNumber = value;
    m_PhoneNumberIsSet = true;
}

bool WebhookNewSmsPayload::phoneNumberIsSet() const
{
    return m_PhoneNumberIsSet;
}

void WebhookNewSmsPayload::unsetPhoneNumber()
{
    m_PhoneNumberIsSet = false;
}
utility::string_t WebhookNewSmsPayload::getToNumber() const
{
    return m_ToNumber;
}

void WebhookNewSmsPayload::setToNumber(const utility::string_t& value)
{
    m_ToNumber = value;
    m_ToNumberIsSet = true;
}

bool WebhookNewSmsPayload::toNumberIsSet() const
{
    return m_ToNumberIsSet;
}

void WebhookNewSmsPayload::unsetToNumber()
{
    m_ToNumberIsSet = false;
}
utility::string_t WebhookNewSmsPayload::getFromNumber() const
{
    return m_FromNumber;
}

void WebhookNewSmsPayload::setFromNumber(const utility::string_t& value)
{
    m_FromNumber = value;
    m_FromNumberIsSet = true;
}

bool WebhookNewSmsPayload::fromNumberIsSet() const
{
    return m_FromNumberIsSet;
}

void WebhookNewSmsPayload::unsetFromNumber()
{
    m_FromNumberIsSet = false;
}
utility::string_t WebhookNewSmsPayload::getBody() const
{
    return m_Body;
}

void WebhookNewSmsPayload::setBody(const utility::string_t& value)
{
    m_Body = value;
    m_BodyIsSet = true;
}

bool WebhookNewSmsPayload::bodyIsSet() const
{
    return m_BodyIsSet;
}

void WebhookNewSmsPayload::unsetBody()
{
    m_BodyIsSet = false;
}
bool WebhookNewSmsPayload::isRead() const
{
    return m_Read;
}

void WebhookNewSmsPayload::setRead(bool value)
{
    m_Read = value;
    m_ReadIsSet = true;
}

bool WebhookNewSmsPayload::readIsSet() const
{
    return m_ReadIsSet;
}

void WebhookNewSmsPayload::unsetRead()
{
    m_ReadIsSet = false;
}
}
}
}
}


