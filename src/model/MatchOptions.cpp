/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/MatchOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



MatchOptions::MatchOptions()
{
    m_MatchesIsSet = false;
    m_ConditionsIsSet = false;
}

MatchOptions::~MatchOptions()
{
}

void MatchOptions::validate()
{
    // TODO: implement validation
}

web::json::value MatchOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MatchesIsSet)
    {
        val[utility::conversions::to_string_t(U("matches"))] = ModelBase::toJson(m_Matches);
    }
    if(m_ConditionsIsSet)
    {
        val[utility::conversions::to_string_t(U("conditions"))] = ModelBase::toJson(m_Conditions);
    }

    return val;
}

bool MatchOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("matches"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("matches")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<MatchOption>> refVal_setMatches;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMatches);
            setMatches(refVal_setMatches);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("conditions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("conditions")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ConditionOption>> refVal_setConditions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConditions);
            setConditions(refVal_setConditions);
        }
    }
    return ok;
}

void MatchOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_MatchesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("matches")), m_Matches));
    }
    if(m_ConditionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("conditions")), m_Conditions));
    }
}

bool MatchOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("matches"))))
    {
        std::vector<std::shared_ptr<MatchOption>> refVal_setMatches;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("matches"))), refVal_setMatches );
        setMatches(refVal_setMatches);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("conditions"))))
    {
        std::vector<std::shared_ptr<ConditionOption>> refVal_setConditions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("conditions"))), refVal_setConditions );
        setConditions(refVal_setConditions);
    }
    return ok;
}

std::vector<std::shared_ptr<MatchOption>>& MatchOptions::getMatches()
{
    return m_Matches;
}

void MatchOptions::setMatches(const std::vector<std::shared_ptr<MatchOption>>& value)
{
    m_Matches = value;
    m_MatchesIsSet = true;
}

bool MatchOptions::matchesIsSet() const
{
    return m_MatchesIsSet;
}

void MatchOptions::unsetMatches()
{
    m_MatchesIsSet = false;
}
std::vector<std::shared_ptr<ConditionOption>>& MatchOptions::getConditions()
{
    return m_Conditions;
}

void MatchOptions::setConditions(const std::vector<std::shared_ptr<ConditionOption>>& value)
{
    m_Conditions = value;
    m_ConditionsIsSet = true;
}

bool MatchOptions::conditionsIsSet() const
{
    return m_ConditionsIsSet;
}

void MatchOptions::unsetConditions()
{
    m_ConditionsIsSet = false;
}
}
}
}
}


