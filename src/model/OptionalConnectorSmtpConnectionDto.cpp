/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/OptionalConnectorSmtpConnectionDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



OptionalConnectorSmtpConnectionDto::OptionalConnectorSmtpConnectionDto()
{
    m_Present = false;
    m_PresentIsSet = false;
    m_ResultIsSet = false;
}

OptionalConnectorSmtpConnectionDto::~OptionalConnectorSmtpConnectionDto()
{
}

void OptionalConnectorSmtpConnectionDto::validate()
{
    // TODO: implement validation
}

web::json::value OptionalConnectorSmtpConnectionDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PresentIsSet)
    {
        val[utility::conversions::to_string_t(U("present"))] = ModelBase::toJson(m_Present);
    }
    if(m_ResultIsSet)
    {
        val[utility::conversions::to_string_t(U("result"))] = ModelBase::toJson(m_Result);
    }

    return val;
}

bool OptionalConnectorSmtpConnectionDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("present"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("present")));
        if(!fieldValue.is_null())
        {
            bool refVal_setPresent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPresent);
            setPresent(refVal_setPresent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("result"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("result")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ConnectorSmtpConnectionDto> refVal_setResult;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResult);
            setResult(refVal_setResult);
        }
    }
    return ok;
}

void OptionalConnectorSmtpConnectionDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PresentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("present")), m_Present));
    }
    if(m_ResultIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("result")), m_Result));
    }
}

bool OptionalConnectorSmtpConnectionDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("present"))))
    {
        bool refVal_setPresent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("present"))), refVal_setPresent );
        setPresent(refVal_setPresent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("result"))))
    {
        std::shared_ptr<ConnectorSmtpConnectionDto> refVal_setResult;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("result"))), refVal_setResult );
        setResult(refVal_setResult);
    }
    return ok;
}

bool OptionalConnectorSmtpConnectionDto::isPresent() const
{
    return m_Present;
}

void OptionalConnectorSmtpConnectionDto::setPresent(bool value)
{
    m_Present = value;
    m_PresentIsSet = true;
}

bool OptionalConnectorSmtpConnectionDto::presentIsSet() const
{
    return m_PresentIsSet;
}

void OptionalConnectorSmtpConnectionDto::unsetPresent()
{
    m_PresentIsSet = false;
}
std::shared_ptr<ConnectorSmtpConnectionDto> OptionalConnectorSmtpConnectionDto::getResult() const
{
    return m_Result;
}

void OptionalConnectorSmtpConnectionDto::setResult(const std::shared_ptr<ConnectorSmtpConnectionDto>& value)
{
    m_Result = value;
    m_ResultIsSet = true;
}

bool OptionalConnectorSmtpConnectionDto::resultIsSet() const
{
    return m_ResultIsSet;
}

void OptionalConnectorSmtpConnectionDto::unsetResult()
{
    m_ResultIsSet = false;
}
}
}
}
}


