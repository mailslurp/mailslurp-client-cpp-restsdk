/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/EmailFeatureSupportResult.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



EmailFeatureSupportResult::EmailFeatureSupportResult()
{
    m_NamesIsSet = false;
    m_DetectedFeaturesIsSet = false;
    m_FeatureOverviewsIsSet = false;
    m_FeaturePercentagesIsSet = false;
}

EmailFeatureSupportResult::~EmailFeatureSupportResult()
{
}

void EmailFeatureSupportResult::validate()
{
    // TODO: implement validation
}

web::json::value EmailFeatureSupportResult::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NamesIsSet)
    {
        val[utility::conversions::to_string_t(U("names"))] = ModelBase::toJson(m_Names);
    }
    if(m_DetectedFeaturesIsSet)
    {
        val[utility::conversions::to_string_t(U("detectedFeatures"))] = ModelBase::toJson(m_DetectedFeatures);
    }
    if(m_FeatureOverviewsIsSet)
    {
        val[utility::conversions::to_string_t(U("featureOverviews"))] = ModelBase::toJson(m_FeatureOverviews);
    }
    if(m_FeaturePercentagesIsSet)
    {
        val[utility::conversions::to_string_t(U("featurePercentages"))] = ModelBase::toJson(m_FeaturePercentages);
    }

    return val;
}

bool EmailFeatureSupportResult::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("names"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("names")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<EmailFeatureNames> refVal_setNames;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNames);
            setNames(refVal_setNames);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("detectedFeatures"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("detectedFeatures")));
        if(!fieldValue.is_null())
        {
            Set<utility::string_t> refVal_setDetectedFeatures;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDetectedFeatures);
            setDetectedFeatures(refVal_setDetectedFeatures);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("featureOverviews"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("featureOverviews")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<EmailFeatureOverview>> refVal_setFeatureOverviews;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFeatureOverviews);
            setFeatureOverviews(refVal_setFeatureOverviews);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("featurePercentages"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("featurePercentages")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<EmailFeatureSupportStatusPercentage>> refVal_setFeaturePercentages;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFeaturePercentages);
            setFeaturePercentages(refVal_setFeaturePercentages);
        }
    }
    return ok;
}

void EmailFeatureSupportResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NamesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("names")), m_Names));
    }
    if(m_DetectedFeaturesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("detectedFeatures")), m_DetectedFeatures));
    }
    if(m_FeatureOverviewsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("featureOverviews")), m_FeatureOverviews));
    }
    if(m_FeaturePercentagesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("featurePercentages")), m_FeaturePercentages));
    }
}

bool EmailFeatureSupportResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("names"))))
    {
        std::shared_ptr<EmailFeatureNames> refVal_setNames;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("names"))), refVal_setNames );
        setNames(refVal_setNames);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("detectedFeatures"))))
    {
        Set<utility::string_t> refVal_setDetectedFeatures;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("detectedFeatures"))), refVal_setDetectedFeatures );
        setDetectedFeatures(refVal_setDetectedFeatures);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("featureOverviews"))))
    {
        std::vector<std::shared_ptr<EmailFeatureOverview>> refVal_setFeatureOverviews;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("featureOverviews"))), refVal_setFeatureOverviews );
        setFeatureOverviews(refVal_setFeatureOverviews);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("featurePercentages"))))
    {
        std::vector<std::shared_ptr<EmailFeatureSupportStatusPercentage>> refVal_setFeaturePercentages;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("featurePercentages"))), refVal_setFeaturePercentages );
        setFeaturePercentages(refVal_setFeaturePercentages);
    }
    return ok;
}

std::shared_ptr<EmailFeatureNames> EmailFeatureSupportResult::getNames() const
{
    return m_Names;
}

void EmailFeatureSupportResult::setNames(const std::shared_ptr<EmailFeatureNames>& value)
{
    m_Names = value;
    m_NamesIsSet = true;
}

bool EmailFeatureSupportResult::namesIsSet() const
{
    return m_NamesIsSet;
}

void EmailFeatureSupportResult::unsetNames()
{
    m_NamesIsSet = false;
}
Set<utility::string_t>& EmailFeatureSupportResult::getDetectedFeatures()
{
    return m_DetectedFeatures;
}

void EmailFeatureSupportResult::setDetectedFeatures(const Set<utility::string_t>& value)
{
    m_DetectedFeatures = value;
    m_DetectedFeaturesIsSet = true;
}

bool EmailFeatureSupportResult::detectedFeaturesIsSet() const
{
    return m_DetectedFeaturesIsSet;
}

void EmailFeatureSupportResult::unsetDetectedFeatures()
{
    m_DetectedFeaturesIsSet = false;
}
std::vector<std::shared_ptr<EmailFeatureOverview>>& EmailFeatureSupportResult::getFeatureOverviews()
{
    return m_FeatureOverviews;
}

void EmailFeatureSupportResult::setFeatureOverviews(const std::vector<std::shared_ptr<EmailFeatureOverview>>& value)
{
    m_FeatureOverviews = value;
    m_FeatureOverviewsIsSet = true;
}

bool EmailFeatureSupportResult::featureOverviewsIsSet() const
{
    return m_FeatureOverviewsIsSet;
}

void EmailFeatureSupportResult::unsetFeatureOverviews()
{
    m_FeatureOverviewsIsSet = false;
}
std::vector<std::shared_ptr<EmailFeatureSupportStatusPercentage>>& EmailFeatureSupportResult::getFeaturePercentages()
{
    return m_FeaturePercentages;
}

void EmailFeatureSupportResult::setFeaturePercentages(const std::vector<std::shared_ptr<EmailFeatureSupportStatusPercentage>>& value)
{
    m_FeaturePercentages = value;
    m_FeaturePercentagesIsSet = true;
}

bool EmailFeatureSupportResult::featurePercentagesIsSet() const
{
    return m_FeaturePercentagesIsSet;
}

void EmailFeatureSupportResult::unsetFeaturePercentages()
{
    m_FeaturePercentagesIsSet = false;
}
}
}
}
}


