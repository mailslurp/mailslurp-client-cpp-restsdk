/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/EmailAvailableResult.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



EmailAvailableResult::EmailAvailableResult()
{
    m_Available = false;
    m_AvailableIsSet = false;
}

EmailAvailableResult::~EmailAvailableResult()
{
}

void EmailAvailableResult::validate()
{
    // TODO: implement validation
}

web::json::value EmailAvailableResult::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AvailableIsSet)
    {
        val[utility::conversions::to_string_t(U("available"))] = ModelBase::toJson(m_Available);
    }

    return val;
}

bool EmailAvailableResult::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("available"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("available")));
        if(!fieldValue.is_null())
        {
            bool refVal_setAvailable;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAvailable);
            setAvailable(refVal_setAvailable);
        }
    }
    return ok;
}

void EmailAvailableResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AvailableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("available")), m_Available));
    }
}

bool EmailAvailableResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("available"))))
    {
        bool refVal_setAvailable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("available"))), refVal_setAvailable );
        setAvailable(refVal_setAvailable);
    }
    return ok;
}

bool EmailAvailableResult::isAvailable() const
{
    return m_Available;
}

void EmailAvailableResult::setAvailable(bool value)
{
    m_Available = value;
    m_AvailableIsSet = true;
}

bool EmailAvailableResult::availableIsSet() const
{
    return m_AvailableIsSet;
}

void EmailAvailableResult::unsetAvailable()
{
    m_AvailableIsSet = false;
}
}
}
}
}


