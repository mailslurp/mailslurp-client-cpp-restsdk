/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateConnectorWithOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



CreateConnectorWithOptions::CreateConnectorWithOptions()
{
    m_CreateConnectorOptionsIsSet = false;
    m_CreateConnectorImapConnectionOptionsIsSet = false;
    m_CreateConnectorSmtpConnectionOptionsIsSet = false;
    m_CreateConnectorSyncSettingsOptionsIsSet = false;
}

CreateConnectorWithOptions::~CreateConnectorWithOptions()
{
}

void CreateConnectorWithOptions::validate()
{
    // TODO: implement validation
}

web::json::value CreateConnectorWithOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CreateConnectorOptionsIsSet)
    {
        val[utility::conversions::to_string_t(U("createConnectorOptions"))] = ModelBase::toJson(m_CreateConnectorOptions);
    }
    if(m_CreateConnectorImapConnectionOptionsIsSet)
    {
        val[utility::conversions::to_string_t(U("createConnectorImapConnectionOptions"))] = ModelBase::toJson(m_CreateConnectorImapConnectionOptions);
    }
    if(m_CreateConnectorSmtpConnectionOptionsIsSet)
    {
        val[utility::conversions::to_string_t(U("createConnectorSmtpConnectionOptions"))] = ModelBase::toJson(m_CreateConnectorSmtpConnectionOptions);
    }
    if(m_CreateConnectorSyncSettingsOptionsIsSet)
    {
        val[utility::conversions::to_string_t(U("createConnectorSyncSettingsOptions"))] = ModelBase::toJson(m_CreateConnectorSyncSettingsOptions);
    }

    return val;
}

bool CreateConnectorWithOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("createConnectorOptions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createConnectorOptions")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CreateConnectorOptions> refVal_setCreateConnectorOptions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreateConnectorOptions);
            setCreateConnectorOptions(refVal_setCreateConnectorOptions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createConnectorImapConnectionOptions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createConnectorImapConnectionOptions")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CreateConnectorImapConnectionOptions> refVal_setCreateConnectorImapConnectionOptions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreateConnectorImapConnectionOptions);
            setCreateConnectorImapConnectionOptions(refVal_setCreateConnectorImapConnectionOptions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createConnectorSmtpConnectionOptions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createConnectorSmtpConnectionOptions")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CreateConnectorSmtpConnectionOptions> refVal_setCreateConnectorSmtpConnectionOptions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreateConnectorSmtpConnectionOptions);
            setCreateConnectorSmtpConnectionOptions(refVal_setCreateConnectorSmtpConnectionOptions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createConnectorSyncSettingsOptions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createConnectorSyncSettingsOptions")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CreateConnectorSyncSettingsOptions> refVal_setCreateConnectorSyncSettingsOptions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreateConnectorSyncSettingsOptions);
            setCreateConnectorSyncSettingsOptions(refVal_setCreateConnectorSyncSettingsOptions);
        }
    }
    return ok;
}

void CreateConnectorWithOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CreateConnectorOptionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createConnectorOptions")), m_CreateConnectorOptions));
    }
    if(m_CreateConnectorImapConnectionOptionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createConnectorImapConnectionOptions")), m_CreateConnectorImapConnectionOptions));
    }
    if(m_CreateConnectorSmtpConnectionOptionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createConnectorSmtpConnectionOptions")), m_CreateConnectorSmtpConnectionOptions));
    }
    if(m_CreateConnectorSyncSettingsOptionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createConnectorSyncSettingsOptions")), m_CreateConnectorSyncSettingsOptions));
    }
}

bool CreateConnectorWithOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("createConnectorOptions"))))
    {
        std::shared_ptr<CreateConnectorOptions> refVal_setCreateConnectorOptions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createConnectorOptions"))), refVal_setCreateConnectorOptions );
        setCreateConnectorOptions(refVal_setCreateConnectorOptions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createConnectorImapConnectionOptions"))))
    {
        std::shared_ptr<CreateConnectorImapConnectionOptions> refVal_setCreateConnectorImapConnectionOptions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createConnectorImapConnectionOptions"))), refVal_setCreateConnectorImapConnectionOptions );
        setCreateConnectorImapConnectionOptions(refVal_setCreateConnectorImapConnectionOptions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createConnectorSmtpConnectionOptions"))))
    {
        std::shared_ptr<CreateConnectorSmtpConnectionOptions> refVal_setCreateConnectorSmtpConnectionOptions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createConnectorSmtpConnectionOptions"))), refVal_setCreateConnectorSmtpConnectionOptions );
        setCreateConnectorSmtpConnectionOptions(refVal_setCreateConnectorSmtpConnectionOptions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createConnectorSyncSettingsOptions"))))
    {
        std::shared_ptr<CreateConnectorSyncSettingsOptions> refVal_setCreateConnectorSyncSettingsOptions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createConnectorSyncSettingsOptions"))), refVal_setCreateConnectorSyncSettingsOptions );
        setCreateConnectorSyncSettingsOptions(refVal_setCreateConnectorSyncSettingsOptions);
    }
    return ok;
}

std::shared_ptr<CreateConnectorOptions> CreateConnectorWithOptions::getCreateConnectorOptions() const
{
    return m_CreateConnectorOptions;
}

void CreateConnectorWithOptions::setCreateConnectorOptions(const std::shared_ptr<CreateConnectorOptions>& value)
{
    m_CreateConnectorOptions = value;
    m_CreateConnectorOptionsIsSet = true;
}

bool CreateConnectorWithOptions::createConnectorOptionsIsSet() const
{
    return m_CreateConnectorOptionsIsSet;
}

void CreateConnectorWithOptions::unsetCreateConnectorOptions()
{
    m_CreateConnectorOptionsIsSet = false;
}
std::shared_ptr<CreateConnectorImapConnectionOptions> CreateConnectorWithOptions::getCreateConnectorImapConnectionOptions() const
{
    return m_CreateConnectorImapConnectionOptions;
}

void CreateConnectorWithOptions::setCreateConnectorImapConnectionOptions(const std::shared_ptr<CreateConnectorImapConnectionOptions>& value)
{
    m_CreateConnectorImapConnectionOptions = value;
    m_CreateConnectorImapConnectionOptionsIsSet = true;
}

bool CreateConnectorWithOptions::createConnectorImapConnectionOptionsIsSet() const
{
    return m_CreateConnectorImapConnectionOptionsIsSet;
}

void CreateConnectorWithOptions::unsetCreateConnectorImapConnectionOptions()
{
    m_CreateConnectorImapConnectionOptionsIsSet = false;
}
std::shared_ptr<CreateConnectorSmtpConnectionOptions> CreateConnectorWithOptions::getCreateConnectorSmtpConnectionOptions() const
{
    return m_CreateConnectorSmtpConnectionOptions;
}

void CreateConnectorWithOptions::setCreateConnectorSmtpConnectionOptions(const std::shared_ptr<CreateConnectorSmtpConnectionOptions>& value)
{
    m_CreateConnectorSmtpConnectionOptions = value;
    m_CreateConnectorSmtpConnectionOptionsIsSet = true;
}

bool CreateConnectorWithOptions::createConnectorSmtpConnectionOptionsIsSet() const
{
    return m_CreateConnectorSmtpConnectionOptionsIsSet;
}

void CreateConnectorWithOptions::unsetCreateConnectorSmtpConnectionOptions()
{
    m_CreateConnectorSmtpConnectionOptionsIsSet = false;
}
std::shared_ptr<CreateConnectorSyncSettingsOptions> CreateConnectorWithOptions::getCreateConnectorSyncSettingsOptions() const
{
    return m_CreateConnectorSyncSettingsOptions;
}

void CreateConnectorWithOptions::setCreateConnectorSyncSettingsOptions(const std::shared_ptr<CreateConnectorSyncSettingsOptions>& value)
{
    m_CreateConnectorSyncSettingsOptions = value;
    m_CreateConnectorSyncSettingsOptionsIsSet = true;
}

bool CreateConnectorWithOptions::createConnectorSyncSettingsOptionsIsSet() const
{
    return m_CreateConnectorSyncSettingsOptionsIsSet;
}

void CreateConnectorWithOptions::unsetCreateConnectorSyncSettingsOptions()
{
    m_CreateConnectorSyncSettingsOptionsIsSet = false;
}
}
}
}
}


