/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/EmailFeatureVersionStatistics.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



EmailFeatureVersionStatistics::EmailFeatureVersionStatistics()
{
    m_Version = utility::conversions::to_string_t("");
    m_VersionIsSet = false;
    m_SupportFlagsIsSet = false;
}

EmailFeatureVersionStatistics::~EmailFeatureVersionStatistics()
{
}

void EmailFeatureVersionStatistics::validate()
{
    // TODO: implement validation
}

web::json::value EmailFeatureVersionStatistics::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_VersionIsSet)
    {
        val[utility::conversions::to_string_t(U("version"))] = ModelBase::toJson(m_Version);
    }
    if(m_SupportFlagsIsSet)
    {
        val[utility::conversions::to_string_t(U("supportFlags"))] = ModelBase::toJson(m_SupportFlags);
    }

    return val;
}

bool EmailFeatureVersionStatistics::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("version")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVersion);
            setVersion(refVal_setVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("supportFlags"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("supportFlags")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<EmailFeatureSupportFlags> refVal_setSupportFlags;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSupportFlags);
            setSupportFlags(refVal_setSupportFlags);
        }
    }
    return ok;
}

void EmailFeatureVersionStatistics::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("version")), m_Version));
    }
    if(m_SupportFlagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("supportFlags")), m_SupportFlags));
    }
}

bool EmailFeatureVersionStatistics::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("version"))))
    {
        utility::string_t refVal_setVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("version"))), refVal_setVersion );
        setVersion(refVal_setVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("supportFlags"))))
    {
        std::shared_ptr<EmailFeatureSupportFlags> refVal_setSupportFlags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("supportFlags"))), refVal_setSupportFlags );
        setSupportFlags(refVal_setSupportFlags);
    }
    return ok;
}

utility::string_t EmailFeatureVersionStatistics::getVersion() const
{
    return m_Version;
}

void EmailFeatureVersionStatistics::setVersion(const utility::string_t& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool EmailFeatureVersionStatistics::versionIsSet() const
{
    return m_VersionIsSet;
}

void EmailFeatureVersionStatistics::unsetVersion()
{
    m_VersionIsSet = false;
}
std::shared_ptr<EmailFeatureSupportFlags> EmailFeatureVersionStatistics::getSupportFlags() const
{
    return m_SupportFlags;
}

void EmailFeatureVersionStatistics::setSupportFlags(const std::shared_ptr<EmailFeatureSupportFlags>& value)
{
    m_SupportFlags = value;
    m_SupportFlagsIsSet = true;
}

bool EmailFeatureVersionStatistics::supportFlagsIsSet() const
{
    return m_SupportFlagsIsSet;
}

void EmailFeatureVersionStatistics::unsetSupportFlags()
{
    m_SupportFlagsIsSet = false;
}
}
}
}
}


