/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/DNSLookupOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



DNSLookupOptions::DNSLookupOptions()
{
    m_Hostname = utility::conversions::to_string_t("");
    m_HostnameIsSet = false;
    m_RecordTypesIsSet = false;
    m_OmitFinalDNSDot = false;
    m_OmitFinalDNSDotIsSet = false;
}

DNSLookupOptions::~DNSLookupOptions()
{
}

void DNSLookupOptions::validate()
{
    // TODO: implement validation
}

web::json::value DNSLookupOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_HostnameIsSet)
    {
        val[utility::conversions::to_string_t(U("hostname"))] = ModelBase::toJson(m_Hostname);
    }
    if(m_RecordTypesIsSet)
    {
        val[utility::conversions::to_string_t(U("recordTypes"))] = ModelBase::toJson(m_RecordTypes);
    }
    if(m_OmitFinalDNSDotIsSet)
    {
        val[utility::conversions::to_string_t(U("omitFinalDNSDot"))] = ModelBase::toJson(m_OmitFinalDNSDot);
    }

    return val;
}

bool DNSLookupOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("hostname"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hostname")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHostname;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHostname);
            setHostname(refVal_setHostname);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recordTypes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recordTypes")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setRecordTypes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecordTypes);
            setRecordTypes(refVal_setRecordTypes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("omitFinalDNSDot"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("omitFinalDNSDot")));
        if(!fieldValue.is_null())
        {
            bool refVal_setOmitFinalDNSDot;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOmitFinalDNSDot);
            setOmitFinalDNSDot(refVal_setOmitFinalDNSDot);
        }
    }
    return ok;
}

void DNSLookupOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_HostnameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hostname")), m_Hostname));
    }
    if(m_RecordTypesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recordTypes")), m_RecordTypes));
    }
    if(m_OmitFinalDNSDotIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("omitFinalDNSDot")), m_OmitFinalDNSDot));
    }
}

bool DNSLookupOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("hostname"))))
    {
        utility::string_t refVal_setHostname;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hostname"))), refVal_setHostname );
        setHostname(refVal_setHostname);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recordTypes"))))
    {
        std::vector<utility::string_t> refVal_setRecordTypes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recordTypes"))), refVal_setRecordTypes );
        setRecordTypes(refVal_setRecordTypes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("omitFinalDNSDot"))))
    {
        bool refVal_setOmitFinalDNSDot;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("omitFinalDNSDot"))), refVal_setOmitFinalDNSDot );
        setOmitFinalDNSDot(refVal_setOmitFinalDNSDot);
    }
    return ok;
}

utility::string_t DNSLookupOptions::getHostname() const
{
    return m_Hostname;
}

void DNSLookupOptions::setHostname(const utility::string_t& value)
{
    m_Hostname = value;
    m_HostnameIsSet = true;
}

bool DNSLookupOptions::hostnameIsSet() const
{
    return m_HostnameIsSet;
}

void DNSLookupOptions::unsetHostname()
{
    m_HostnameIsSet = false;
}
std::vector<utility::string_t>& DNSLookupOptions::getRecordTypes()
{
    return m_RecordTypes;
}

void DNSLookupOptions::setRecordTypes(const std::vector<utility::string_t>& value)
{
    m_RecordTypes = value;
    m_RecordTypesIsSet = true;
}

bool DNSLookupOptions::recordTypesIsSet() const
{
    return m_RecordTypesIsSet;
}

void DNSLookupOptions::unsetRecordTypes()
{
    m_RecordTypesIsSet = false;
}
bool DNSLookupOptions::isOmitFinalDNSDot() const
{
    return m_OmitFinalDNSDot;
}

void DNSLookupOptions::setOmitFinalDNSDot(bool value)
{
    m_OmitFinalDNSDot = value;
    m_OmitFinalDNSDotIsSet = true;
}

bool DNSLookupOptions::omitFinalDNSDotIsSet() const
{
    return m_OmitFinalDNSDotIsSet;
}

void DNSLookupOptions::unsetOmitFinalDNSDot()
{
    m_OmitFinalDNSDotIsSet = false;
}
}
}
}
}


