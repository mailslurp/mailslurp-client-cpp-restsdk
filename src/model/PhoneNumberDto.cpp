/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PhoneNumberDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



PhoneNumberDto::PhoneNumberDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_ComplianceAddress = utility::conversions::to_string_t("");
    m_ComplianceAddressIsSet = false;
    m_EmergencyAddress = utility::conversions::to_string_t("");
    m_EmergencyAddressIsSet = false;
    m_PhoneNumber = utility::conversions::to_string_t("");
    m_PhoneNumberIsSet = false;
    m_PhoneCountry = utility::conversions::to_string_t("");
    m_PhoneCountryIsSet = false;
    m_PhonePlan = utility::conversions::to_string_t("");
    m_PhonePlanIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_UpdatedAt = utility::datetime();
    m_UpdatedAtIsSet = false;
}

PhoneNumberDto::~PhoneNumberDto()
{
}

void PhoneNumberDto::validate()
{
    // TODO: implement validation
}

web::json::value PhoneNumberDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t(U("userId"))] = ModelBase::toJson(m_UserId);
    }
    if(m_ComplianceAddressIsSet)
    {
        val[utility::conversions::to_string_t(U("complianceAddress"))] = ModelBase::toJson(m_ComplianceAddress);
    }
    if(m_EmergencyAddressIsSet)
    {
        val[utility::conversions::to_string_t(U("emergencyAddress"))] = ModelBase::toJson(m_EmergencyAddress);
    }
    if(m_PhoneNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("phoneNumber"))] = ModelBase::toJson(m_PhoneNumber);
    }
    if(m_PhoneCountryIsSet)
    {
        val[utility::conversions::to_string_t(U("phoneCountry"))] = ModelBase::toJson(m_PhoneCountry);
    }
    if(m_PhonePlanIsSet)
    {
        val[utility::conversions::to_string_t(U("phonePlan"))] = ModelBase::toJson(m_PhonePlan);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_UpdatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("updatedAt"))] = ModelBase::toJson(m_UpdatedAt);
    }

    return val;
}

bool PhoneNumberDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("userId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("userId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserId);
            setUserId(refVal_setUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("complianceAddress"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("complianceAddress")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setComplianceAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setComplianceAddress);
            setComplianceAddress(refVal_setComplianceAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("emergencyAddress"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("emergencyAddress")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEmergencyAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmergencyAddress);
            setEmergencyAddress(refVal_setEmergencyAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("phoneNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("phoneNumber")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPhoneNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPhoneNumber);
            setPhoneNumber(refVal_setPhoneNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("phoneCountry"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("phoneCountry")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPhoneCountry;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPhoneCountry);
            setPhoneCountry(refVal_setPhoneCountry);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("phonePlan"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("phonePlan")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPhonePlan;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPhonePlan);
            setPhonePlan(refVal_setPhonePlan);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updatedAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updatedAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setUpdatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedAt);
            setUpdatedAt(refVal_setUpdatedAt);
        }
    }
    return ok;
}

void PhoneNumberDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("userId")), m_UserId));
    }
    if(m_ComplianceAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("complianceAddress")), m_ComplianceAddress));
    }
    if(m_EmergencyAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("emergencyAddress")), m_EmergencyAddress));
    }
    if(m_PhoneNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("phoneNumber")), m_PhoneNumber));
    }
    if(m_PhoneCountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("phoneCountry")), m_PhoneCountry));
    }
    if(m_PhonePlanIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("phonePlan")), m_PhonePlan));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updatedAt")), m_UpdatedAt));
    }
}

bool PhoneNumberDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("userId"))))
    {
        utility::string_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("userId"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("complianceAddress"))))
    {
        utility::string_t refVal_setComplianceAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("complianceAddress"))), refVal_setComplianceAddress );
        setComplianceAddress(refVal_setComplianceAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("emergencyAddress"))))
    {
        utility::string_t refVal_setEmergencyAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("emergencyAddress"))), refVal_setEmergencyAddress );
        setEmergencyAddress(refVal_setEmergencyAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("phoneNumber"))))
    {
        utility::string_t refVal_setPhoneNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("phoneNumber"))), refVal_setPhoneNumber );
        setPhoneNumber(refVal_setPhoneNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("phoneCountry"))))
    {
        utility::string_t refVal_setPhoneCountry;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("phoneCountry"))), refVal_setPhoneCountry );
        setPhoneCountry(refVal_setPhoneCountry);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("phonePlan"))))
    {
        utility::string_t refVal_setPhonePlan;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("phonePlan"))), refVal_setPhonePlan );
        setPhonePlan(refVal_setPhonePlan);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updatedAt"))))
    {
        utility::datetime refVal_setUpdatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updatedAt"))), refVal_setUpdatedAt );
        setUpdatedAt(refVal_setUpdatedAt);
    }
    return ok;
}

utility::string_t PhoneNumberDto::getId() const
{
    return m_Id;
}

void PhoneNumberDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool PhoneNumberDto::idIsSet() const
{
    return m_IdIsSet;
}

void PhoneNumberDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t PhoneNumberDto::getUserId() const
{
    return m_UserId;
}

void PhoneNumberDto::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool PhoneNumberDto::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void PhoneNumberDto::unsetUserId()
{
    m_UserIdIsSet = false;
}
utility::string_t PhoneNumberDto::getComplianceAddress() const
{
    return m_ComplianceAddress;
}

void PhoneNumberDto::setComplianceAddress(const utility::string_t& value)
{
    m_ComplianceAddress = value;
    m_ComplianceAddressIsSet = true;
}

bool PhoneNumberDto::complianceAddressIsSet() const
{
    return m_ComplianceAddressIsSet;
}

void PhoneNumberDto::unsetComplianceAddress()
{
    m_ComplianceAddressIsSet = false;
}
utility::string_t PhoneNumberDto::getEmergencyAddress() const
{
    return m_EmergencyAddress;
}

void PhoneNumberDto::setEmergencyAddress(const utility::string_t& value)
{
    m_EmergencyAddress = value;
    m_EmergencyAddressIsSet = true;
}

bool PhoneNumberDto::emergencyAddressIsSet() const
{
    return m_EmergencyAddressIsSet;
}

void PhoneNumberDto::unsetEmergencyAddress()
{
    m_EmergencyAddressIsSet = false;
}
utility::string_t PhoneNumberDto::getPhoneNumber() const
{
    return m_PhoneNumber;
}

void PhoneNumberDto::setPhoneNumber(const utility::string_t& value)
{
    m_PhoneNumber = value;
    m_PhoneNumberIsSet = true;
}

bool PhoneNumberDto::phoneNumberIsSet() const
{
    return m_PhoneNumberIsSet;
}

void PhoneNumberDto::unsetPhoneNumber()
{
    m_PhoneNumberIsSet = false;
}
utility::string_t PhoneNumberDto::getPhoneCountry() const
{
    return m_PhoneCountry;
}

void PhoneNumberDto::setPhoneCountry(const utility::string_t& value)
{
    m_PhoneCountry = value;
    m_PhoneCountryIsSet = true;
}

bool PhoneNumberDto::phoneCountryIsSet() const
{
    return m_PhoneCountryIsSet;
}

void PhoneNumberDto::unsetPhoneCountry()
{
    m_PhoneCountryIsSet = false;
}
utility::string_t PhoneNumberDto::getPhonePlan() const
{
    return m_PhonePlan;
}

void PhoneNumberDto::setPhonePlan(const utility::string_t& value)
{
    m_PhonePlan = value;
    m_PhonePlanIsSet = true;
}

bool PhoneNumberDto::phonePlanIsSet() const
{
    return m_PhonePlanIsSet;
}

void PhoneNumberDto::unsetPhonePlan()
{
    m_PhonePlanIsSet = false;
}
utility::datetime PhoneNumberDto::getCreatedAt() const
{
    return m_CreatedAt;
}

void PhoneNumberDto::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool PhoneNumberDto::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void PhoneNumberDto::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::datetime PhoneNumberDto::getUpdatedAt() const
{
    return m_UpdatedAt;
}

void PhoneNumberDto::setUpdatedAt(const utility::datetime& value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}

bool PhoneNumberDto::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void PhoneNumberDto::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
}
}
}
}


