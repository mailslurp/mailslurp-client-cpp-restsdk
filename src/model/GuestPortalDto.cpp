/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/GuestPortalDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



GuestPortalDto::GuestPortalDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_DomainId = utility::conversions::to_string_t("");
    m_DomainIdIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_LinkHelp = utility::conversions::to_string_t("");
    m_LinkHelpIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_UpdatedAt = utility::datetime();
    m_UpdatedAtIsSet = false;
    m_LoginUrl = utility::conversions::to_string_t("");
    m_LoginUrlIsSet = false;
}

GuestPortalDto::~GuestPortalDto()
{
}

void GuestPortalDto::validate()
{
    // TODO: implement validation
}

web::json::value GuestPortalDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_DomainIdIsSet)
    {
        val[utility::conversions::to_string_t(U("domainId"))] = ModelBase::toJson(m_DomainId);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t(U("userId"))] = ModelBase::toJson(m_UserId);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_LinkHelpIsSet)
    {
        val[utility::conversions::to_string_t(U("linkHelp"))] = ModelBase::toJson(m_LinkHelp);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_UpdatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("updatedAt"))] = ModelBase::toJson(m_UpdatedAt);
    }
    if(m_LoginUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("loginUrl"))] = ModelBase::toJson(m_LoginUrl);
    }

    return val;
}

bool GuestPortalDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("domainId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("domainId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDomainId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDomainId);
            setDomainId(refVal_setDomainId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("userId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("userId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserId);
            setUserId(refVal_setUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("linkHelp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("linkHelp")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLinkHelp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLinkHelp);
            setLinkHelp(refVal_setLinkHelp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updatedAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updatedAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setUpdatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedAt);
            setUpdatedAt(refVal_setUpdatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("loginUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("loginUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLoginUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLoginUrl);
            setLoginUrl(refVal_setLoginUrl);
        }
    }
    return ok;
}

void GuestPortalDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_DomainIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("domainId")), m_DomainId));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("userId")), m_UserId));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_LinkHelpIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("linkHelp")), m_LinkHelp));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updatedAt")), m_UpdatedAt));
    }
    if(m_LoginUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("loginUrl")), m_LoginUrl));
    }
}

bool GuestPortalDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("domainId"))))
    {
        utility::string_t refVal_setDomainId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("domainId"))), refVal_setDomainId );
        setDomainId(refVal_setDomainId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("userId"))))
    {
        utility::string_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("userId"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("linkHelp"))))
    {
        utility::string_t refVal_setLinkHelp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("linkHelp"))), refVal_setLinkHelp );
        setLinkHelp(refVal_setLinkHelp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updatedAt"))))
    {
        utility::datetime refVal_setUpdatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updatedAt"))), refVal_setUpdatedAt );
        setUpdatedAt(refVal_setUpdatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("loginUrl"))))
    {
        utility::string_t refVal_setLoginUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("loginUrl"))), refVal_setLoginUrl );
        setLoginUrl(refVal_setLoginUrl);
    }
    return ok;
}

utility::string_t GuestPortalDto::getId() const
{
    return m_Id;
}

void GuestPortalDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool GuestPortalDto::idIsSet() const
{
    return m_IdIsSet;
}

void GuestPortalDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t GuestPortalDto::getDomainId() const
{
    return m_DomainId;
}

void GuestPortalDto::setDomainId(const utility::string_t& value)
{
    m_DomainId = value;
    m_DomainIdIsSet = true;
}

bool GuestPortalDto::domainIdIsSet() const
{
    return m_DomainIdIsSet;
}

void GuestPortalDto::unsetDomainId()
{
    m_DomainIdIsSet = false;
}
utility::string_t GuestPortalDto::getUserId() const
{
    return m_UserId;
}

void GuestPortalDto::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool GuestPortalDto::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void GuestPortalDto::unsetUserId()
{
    m_UserIdIsSet = false;
}
utility::string_t GuestPortalDto::getName() const
{
    return m_Name;
}

void GuestPortalDto::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool GuestPortalDto::nameIsSet() const
{
    return m_NameIsSet;
}

void GuestPortalDto::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t GuestPortalDto::getDescription() const
{
    return m_Description;
}

void GuestPortalDto::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool GuestPortalDto::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void GuestPortalDto::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t GuestPortalDto::getLinkHelp() const
{
    return m_LinkHelp;
}

void GuestPortalDto::setLinkHelp(const utility::string_t& value)
{
    m_LinkHelp = value;
    m_LinkHelpIsSet = true;
}

bool GuestPortalDto::linkHelpIsSet() const
{
    return m_LinkHelpIsSet;
}

void GuestPortalDto::unsetLinkHelp()
{
    m_LinkHelpIsSet = false;
}
utility::datetime GuestPortalDto::getCreatedAt() const
{
    return m_CreatedAt;
}

void GuestPortalDto::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool GuestPortalDto::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void GuestPortalDto::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::datetime GuestPortalDto::getUpdatedAt() const
{
    return m_UpdatedAt;
}

void GuestPortalDto::setUpdatedAt(const utility::datetime& value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}

bool GuestPortalDto::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void GuestPortalDto::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
utility::string_t GuestPortalDto::getLoginUrl() const
{
    return m_LoginUrl;
}

void GuestPortalDto::setLoginUrl(const utility::string_t& value)
{
    m_LoginUrl = value;
    m_LoginUrlIsSet = true;
}

bool GuestPortalDto::loginUrlIsSet() const
{
    return m_LoginUrlIsSet;
}

void GuestPortalDto::unsetLoginUrl()
{
    m_LoginUrlIsSet = false;
}
}
}
}
}


