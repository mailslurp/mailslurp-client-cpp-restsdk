/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/WebhookEndpointProjection.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



WebhookEndpointProjection::WebhookEndpointProjection()
{
    m_Url = utility::conversions::to_string_t("");
    m_UrlIsSet = false;
    m_Health = utility::conversions::to_string_t("");
    m_HealthIsSet = false;
}

WebhookEndpointProjection::~WebhookEndpointProjection()
{
}

void WebhookEndpointProjection::validate()
{
    // TODO: implement validation
}

web::json::value WebhookEndpointProjection::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_UrlIsSet)
    {
        val[utility::conversions::to_string_t(U("url"))] = ModelBase::toJson(m_Url);
    }
    if(m_HealthIsSet)
    {
        val[utility::conversions::to_string_t(U("health"))] = ModelBase::toJson(m_Health);
    }

    return val;
}

bool WebhookEndpointProjection::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUrl);
            setUrl(refVal_setUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("health"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("health")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHealth;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHealth);
            setHealth(refVal_setHealth);
        }
    }
    return ok;
}

void WebhookEndpointProjection::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("url")), m_Url));
    }
    if(m_HealthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("health")), m_Health));
    }
}

bool WebhookEndpointProjection::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("url"))))
    {
        utility::string_t refVal_setUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("url"))), refVal_setUrl );
        setUrl(refVal_setUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("health"))))
    {
        utility::string_t refVal_setHealth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("health"))), refVal_setHealth );
        setHealth(refVal_setHealth);
    }
    return ok;
}

utility::string_t WebhookEndpointProjection::getUrl() const
{
    return m_Url;
}

void WebhookEndpointProjection::setUrl(const utility::string_t& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}

bool WebhookEndpointProjection::urlIsSet() const
{
    return m_UrlIsSet;
}

void WebhookEndpointProjection::unsetUrl()
{
    m_UrlIsSet = false;
}
utility::string_t WebhookEndpointProjection::getHealth() const
{
    return m_Health;
}

void WebhookEndpointProjection::setHealth(const utility::string_t& value)
{
    m_Health = value;
    m_HealthIsSet = true;
}

bool WebhookEndpointProjection::healthIsSet() const
{
    return m_HealthIsSet;
}

void WebhookEndpointProjection::unsetHealth()
{
    m_HealthIsSet = false;
}
}
}
}
}


