/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SendOptInConsentEmailOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



SendOptInConsentEmailOptions::SendOptInConsentEmailOptions()
{
    m_TemplateHtml = utility::conversions::to_string_t("");
    m_TemplateHtmlIsSet = false;
    m_Subject = utility::conversions::to_string_t("");
    m_SubjectIsSet = false;
    m_SenderInbox = utility::conversions::to_string_t("");
    m_SenderInboxIsSet = false;
}

SendOptInConsentEmailOptions::~SendOptInConsentEmailOptions()
{
}

void SendOptInConsentEmailOptions::validate()
{
    // TODO: implement validation
}

web::json::value SendOptInConsentEmailOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TemplateHtmlIsSet)
    {
        val[utility::conversions::to_string_t(U("templateHtml"))] = ModelBase::toJson(m_TemplateHtml);
    }
    if(m_SubjectIsSet)
    {
        val[utility::conversions::to_string_t(U("subject"))] = ModelBase::toJson(m_Subject);
    }
    if(m_SenderInboxIsSet)
    {
        val[utility::conversions::to_string_t(U("senderInbox"))] = ModelBase::toJson(m_SenderInbox);
    }

    return val;
}

bool SendOptInConsentEmailOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("templateHtml"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("templateHtml")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTemplateHtml;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTemplateHtml);
            setTemplateHtml(refVal_setTemplateHtml);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subject"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subject")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubject;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubject);
            setSubject(refVal_setSubject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("senderInbox"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("senderInbox")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSenderInbox;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSenderInbox);
            setSenderInbox(refVal_setSenderInbox);
        }
    }
    return ok;
}

void SendOptInConsentEmailOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TemplateHtmlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("templateHtml")), m_TemplateHtml));
    }
    if(m_SubjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subject")), m_Subject));
    }
    if(m_SenderInboxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("senderInbox")), m_SenderInbox));
    }
}

bool SendOptInConsentEmailOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("templateHtml"))))
    {
        utility::string_t refVal_setTemplateHtml;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("templateHtml"))), refVal_setTemplateHtml );
        setTemplateHtml(refVal_setTemplateHtml);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subject"))))
    {
        utility::string_t refVal_setSubject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subject"))), refVal_setSubject );
        setSubject(refVal_setSubject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("senderInbox"))))
    {
        utility::string_t refVal_setSenderInbox;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("senderInbox"))), refVal_setSenderInbox );
        setSenderInbox(refVal_setSenderInbox);
    }
    return ok;
}

utility::string_t SendOptInConsentEmailOptions::getTemplateHtml() const
{
    return m_TemplateHtml;
}

void SendOptInConsentEmailOptions::setTemplateHtml(const utility::string_t& value)
{
    m_TemplateHtml = value;
    m_TemplateHtmlIsSet = true;
}

bool SendOptInConsentEmailOptions::templateHtmlIsSet() const
{
    return m_TemplateHtmlIsSet;
}

void SendOptInConsentEmailOptions::unsetTemplateHtml()
{
    m_TemplateHtmlIsSet = false;
}
utility::string_t SendOptInConsentEmailOptions::getSubject() const
{
    return m_Subject;
}

void SendOptInConsentEmailOptions::setSubject(const utility::string_t& value)
{
    m_Subject = value;
    m_SubjectIsSet = true;
}

bool SendOptInConsentEmailOptions::subjectIsSet() const
{
    return m_SubjectIsSet;
}

void SendOptInConsentEmailOptions::unsetSubject()
{
    m_SubjectIsSet = false;
}
utility::string_t SendOptInConsentEmailOptions::getSenderInbox() const
{
    return m_SenderInbox;
}

void SendOptInConsentEmailOptions::setSenderInbox(const utility::string_t& value)
{
    m_SenderInbox = value;
    m_SenderInboxIsSet = true;
}

bool SendOptInConsentEmailOptions::senderInboxIsSet() const
{
    return m_SenderInboxIsSet;
}

void SendOptInConsentEmailOptions::unsetSenderInbox()
{
    m_SenderInboxIsSet = false;
}
}
}
}
}


