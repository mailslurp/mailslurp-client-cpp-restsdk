/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ConsentStatusDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



ConsentStatusDto::ConsentStatusDto()
{
    m_Consented = false;
    m_ConsentedIsSet = false;
}

ConsentStatusDto::~ConsentStatusDto()
{
}

void ConsentStatusDto::validate()
{
    // TODO: implement validation
}

web::json::value ConsentStatusDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ConsentedIsSet)
    {
        val[utility::conversions::to_string_t(U("consented"))] = ModelBase::toJson(m_Consented);
    }

    return val;
}

bool ConsentStatusDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("consented"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("consented")));
        if(!fieldValue.is_null())
        {
            bool refVal_setConsented;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConsented);
            setConsented(refVal_setConsented);
        }
    }
    return ok;
}

void ConsentStatusDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ConsentedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("consented")), m_Consented));
    }
}

bool ConsentStatusDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("consented"))))
    {
        bool refVal_setConsented;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("consented"))), refVal_setConsented );
        setConsented(refVal_setConsented);
    }
    return ok;
}

bool ConsentStatusDto::isConsented() const
{
    return m_Consented;
}

void ConsentStatusDto::setConsented(bool value)
{
    m_Consented = value;
    m_ConsentedIsSet = true;
}

bool ConsentStatusDto::consentedIsSet() const
{
    return m_ConsentedIsSet;
}

void ConsentStatusDto::unsetConsented()
{
    m_ConsentedIsSet = false;
}
}
}
}
}


