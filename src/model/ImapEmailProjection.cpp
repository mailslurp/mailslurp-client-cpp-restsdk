/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ImapEmailProjection.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



ImapEmailProjection::ImapEmailProjection()
{
    m_Uid = 0L;
    m_UidIsSet = false;
    m_SeqNum = 0;
    m_SeqNumIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
}

ImapEmailProjection::~ImapEmailProjection()
{
}

void ImapEmailProjection::validate()
{
    // TODO: implement validation
}

web::json::value ImapEmailProjection::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_UidIsSet)
    {
        val[utility::conversions::to_string_t(U("uid"))] = ModelBase::toJson(m_Uid);
    }
    if(m_SeqNumIsSet)
    {
        val[utility::conversions::to_string_t(U("seqNum"))] = ModelBase::toJson(m_SeqNum);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }

    return val;
}

bool ImapEmailProjection::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("uid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uid")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setUid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUid);
            setUid(refVal_setUid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("seqNum"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("seqNum")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSeqNum;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSeqNum);
            setSeqNum(refVal_setSeqNum);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    return ok;
}

void ImapEmailProjection::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_UidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uid")), m_Uid));
    }
    if(m_SeqNumIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("seqNum")), m_SeqNum));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
}

bool ImapEmailProjection::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("uid"))))
    {
        int64_t refVal_setUid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uid"))), refVal_setUid );
        setUid(refVal_setUid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("seqNum"))))
    {
        int32_t refVal_setSeqNum;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("seqNum"))), refVal_setSeqNum );
        setSeqNum(refVal_setSeqNum);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    return ok;
}

int64_t ImapEmailProjection::getUid() const
{
    return m_Uid;
}

void ImapEmailProjection::setUid(int64_t value)
{
    m_Uid = value;
    m_UidIsSet = true;
}

bool ImapEmailProjection::uidIsSet() const
{
    return m_UidIsSet;
}

void ImapEmailProjection::unsetUid()
{
    m_UidIsSet = false;
}
int32_t ImapEmailProjection::getSeqNum() const
{
    return m_SeqNum;
}

void ImapEmailProjection::setSeqNum(int32_t value)
{
    m_SeqNum = value;
    m_SeqNumIsSet = true;
}

bool ImapEmailProjection::seqNumIsSet() const
{
    return m_SeqNumIsSet;
}

void ImapEmailProjection::unsetSeqNum()
{
    m_SeqNumIsSet = false;
}
utility::string_t ImapEmailProjection::getId() const
{
    return m_Id;
}

void ImapEmailProjection::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool ImapEmailProjection::idIsSet() const
{
    return m_IdIsSet;
}

void ImapEmailProjection::unsetId()
{
    m_IdIsSet = false;
}
}
}
}
}


