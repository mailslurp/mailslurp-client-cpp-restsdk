/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SearchInboxesOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



SearchInboxesOptions::SearchInboxesOptions()
{
    m_PageIndex = 0;
    m_PageIndexIsSet = false;
    m_PageSize = 0;
    m_PageSizeIsSet = false;
    m_SortDirection = utility::conversions::to_string_t("");
    m_SortDirectionIsSet = false;
    m_Favourite = false;
    m_FavouriteIsSet = false;
    m_Search = utility::conversions::to_string_t("");
    m_SearchIsSet = false;
    m_Tag = utility::conversions::to_string_t("");
    m_TagIsSet = false;
    m_Since = utility::datetime();
    m_SinceIsSet = false;
    m_Before = utility::datetime();
    m_BeforeIsSet = false;
    m_InboxType = utility::conversions::to_string_t("");
    m_InboxTypeIsSet = false;
    m_InboxFunction = utility::conversions::to_string_t("");
    m_InboxFunctionIsSet = false;
    m_DomainId = utility::conversions::to_string_t("");
    m_DomainIdIsSet = false;
}

SearchInboxesOptions::~SearchInboxesOptions()
{
}

void SearchInboxesOptions::validate()
{
    // TODO: implement validation
}

web::json::value SearchInboxesOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PageIndexIsSet)
    {
        val[utility::conversions::to_string_t(U("pageIndex"))] = ModelBase::toJson(m_PageIndex);
    }
    if(m_PageSizeIsSet)
    {
        val[utility::conversions::to_string_t(U("pageSize"))] = ModelBase::toJson(m_PageSize);
    }
    if(m_SortDirectionIsSet)
    {
        val[utility::conversions::to_string_t(U("sortDirection"))] = ModelBase::toJson(m_SortDirection);
    }
    if(m_FavouriteIsSet)
    {
        val[utility::conversions::to_string_t(U("favourite"))] = ModelBase::toJson(m_Favourite);
    }
    if(m_SearchIsSet)
    {
        val[utility::conversions::to_string_t(U("search"))] = ModelBase::toJson(m_Search);
    }
    if(m_TagIsSet)
    {
        val[utility::conversions::to_string_t(U("tag"))] = ModelBase::toJson(m_Tag);
    }
    if(m_SinceIsSet)
    {
        val[utility::conversions::to_string_t(U("since"))] = ModelBase::toJson(m_Since);
    }
    if(m_BeforeIsSet)
    {
        val[utility::conversions::to_string_t(U("before"))] = ModelBase::toJson(m_Before);
    }
    if(m_InboxTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("inboxType"))] = ModelBase::toJson(m_InboxType);
    }
    if(m_InboxFunctionIsSet)
    {
        val[utility::conversions::to_string_t(U("inboxFunction"))] = ModelBase::toJson(m_InboxFunction);
    }
    if(m_DomainIdIsSet)
    {
        val[utility::conversions::to_string_t(U("domainId"))] = ModelBase::toJson(m_DomainId);
    }

    return val;
}

bool SearchInboxesOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("pageIndex"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pageIndex")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPageIndex;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPageIndex);
            setPageIndex(refVal_setPageIndex);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pageSize"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pageSize")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPageSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPageSize);
            setPageSize(refVal_setPageSize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sortDirection"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sortDirection")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSortDirection;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSortDirection);
            setSortDirection(refVal_setSortDirection);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("favourite"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("favourite")));
        if(!fieldValue.is_null())
        {
            bool refVal_setFavourite;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFavourite);
            setFavourite(refVal_setFavourite);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("search"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("search")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSearch;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSearch);
            setSearch(refVal_setSearch);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tag"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tag")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTag;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTag);
            setTag(refVal_setTag);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("since"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("since")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setSince;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSince);
            setSince(refVal_setSince);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("before"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("before")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setBefore;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBefore);
            setBefore(refVal_setBefore);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("inboxType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inboxType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInboxType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInboxType);
            setInboxType(refVal_setInboxType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("inboxFunction"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inboxFunction")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInboxFunction;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInboxFunction);
            setInboxFunction(refVal_setInboxFunction);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("domainId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("domainId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDomainId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDomainId);
            setDomainId(refVal_setDomainId);
        }
    }
    return ok;
}

void SearchInboxesOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PageIndexIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pageIndex")), m_PageIndex));
    }
    if(m_PageSizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pageSize")), m_PageSize));
    }
    if(m_SortDirectionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sortDirection")), m_SortDirection));
    }
    if(m_FavouriteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("favourite")), m_Favourite));
    }
    if(m_SearchIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("search")), m_Search));
    }
    if(m_TagIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tag")), m_Tag));
    }
    if(m_SinceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("since")), m_Since));
    }
    if(m_BeforeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("before")), m_Before));
    }
    if(m_InboxTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inboxType")), m_InboxType));
    }
    if(m_InboxFunctionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inboxFunction")), m_InboxFunction));
    }
    if(m_DomainIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("domainId")), m_DomainId));
    }
}

bool SearchInboxesOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("pageIndex"))))
    {
        int32_t refVal_setPageIndex;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pageIndex"))), refVal_setPageIndex );
        setPageIndex(refVal_setPageIndex);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pageSize"))))
    {
        int32_t refVal_setPageSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pageSize"))), refVal_setPageSize );
        setPageSize(refVal_setPageSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sortDirection"))))
    {
        utility::string_t refVal_setSortDirection;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sortDirection"))), refVal_setSortDirection );
        setSortDirection(refVal_setSortDirection);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("favourite"))))
    {
        bool refVal_setFavourite;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("favourite"))), refVal_setFavourite );
        setFavourite(refVal_setFavourite);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("search"))))
    {
        utility::string_t refVal_setSearch;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("search"))), refVal_setSearch );
        setSearch(refVal_setSearch);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tag"))))
    {
        utility::string_t refVal_setTag;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tag"))), refVal_setTag );
        setTag(refVal_setTag);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("since"))))
    {
        utility::datetime refVal_setSince;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("since"))), refVal_setSince );
        setSince(refVal_setSince);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("before"))))
    {
        utility::datetime refVal_setBefore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("before"))), refVal_setBefore );
        setBefore(refVal_setBefore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("inboxType"))))
    {
        utility::string_t refVal_setInboxType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inboxType"))), refVal_setInboxType );
        setInboxType(refVal_setInboxType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("inboxFunction"))))
    {
        utility::string_t refVal_setInboxFunction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inboxFunction"))), refVal_setInboxFunction );
        setInboxFunction(refVal_setInboxFunction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("domainId"))))
    {
        utility::string_t refVal_setDomainId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("domainId"))), refVal_setDomainId );
        setDomainId(refVal_setDomainId);
    }
    return ok;
}

int32_t SearchInboxesOptions::getPageIndex() const
{
    return m_PageIndex;
}

void SearchInboxesOptions::setPageIndex(int32_t value)
{
    m_PageIndex = value;
    m_PageIndexIsSet = true;
}

bool SearchInboxesOptions::pageIndexIsSet() const
{
    return m_PageIndexIsSet;
}

void SearchInboxesOptions::unsetPageIndex()
{
    m_PageIndexIsSet = false;
}
int32_t SearchInboxesOptions::getPageSize() const
{
    return m_PageSize;
}

void SearchInboxesOptions::setPageSize(int32_t value)
{
    m_PageSize = value;
    m_PageSizeIsSet = true;
}

bool SearchInboxesOptions::pageSizeIsSet() const
{
    return m_PageSizeIsSet;
}

void SearchInboxesOptions::unsetPageSize()
{
    m_PageSizeIsSet = false;
}
utility::string_t SearchInboxesOptions::getSortDirection() const
{
    return m_SortDirection;
}

void SearchInboxesOptions::setSortDirection(const utility::string_t& value)
{
    m_SortDirection = value;
    m_SortDirectionIsSet = true;
}

bool SearchInboxesOptions::sortDirectionIsSet() const
{
    return m_SortDirectionIsSet;
}

void SearchInboxesOptions::unsetSortDirection()
{
    m_SortDirectionIsSet = false;
}
bool SearchInboxesOptions::isFavourite() const
{
    return m_Favourite;
}

void SearchInboxesOptions::setFavourite(bool value)
{
    m_Favourite = value;
    m_FavouriteIsSet = true;
}

bool SearchInboxesOptions::favouriteIsSet() const
{
    return m_FavouriteIsSet;
}

void SearchInboxesOptions::unsetFavourite()
{
    m_FavouriteIsSet = false;
}
utility::string_t SearchInboxesOptions::getSearch() const
{
    return m_Search;
}

void SearchInboxesOptions::setSearch(const utility::string_t& value)
{
    m_Search = value;
    m_SearchIsSet = true;
}

bool SearchInboxesOptions::searchIsSet() const
{
    return m_SearchIsSet;
}

void SearchInboxesOptions::unsetSearch()
{
    m_SearchIsSet = false;
}
utility::string_t SearchInboxesOptions::getTag() const
{
    return m_Tag;
}

void SearchInboxesOptions::setTag(const utility::string_t& value)
{
    m_Tag = value;
    m_TagIsSet = true;
}

bool SearchInboxesOptions::tagIsSet() const
{
    return m_TagIsSet;
}

void SearchInboxesOptions::unsetTag()
{
    m_TagIsSet = false;
}
utility::datetime SearchInboxesOptions::getSince() const
{
    return m_Since;
}

void SearchInboxesOptions::setSince(const utility::datetime& value)
{
    m_Since = value;
    m_SinceIsSet = true;
}

bool SearchInboxesOptions::sinceIsSet() const
{
    return m_SinceIsSet;
}

void SearchInboxesOptions::unsetSince()
{
    m_SinceIsSet = false;
}
utility::datetime SearchInboxesOptions::getBefore() const
{
    return m_Before;
}

void SearchInboxesOptions::setBefore(const utility::datetime& value)
{
    m_Before = value;
    m_BeforeIsSet = true;
}

bool SearchInboxesOptions::beforeIsSet() const
{
    return m_BeforeIsSet;
}

void SearchInboxesOptions::unsetBefore()
{
    m_BeforeIsSet = false;
}
utility::string_t SearchInboxesOptions::getInboxType() const
{
    return m_InboxType;
}

void SearchInboxesOptions::setInboxType(const utility::string_t& value)
{
    m_InboxType = value;
    m_InboxTypeIsSet = true;
}

bool SearchInboxesOptions::inboxTypeIsSet() const
{
    return m_InboxTypeIsSet;
}

void SearchInboxesOptions::unsetInboxType()
{
    m_InboxTypeIsSet = false;
}
utility::string_t SearchInboxesOptions::getInboxFunction() const
{
    return m_InboxFunction;
}

void SearchInboxesOptions::setInboxFunction(const utility::string_t& value)
{
    m_InboxFunction = value;
    m_InboxFunctionIsSet = true;
}

bool SearchInboxesOptions::inboxFunctionIsSet() const
{
    return m_InboxFunctionIsSet;
}

void SearchInboxesOptions::unsetInboxFunction()
{
    m_InboxFunctionIsSet = false;
}
utility::string_t SearchInboxesOptions::getDomainId() const
{
    return m_DomainId;
}

void SearchInboxesOptions::setDomainId(const utility::string_t& value)
{
    m_DomainId = value;
    m_DomainIdIsSet = true;
}

bool SearchInboxesOptions::domainIdIsSet() const
{
    return m_DomainIdIsSet;
}

void SearchInboxesOptions::unsetDomainId()
{
    m_DomainIdIsSet = false;
}
}
}
}
}


