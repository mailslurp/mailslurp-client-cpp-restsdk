/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/TestInboxRulesetReceivingOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



TestInboxRulesetReceivingOptions::TestInboxRulesetReceivingOptions()
{
    m_InboxId = utility::conversions::to_string_t("");
    m_InboxIdIsSet = false;
    m_FromSender = utility::conversions::to_string_t("");
    m_FromSenderIsSet = false;
}

TestInboxRulesetReceivingOptions::~TestInboxRulesetReceivingOptions()
{
}

void TestInboxRulesetReceivingOptions::validate()
{
    // TODO: implement validation
}

web::json::value TestInboxRulesetReceivingOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_InboxIdIsSet)
    {
        val[utility::conversions::to_string_t(U("inboxId"))] = ModelBase::toJson(m_InboxId);
    }
    if(m_FromSenderIsSet)
    {
        val[utility::conversions::to_string_t(U("fromSender"))] = ModelBase::toJson(m_FromSender);
    }

    return val;
}

bool TestInboxRulesetReceivingOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("inboxId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inboxId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInboxId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInboxId);
            setInboxId(refVal_setInboxId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fromSender"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fromSender")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFromSender;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFromSender);
            setFromSender(refVal_setFromSender);
        }
    }
    return ok;
}

void TestInboxRulesetReceivingOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_InboxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inboxId")), m_InboxId));
    }
    if(m_FromSenderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fromSender")), m_FromSender));
    }
}

bool TestInboxRulesetReceivingOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("inboxId"))))
    {
        utility::string_t refVal_setInboxId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inboxId"))), refVal_setInboxId );
        setInboxId(refVal_setInboxId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fromSender"))))
    {
        utility::string_t refVal_setFromSender;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fromSender"))), refVal_setFromSender );
        setFromSender(refVal_setFromSender);
    }
    return ok;
}

utility::string_t TestInboxRulesetReceivingOptions::getInboxId() const
{
    return m_InboxId;
}

void TestInboxRulesetReceivingOptions::setInboxId(const utility::string_t& value)
{
    m_InboxId = value;
    m_InboxIdIsSet = true;
}

bool TestInboxRulesetReceivingOptions::inboxIdIsSet() const
{
    return m_InboxIdIsSet;
}

void TestInboxRulesetReceivingOptions::unsetInboxId()
{
    m_InboxIdIsSet = false;
}
utility::string_t TestInboxRulesetReceivingOptions::getFromSender() const
{
    return m_FromSender;
}

void TestInboxRulesetReceivingOptions::setFromSender(const utility::string_t& value)
{
    m_FromSender = value;
    m_FromSenderIsSet = true;
}

bool TestInboxRulesetReceivingOptions::fromSenderIsSet() const
{
    return m_FromSenderIsSet;
}

void TestInboxRulesetReceivingOptions::unsetFromSender()
{
    m_FromSenderIsSet = false;
}
}
}
}
}


