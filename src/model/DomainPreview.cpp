/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/DomainPreview.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



DomainPreview::DomainPreview()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Domain = utility::conversions::to_string_t("");
    m_DomainIsSet = false;
    m_CatchAllInboxId = utility::conversions::to_string_t("");
    m_CatchAllInboxIdIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_DomainType = utility::conversions::to_string_t("");
    m_DomainTypeIsSet = false;
    m_IsVerified = false;
    m_IsVerifiedIsSet = false;
    m_HasMissingRecords = false;
    m_HasMissingRecordsIsSet = false;
}

DomainPreview::~DomainPreview()
{
}

void DomainPreview::validate()
{
    // TODO: implement validation
}

web::json::value DomainPreview::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_DomainIsSet)
    {
        val[utility::conversions::to_string_t(U("domain"))] = ModelBase::toJson(m_Domain);
    }
    if(m_CatchAllInboxIdIsSet)
    {
        val[utility::conversions::to_string_t(U("catchAllInboxId"))] = ModelBase::toJson(m_CatchAllInboxId);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_DomainTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("domainType"))] = ModelBase::toJson(m_DomainType);
    }
    if(m_IsVerifiedIsSet)
    {
        val[utility::conversions::to_string_t(U("isVerified"))] = ModelBase::toJson(m_IsVerified);
    }
    if(m_HasMissingRecordsIsSet)
    {
        val[utility::conversions::to_string_t(U("hasMissingRecords"))] = ModelBase::toJson(m_HasMissingRecords);
    }

    return val;
}

bool DomainPreview::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("domain"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("domain")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDomain;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDomain);
            setDomain(refVal_setDomain);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("catchAllInboxId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("catchAllInboxId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCatchAllInboxId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCatchAllInboxId);
            setCatchAllInboxId(refVal_setCatchAllInboxId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("domainType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("domainType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDomainType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDomainType);
            setDomainType(refVal_setDomainType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isVerified"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isVerified")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsVerified;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsVerified);
            setIsVerified(refVal_setIsVerified);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hasMissingRecords"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hasMissingRecords")));
        if(!fieldValue.is_null())
        {
            bool refVal_setHasMissingRecords;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHasMissingRecords);
            setHasMissingRecords(refVal_setHasMissingRecords);
        }
    }
    return ok;
}

void DomainPreview::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_DomainIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("domain")), m_Domain));
    }
    if(m_CatchAllInboxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("catchAllInboxId")), m_CatchAllInboxId));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
    if(m_DomainTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("domainType")), m_DomainType));
    }
    if(m_IsVerifiedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isVerified")), m_IsVerified));
    }
    if(m_HasMissingRecordsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hasMissingRecords")), m_HasMissingRecords));
    }
}

bool DomainPreview::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("domain"))))
    {
        utility::string_t refVal_setDomain;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("domain"))), refVal_setDomain );
        setDomain(refVal_setDomain);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("catchAllInboxId"))))
    {
        utility::string_t refVal_setCatchAllInboxId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("catchAllInboxId"))), refVal_setCatchAllInboxId );
        setCatchAllInboxId(refVal_setCatchAllInboxId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("domainType"))))
    {
        utility::string_t refVal_setDomainType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("domainType"))), refVal_setDomainType );
        setDomainType(refVal_setDomainType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isVerified"))))
    {
        bool refVal_setIsVerified;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isVerified"))), refVal_setIsVerified );
        setIsVerified(refVal_setIsVerified);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hasMissingRecords"))))
    {
        bool refVal_setHasMissingRecords;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hasMissingRecords"))), refVal_setHasMissingRecords );
        setHasMissingRecords(refVal_setHasMissingRecords);
    }
    return ok;
}

utility::string_t DomainPreview::getId() const
{
    return m_Id;
}

void DomainPreview::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool DomainPreview::idIsSet() const
{
    return m_IdIsSet;
}

void DomainPreview::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t DomainPreview::getDomain() const
{
    return m_Domain;
}

void DomainPreview::setDomain(const utility::string_t& value)
{
    m_Domain = value;
    m_DomainIsSet = true;
}

bool DomainPreview::domainIsSet() const
{
    return m_DomainIsSet;
}

void DomainPreview::unsetDomain()
{
    m_DomainIsSet = false;
}
utility::string_t DomainPreview::getCatchAllInboxId() const
{
    return m_CatchAllInboxId;
}

void DomainPreview::setCatchAllInboxId(const utility::string_t& value)
{
    m_CatchAllInboxId = value;
    m_CatchAllInboxIdIsSet = true;
}

bool DomainPreview::catchAllInboxIdIsSet() const
{
    return m_CatchAllInboxIdIsSet;
}

void DomainPreview::unsetCatchAllInboxId()
{
    m_CatchAllInboxIdIsSet = false;
}
utility::datetime DomainPreview::getCreatedAt() const
{
    return m_CreatedAt;
}

void DomainPreview::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool DomainPreview::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void DomainPreview::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::string_t DomainPreview::getDomainType() const
{
    return m_DomainType;
}

void DomainPreview::setDomainType(const utility::string_t& value)
{
    m_DomainType = value;
    m_DomainTypeIsSet = true;
}

bool DomainPreview::domainTypeIsSet() const
{
    return m_DomainTypeIsSet;
}

void DomainPreview::unsetDomainType()
{
    m_DomainTypeIsSet = false;
}
bool DomainPreview::isIsVerified() const
{
    return m_IsVerified;
}

void DomainPreview::setIsVerified(bool value)
{
    m_IsVerified = value;
    m_IsVerifiedIsSet = true;
}

bool DomainPreview::isVerifiedIsSet() const
{
    return m_IsVerifiedIsSet;
}

void DomainPreview::unsetIsVerified()
{
    m_IsVerifiedIsSet = false;
}
bool DomainPreview::isHasMissingRecords() const
{
    return m_HasMissingRecords;
}

void DomainPreview::setHasMissingRecords(bool value)
{
    m_HasMissingRecords = value;
    m_HasMissingRecordsIsSet = true;
}

bool DomainPreview::hasMissingRecordsIsSet() const
{
    return m_HasMissingRecordsIsSet;
}

void DomainPreview::unsetHasMissingRecords()
{
    m_HasMissingRecordsIsSet = false;
}
}
}
}
}


