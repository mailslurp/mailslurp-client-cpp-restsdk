/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/GenerateBimiRecordOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



GenerateBimiRecordOptions::GenerateBimiRecordOptions()
{
    m_Domain = utility::conversions::to_string_t("");
    m_DomainIsSet = false;
    m_Version = utility::conversions::to_string_t("");
    m_VersionIsSet = false;
    m_LogoUrl = utility::conversions::to_string_t("");
    m_LogoUrlIsSet = false;
    m_VmcUrl = utility::conversions::to_string_t("");
    m_VmcUrlIsSet = false;
}

GenerateBimiRecordOptions::~GenerateBimiRecordOptions()
{
}

void GenerateBimiRecordOptions::validate()
{
    // TODO: implement validation
}

web::json::value GenerateBimiRecordOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DomainIsSet)
    {
        val[utility::conversions::to_string_t(U("domain"))] = ModelBase::toJson(m_Domain);
    }
    if(m_VersionIsSet)
    {
        val[utility::conversions::to_string_t(U("version"))] = ModelBase::toJson(m_Version);
    }
    if(m_LogoUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("logoUrl"))] = ModelBase::toJson(m_LogoUrl);
    }
    if(m_VmcUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("vmcUrl"))] = ModelBase::toJson(m_VmcUrl);
    }

    return val;
}

bool GenerateBimiRecordOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("domain"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("domain")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDomain;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDomain);
            setDomain(refVal_setDomain);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("version")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVersion);
            setVersion(refVal_setVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("logoUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("logoUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLogoUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLogoUrl);
            setLogoUrl(refVal_setLogoUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("vmcUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("vmcUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVmcUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVmcUrl);
            setVmcUrl(refVal_setVmcUrl);
        }
    }
    return ok;
}

void GenerateBimiRecordOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_DomainIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("domain")), m_Domain));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("version")), m_Version));
    }
    if(m_LogoUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("logoUrl")), m_LogoUrl));
    }
    if(m_VmcUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("vmcUrl")), m_VmcUrl));
    }
}

bool GenerateBimiRecordOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("domain"))))
    {
        utility::string_t refVal_setDomain;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("domain"))), refVal_setDomain );
        setDomain(refVal_setDomain);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("version"))))
    {
        utility::string_t refVal_setVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("version"))), refVal_setVersion );
        setVersion(refVal_setVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("logoUrl"))))
    {
        utility::string_t refVal_setLogoUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("logoUrl"))), refVal_setLogoUrl );
        setLogoUrl(refVal_setLogoUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("vmcUrl"))))
    {
        utility::string_t refVal_setVmcUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("vmcUrl"))), refVal_setVmcUrl );
        setVmcUrl(refVal_setVmcUrl);
    }
    return ok;
}

utility::string_t GenerateBimiRecordOptions::getDomain() const
{
    return m_Domain;
}

void GenerateBimiRecordOptions::setDomain(const utility::string_t& value)
{
    m_Domain = value;
    m_DomainIsSet = true;
}

bool GenerateBimiRecordOptions::domainIsSet() const
{
    return m_DomainIsSet;
}

void GenerateBimiRecordOptions::unsetDomain()
{
    m_DomainIsSet = false;
}
utility::string_t GenerateBimiRecordOptions::getVersion() const
{
    return m_Version;
}

void GenerateBimiRecordOptions::setVersion(const utility::string_t& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool GenerateBimiRecordOptions::versionIsSet() const
{
    return m_VersionIsSet;
}

void GenerateBimiRecordOptions::unsetVersion()
{
    m_VersionIsSet = false;
}
utility::string_t GenerateBimiRecordOptions::getLogoUrl() const
{
    return m_LogoUrl;
}

void GenerateBimiRecordOptions::setLogoUrl(const utility::string_t& value)
{
    m_LogoUrl = value;
    m_LogoUrlIsSet = true;
}

bool GenerateBimiRecordOptions::logoUrlIsSet() const
{
    return m_LogoUrlIsSet;
}

void GenerateBimiRecordOptions::unsetLogoUrl()
{
    m_LogoUrlIsSet = false;
}
utility::string_t GenerateBimiRecordOptions::getVmcUrl() const
{
    return m_VmcUrl;
}

void GenerateBimiRecordOptions::setVmcUrl(const utility::string_t& value)
{
    m_VmcUrl = value;
    m_VmcUrlIsSet = true;
}

bool GenerateBimiRecordOptions::vmcUrlIsSet() const
{
    return m_VmcUrlIsSet;
}

void GenerateBimiRecordOptions::unsetVmcUrl()
{
    m_VmcUrlIsSet = false;
}
}
}
}
}


