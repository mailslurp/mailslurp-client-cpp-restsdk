/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ConnectorEventDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



ConnectorEventDto::ConnectorEventDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_ConnectorId = utility::conversions::to_string_t("");
    m_ConnectorIdIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_EventType = utility::conversions::to_string_t("");
    m_EventTypeIsSet = false;
    m_Size = 0L;
    m_SizeIsSet = false;
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
    m_Logs = utility::conversions::to_string_t("");
    m_LogsIsSet = false;
    m_Seen = false;
    m_SeenIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
}

ConnectorEventDto::~ConnectorEventDto()
{
}

void ConnectorEventDto::validate()
{
    // TODO: implement validation
}

web::json::value ConnectorEventDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_ConnectorIdIsSet)
    {
        val[utility::conversions::to_string_t(U("connectorId"))] = ModelBase::toJson(m_ConnectorId);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_EventTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("eventType"))] = ModelBase::toJson(m_EventType);
    }
    if(m_SizeIsSet)
    {
        val[utility::conversions::to_string_t(U("size"))] = ModelBase::toJson(m_Size);
    }
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t(U("message"))] = ModelBase::toJson(m_Message);
    }
    if(m_LogsIsSet)
    {
        val[utility::conversions::to_string_t(U("logs"))] = ModelBase::toJson(m_Logs);
    }
    if(m_SeenIsSet)
    {
        val[utility::conversions::to_string_t(U("seen"))] = ModelBase::toJson(m_Seen);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }

    return val;
}

bool ConnectorEventDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("connectorId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("connectorId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setConnectorId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConnectorId);
            setConnectorId(refVal_setConnectorId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("eventType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("eventType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEventType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEventType);
            setEventType(refVal_setEventType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("size")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSize);
            setSize(refVal_setSize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("message"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("message")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessage);
            setMessage(refVal_setMessage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("logs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("logs")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLogs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLogs);
            setLogs(refVal_setLogs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("seen"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("seen")));
        if(!fieldValue.is_null())
        {
            bool refVal_setSeen;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSeen);
            setSeen(refVal_setSeen);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    return ok;
}

void ConnectorEventDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_ConnectorIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("connectorId")), m_ConnectorId));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_EventTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("eventType")), m_EventType));
    }
    if(m_SizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("size")), m_Size));
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("message")), m_Message));
    }
    if(m_LogsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("logs")), m_Logs));
    }
    if(m_SeenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("seen")), m_Seen));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
}

bool ConnectorEventDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("connectorId"))))
    {
        utility::string_t refVal_setConnectorId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("connectorId"))), refVal_setConnectorId );
        setConnectorId(refVal_setConnectorId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("eventType"))))
    {
        utility::string_t refVal_setEventType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("eventType"))), refVal_setEventType );
        setEventType(refVal_setEventType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("size"))))
    {
        int64_t refVal_setSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("size"))), refVal_setSize );
        setSize(refVal_setSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("message"))))
    {
        utility::string_t refVal_setMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("message"))), refVal_setMessage );
        setMessage(refVal_setMessage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("logs"))))
    {
        utility::string_t refVal_setLogs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("logs"))), refVal_setLogs );
        setLogs(refVal_setLogs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("seen"))))
    {
        bool refVal_setSeen;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("seen"))), refVal_setSeen );
        setSeen(refVal_setSeen);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    return ok;
}

utility::string_t ConnectorEventDto::getId() const
{
    return m_Id;
}

void ConnectorEventDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool ConnectorEventDto::idIsSet() const
{
    return m_IdIsSet;
}

void ConnectorEventDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t ConnectorEventDto::getConnectorId() const
{
    return m_ConnectorId;
}

void ConnectorEventDto::setConnectorId(const utility::string_t& value)
{
    m_ConnectorId = value;
    m_ConnectorIdIsSet = true;
}

bool ConnectorEventDto::connectorIdIsSet() const
{
    return m_ConnectorIdIsSet;
}

void ConnectorEventDto::unsetConnectorId()
{
    m_ConnectorIdIsSet = false;
}
utility::string_t ConnectorEventDto::getStatus() const
{
    return m_Status;
}

void ConnectorEventDto::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool ConnectorEventDto::statusIsSet() const
{
    return m_StatusIsSet;
}

void ConnectorEventDto::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::string_t ConnectorEventDto::getEventType() const
{
    return m_EventType;
}

void ConnectorEventDto::setEventType(const utility::string_t& value)
{
    m_EventType = value;
    m_EventTypeIsSet = true;
}

bool ConnectorEventDto::eventTypeIsSet() const
{
    return m_EventTypeIsSet;
}

void ConnectorEventDto::unsetEventType()
{
    m_EventTypeIsSet = false;
}
int64_t ConnectorEventDto::getSize() const
{
    return m_Size;
}

void ConnectorEventDto::setSize(int64_t value)
{
    m_Size = value;
    m_SizeIsSet = true;
}

bool ConnectorEventDto::sizeIsSet() const
{
    return m_SizeIsSet;
}

void ConnectorEventDto::unsetSize()
{
    m_SizeIsSet = false;
}
utility::string_t ConnectorEventDto::getMessage() const
{
    return m_Message;
}

void ConnectorEventDto::setMessage(const utility::string_t& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}

bool ConnectorEventDto::messageIsSet() const
{
    return m_MessageIsSet;
}

void ConnectorEventDto::unsetMessage()
{
    m_MessageIsSet = false;
}
utility::string_t ConnectorEventDto::getLogs() const
{
    return m_Logs;
}

void ConnectorEventDto::setLogs(const utility::string_t& value)
{
    m_Logs = value;
    m_LogsIsSet = true;
}

bool ConnectorEventDto::logsIsSet() const
{
    return m_LogsIsSet;
}

void ConnectorEventDto::unsetLogs()
{
    m_LogsIsSet = false;
}
bool ConnectorEventDto::isSeen() const
{
    return m_Seen;
}

void ConnectorEventDto::setSeen(bool value)
{
    m_Seen = value;
    m_SeenIsSet = true;
}

bool ConnectorEventDto::seenIsSet() const
{
    return m_SeenIsSet;
}

void ConnectorEventDto::unsetSeen()
{
    m_SeenIsSet = false;
}
utility::datetime ConnectorEventDto::getCreatedAt() const
{
    return m_CreatedAt;
}

void ConnectorEventDto::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool ConnectorEventDto::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void ConnectorEventDto::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
}
}
}
}


