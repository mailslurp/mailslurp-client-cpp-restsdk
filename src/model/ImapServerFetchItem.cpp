/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ImapServerFetchItem.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



ImapServerFetchItem::ImapServerFetchItem()
{
    m_Content = utility::conversions::to_string_t("");
    m_ContentIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Uid = 0;
    m_UidIsSet = false;
    m_SeqNum = 0;
    m_SeqNumIsSet = false;
    m_Read = false;
    m_ReadIsSet = false;
}

ImapServerFetchItem::~ImapServerFetchItem()
{
}

void ImapServerFetchItem::validate()
{
    // TODO: implement validation
}

web::json::value ImapServerFetchItem::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ContentIsSet)
    {
        val[utility::conversions::to_string_t(U("content"))] = ModelBase::toJson(m_Content);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_UidIsSet)
    {
        val[utility::conversions::to_string_t(U("uid"))] = ModelBase::toJson(m_Uid);
    }
    if(m_SeqNumIsSet)
    {
        val[utility::conversions::to_string_t(U("seqNum"))] = ModelBase::toJson(m_SeqNum);
    }
    if(m_ReadIsSet)
    {
        val[utility::conversions::to_string_t(U("read"))] = ModelBase::toJson(m_Read);
    }

    return val;
}

bool ImapServerFetchItem::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("content"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("content")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setContent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContent);
            setContent(refVal_setContent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("uid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("uid")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setUid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUid);
            setUid(refVal_setUid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("seqNum"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("seqNum")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSeqNum;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSeqNum);
            setSeqNum(refVal_setSeqNum);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("read"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("read")));
        if(!fieldValue.is_null())
        {
            bool refVal_setRead;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRead);
            setRead(refVal_setRead);
        }
    }
    return ok;
}

void ImapServerFetchItem::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ContentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("content")), m_Content));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_UidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("uid")), m_Uid));
    }
    if(m_SeqNumIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("seqNum")), m_SeqNum));
    }
    if(m_ReadIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("read")), m_Read));
    }
}

bool ImapServerFetchItem::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("content"))))
    {
        utility::string_t refVal_setContent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("content"))), refVal_setContent );
        setContent(refVal_setContent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("uid"))))
    {
        int32_t refVal_setUid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("uid"))), refVal_setUid );
        setUid(refVal_setUid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("seqNum"))))
    {
        int32_t refVal_setSeqNum;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("seqNum"))), refVal_setSeqNum );
        setSeqNum(refVal_setSeqNum);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("read"))))
    {
        bool refVal_setRead;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("read"))), refVal_setRead );
        setRead(refVal_setRead);
    }
    return ok;
}

utility::string_t ImapServerFetchItem::getContent() const
{
    return m_Content;
}

void ImapServerFetchItem::setContent(const utility::string_t& value)
{
    m_Content = value;
    m_ContentIsSet = true;
}

bool ImapServerFetchItem::contentIsSet() const
{
    return m_ContentIsSet;
}

void ImapServerFetchItem::unsetContent()
{
    m_ContentIsSet = false;
}
utility::string_t ImapServerFetchItem::getId() const
{
    return m_Id;
}

void ImapServerFetchItem::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool ImapServerFetchItem::idIsSet() const
{
    return m_IdIsSet;
}

void ImapServerFetchItem::unsetId()
{
    m_IdIsSet = false;
}
int32_t ImapServerFetchItem::getUid() const
{
    return m_Uid;
}

void ImapServerFetchItem::setUid(int32_t value)
{
    m_Uid = value;
    m_UidIsSet = true;
}

bool ImapServerFetchItem::uidIsSet() const
{
    return m_UidIsSet;
}

void ImapServerFetchItem::unsetUid()
{
    m_UidIsSet = false;
}
int32_t ImapServerFetchItem::getSeqNum() const
{
    return m_SeqNum;
}

void ImapServerFetchItem::setSeqNum(int32_t value)
{
    m_SeqNum = value;
    m_SeqNumIsSet = true;
}

bool ImapServerFetchItem::seqNumIsSet() const
{
    return m_SeqNumIsSet;
}

void ImapServerFetchItem::unsetSeqNum()
{
    m_SeqNumIsSet = false;
}
bool ImapServerFetchItem::isRead() const
{
    return m_Read;
}

void ImapServerFetchItem::setRead(bool value)
{
    m_Read = value;
    m_ReadIsSet = true;
}

bool ImapServerFetchItem::readIsSet() const
{
    return m_ReadIsSet;
}

void ImapServerFetchItem::unsetRead()
{
    m_ReadIsSet = false;
}
}
}
}
}


