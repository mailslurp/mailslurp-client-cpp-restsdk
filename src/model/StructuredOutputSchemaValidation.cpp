/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/StructuredOutputSchemaValidation.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



StructuredOutputSchemaValidation::StructuredOutputSchemaValidation()
{
    m_Valid = false;
    m_ValidIsSet = false;
    m_ErrorsIsSet = false;
    m_ExampleOutput = utility::conversions::to_string_t("");
    m_ExampleOutputIsSet = false;
}

StructuredOutputSchemaValidation::~StructuredOutputSchemaValidation()
{
}

void StructuredOutputSchemaValidation::validate()
{
    // TODO: implement validation
}

web::json::value StructuredOutputSchemaValidation::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ValidIsSet)
    {
        val[utility::conversions::to_string_t(U("valid"))] = ModelBase::toJson(m_Valid);
    }
    if(m_ErrorsIsSet)
    {
        val[utility::conversions::to_string_t(U("errors"))] = ModelBase::toJson(m_Errors);
    }
    if(m_ExampleOutputIsSet)
    {
        val[utility::conversions::to_string_t(U("exampleOutput"))] = ModelBase::toJson(m_ExampleOutput);
    }

    return val;
}

bool StructuredOutputSchemaValidation::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("valid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("valid")));
        if(!fieldValue.is_null())
        {
            bool refVal_setValid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValid);
            setValid(refVal_setValid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("errors"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("errors")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setErrors;
            ok &= ModelBase::fromJson(fieldValue, refVal_setErrors);
            setErrors(refVal_setErrors);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("exampleOutput"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exampleOutput")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExampleOutput;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExampleOutput);
            setExampleOutput(refVal_setExampleOutput);
        }
    }
    return ok;
}

void StructuredOutputSchemaValidation::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ValidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("valid")), m_Valid));
    }
    if(m_ErrorsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("errors")), m_Errors));
    }
    if(m_ExampleOutputIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exampleOutput")), m_ExampleOutput));
    }
}

bool StructuredOutputSchemaValidation::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("valid"))))
    {
        bool refVal_setValid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("valid"))), refVal_setValid );
        setValid(refVal_setValid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("errors"))))
    {
        std::vector<utility::string_t> refVal_setErrors;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("errors"))), refVal_setErrors );
        setErrors(refVal_setErrors);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("exampleOutput"))))
    {
        utility::string_t refVal_setExampleOutput;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exampleOutput"))), refVal_setExampleOutput );
        setExampleOutput(refVal_setExampleOutput);
    }
    return ok;
}

bool StructuredOutputSchemaValidation::isValid() const
{
    return m_Valid;
}

void StructuredOutputSchemaValidation::setValid(bool value)
{
    m_Valid = value;
    m_ValidIsSet = true;
}

bool StructuredOutputSchemaValidation::validIsSet() const
{
    return m_ValidIsSet;
}

void StructuredOutputSchemaValidation::unsetValid()
{
    m_ValidIsSet = false;
}
std::vector<utility::string_t>& StructuredOutputSchemaValidation::getErrors()
{
    return m_Errors;
}

void StructuredOutputSchemaValidation::setErrors(const std::vector<utility::string_t>& value)
{
    m_Errors = value;
    m_ErrorsIsSet = true;
}

bool StructuredOutputSchemaValidation::errorsIsSet() const
{
    return m_ErrorsIsSet;
}

void StructuredOutputSchemaValidation::unsetErrors()
{
    m_ErrorsIsSet = false;
}
utility::string_t StructuredOutputSchemaValidation::getExampleOutput() const
{
    return m_ExampleOutput;
}

void StructuredOutputSchemaValidation::setExampleOutput(const utility::string_t& value)
{
    m_ExampleOutput = value;
    m_ExampleOutputIsSet = true;
}

bool StructuredOutputSchemaValidation::exampleOutputIsSet() const
{
    return m_ExampleOutputIsSet;
}

void StructuredOutputSchemaValidation::unsetExampleOutput()
{
    m_ExampleOutputIsSet = false;
}
}
}
}
}


