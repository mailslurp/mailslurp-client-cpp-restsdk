/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/TrackingPixelDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



TrackingPixelDto::TrackingPixelDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Seen = false;
    m_SeenIsSet = false;
    m_Recipient = utility::conversions::to_string_t("");
    m_RecipientIsSet = false;
    m_Html = utility::conversions::to_string_t("");
    m_HtmlIsSet = false;
    m_Url = utility::conversions::to_string_t("");
    m_UrlIsSet = false;
    m_InboxId = utility::conversions::to_string_t("");
    m_InboxIdIsSet = false;
    m_SentEmailId = utility::conversions::to_string_t("");
    m_SentEmailIdIsSet = false;
    m_SeenAt = utility::datetime();
    m_SeenAtIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
}

TrackingPixelDto::~TrackingPixelDto()
{
}

void TrackingPixelDto::validate()
{
    // TODO: implement validation
}

web::json::value TrackingPixelDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_SeenIsSet)
    {
        val[utility::conversions::to_string_t(U("seen"))] = ModelBase::toJson(m_Seen);
    }
    if(m_RecipientIsSet)
    {
        val[utility::conversions::to_string_t(U("recipient"))] = ModelBase::toJson(m_Recipient);
    }
    if(m_HtmlIsSet)
    {
        val[utility::conversions::to_string_t(U("html"))] = ModelBase::toJson(m_Html);
    }
    if(m_UrlIsSet)
    {
        val[utility::conversions::to_string_t(U("url"))] = ModelBase::toJson(m_Url);
    }
    if(m_InboxIdIsSet)
    {
        val[utility::conversions::to_string_t(U("inboxId"))] = ModelBase::toJson(m_InboxId);
    }
    if(m_SentEmailIdIsSet)
    {
        val[utility::conversions::to_string_t(U("sentEmailId"))] = ModelBase::toJson(m_SentEmailId);
    }
    if(m_SeenAtIsSet)
    {
        val[utility::conversions::to_string_t(U("seenAt"))] = ModelBase::toJson(m_SeenAt);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }

    return val;
}

bool TrackingPixelDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("seen"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("seen")));
        if(!fieldValue.is_null())
        {
            bool refVal_setSeen;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSeen);
            setSeen(refVal_setSeen);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recipient"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recipient")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRecipient;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecipient);
            setRecipient(refVal_setRecipient);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("html"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("html")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHtml;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHtml);
            setHtml(refVal_setHtml);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUrl);
            setUrl(refVal_setUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("inboxId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inboxId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInboxId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInboxId);
            setInboxId(refVal_setInboxId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sentEmailId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sentEmailId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSentEmailId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSentEmailId);
            setSentEmailId(refVal_setSentEmailId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("seenAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("seenAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setSeenAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSeenAt);
            setSeenAt(refVal_setSeenAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    return ok;
}

void TrackingPixelDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_SeenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("seen")), m_Seen));
    }
    if(m_RecipientIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recipient")), m_Recipient));
    }
    if(m_HtmlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("html")), m_Html));
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("url")), m_Url));
    }
    if(m_InboxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inboxId")), m_InboxId));
    }
    if(m_SentEmailIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sentEmailId")), m_SentEmailId));
    }
    if(m_SeenAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("seenAt")), m_SeenAt));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
}

bool TrackingPixelDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("seen"))))
    {
        bool refVal_setSeen;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("seen"))), refVal_setSeen );
        setSeen(refVal_setSeen);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recipient"))))
    {
        utility::string_t refVal_setRecipient;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recipient"))), refVal_setRecipient );
        setRecipient(refVal_setRecipient);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("html"))))
    {
        utility::string_t refVal_setHtml;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("html"))), refVal_setHtml );
        setHtml(refVal_setHtml);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("url"))))
    {
        utility::string_t refVal_setUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("url"))), refVal_setUrl );
        setUrl(refVal_setUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("inboxId"))))
    {
        utility::string_t refVal_setInboxId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inboxId"))), refVal_setInboxId );
        setInboxId(refVal_setInboxId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sentEmailId"))))
    {
        utility::string_t refVal_setSentEmailId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sentEmailId"))), refVal_setSentEmailId );
        setSentEmailId(refVal_setSentEmailId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("seenAt"))))
    {
        utility::datetime refVal_setSeenAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("seenAt"))), refVal_setSeenAt );
        setSeenAt(refVal_setSeenAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    return ok;
}

utility::string_t TrackingPixelDto::getId() const
{
    return m_Id;
}

void TrackingPixelDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool TrackingPixelDto::idIsSet() const
{
    return m_IdIsSet;
}

void TrackingPixelDto::unsetId()
{
    m_IdIsSet = false;
}
bool TrackingPixelDto::isSeen() const
{
    return m_Seen;
}

void TrackingPixelDto::setSeen(bool value)
{
    m_Seen = value;
    m_SeenIsSet = true;
}

bool TrackingPixelDto::seenIsSet() const
{
    return m_SeenIsSet;
}

void TrackingPixelDto::unsetSeen()
{
    m_SeenIsSet = false;
}
utility::string_t TrackingPixelDto::getRecipient() const
{
    return m_Recipient;
}

void TrackingPixelDto::setRecipient(const utility::string_t& value)
{
    m_Recipient = value;
    m_RecipientIsSet = true;
}

bool TrackingPixelDto::recipientIsSet() const
{
    return m_RecipientIsSet;
}

void TrackingPixelDto::unsetRecipient()
{
    m_RecipientIsSet = false;
}
utility::string_t TrackingPixelDto::getHtml() const
{
    return m_Html;
}

void TrackingPixelDto::setHtml(const utility::string_t& value)
{
    m_Html = value;
    m_HtmlIsSet = true;
}

bool TrackingPixelDto::htmlIsSet() const
{
    return m_HtmlIsSet;
}

void TrackingPixelDto::unsetHtml()
{
    m_HtmlIsSet = false;
}
utility::string_t TrackingPixelDto::getUrl() const
{
    return m_Url;
}

void TrackingPixelDto::setUrl(const utility::string_t& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}

bool TrackingPixelDto::urlIsSet() const
{
    return m_UrlIsSet;
}

void TrackingPixelDto::unsetUrl()
{
    m_UrlIsSet = false;
}
utility::string_t TrackingPixelDto::getInboxId() const
{
    return m_InboxId;
}

void TrackingPixelDto::setInboxId(const utility::string_t& value)
{
    m_InboxId = value;
    m_InboxIdIsSet = true;
}

bool TrackingPixelDto::inboxIdIsSet() const
{
    return m_InboxIdIsSet;
}

void TrackingPixelDto::unsetInboxId()
{
    m_InboxIdIsSet = false;
}
utility::string_t TrackingPixelDto::getSentEmailId() const
{
    return m_SentEmailId;
}

void TrackingPixelDto::setSentEmailId(const utility::string_t& value)
{
    m_SentEmailId = value;
    m_SentEmailIdIsSet = true;
}

bool TrackingPixelDto::sentEmailIdIsSet() const
{
    return m_SentEmailIdIsSet;
}

void TrackingPixelDto::unsetSentEmailId()
{
    m_SentEmailIdIsSet = false;
}
utility::datetime TrackingPixelDto::getSeenAt() const
{
    return m_SeenAt;
}

void TrackingPixelDto::setSeenAt(const utility::datetime& value)
{
    m_SeenAt = value;
    m_SeenAtIsSet = true;
}

bool TrackingPixelDto::seenAtIsSet() const
{
    return m_SeenAtIsSet;
}

void TrackingPixelDto::unsetSeenAt()
{
    m_SeenAtIsSet = false;
}
utility::datetime TrackingPixelDto::getCreatedAt() const
{
    return m_CreatedAt;
}

void TrackingPixelDto::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool TrackingPixelDto::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void TrackingPixelDto::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
}
}
}
}


