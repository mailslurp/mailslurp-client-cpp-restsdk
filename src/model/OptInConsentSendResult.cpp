/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/OptInConsentSendResult.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



OptInConsentSendResult::OptInConsentSendResult()
{
    m_Sent = false;
    m_SentIsSet = false;
}

OptInConsentSendResult::~OptInConsentSendResult()
{
}

void OptInConsentSendResult::validate()
{
    // TODO: implement validation
}

web::json::value OptInConsentSendResult::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SentIsSet)
    {
        val[utility::conversions::to_string_t(U("sent"))] = ModelBase::toJson(m_Sent);
    }

    return val;
}

bool OptInConsentSendResult::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("sent"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sent")));
        if(!fieldValue.is_null())
        {
            bool refVal_setSent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSent);
            setSent(refVal_setSent);
        }
    }
    return ok;
}

void OptInConsentSendResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sent")), m_Sent));
    }
}

bool OptInConsentSendResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("sent"))))
    {
        bool refVal_setSent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sent"))), refVal_setSent );
        setSent(refVal_setSent);
    }
    return ok;
}

bool OptInConsentSendResult::isSent() const
{
    return m_Sent;
}

void OptInConsentSendResult::setSent(bool value)
{
    m_Sent = value;
    m_SentIsSet = true;
}

bool OptInConsentSendResult::sentIsSet() const
{
    return m_SentIsSet;
}

void OptInConsentSendResult::unsetSent()
{
    m_SentIsSet = false;
}
}
}
}
}


