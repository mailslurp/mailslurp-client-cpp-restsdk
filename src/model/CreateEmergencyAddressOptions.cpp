/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateEmergencyAddressOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



CreateEmergencyAddressOptions::CreateEmergencyAddressOptions()
{
    m_CustomerName = utility::conversions::to_string_t("");
    m_CustomerNameIsSet = false;
    m_Address1 = utility::conversions::to_string_t("");
    m_Address1IsSet = false;
    m_City = utility::conversions::to_string_t("");
    m_CityIsSet = false;
    m_Region = utility::conversions::to_string_t("");
    m_RegionIsSet = false;
    m_PostalCode = utility::conversions::to_string_t("");
    m_PostalCodeIsSet = false;
    m_IsoCountryCode = utility::conversions::to_string_t("");
    m_IsoCountryCodeIsSet = false;
    m_DisplayName = utility::conversions::to_string_t("");
    m_DisplayNameIsSet = false;
}

CreateEmergencyAddressOptions::~CreateEmergencyAddressOptions()
{
}

void CreateEmergencyAddressOptions::validate()
{
    // TODO: implement validation
}

web::json::value CreateEmergencyAddressOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CustomerNameIsSet)
    {
        val[utility::conversions::to_string_t(U("customerName"))] = ModelBase::toJson(m_CustomerName);
    }
    if(m_Address1IsSet)
    {
        val[utility::conversions::to_string_t(U("address1"))] = ModelBase::toJson(m_Address1);
    }
    if(m_CityIsSet)
    {
        val[utility::conversions::to_string_t(U("city"))] = ModelBase::toJson(m_City);
    }
    if(m_RegionIsSet)
    {
        val[utility::conversions::to_string_t(U("region"))] = ModelBase::toJson(m_Region);
    }
    if(m_PostalCodeIsSet)
    {
        val[utility::conversions::to_string_t(U("postalCode"))] = ModelBase::toJson(m_PostalCode);
    }
    if(m_IsoCountryCodeIsSet)
    {
        val[utility::conversions::to_string_t(U("isoCountryCode"))] = ModelBase::toJson(m_IsoCountryCode);
    }
    if(m_DisplayNameIsSet)
    {
        val[utility::conversions::to_string_t(U("displayName"))] = ModelBase::toJson(m_DisplayName);
    }

    return val;
}

bool CreateEmergencyAddressOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("customerName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customerName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCustomerName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomerName);
            setCustomerName(refVal_setCustomerName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("address1"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("address1")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAddress1;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAddress1);
            setAddress1(refVal_setAddress1);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("city"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("city")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCity);
            setCity(refVal_setCity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("region"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("region")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRegion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRegion);
            setRegion(refVal_setRegion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("postalCode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("postalCode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPostalCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPostalCode);
            setPostalCode(refVal_setPostalCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isoCountryCode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isoCountryCode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIsoCountryCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsoCountryCode);
            setIsoCountryCode(refVal_setIsoCountryCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("displayName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("displayName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDisplayName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDisplayName);
            setDisplayName(refVal_setDisplayName);
        }
    }
    return ok;
}

void CreateEmergencyAddressOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CustomerNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customerName")), m_CustomerName));
    }
    if(m_Address1IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("address1")), m_Address1));
    }
    if(m_CityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("city")), m_City));
    }
    if(m_RegionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("region")), m_Region));
    }
    if(m_PostalCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("postalCode")), m_PostalCode));
    }
    if(m_IsoCountryCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isoCountryCode")), m_IsoCountryCode));
    }
    if(m_DisplayNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("displayName")), m_DisplayName));
    }
}

bool CreateEmergencyAddressOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("customerName"))))
    {
        utility::string_t refVal_setCustomerName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customerName"))), refVal_setCustomerName );
        setCustomerName(refVal_setCustomerName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("address1"))))
    {
        utility::string_t refVal_setAddress1;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("address1"))), refVal_setAddress1 );
        setAddress1(refVal_setAddress1);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("city"))))
    {
        utility::string_t refVal_setCity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("city"))), refVal_setCity );
        setCity(refVal_setCity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("region"))))
    {
        utility::string_t refVal_setRegion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("region"))), refVal_setRegion );
        setRegion(refVal_setRegion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("postalCode"))))
    {
        utility::string_t refVal_setPostalCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("postalCode"))), refVal_setPostalCode );
        setPostalCode(refVal_setPostalCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isoCountryCode"))))
    {
        utility::string_t refVal_setIsoCountryCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isoCountryCode"))), refVal_setIsoCountryCode );
        setIsoCountryCode(refVal_setIsoCountryCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("displayName"))))
    {
        utility::string_t refVal_setDisplayName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("displayName"))), refVal_setDisplayName );
        setDisplayName(refVal_setDisplayName);
    }
    return ok;
}

utility::string_t CreateEmergencyAddressOptions::getCustomerName() const
{
    return m_CustomerName;
}

void CreateEmergencyAddressOptions::setCustomerName(const utility::string_t& value)
{
    m_CustomerName = value;
    m_CustomerNameIsSet = true;
}

bool CreateEmergencyAddressOptions::customerNameIsSet() const
{
    return m_CustomerNameIsSet;
}

void CreateEmergencyAddressOptions::unsetCustomerName()
{
    m_CustomerNameIsSet = false;
}
utility::string_t CreateEmergencyAddressOptions::getAddress1() const
{
    return m_Address1;
}

void CreateEmergencyAddressOptions::setAddress1(const utility::string_t& value)
{
    m_Address1 = value;
    m_Address1IsSet = true;
}

bool CreateEmergencyAddressOptions::address1IsSet() const
{
    return m_Address1IsSet;
}

void CreateEmergencyAddressOptions::unsetAddress1()
{
    m_Address1IsSet = false;
}
utility::string_t CreateEmergencyAddressOptions::getCity() const
{
    return m_City;
}

void CreateEmergencyAddressOptions::setCity(const utility::string_t& value)
{
    m_City = value;
    m_CityIsSet = true;
}

bool CreateEmergencyAddressOptions::cityIsSet() const
{
    return m_CityIsSet;
}

void CreateEmergencyAddressOptions::unsetCity()
{
    m_CityIsSet = false;
}
utility::string_t CreateEmergencyAddressOptions::getRegion() const
{
    return m_Region;
}

void CreateEmergencyAddressOptions::setRegion(const utility::string_t& value)
{
    m_Region = value;
    m_RegionIsSet = true;
}

bool CreateEmergencyAddressOptions::regionIsSet() const
{
    return m_RegionIsSet;
}

void CreateEmergencyAddressOptions::unsetRegion()
{
    m_RegionIsSet = false;
}
utility::string_t CreateEmergencyAddressOptions::getPostalCode() const
{
    return m_PostalCode;
}

void CreateEmergencyAddressOptions::setPostalCode(const utility::string_t& value)
{
    m_PostalCode = value;
    m_PostalCodeIsSet = true;
}

bool CreateEmergencyAddressOptions::postalCodeIsSet() const
{
    return m_PostalCodeIsSet;
}

void CreateEmergencyAddressOptions::unsetPostalCode()
{
    m_PostalCodeIsSet = false;
}
utility::string_t CreateEmergencyAddressOptions::getIsoCountryCode() const
{
    return m_IsoCountryCode;
}

void CreateEmergencyAddressOptions::setIsoCountryCode(const utility::string_t& value)
{
    m_IsoCountryCode = value;
    m_IsoCountryCodeIsSet = true;
}

bool CreateEmergencyAddressOptions::isoCountryCodeIsSet() const
{
    return m_IsoCountryCodeIsSet;
}

void CreateEmergencyAddressOptions::unsetIsoCountryCode()
{
    m_IsoCountryCodeIsSet = false;
}
utility::string_t CreateEmergencyAddressOptions::getDisplayName() const
{
    return m_DisplayName;
}

void CreateEmergencyAddressOptions::setDisplayName(const utility::string_t& value)
{
    m_DisplayName = value;
    m_DisplayNameIsSet = true;
}

bool CreateEmergencyAddressOptions::displayNameIsSet() const
{
    return m_DisplayNameIsSet;
}

void CreateEmergencyAddressOptions::unsetDisplayName()
{
    m_DisplayNameIsSet = false;
}
}
}
}
}


