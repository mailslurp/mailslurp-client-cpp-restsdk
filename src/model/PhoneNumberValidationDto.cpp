/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PhoneNumberValidationDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



PhoneNumberValidationDto::PhoneNumberValidationDto()
{
    m_CountryCode = utility::conversions::to_string_t("");
    m_CountryCodeIsSet = false;
    m_CountryPrefix = utility::conversions::to_string_t("");
    m_CountryPrefixIsSet = false;
    m_PhoneNumber = utility::conversions::to_string_t("");
    m_PhoneNumberIsSet = false;
    m_IsValid = false;
    m_IsValidIsSet = false;
    m_ValidationErrorsIsSet = false;
}

PhoneNumberValidationDto::~PhoneNumberValidationDto()
{
}

void PhoneNumberValidationDto::validate()
{
    // TODO: implement validation
}

web::json::value PhoneNumberValidationDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CountryCodeIsSet)
    {
        val[utility::conversions::to_string_t(U("countryCode"))] = ModelBase::toJson(m_CountryCode);
    }
    if(m_CountryPrefixIsSet)
    {
        val[utility::conversions::to_string_t(U("countryPrefix"))] = ModelBase::toJson(m_CountryPrefix);
    }
    if(m_PhoneNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("phoneNumber"))] = ModelBase::toJson(m_PhoneNumber);
    }
    if(m_IsValidIsSet)
    {
        val[utility::conversions::to_string_t(U("isValid"))] = ModelBase::toJson(m_IsValid);
    }
    if(m_ValidationErrorsIsSet)
    {
        val[utility::conversions::to_string_t(U("validationErrors"))] = ModelBase::toJson(m_ValidationErrors);
    }

    return val;
}

bool PhoneNumberValidationDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("countryCode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("countryCode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCountryCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCountryCode);
            setCountryCode(refVal_setCountryCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("countryPrefix"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("countryPrefix")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCountryPrefix;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCountryPrefix);
            setCountryPrefix(refVal_setCountryPrefix);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("phoneNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("phoneNumber")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPhoneNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPhoneNumber);
            setPhoneNumber(refVal_setPhoneNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isValid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isValid")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsValid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsValid);
            setIsValid(refVal_setIsValid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("validationErrors"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("validationErrors")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setValidationErrors;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValidationErrors);
            setValidationErrors(refVal_setValidationErrors);
        }
    }
    return ok;
}

void PhoneNumberValidationDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CountryCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("countryCode")), m_CountryCode));
    }
    if(m_CountryPrefixIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("countryPrefix")), m_CountryPrefix));
    }
    if(m_PhoneNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("phoneNumber")), m_PhoneNumber));
    }
    if(m_IsValidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isValid")), m_IsValid));
    }
    if(m_ValidationErrorsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("validationErrors")), m_ValidationErrors));
    }
}

bool PhoneNumberValidationDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("countryCode"))))
    {
        utility::string_t refVal_setCountryCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("countryCode"))), refVal_setCountryCode );
        setCountryCode(refVal_setCountryCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("countryPrefix"))))
    {
        utility::string_t refVal_setCountryPrefix;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("countryPrefix"))), refVal_setCountryPrefix );
        setCountryPrefix(refVal_setCountryPrefix);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("phoneNumber"))))
    {
        utility::string_t refVal_setPhoneNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("phoneNumber"))), refVal_setPhoneNumber );
        setPhoneNumber(refVal_setPhoneNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isValid"))))
    {
        bool refVal_setIsValid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isValid"))), refVal_setIsValid );
        setIsValid(refVal_setIsValid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("validationErrors"))))
    {
        std::vector<utility::string_t> refVal_setValidationErrors;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("validationErrors"))), refVal_setValidationErrors );
        setValidationErrors(refVal_setValidationErrors);
    }
    return ok;
}

utility::string_t PhoneNumberValidationDto::getCountryCode() const
{
    return m_CountryCode;
}

void PhoneNumberValidationDto::setCountryCode(const utility::string_t& value)
{
    m_CountryCode = value;
    m_CountryCodeIsSet = true;
}

bool PhoneNumberValidationDto::countryCodeIsSet() const
{
    return m_CountryCodeIsSet;
}

void PhoneNumberValidationDto::unsetCountryCode()
{
    m_CountryCodeIsSet = false;
}
utility::string_t PhoneNumberValidationDto::getCountryPrefix() const
{
    return m_CountryPrefix;
}

void PhoneNumberValidationDto::setCountryPrefix(const utility::string_t& value)
{
    m_CountryPrefix = value;
    m_CountryPrefixIsSet = true;
}

bool PhoneNumberValidationDto::countryPrefixIsSet() const
{
    return m_CountryPrefixIsSet;
}

void PhoneNumberValidationDto::unsetCountryPrefix()
{
    m_CountryPrefixIsSet = false;
}
utility::string_t PhoneNumberValidationDto::getPhoneNumber() const
{
    return m_PhoneNumber;
}

void PhoneNumberValidationDto::setPhoneNumber(const utility::string_t& value)
{
    m_PhoneNumber = value;
    m_PhoneNumberIsSet = true;
}

bool PhoneNumberValidationDto::phoneNumberIsSet() const
{
    return m_PhoneNumberIsSet;
}

void PhoneNumberValidationDto::unsetPhoneNumber()
{
    m_PhoneNumberIsSet = false;
}
bool PhoneNumberValidationDto::isIsValid() const
{
    return m_IsValid;
}

void PhoneNumberValidationDto::setIsValid(bool value)
{
    m_IsValid = value;
    m_IsValidIsSet = true;
}

bool PhoneNumberValidationDto::isValidIsSet() const
{
    return m_IsValidIsSet;
}

void PhoneNumberValidationDto::unsetIsValid()
{
    m_IsValidIsSet = false;
}
std::vector<utility::string_t>& PhoneNumberValidationDto::getValidationErrors()
{
    return m_ValidationErrors;
}

void PhoneNumberValidationDto::setValidationErrors(const std::vector<utility::string_t>& value)
{
    m_ValidationErrors = value;
    m_ValidationErrorsIsSet = true;
}

bool PhoneNumberValidationDto::validationErrorsIsSet() const
{
    return m_ValidationErrorsIsSet;
}

void PhoneNumberValidationDto::unsetValidationErrors()
{
    m_ValidationErrorsIsSet = false;
}
}
}
}
}


