/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ImapServerStatusOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



ImapServerStatusOptions::ImapServerStatusOptions()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_StatusItemsIsSet = false;
}

ImapServerStatusOptions::~ImapServerStatusOptions()
{
}

void ImapServerStatusOptions::validate()
{
    // TODO: implement validation
}

web::json::value ImapServerStatusOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_StatusItemsIsSet)
    {
        val[utility::conversions::to_string_t(U("statusItems"))] = ModelBase::toJson(m_StatusItems);
    }

    return val;
}

bool ImapServerStatusOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("statusItems"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("statusItems")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setStatusItems;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatusItems);
            setStatusItems(refVal_setStatusItems);
        }
    }
    return ok;
}

void ImapServerStatusOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_StatusItemsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("statusItems")), m_StatusItems));
    }
}

bool ImapServerStatusOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("statusItems"))))
    {
        std::vector<utility::string_t> refVal_setStatusItems;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("statusItems"))), refVal_setStatusItems );
        setStatusItems(refVal_setStatusItems);
    }
    return ok;
}

utility::string_t ImapServerStatusOptions::getName() const
{
    return m_Name;
}

void ImapServerStatusOptions::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool ImapServerStatusOptions::nameIsSet() const
{
    return m_NameIsSet;
}

void ImapServerStatusOptions::unsetName()
{
    m_NameIsSet = false;
}
std::vector<utility::string_t>& ImapServerStatusOptions::getStatusItems()
{
    return m_StatusItems;
}

void ImapServerStatusOptions::setStatusItems(const std::vector<utility::string_t>& value)
{
    m_StatusItems = value;
    m_StatusItemsIsSet = true;
}

bool ImapServerStatusOptions::statusItemsIsSet() const
{
    return m_StatusItemsIsSet;
}

void ImapServerStatusOptions::unsetStatusItems()
{
    m_StatusItemsIsSet = false;
}
}
}
}
}


