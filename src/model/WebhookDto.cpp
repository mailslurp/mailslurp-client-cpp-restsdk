/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/WebhookDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



WebhookDto::WebhookDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_BasicAuth = false;
    m_BasicAuthIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_PhoneId = utility::conversions::to_string_t("");
    m_PhoneIdIsSet = false;
    m_InboxId = utility::conversions::to_string_t("");
    m_InboxIdIsSet = false;
    m_RequestBodyTemplate = utility::conversions::to_string_t("");
    m_RequestBodyTemplateIsSet = false;
    m_Url = utility::conversions::to_string_t("");
    m_UrlIsSet = false;
    m_Method = utility::conversions::to_string_t("");
    m_MethodIsSet = false;
    m_PayloadJsonSchema = utility::conversions::to_string_t("");
    m_PayloadJsonSchemaIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_UpdatedAt = utility::datetime();
    m_UpdatedAtIsSet = false;
    m_EventName = utility::conversions::to_string_t("");
    m_EventNameIsSet = false;
    m_RequestHeadersIsSet = false;
    m_IgnoreInsecureSslCertificates = false;
    m_IgnoreInsecureSslCertificatesIsSet = false;
}

WebhookDto::~WebhookDto()
{
}

void WebhookDto::validate()
{
    // TODO: implement validation
}

web::json::value WebhookDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t(U("userId"))] = ModelBase::toJson(m_UserId);
    }
    if(m_BasicAuthIsSet)
    {
        val[utility::conversions::to_string_t(U("basicAuth"))] = ModelBase::toJson(m_BasicAuth);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_PhoneIdIsSet)
    {
        val[utility::conversions::to_string_t(U("phoneId"))] = ModelBase::toJson(m_PhoneId);
    }
    if(m_InboxIdIsSet)
    {
        val[utility::conversions::to_string_t(U("inboxId"))] = ModelBase::toJson(m_InboxId);
    }
    if(m_RequestBodyTemplateIsSet)
    {
        val[utility::conversions::to_string_t(U("requestBodyTemplate"))] = ModelBase::toJson(m_RequestBodyTemplate);
    }
    if(m_UrlIsSet)
    {
        val[utility::conversions::to_string_t(U("url"))] = ModelBase::toJson(m_Url);
    }
    if(m_MethodIsSet)
    {
        val[utility::conversions::to_string_t(U("method"))] = ModelBase::toJson(m_Method);
    }
    if(m_PayloadJsonSchemaIsSet)
    {
        val[utility::conversions::to_string_t(U("payloadJsonSchema"))] = ModelBase::toJson(m_PayloadJsonSchema);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_UpdatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("updatedAt"))] = ModelBase::toJson(m_UpdatedAt);
    }
    if(m_EventNameIsSet)
    {
        val[utility::conversions::to_string_t(U("eventName"))] = ModelBase::toJson(m_EventName);
    }
    if(m_RequestHeadersIsSet)
    {
        val[utility::conversions::to_string_t(U("requestHeaders"))] = ModelBase::toJson(m_RequestHeaders);
    }
    if(m_IgnoreInsecureSslCertificatesIsSet)
    {
        val[utility::conversions::to_string_t(U("ignoreInsecureSslCertificates"))] = ModelBase::toJson(m_IgnoreInsecureSslCertificates);
    }

    return val;
}

bool WebhookDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("userId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("userId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserId);
            setUserId(refVal_setUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("basicAuth"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("basicAuth")));
        if(!fieldValue.is_null())
        {
            bool refVal_setBasicAuth;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBasicAuth);
            setBasicAuth(refVal_setBasicAuth);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("phoneId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("phoneId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPhoneId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPhoneId);
            setPhoneId(refVal_setPhoneId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("inboxId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inboxId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInboxId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInboxId);
            setInboxId(refVal_setInboxId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("requestBodyTemplate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("requestBodyTemplate")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRequestBodyTemplate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRequestBodyTemplate);
            setRequestBodyTemplate(refVal_setRequestBodyTemplate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("url"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("url")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUrl);
            setUrl(refVal_setUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("method"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("method")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMethod;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMethod);
            setMethod(refVal_setMethod);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("payloadJsonSchema"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("payloadJsonSchema")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPayloadJsonSchema;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPayloadJsonSchema);
            setPayloadJsonSchema(refVal_setPayloadJsonSchema);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updatedAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updatedAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setUpdatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedAt);
            setUpdatedAt(refVal_setUpdatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("eventName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("eventName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEventName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEventName);
            setEventName(refVal_setEventName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("requestHeaders"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("requestHeaders")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<WebhookHeaders> refVal_setRequestHeaders;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRequestHeaders);
            setRequestHeaders(refVal_setRequestHeaders);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ignoreInsecureSslCertificates"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ignoreInsecureSslCertificates")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIgnoreInsecureSslCertificates;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIgnoreInsecureSslCertificates);
            setIgnoreInsecureSslCertificates(refVal_setIgnoreInsecureSslCertificates);
        }
    }
    return ok;
}

void WebhookDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("userId")), m_UserId));
    }
    if(m_BasicAuthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("basicAuth")), m_BasicAuth));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_PhoneIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("phoneId")), m_PhoneId));
    }
    if(m_InboxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inboxId")), m_InboxId));
    }
    if(m_RequestBodyTemplateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("requestBodyTemplate")), m_RequestBodyTemplate));
    }
    if(m_UrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("url")), m_Url));
    }
    if(m_MethodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("method")), m_Method));
    }
    if(m_PayloadJsonSchemaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("payloadJsonSchema")), m_PayloadJsonSchema));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updatedAt")), m_UpdatedAt));
    }
    if(m_EventNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("eventName")), m_EventName));
    }
    if(m_RequestHeadersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("requestHeaders")), m_RequestHeaders));
    }
    if(m_IgnoreInsecureSslCertificatesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ignoreInsecureSslCertificates")), m_IgnoreInsecureSslCertificates));
    }
}

bool WebhookDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("userId"))))
    {
        utility::string_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("userId"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("basicAuth"))))
    {
        bool refVal_setBasicAuth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("basicAuth"))), refVal_setBasicAuth );
        setBasicAuth(refVal_setBasicAuth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("phoneId"))))
    {
        utility::string_t refVal_setPhoneId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("phoneId"))), refVal_setPhoneId );
        setPhoneId(refVal_setPhoneId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("inboxId"))))
    {
        utility::string_t refVal_setInboxId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inboxId"))), refVal_setInboxId );
        setInboxId(refVal_setInboxId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("requestBodyTemplate"))))
    {
        utility::string_t refVal_setRequestBodyTemplate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("requestBodyTemplate"))), refVal_setRequestBodyTemplate );
        setRequestBodyTemplate(refVal_setRequestBodyTemplate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("url"))))
    {
        utility::string_t refVal_setUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("url"))), refVal_setUrl );
        setUrl(refVal_setUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("method"))))
    {
        utility::string_t refVal_setMethod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("method"))), refVal_setMethod );
        setMethod(refVal_setMethod);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("payloadJsonSchema"))))
    {
        utility::string_t refVal_setPayloadJsonSchema;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("payloadJsonSchema"))), refVal_setPayloadJsonSchema );
        setPayloadJsonSchema(refVal_setPayloadJsonSchema);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updatedAt"))))
    {
        utility::datetime refVal_setUpdatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updatedAt"))), refVal_setUpdatedAt );
        setUpdatedAt(refVal_setUpdatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("eventName"))))
    {
        utility::string_t refVal_setEventName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("eventName"))), refVal_setEventName );
        setEventName(refVal_setEventName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("requestHeaders"))))
    {
        std::shared_ptr<WebhookHeaders> refVal_setRequestHeaders;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("requestHeaders"))), refVal_setRequestHeaders );
        setRequestHeaders(refVal_setRequestHeaders);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ignoreInsecureSslCertificates"))))
    {
        bool refVal_setIgnoreInsecureSslCertificates;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ignoreInsecureSslCertificates"))), refVal_setIgnoreInsecureSslCertificates );
        setIgnoreInsecureSslCertificates(refVal_setIgnoreInsecureSslCertificates);
    }
    return ok;
}

utility::string_t WebhookDto::getId() const
{
    return m_Id;
}

void WebhookDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool WebhookDto::idIsSet() const
{
    return m_IdIsSet;
}

void WebhookDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t WebhookDto::getUserId() const
{
    return m_UserId;
}

void WebhookDto::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool WebhookDto::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void WebhookDto::unsetUserId()
{
    m_UserIdIsSet = false;
}
bool WebhookDto::isBasicAuth() const
{
    return m_BasicAuth;
}

void WebhookDto::setBasicAuth(bool value)
{
    m_BasicAuth = value;
    m_BasicAuthIsSet = true;
}

bool WebhookDto::basicAuthIsSet() const
{
    return m_BasicAuthIsSet;
}

void WebhookDto::unsetBasicAuth()
{
    m_BasicAuthIsSet = false;
}
utility::string_t WebhookDto::getName() const
{
    return m_Name;
}

void WebhookDto::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool WebhookDto::nameIsSet() const
{
    return m_NameIsSet;
}

void WebhookDto::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t WebhookDto::getPhoneId() const
{
    return m_PhoneId;
}

void WebhookDto::setPhoneId(const utility::string_t& value)
{
    m_PhoneId = value;
    m_PhoneIdIsSet = true;
}

bool WebhookDto::phoneIdIsSet() const
{
    return m_PhoneIdIsSet;
}

void WebhookDto::unsetPhoneId()
{
    m_PhoneIdIsSet = false;
}
utility::string_t WebhookDto::getInboxId() const
{
    return m_InboxId;
}

void WebhookDto::setInboxId(const utility::string_t& value)
{
    m_InboxId = value;
    m_InboxIdIsSet = true;
}

bool WebhookDto::inboxIdIsSet() const
{
    return m_InboxIdIsSet;
}

void WebhookDto::unsetInboxId()
{
    m_InboxIdIsSet = false;
}
utility::string_t WebhookDto::getRequestBodyTemplate() const
{
    return m_RequestBodyTemplate;
}

void WebhookDto::setRequestBodyTemplate(const utility::string_t& value)
{
    m_RequestBodyTemplate = value;
    m_RequestBodyTemplateIsSet = true;
}

bool WebhookDto::requestBodyTemplateIsSet() const
{
    return m_RequestBodyTemplateIsSet;
}

void WebhookDto::unsetRequestBodyTemplate()
{
    m_RequestBodyTemplateIsSet = false;
}
utility::string_t WebhookDto::getUrl() const
{
    return m_Url;
}

void WebhookDto::setUrl(const utility::string_t& value)
{
    m_Url = value;
    m_UrlIsSet = true;
}

bool WebhookDto::urlIsSet() const
{
    return m_UrlIsSet;
}

void WebhookDto::unsetUrl()
{
    m_UrlIsSet = false;
}
utility::string_t WebhookDto::getMethod() const
{
    return m_Method;
}

void WebhookDto::setMethod(const utility::string_t& value)
{
    m_Method = value;
    m_MethodIsSet = true;
}

bool WebhookDto::methodIsSet() const
{
    return m_MethodIsSet;
}

void WebhookDto::unsetMethod()
{
    m_MethodIsSet = false;
}
utility::string_t WebhookDto::getPayloadJsonSchema() const
{
    return m_PayloadJsonSchema;
}

void WebhookDto::setPayloadJsonSchema(const utility::string_t& value)
{
    m_PayloadJsonSchema = value;
    m_PayloadJsonSchemaIsSet = true;
}

bool WebhookDto::payloadJsonSchemaIsSet() const
{
    return m_PayloadJsonSchemaIsSet;
}

void WebhookDto::unsetPayloadJsonSchema()
{
    m_PayloadJsonSchemaIsSet = false;
}
utility::datetime WebhookDto::getCreatedAt() const
{
    return m_CreatedAt;
}

void WebhookDto::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool WebhookDto::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void WebhookDto::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::datetime WebhookDto::getUpdatedAt() const
{
    return m_UpdatedAt;
}

void WebhookDto::setUpdatedAt(const utility::datetime& value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}

bool WebhookDto::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void WebhookDto::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
utility::string_t WebhookDto::getEventName() const
{
    return m_EventName;
}

void WebhookDto::setEventName(const utility::string_t& value)
{
    m_EventName = value;
    m_EventNameIsSet = true;
}

bool WebhookDto::eventNameIsSet() const
{
    return m_EventNameIsSet;
}

void WebhookDto::unsetEventName()
{
    m_EventNameIsSet = false;
}
std::shared_ptr<WebhookHeaders> WebhookDto::getRequestHeaders() const
{
    return m_RequestHeaders;
}

void WebhookDto::setRequestHeaders(const std::shared_ptr<WebhookHeaders>& value)
{
    m_RequestHeaders = value;
    m_RequestHeadersIsSet = true;
}

bool WebhookDto::requestHeadersIsSet() const
{
    return m_RequestHeadersIsSet;
}

void WebhookDto::unsetRequestHeaders()
{
    m_RequestHeadersIsSet = false;
}
bool WebhookDto::isIgnoreInsecureSslCertificates() const
{
    return m_IgnoreInsecureSslCertificates;
}

void WebhookDto::setIgnoreInsecureSslCertificates(bool value)
{
    m_IgnoreInsecureSslCertificates = value;
    m_IgnoreInsecureSslCertificatesIsSet = true;
}

bool WebhookDto::ignoreInsecureSslCertificatesIsSet() const
{
    return m_IgnoreInsecureSslCertificatesIsSet;
}

void WebhookDto::unsetIgnoreInsecureSslCertificates()
{
    m_IgnoreInsecureSslCertificatesIsSet = false;
}
}
}
}
}


