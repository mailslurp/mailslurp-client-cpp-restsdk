/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/GenerateTlsReportingRecordOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



GenerateTlsReportingRecordOptions::GenerateTlsReportingRecordOptions()
{
    m_ReportingAddressesIsSet = false;
    m_ReportingUrl = utility::conversions::to_string_t("");
    m_ReportingUrlIsSet = false;
    m_Host = utility::conversions::to_string_t("");
    m_HostIsSet = false;
    m_Version = utility::conversions::to_string_t("");
    m_VersionIsSet = false;
    m_Ttl = 0;
    m_TtlIsSet = false;
}

GenerateTlsReportingRecordOptions::~GenerateTlsReportingRecordOptions()
{
}

void GenerateTlsReportingRecordOptions::validate()
{
    // TODO: implement validation
}

web::json::value GenerateTlsReportingRecordOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ReportingAddressesIsSet)
    {
        val[utility::conversions::to_string_t(U("reportingAddresses"))] = ModelBase::toJson(m_ReportingAddresses);
    }
    if(m_ReportingUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("reportingUrl"))] = ModelBase::toJson(m_ReportingUrl);
    }
    if(m_HostIsSet)
    {
        val[utility::conversions::to_string_t(U("host"))] = ModelBase::toJson(m_Host);
    }
    if(m_VersionIsSet)
    {
        val[utility::conversions::to_string_t(U("version"))] = ModelBase::toJson(m_Version);
    }
    if(m_TtlIsSet)
    {
        val[utility::conversions::to_string_t(U("ttl"))] = ModelBase::toJson(m_Ttl);
    }

    return val;
}

bool GenerateTlsReportingRecordOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("reportingAddresses"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reportingAddresses")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setReportingAddresses;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReportingAddresses);
            setReportingAddresses(refVal_setReportingAddresses);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reportingUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reportingUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setReportingUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReportingUrl);
            setReportingUrl(refVal_setReportingUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("host"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("host")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHost;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHost);
            setHost(refVal_setHost);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("version")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVersion);
            setVersion(refVal_setVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ttl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ttl")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTtl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTtl);
            setTtl(refVal_setTtl);
        }
    }
    return ok;
}

void GenerateTlsReportingRecordOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ReportingAddressesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reportingAddresses")), m_ReportingAddresses));
    }
    if(m_ReportingUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reportingUrl")), m_ReportingUrl));
    }
    if(m_HostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("host")), m_Host));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("version")), m_Version));
    }
    if(m_TtlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ttl")), m_Ttl));
    }
}

bool GenerateTlsReportingRecordOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("reportingAddresses"))))
    {
        std::vector<utility::string_t> refVal_setReportingAddresses;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reportingAddresses"))), refVal_setReportingAddresses );
        setReportingAddresses(refVal_setReportingAddresses);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reportingUrl"))))
    {
        utility::string_t refVal_setReportingUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reportingUrl"))), refVal_setReportingUrl );
        setReportingUrl(refVal_setReportingUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("host"))))
    {
        utility::string_t refVal_setHost;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("host"))), refVal_setHost );
        setHost(refVal_setHost);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("version"))))
    {
        utility::string_t refVal_setVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("version"))), refVal_setVersion );
        setVersion(refVal_setVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ttl"))))
    {
        int32_t refVal_setTtl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ttl"))), refVal_setTtl );
        setTtl(refVal_setTtl);
    }
    return ok;
}

std::vector<utility::string_t>& GenerateTlsReportingRecordOptions::getReportingAddresses()
{
    return m_ReportingAddresses;
}

void GenerateTlsReportingRecordOptions::setReportingAddresses(const std::vector<utility::string_t>& value)
{
    m_ReportingAddresses = value;
    m_ReportingAddressesIsSet = true;
}

bool GenerateTlsReportingRecordOptions::reportingAddressesIsSet() const
{
    return m_ReportingAddressesIsSet;
}

void GenerateTlsReportingRecordOptions::unsetReportingAddresses()
{
    m_ReportingAddressesIsSet = false;
}
utility::string_t GenerateTlsReportingRecordOptions::getReportingUrl() const
{
    return m_ReportingUrl;
}

void GenerateTlsReportingRecordOptions::setReportingUrl(const utility::string_t& value)
{
    m_ReportingUrl = value;
    m_ReportingUrlIsSet = true;
}

bool GenerateTlsReportingRecordOptions::reportingUrlIsSet() const
{
    return m_ReportingUrlIsSet;
}

void GenerateTlsReportingRecordOptions::unsetReportingUrl()
{
    m_ReportingUrlIsSet = false;
}
utility::string_t GenerateTlsReportingRecordOptions::getHost() const
{
    return m_Host;
}

void GenerateTlsReportingRecordOptions::setHost(const utility::string_t& value)
{
    m_Host = value;
    m_HostIsSet = true;
}

bool GenerateTlsReportingRecordOptions::hostIsSet() const
{
    return m_HostIsSet;
}

void GenerateTlsReportingRecordOptions::unsetHost()
{
    m_HostIsSet = false;
}
utility::string_t GenerateTlsReportingRecordOptions::getVersion() const
{
    return m_Version;
}

void GenerateTlsReportingRecordOptions::setVersion(const utility::string_t& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool GenerateTlsReportingRecordOptions::versionIsSet() const
{
    return m_VersionIsSet;
}

void GenerateTlsReportingRecordOptions::unsetVersion()
{
    m_VersionIsSet = false;
}
int32_t GenerateTlsReportingRecordOptions::getTtl() const
{
    return m_Ttl;
}

void GenerateTlsReportingRecordOptions::setTtl(int32_t value)
{
    m_Ttl = value;
    m_TtlIsSet = true;
}

bool GenerateTlsReportingRecordOptions::ttlIsSet() const
{
    return m_TtlIsSet;
}

void GenerateTlsReportingRecordOptions::unsetTtl()
{
    m_TtlIsSet = false;
}
}
}
}
}


