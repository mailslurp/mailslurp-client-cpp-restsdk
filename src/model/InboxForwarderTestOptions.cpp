/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/InboxForwarderTestOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



InboxForwarderTestOptions::InboxForwarderTestOptions()
{
    m_TestValue = utility::conversions::to_string_t("");
    m_TestValueIsSet = false;
}

InboxForwarderTestOptions::~InboxForwarderTestOptions()
{
}

void InboxForwarderTestOptions::validate()
{
    // TODO: implement validation
}

web::json::value InboxForwarderTestOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TestValueIsSet)
    {
        val[utility::conversions::to_string_t(U("testValue"))] = ModelBase::toJson(m_TestValue);
    }

    return val;
}

bool InboxForwarderTestOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("testValue"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("testValue")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTestValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTestValue);
            setTestValue(refVal_setTestValue);
        }
    }
    return ok;
}

void InboxForwarderTestOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TestValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("testValue")), m_TestValue));
    }
}

bool InboxForwarderTestOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("testValue"))))
    {
        utility::string_t refVal_setTestValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("testValue"))), refVal_setTestValue );
        setTestValue(refVal_setTestValue);
    }
    return ok;
}

utility::string_t InboxForwarderTestOptions::getTestValue() const
{
    return m_TestValue;
}

void InboxForwarderTestOptions::setTestValue(const utility::string_t& value)
{
    m_TestValue = value;
    m_TestValueIsSet = true;
}

bool InboxForwarderTestOptions::testValueIsSet() const
{
    return m_TestValueIsSet;
}

void InboxForwarderTestOptions::unsetTestValue()
{
    m_TestValueIsSet = false;
}
}
}
}
}


