/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/InboxForwarderEventProjection.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



InboxForwarderEventProjection::InboxForwarderEventProjection()
{
    m_EmailId = utility::conversions::to_string_t("");
    m_EmailIdIsSet = false;
    m_InboxId = utility::conversions::to_string_t("");
    m_InboxIdIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_ForwarderId = utility::conversions::to_string_t("");
    m_ForwarderIdIsSet = false;
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
}

InboxForwarderEventProjection::~InboxForwarderEventProjection()
{
}

void InboxForwarderEventProjection::validate()
{
    // TODO: implement validation
}

web::json::value InboxForwarderEventProjection::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EmailIdIsSet)
    {
        val[utility::conversions::to_string_t(U("emailId"))] = ModelBase::toJson(m_EmailId);
    }
    if(m_InboxIdIsSet)
    {
        val[utility::conversions::to_string_t(U("inboxId"))] = ModelBase::toJson(m_InboxId);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t(U("userId"))] = ModelBase::toJson(m_UserId);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_ForwarderIdIsSet)
    {
        val[utility::conversions::to_string_t(U("forwarderId"))] = ModelBase::toJson(m_ForwarderId);
    }
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t(U("message"))] = ModelBase::toJson(m_Message);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }

    return val;
}

bool InboxForwarderEventProjection::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("emailId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("emailId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEmailId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmailId);
            setEmailId(refVal_setEmailId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("inboxId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inboxId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInboxId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInboxId);
            setInboxId(refVal_setInboxId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("userId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("userId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserId);
            setUserId(refVal_setUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("forwarderId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("forwarderId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setForwarderId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setForwarderId);
            setForwarderId(refVal_setForwarderId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("message"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("message")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessage);
            setMessage(refVal_setMessage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    return ok;
}

void InboxForwarderEventProjection::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_EmailIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("emailId")), m_EmailId));
    }
    if(m_InboxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inboxId")), m_InboxId));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("userId")), m_UserId));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
    if(m_ForwarderIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("forwarderId")), m_ForwarderId));
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("message")), m_Message));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
}

bool InboxForwarderEventProjection::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("emailId"))))
    {
        utility::string_t refVal_setEmailId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("emailId"))), refVal_setEmailId );
        setEmailId(refVal_setEmailId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("inboxId"))))
    {
        utility::string_t refVal_setInboxId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inboxId"))), refVal_setInboxId );
        setInboxId(refVal_setInboxId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("userId"))))
    {
        utility::string_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("userId"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("forwarderId"))))
    {
        utility::string_t refVal_setForwarderId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("forwarderId"))), refVal_setForwarderId );
        setForwarderId(refVal_setForwarderId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("message"))))
    {
        utility::string_t refVal_setMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("message"))), refVal_setMessage );
        setMessage(refVal_setMessage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    return ok;
}

utility::string_t InboxForwarderEventProjection::getEmailId() const
{
    return m_EmailId;
}

void InboxForwarderEventProjection::setEmailId(const utility::string_t& value)
{
    m_EmailId = value;
    m_EmailIdIsSet = true;
}

bool InboxForwarderEventProjection::emailIdIsSet() const
{
    return m_EmailIdIsSet;
}

void InboxForwarderEventProjection::unsetEmailId()
{
    m_EmailIdIsSet = false;
}
utility::string_t InboxForwarderEventProjection::getInboxId() const
{
    return m_InboxId;
}

void InboxForwarderEventProjection::setInboxId(const utility::string_t& value)
{
    m_InboxId = value;
    m_InboxIdIsSet = true;
}

bool InboxForwarderEventProjection::inboxIdIsSet() const
{
    return m_InboxIdIsSet;
}

void InboxForwarderEventProjection::unsetInboxId()
{
    m_InboxIdIsSet = false;
}
utility::string_t InboxForwarderEventProjection::getUserId() const
{
    return m_UserId;
}

void InboxForwarderEventProjection::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool InboxForwarderEventProjection::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void InboxForwarderEventProjection::unsetUserId()
{
    m_UserIdIsSet = false;
}
utility::datetime InboxForwarderEventProjection::getCreatedAt() const
{
    return m_CreatedAt;
}

void InboxForwarderEventProjection::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool InboxForwarderEventProjection::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void InboxForwarderEventProjection::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::string_t InboxForwarderEventProjection::getForwarderId() const
{
    return m_ForwarderId;
}

void InboxForwarderEventProjection::setForwarderId(const utility::string_t& value)
{
    m_ForwarderId = value;
    m_ForwarderIdIsSet = true;
}

bool InboxForwarderEventProjection::forwarderIdIsSet() const
{
    return m_ForwarderIdIsSet;
}

void InboxForwarderEventProjection::unsetForwarderId()
{
    m_ForwarderIdIsSet = false;
}
utility::string_t InboxForwarderEventProjection::getMessage() const
{
    return m_Message;
}

void InboxForwarderEventProjection::setMessage(const utility::string_t& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}

bool InboxForwarderEventProjection::messageIsSet() const
{
    return m_MessageIsSet;
}

void InboxForwarderEventProjection::unsetMessage()
{
    m_MessageIsSet = false;
}
utility::string_t InboxForwarderEventProjection::getId() const
{
    return m_Id;
}

void InboxForwarderEventProjection::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool InboxForwarderEventProjection::idIsSet() const
{
    return m_IdIsSet;
}

void InboxForwarderEventProjection::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t InboxForwarderEventProjection::getStatus() const
{
    return m_Status;
}

void InboxForwarderEventProjection::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool InboxForwarderEventProjection::statusIsSet() const
{
    return m_StatusIsSet;
}

void InboxForwarderEventProjection::unsetStatus()
{
    m_StatusIsSet = false;
}
}
}
}
}


