/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ProviderSettings.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



ProviderSettings::ProviderSettings()
{
    m_MailProvider = utility::conversions::to_string_t("");
    m_MailProviderIsSet = false;
    m_ImapHost = utility::conversions::to_string_t("");
    m_ImapHostIsSet = false;
    m_ImapPort = 0;
    m_ImapPortIsSet = false;
    m_ImapSsl = false;
    m_ImapSslIsSet = false;
    m_ImapStartTls = false;
    m_ImapStartTlsIsSet = false;
    m_SmtpHost = utility::conversions::to_string_t("");
    m_SmtpHostIsSet = false;
    m_SmtpPort = 0;
    m_SmtpPortIsSet = false;
    m_SmtpSsl = false;
    m_SmtpSslIsSet = false;
    m_SmtpStartTls = false;
    m_SmtpStartTlsIsSet = false;
}

ProviderSettings::~ProviderSettings()
{
}

void ProviderSettings::validate()
{
    // TODO: implement validation
}

web::json::value ProviderSettings::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MailProviderIsSet)
    {
        val[utility::conversions::to_string_t(U("mailProvider"))] = ModelBase::toJson(m_MailProvider);
    }
    if(m_ImapHostIsSet)
    {
        val[utility::conversions::to_string_t(U("imapHost"))] = ModelBase::toJson(m_ImapHost);
    }
    if(m_ImapPortIsSet)
    {
        val[utility::conversions::to_string_t(U("imapPort"))] = ModelBase::toJson(m_ImapPort);
    }
    if(m_ImapSslIsSet)
    {
        val[utility::conversions::to_string_t(U("imapSsl"))] = ModelBase::toJson(m_ImapSsl);
    }
    if(m_ImapStartTlsIsSet)
    {
        val[utility::conversions::to_string_t(U("imapStartTls"))] = ModelBase::toJson(m_ImapStartTls);
    }
    if(m_SmtpHostIsSet)
    {
        val[utility::conversions::to_string_t(U("smtpHost"))] = ModelBase::toJson(m_SmtpHost);
    }
    if(m_SmtpPortIsSet)
    {
        val[utility::conversions::to_string_t(U("smtpPort"))] = ModelBase::toJson(m_SmtpPort);
    }
    if(m_SmtpSslIsSet)
    {
        val[utility::conversions::to_string_t(U("smtpSsl"))] = ModelBase::toJson(m_SmtpSsl);
    }
    if(m_SmtpStartTlsIsSet)
    {
        val[utility::conversions::to_string_t(U("smtpStartTls"))] = ModelBase::toJson(m_SmtpStartTls);
    }

    return val;
}

bool ProviderSettings::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("mailProvider"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mailProvider")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMailProvider;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMailProvider);
            setMailProvider(refVal_setMailProvider);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("imapHost"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imapHost")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setImapHost;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImapHost);
            setImapHost(refVal_setImapHost);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("imapPort"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imapPort")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setImapPort;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImapPort);
            setImapPort(refVal_setImapPort);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("imapSsl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imapSsl")));
        if(!fieldValue.is_null())
        {
            bool refVal_setImapSsl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImapSsl);
            setImapSsl(refVal_setImapSsl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("imapStartTls"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imapStartTls")));
        if(!fieldValue.is_null())
        {
            bool refVal_setImapStartTls;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImapStartTls);
            setImapStartTls(refVal_setImapStartTls);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("smtpHost"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("smtpHost")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSmtpHost;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSmtpHost);
            setSmtpHost(refVal_setSmtpHost);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("smtpPort"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("smtpPort")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSmtpPort;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSmtpPort);
            setSmtpPort(refVal_setSmtpPort);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("smtpSsl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("smtpSsl")));
        if(!fieldValue.is_null())
        {
            bool refVal_setSmtpSsl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSmtpSsl);
            setSmtpSsl(refVal_setSmtpSsl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("smtpStartTls"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("smtpStartTls")));
        if(!fieldValue.is_null())
        {
            bool refVal_setSmtpStartTls;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSmtpStartTls);
            setSmtpStartTls(refVal_setSmtpStartTls);
        }
    }
    return ok;
}

void ProviderSettings::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_MailProviderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mailProvider")), m_MailProvider));
    }
    if(m_ImapHostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imapHost")), m_ImapHost));
    }
    if(m_ImapPortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imapPort")), m_ImapPort));
    }
    if(m_ImapSslIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imapSsl")), m_ImapSsl));
    }
    if(m_ImapStartTlsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imapStartTls")), m_ImapStartTls));
    }
    if(m_SmtpHostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("smtpHost")), m_SmtpHost));
    }
    if(m_SmtpPortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("smtpPort")), m_SmtpPort));
    }
    if(m_SmtpSslIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("smtpSsl")), m_SmtpSsl));
    }
    if(m_SmtpStartTlsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("smtpStartTls")), m_SmtpStartTls));
    }
}

bool ProviderSettings::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("mailProvider"))))
    {
        utility::string_t refVal_setMailProvider;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mailProvider"))), refVal_setMailProvider );
        setMailProvider(refVal_setMailProvider);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("imapHost"))))
    {
        utility::string_t refVal_setImapHost;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imapHost"))), refVal_setImapHost );
        setImapHost(refVal_setImapHost);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("imapPort"))))
    {
        int32_t refVal_setImapPort;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imapPort"))), refVal_setImapPort );
        setImapPort(refVal_setImapPort);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("imapSsl"))))
    {
        bool refVal_setImapSsl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imapSsl"))), refVal_setImapSsl );
        setImapSsl(refVal_setImapSsl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("imapStartTls"))))
    {
        bool refVal_setImapStartTls;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imapStartTls"))), refVal_setImapStartTls );
        setImapStartTls(refVal_setImapStartTls);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("smtpHost"))))
    {
        utility::string_t refVal_setSmtpHost;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("smtpHost"))), refVal_setSmtpHost );
        setSmtpHost(refVal_setSmtpHost);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("smtpPort"))))
    {
        int32_t refVal_setSmtpPort;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("smtpPort"))), refVal_setSmtpPort );
        setSmtpPort(refVal_setSmtpPort);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("smtpSsl"))))
    {
        bool refVal_setSmtpSsl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("smtpSsl"))), refVal_setSmtpSsl );
        setSmtpSsl(refVal_setSmtpSsl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("smtpStartTls"))))
    {
        bool refVal_setSmtpStartTls;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("smtpStartTls"))), refVal_setSmtpStartTls );
        setSmtpStartTls(refVal_setSmtpStartTls);
    }
    return ok;
}

utility::string_t ProviderSettings::getMailProvider() const
{
    return m_MailProvider;
}

void ProviderSettings::setMailProvider(const utility::string_t& value)
{
    m_MailProvider = value;
    m_MailProviderIsSet = true;
}

bool ProviderSettings::mailProviderIsSet() const
{
    return m_MailProviderIsSet;
}

void ProviderSettings::unsetMailProvider()
{
    m_MailProviderIsSet = false;
}
utility::string_t ProviderSettings::getImapHost() const
{
    return m_ImapHost;
}

void ProviderSettings::setImapHost(const utility::string_t& value)
{
    m_ImapHost = value;
    m_ImapHostIsSet = true;
}

bool ProviderSettings::imapHostIsSet() const
{
    return m_ImapHostIsSet;
}

void ProviderSettings::unsetImapHost()
{
    m_ImapHostIsSet = false;
}
int32_t ProviderSettings::getImapPort() const
{
    return m_ImapPort;
}

void ProviderSettings::setImapPort(int32_t value)
{
    m_ImapPort = value;
    m_ImapPortIsSet = true;
}

bool ProviderSettings::imapPortIsSet() const
{
    return m_ImapPortIsSet;
}

void ProviderSettings::unsetImapPort()
{
    m_ImapPortIsSet = false;
}
bool ProviderSettings::isImapSsl() const
{
    return m_ImapSsl;
}

void ProviderSettings::setImapSsl(bool value)
{
    m_ImapSsl = value;
    m_ImapSslIsSet = true;
}

bool ProviderSettings::imapSslIsSet() const
{
    return m_ImapSslIsSet;
}

void ProviderSettings::unsetImapSsl()
{
    m_ImapSslIsSet = false;
}
bool ProviderSettings::isImapStartTls() const
{
    return m_ImapStartTls;
}

void ProviderSettings::setImapStartTls(bool value)
{
    m_ImapStartTls = value;
    m_ImapStartTlsIsSet = true;
}

bool ProviderSettings::imapStartTlsIsSet() const
{
    return m_ImapStartTlsIsSet;
}

void ProviderSettings::unsetImapStartTls()
{
    m_ImapStartTlsIsSet = false;
}
utility::string_t ProviderSettings::getSmtpHost() const
{
    return m_SmtpHost;
}

void ProviderSettings::setSmtpHost(const utility::string_t& value)
{
    m_SmtpHost = value;
    m_SmtpHostIsSet = true;
}

bool ProviderSettings::smtpHostIsSet() const
{
    return m_SmtpHostIsSet;
}

void ProviderSettings::unsetSmtpHost()
{
    m_SmtpHostIsSet = false;
}
int32_t ProviderSettings::getSmtpPort() const
{
    return m_SmtpPort;
}

void ProviderSettings::setSmtpPort(int32_t value)
{
    m_SmtpPort = value;
    m_SmtpPortIsSet = true;
}

bool ProviderSettings::smtpPortIsSet() const
{
    return m_SmtpPortIsSet;
}

void ProviderSettings::unsetSmtpPort()
{
    m_SmtpPortIsSet = false;
}
bool ProviderSettings::isSmtpSsl() const
{
    return m_SmtpSsl;
}

void ProviderSettings::setSmtpSsl(bool value)
{
    m_SmtpSsl = value;
    m_SmtpSslIsSet = true;
}

bool ProviderSettings::smtpSslIsSet() const
{
    return m_SmtpSslIsSet;
}

void ProviderSettings::unsetSmtpSsl()
{
    m_SmtpSslIsSet = false;
}
bool ProviderSettings::isSmtpStartTls() const
{
    return m_SmtpStartTls;
}

void ProviderSettings::setSmtpStartTls(bool value)
{
    m_SmtpStartTls = value;
    m_SmtpStartTlsIsSet = true;
}

bool ProviderSettings::smtpStartTlsIsSet() const
{
    return m_SmtpStartTlsIsSet;
}

void ProviderSettings::unsetSmtpStartTls()
{
    m_SmtpStartTlsIsSet = false;
}
}
}
}
}


