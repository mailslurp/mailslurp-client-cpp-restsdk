/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/EmailFeatureNames.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



EmailFeatureNames::EmailFeatureNames()
{
    m_FamilyIsSet = false;
    m_PlatformIsSet = false;
    m_CategoryIsSet = false;
}

EmailFeatureNames::~EmailFeatureNames()
{
}

void EmailFeatureNames::validate()
{
    // TODO: implement validation
}

web::json::value EmailFeatureNames::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FamilyIsSet)
    {
        val[utility::conversions::to_string_t(U("family"))] = ModelBase::toJson(m_Family);
    }
    if(m_PlatformIsSet)
    {
        val[utility::conversions::to_string_t(U("platform"))] = ModelBase::toJson(m_Platform);
    }
    if(m_CategoryIsSet)
    {
        val[utility::conversions::to_string_t(U("category"))] = ModelBase::toJson(m_Category);
    }

    return val;
}

bool EmailFeatureNames::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("family"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("family")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<EmailFeatureFamilyName>> refVal_setFamily;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFamily);
            setFamily(refVal_setFamily);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("platform"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("platform")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<EmailFeaturePlatformName>> refVal_setPlatform;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlatform);
            setPlatform(refVal_setPlatform);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("category"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("category")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<EmailFeatureCategoryName>> refVal_setCategory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCategory);
            setCategory(refVal_setCategory);
        }
    }
    return ok;
}

void EmailFeatureNames::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_FamilyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("family")), m_Family));
    }
    if(m_PlatformIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("platform")), m_Platform));
    }
    if(m_CategoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("category")), m_Category));
    }
}

bool EmailFeatureNames::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("family"))))
    {
        std::vector<std::shared_ptr<EmailFeatureFamilyName>> refVal_setFamily;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("family"))), refVal_setFamily );
        setFamily(refVal_setFamily);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("platform"))))
    {
        std::vector<std::shared_ptr<EmailFeaturePlatformName>> refVal_setPlatform;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("platform"))), refVal_setPlatform );
        setPlatform(refVal_setPlatform);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("category"))))
    {
        std::vector<std::shared_ptr<EmailFeatureCategoryName>> refVal_setCategory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("category"))), refVal_setCategory );
        setCategory(refVal_setCategory);
    }
    return ok;
}

std::vector<std::shared_ptr<EmailFeatureFamilyName>>& EmailFeatureNames::getFamily()
{
    return m_Family;
}

void EmailFeatureNames::setFamily(const std::vector<std::shared_ptr<EmailFeatureFamilyName>>& value)
{
    m_Family = value;
    m_FamilyIsSet = true;
}

bool EmailFeatureNames::familyIsSet() const
{
    return m_FamilyIsSet;
}

void EmailFeatureNames::unsetFamily()
{
    m_FamilyIsSet = false;
}
std::vector<std::shared_ptr<EmailFeaturePlatformName>>& EmailFeatureNames::getPlatform()
{
    return m_Platform;
}

void EmailFeatureNames::setPlatform(const std::vector<std::shared_ptr<EmailFeaturePlatformName>>& value)
{
    m_Platform = value;
    m_PlatformIsSet = true;
}

bool EmailFeatureNames::platformIsSet() const
{
    return m_PlatformIsSet;
}

void EmailFeatureNames::unsetPlatform()
{
    m_PlatformIsSet = false;
}
std::vector<std::shared_ptr<EmailFeatureCategoryName>>& EmailFeatureNames::getCategory()
{
    return m_Category;
}

void EmailFeatureNames::setCategory(const std::vector<std::shared_ptr<EmailFeatureCategoryName>>& value)
{
    m_Category = value;
    m_CategoryIsSet = true;
}

bool EmailFeatureNames::categoryIsSet() const
{
    return m_CategoryIsSet;
}

void EmailFeatureNames::unsetCategory()
{
    m_CategoryIsSet = false;
}
}
}
}
}


