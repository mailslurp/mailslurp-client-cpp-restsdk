/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AccountBounceBlockDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



AccountBounceBlockDto::AccountBounceBlockDto()
{
    m_IsFrozen = false;
    m_IsFrozenIsSet = false;
    m_IsSendingBlocked = false;
    m_IsSendingBlockedIsSet = false;
    m_BounceCount = 0L;
    m_BounceCountIsSet = false;
    m_BounceCountToday = 0L;
    m_BounceCountTodayIsSet = false;
    m_MaximumDailyBounces = 0L;
    m_MaximumDailyBouncesIsSet = false;
    m_MaximumAccountBounces = 0L;
    m_MaximumAccountBouncesIsSet = false;
}

AccountBounceBlockDto::~AccountBounceBlockDto()
{
}

void AccountBounceBlockDto::validate()
{
    // TODO: implement validation
}

web::json::value AccountBounceBlockDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IsFrozenIsSet)
    {
        val[utility::conversions::to_string_t(U("isFrozen"))] = ModelBase::toJson(m_IsFrozen);
    }
    if(m_IsSendingBlockedIsSet)
    {
        val[utility::conversions::to_string_t(U("isSendingBlocked"))] = ModelBase::toJson(m_IsSendingBlocked);
    }
    if(m_BounceCountIsSet)
    {
        val[utility::conversions::to_string_t(U("bounceCount"))] = ModelBase::toJson(m_BounceCount);
    }
    if(m_BounceCountTodayIsSet)
    {
        val[utility::conversions::to_string_t(U("bounceCountToday"))] = ModelBase::toJson(m_BounceCountToday);
    }
    if(m_MaximumDailyBouncesIsSet)
    {
        val[utility::conversions::to_string_t(U("maximumDailyBounces"))] = ModelBase::toJson(m_MaximumDailyBounces);
    }
    if(m_MaximumAccountBouncesIsSet)
    {
        val[utility::conversions::to_string_t(U("maximumAccountBounces"))] = ModelBase::toJson(m_MaximumAccountBounces);
    }

    return val;
}

bool AccountBounceBlockDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("isFrozen"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isFrozen")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsFrozen;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsFrozen);
            setIsFrozen(refVal_setIsFrozen);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isSendingBlocked"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isSendingBlocked")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsSendingBlocked;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsSendingBlocked);
            setIsSendingBlocked(refVal_setIsSendingBlocked);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bounceCount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bounceCount")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBounceCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBounceCount);
            setBounceCount(refVal_setBounceCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bounceCountToday"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bounceCountToday")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBounceCountToday;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBounceCountToday);
            setBounceCountToday(refVal_setBounceCountToday);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("maximumDailyBounces"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("maximumDailyBounces")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setMaximumDailyBounces;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaximumDailyBounces);
            setMaximumDailyBounces(refVal_setMaximumDailyBounces);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("maximumAccountBounces"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("maximumAccountBounces")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setMaximumAccountBounces;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaximumAccountBounces);
            setMaximumAccountBounces(refVal_setMaximumAccountBounces);
        }
    }
    return ok;
}

void AccountBounceBlockDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IsFrozenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isFrozen")), m_IsFrozen));
    }
    if(m_IsSendingBlockedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isSendingBlocked")), m_IsSendingBlocked));
    }
    if(m_BounceCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bounceCount")), m_BounceCount));
    }
    if(m_BounceCountTodayIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bounceCountToday")), m_BounceCountToday));
    }
    if(m_MaximumDailyBouncesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("maximumDailyBounces")), m_MaximumDailyBounces));
    }
    if(m_MaximumAccountBouncesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("maximumAccountBounces")), m_MaximumAccountBounces));
    }
}

bool AccountBounceBlockDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("isFrozen"))))
    {
        bool refVal_setIsFrozen;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isFrozen"))), refVal_setIsFrozen );
        setIsFrozen(refVal_setIsFrozen);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isSendingBlocked"))))
    {
        bool refVal_setIsSendingBlocked;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isSendingBlocked"))), refVal_setIsSendingBlocked );
        setIsSendingBlocked(refVal_setIsSendingBlocked);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bounceCount"))))
    {
        int64_t refVal_setBounceCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bounceCount"))), refVal_setBounceCount );
        setBounceCount(refVal_setBounceCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bounceCountToday"))))
    {
        int64_t refVal_setBounceCountToday;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bounceCountToday"))), refVal_setBounceCountToday );
        setBounceCountToday(refVal_setBounceCountToday);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("maximumDailyBounces"))))
    {
        int64_t refVal_setMaximumDailyBounces;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("maximumDailyBounces"))), refVal_setMaximumDailyBounces );
        setMaximumDailyBounces(refVal_setMaximumDailyBounces);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("maximumAccountBounces"))))
    {
        int64_t refVal_setMaximumAccountBounces;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("maximumAccountBounces"))), refVal_setMaximumAccountBounces );
        setMaximumAccountBounces(refVal_setMaximumAccountBounces);
    }
    return ok;
}

bool AccountBounceBlockDto::isIsFrozen() const
{
    return m_IsFrozen;
}

void AccountBounceBlockDto::setIsFrozen(bool value)
{
    m_IsFrozen = value;
    m_IsFrozenIsSet = true;
}

bool AccountBounceBlockDto::isFrozenIsSet() const
{
    return m_IsFrozenIsSet;
}

void AccountBounceBlockDto::unsetIsFrozen()
{
    m_IsFrozenIsSet = false;
}
bool AccountBounceBlockDto::isIsSendingBlocked() const
{
    return m_IsSendingBlocked;
}

void AccountBounceBlockDto::setIsSendingBlocked(bool value)
{
    m_IsSendingBlocked = value;
    m_IsSendingBlockedIsSet = true;
}

bool AccountBounceBlockDto::isSendingBlockedIsSet() const
{
    return m_IsSendingBlockedIsSet;
}

void AccountBounceBlockDto::unsetIsSendingBlocked()
{
    m_IsSendingBlockedIsSet = false;
}
int64_t AccountBounceBlockDto::getBounceCount() const
{
    return m_BounceCount;
}

void AccountBounceBlockDto::setBounceCount(int64_t value)
{
    m_BounceCount = value;
    m_BounceCountIsSet = true;
}

bool AccountBounceBlockDto::bounceCountIsSet() const
{
    return m_BounceCountIsSet;
}

void AccountBounceBlockDto::unsetBounceCount()
{
    m_BounceCountIsSet = false;
}
int64_t AccountBounceBlockDto::getBounceCountToday() const
{
    return m_BounceCountToday;
}

void AccountBounceBlockDto::setBounceCountToday(int64_t value)
{
    m_BounceCountToday = value;
    m_BounceCountTodayIsSet = true;
}

bool AccountBounceBlockDto::bounceCountTodayIsSet() const
{
    return m_BounceCountTodayIsSet;
}

void AccountBounceBlockDto::unsetBounceCountToday()
{
    m_BounceCountTodayIsSet = false;
}
int64_t AccountBounceBlockDto::getMaximumDailyBounces() const
{
    return m_MaximumDailyBounces;
}

void AccountBounceBlockDto::setMaximumDailyBounces(int64_t value)
{
    m_MaximumDailyBounces = value;
    m_MaximumDailyBouncesIsSet = true;
}

bool AccountBounceBlockDto::maximumDailyBouncesIsSet() const
{
    return m_MaximumDailyBouncesIsSet;
}

void AccountBounceBlockDto::unsetMaximumDailyBounces()
{
    m_MaximumDailyBouncesIsSet = false;
}
int64_t AccountBounceBlockDto::getMaximumAccountBounces() const
{
    return m_MaximumAccountBounces;
}

void AccountBounceBlockDto::setMaximumAccountBounces(int64_t value)
{
    m_MaximumAccountBounces = value;
    m_MaximumAccountBouncesIsSet = true;
}

bool AccountBounceBlockDto::maximumAccountBouncesIsSet() const
{
    return m_MaximumAccountBouncesIsSet;
}

void AccountBounceBlockDto::unsetMaximumAccountBounces()
{
    m_MaximumAccountBouncesIsSet = false;
}
}
}
}
}


