/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ReputationItemProjection.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



ReputationItemProjection::ReputationItemProjection()
{
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_Recipient = utility::conversions::to_string_t("");
    m_RecipientIsSet = false;
    m_ReputationType = utility::conversions::to_string_t("");
    m_ReputationTypeIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Severity = utility::conversions::to_string_t("");
    m_SeverityIsSet = false;
    m_Source = utility::conversions::to_string_t("");
    m_SourceIsSet = false;
}

ReputationItemProjection::~ReputationItemProjection()
{
}

void ReputationItemProjection::validate()
{
    // TODO: implement validation
}

web::json::value ReputationItemProjection::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_RecipientIsSet)
    {
        val[utility::conversions::to_string_t(U("recipient"))] = ModelBase::toJson(m_Recipient);
    }
    if(m_ReputationTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("reputationType"))] = ModelBase::toJson(m_ReputationType);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_SeverityIsSet)
    {
        val[utility::conversions::to_string_t(U("severity"))] = ModelBase::toJson(m_Severity);
    }
    if(m_SourceIsSet)
    {
        val[utility::conversions::to_string_t(U("source"))] = ModelBase::toJson(m_Source);
    }

    return val;
}

bool ReputationItemProjection::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recipient"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recipient")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRecipient;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecipient);
            setRecipient(refVal_setRecipient);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reputationType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reputationType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setReputationType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReputationType);
            setReputationType(refVal_setReputationType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("severity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("severity")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSeverity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSeverity);
            setSeverity(refVal_setSeverity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("source"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("source")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSource;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSource);
            setSource(refVal_setSource);
        }
    }
    return ok;
}

void ReputationItemProjection::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
    if(m_RecipientIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recipient")), m_Recipient));
    }
    if(m_ReputationTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reputationType")), m_ReputationType));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_SeverityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("severity")), m_Severity));
    }
    if(m_SourceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("source")), m_Source));
    }
}

bool ReputationItemProjection::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recipient"))))
    {
        utility::string_t refVal_setRecipient;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recipient"))), refVal_setRecipient );
        setRecipient(refVal_setRecipient);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reputationType"))))
    {
        utility::string_t refVal_setReputationType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reputationType"))), refVal_setReputationType );
        setReputationType(refVal_setReputationType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("severity"))))
    {
        utility::string_t refVal_setSeverity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("severity"))), refVal_setSeverity );
        setSeverity(refVal_setSeverity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("source"))))
    {
        utility::string_t refVal_setSource;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("source"))), refVal_setSource );
        setSource(refVal_setSource);
    }
    return ok;
}

utility::datetime ReputationItemProjection::getCreatedAt() const
{
    return m_CreatedAt;
}

void ReputationItemProjection::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool ReputationItemProjection::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void ReputationItemProjection::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::string_t ReputationItemProjection::getRecipient() const
{
    return m_Recipient;
}

void ReputationItemProjection::setRecipient(const utility::string_t& value)
{
    m_Recipient = value;
    m_RecipientIsSet = true;
}

bool ReputationItemProjection::recipientIsSet() const
{
    return m_RecipientIsSet;
}

void ReputationItemProjection::unsetRecipient()
{
    m_RecipientIsSet = false;
}
utility::string_t ReputationItemProjection::getReputationType() const
{
    return m_ReputationType;
}

void ReputationItemProjection::setReputationType(const utility::string_t& value)
{
    m_ReputationType = value;
    m_ReputationTypeIsSet = true;
}

bool ReputationItemProjection::reputationTypeIsSet() const
{
    return m_ReputationTypeIsSet;
}

void ReputationItemProjection::unsetReputationType()
{
    m_ReputationTypeIsSet = false;
}
utility::string_t ReputationItemProjection::getId() const
{
    return m_Id;
}

void ReputationItemProjection::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool ReputationItemProjection::idIsSet() const
{
    return m_IdIsSet;
}

void ReputationItemProjection::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t ReputationItemProjection::getSeverity() const
{
    return m_Severity;
}

void ReputationItemProjection::setSeverity(const utility::string_t& value)
{
    m_Severity = value;
    m_SeverityIsSet = true;
}

bool ReputationItemProjection::severityIsSet() const
{
    return m_SeverityIsSet;
}

void ReputationItemProjection::unsetSeverity()
{
    m_SeverityIsSet = false;
}
utility::string_t ReputationItemProjection::getSource() const
{
    return m_Source;
}

void ReputationItemProjection::setSource(const utility::string_t& value)
{
    m_Source = value;
    m_SourceIsSet = true;
}

bool ReputationItemProjection::sourceIsSet() const
{
    return m_SourceIsSet;
}

void ReputationItemProjection::unsetSource()
{
    m_SourceIsSet = false;
}
}
}
}
}


