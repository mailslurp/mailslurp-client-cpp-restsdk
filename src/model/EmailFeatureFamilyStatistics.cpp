/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/EmailFeatureFamilyStatistics.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



EmailFeatureFamilyStatistics::EmailFeatureFamilyStatistics()
{
    m_Feature = utility::conversions::to_string_t("");
    m_FeatureIsSet = false;
    m_Family = utility::conversions::to_string_t("");
    m_FamilyIsSet = false;
    m_PlatformsIsSet = false;
}

EmailFeatureFamilyStatistics::~EmailFeatureFamilyStatistics()
{
}

void EmailFeatureFamilyStatistics::validate()
{
    // TODO: implement validation
}

web::json::value EmailFeatureFamilyStatistics::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FeatureIsSet)
    {
        val[utility::conversions::to_string_t(U("feature"))] = ModelBase::toJson(m_Feature);
    }
    if(m_FamilyIsSet)
    {
        val[utility::conversions::to_string_t(U("family"))] = ModelBase::toJson(m_Family);
    }
    if(m_PlatformsIsSet)
    {
        val[utility::conversions::to_string_t(U("platforms"))] = ModelBase::toJson(m_Platforms);
    }

    return val;
}

bool EmailFeatureFamilyStatistics::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("feature"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("feature")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFeature;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFeature);
            setFeature(refVal_setFeature);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("family"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("family")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFamily;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFamily);
            setFamily(refVal_setFamily);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("platforms"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("platforms")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<EmailFeaturePlatformStatistics>> refVal_setPlatforms;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlatforms);
            setPlatforms(refVal_setPlatforms);
        }
    }
    return ok;
}

void EmailFeatureFamilyStatistics::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_FeatureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("feature")), m_Feature));
    }
    if(m_FamilyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("family")), m_Family));
    }
    if(m_PlatformsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("platforms")), m_Platforms));
    }
}

bool EmailFeatureFamilyStatistics::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("feature"))))
    {
        utility::string_t refVal_setFeature;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("feature"))), refVal_setFeature );
        setFeature(refVal_setFeature);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("family"))))
    {
        utility::string_t refVal_setFamily;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("family"))), refVal_setFamily );
        setFamily(refVal_setFamily);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("platforms"))))
    {
        std::vector<std::shared_ptr<EmailFeaturePlatformStatistics>> refVal_setPlatforms;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("platforms"))), refVal_setPlatforms );
        setPlatforms(refVal_setPlatforms);
    }
    return ok;
}

utility::string_t EmailFeatureFamilyStatistics::getFeature() const
{
    return m_Feature;
}

void EmailFeatureFamilyStatistics::setFeature(const utility::string_t& value)
{
    m_Feature = value;
    m_FeatureIsSet = true;
}

bool EmailFeatureFamilyStatistics::featureIsSet() const
{
    return m_FeatureIsSet;
}

void EmailFeatureFamilyStatistics::unsetFeature()
{
    m_FeatureIsSet = false;
}
utility::string_t EmailFeatureFamilyStatistics::getFamily() const
{
    return m_Family;
}

void EmailFeatureFamilyStatistics::setFamily(const utility::string_t& value)
{
    m_Family = value;
    m_FamilyIsSet = true;
}

bool EmailFeatureFamilyStatistics::familyIsSet() const
{
    return m_FamilyIsSet;
}

void EmailFeatureFamilyStatistics::unsetFamily()
{
    m_FamilyIsSet = false;
}
std::vector<std::shared_ptr<EmailFeaturePlatformStatistics>>& EmailFeatureFamilyStatistics::getPlatforms()
{
    return m_Platforms;
}

void EmailFeatureFamilyStatistics::setPlatforms(const std::vector<std::shared_ptr<EmailFeaturePlatformStatistics>>& value)
{
    m_Platforms = value;
    m_PlatformsIsSet = true;
}

bool EmailFeatureFamilyStatistics::platformsIsSet() const
{
    return m_PlatformsIsSet;
}

void EmailFeatureFamilyStatistics::unsetPlatforms()
{
    m_PlatformsIsSet = false;
}
}
}
}
}


