/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SentEmailDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



SentEmailDto::SentEmailDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_InboxId = utility::conversions::to_string_t("");
    m_InboxIdIsSet = false;
    m_DomainId = utility::conversions::to_string_t("");
    m_DomainIdIsSet = false;
    m_ToIsSet = false;
    m_From = utility::conversions::to_string_t("");
    m_FromIsSet = false;
    m_ReplyTo = utility::conversions::to_string_t("");
    m_ReplyToIsSet = false;
    m_CcIsSet = false;
    m_BccIsSet = false;
    m_AttachmentsIsSet = false;
    m_Subject = utility::conversions::to_string_t("");
    m_SubjectIsSet = false;
    m_BodyMD5Hash = utility::conversions::to_string_t("");
    m_BodyMD5HashIsSet = false;
    m_Body = utility::conversions::to_string_t("");
    m_BodyIsSet = false;
    m_ToContactsIsSet = false;
    m_ToGroup = utility::conversions::to_string_t("");
    m_ToGroupIsSet = false;
    m_Charset = utility::conversions::to_string_t("");
    m_CharsetIsSet = false;
    m_IsHTML = false;
    m_IsHTMLIsSet = false;
    m_SentAt = utility::datetime();
    m_SentAtIsSet = false;
    m_PixelIdsIsSet = false;
    m_MessageId = utility::conversions::to_string_t("");
    m_MessageIdIsSet = false;
    m_MessageIdsIsSet = false;
    m_VirtualSend = false;
    m_VirtualSendIsSet = false;
    m_TemplateId = utility::conversions::to_string_t("");
    m_TemplateIdIsSet = false;
    m_TemplateVariablesIsSet = false;
    m_Html = false;
    m_HtmlIsSet = false;
}

SentEmailDto::~SentEmailDto()
{
}

void SentEmailDto::validate()
{
    // TODO: implement validation
}

web::json::value SentEmailDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t(U("userId"))] = ModelBase::toJson(m_UserId);
    }
    if(m_InboxIdIsSet)
    {
        val[utility::conversions::to_string_t(U("inboxId"))] = ModelBase::toJson(m_InboxId);
    }
    if(m_DomainIdIsSet)
    {
        val[utility::conversions::to_string_t(U("domainId"))] = ModelBase::toJson(m_DomainId);
    }
    if(m_ToIsSet)
    {
        val[utility::conversions::to_string_t(U("to"))] = ModelBase::toJson(m_To);
    }
    if(m_FromIsSet)
    {
        val[utility::conversions::to_string_t(U("from"))] = ModelBase::toJson(m_From);
    }
    if(m_ReplyToIsSet)
    {
        val[utility::conversions::to_string_t(U("replyTo"))] = ModelBase::toJson(m_ReplyTo);
    }
    if(m_CcIsSet)
    {
        val[utility::conversions::to_string_t(U("cc"))] = ModelBase::toJson(m_Cc);
    }
    if(m_BccIsSet)
    {
        val[utility::conversions::to_string_t(U("bcc"))] = ModelBase::toJson(m_Bcc);
    }
    if(m_AttachmentsIsSet)
    {
        val[utility::conversions::to_string_t(U("attachments"))] = ModelBase::toJson(m_Attachments);
    }
    if(m_SubjectIsSet)
    {
        val[utility::conversions::to_string_t(U("subject"))] = ModelBase::toJson(m_Subject);
    }
    if(m_BodyMD5HashIsSet)
    {
        val[utility::conversions::to_string_t(U("bodyMD5Hash"))] = ModelBase::toJson(m_BodyMD5Hash);
    }
    if(m_BodyIsSet)
    {
        val[utility::conversions::to_string_t(U("body"))] = ModelBase::toJson(m_Body);
    }
    if(m_ToContactsIsSet)
    {
        val[utility::conversions::to_string_t(U("toContacts"))] = ModelBase::toJson(m_ToContacts);
    }
    if(m_ToGroupIsSet)
    {
        val[utility::conversions::to_string_t(U("toGroup"))] = ModelBase::toJson(m_ToGroup);
    }
    if(m_CharsetIsSet)
    {
        val[utility::conversions::to_string_t(U("charset"))] = ModelBase::toJson(m_Charset);
    }
    if(m_IsHTMLIsSet)
    {
        val[utility::conversions::to_string_t(U("isHTML"))] = ModelBase::toJson(m_IsHTML);
    }
    if(m_SentAtIsSet)
    {
        val[utility::conversions::to_string_t(U("sentAt"))] = ModelBase::toJson(m_SentAt);
    }
    if(m_PixelIdsIsSet)
    {
        val[utility::conversions::to_string_t(U("pixelIds"))] = ModelBase::toJson(m_PixelIds);
    }
    if(m_MessageIdIsSet)
    {
        val[utility::conversions::to_string_t(U("messageId"))] = ModelBase::toJson(m_MessageId);
    }
    if(m_MessageIdsIsSet)
    {
        val[utility::conversions::to_string_t(U("messageIds"))] = ModelBase::toJson(m_MessageIds);
    }
    if(m_VirtualSendIsSet)
    {
        val[utility::conversions::to_string_t(U("virtualSend"))] = ModelBase::toJson(m_VirtualSend);
    }
    if(m_TemplateIdIsSet)
    {
        val[utility::conversions::to_string_t(U("templateId"))] = ModelBase::toJson(m_TemplateId);
    }
    if(m_TemplateVariablesIsSet)
    {
        val[utility::conversions::to_string_t(U("templateVariables"))] = ModelBase::toJson(m_TemplateVariables);
    }
    if(m_HtmlIsSet)
    {
        val[utility::conversions::to_string_t(U("html"))] = ModelBase::toJson(m_Html);
    }

    return val;
}

bool SentEmailDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("userId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("userId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserId);
            setUserId(refVal_setUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("inboxId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inboxId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInboxId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInboxId);
            setInboxId(refVal_setInboxId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("domainId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("domainId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDomainId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDomainId);
            setDomainId(refVal_setDomainId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("to"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("to")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTo);
            setTo(refVal_setTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("from"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("from")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFrom;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFrom);
            setFrom(refVal_setFrom);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("replyTo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("replyTo")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setReplyTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReplyTo);
            setReplyTo(refVal_setReplyTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cc")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setCc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCc);
            setCc(refVal_setCc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bcc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bcc")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setBcc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBcc);
            setBcc(refVal_setBcc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("attachments"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("attachments")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setAttachments;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAttachments);
            setAttachments(refVal_setAttachments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subject"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subject")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubject;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubject);
            setSubject(refVal_setSubject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bodyMD5Hash"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bodyMD5Hash")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBodyMD5Hash;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBodyMD5Hash);
            setBodyMD5Hash(refVal_setBodyMD5Hash);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("body"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("body")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBody;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBody);
            setBody(refVal_setBody);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("toContacts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("toContacts")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setToContacts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setToContacts);
            setToContacts(refVal_setToContacts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("toGroup"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("toGroup")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setToGroup;
            ok &= ModelBase::fromJson(fieldValue, refVal_setToGroup);
            setToGroup(refVal_setToGroup);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("charset"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("charset")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCharset;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCharset);
            setCharset(refVal_setCharset);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isHTML"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isHTML")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsHTML;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsHTML);
            setIsHTML(refVal_setIsHTML);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sentAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sentAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setSentAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSentAt);
            setSentAt(refVal_setSentAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pixelIds"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pixelIds")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setPixelIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPixelIds);
            setPixelIds(refVal_setPixelIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("messageId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("messageId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMessageId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessageId);
            setMessageId(refVal_setMessageId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("messageIds"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("messageIds")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setMessageIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessageIds);
            setMessageIds(refVal_setMessageIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("virtualSend"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("virtualSend")));
        if(!fieldValue.is_null())
        {
            bool refVal_setVirtualSend;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVirtualSend);
            setVirtualSend(refVal_setVirtualSend);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("templateId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("templateId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTemplateId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTemplateId);
            setTemplateId(refVal_setTemplateId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("templateVariables"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("templateVariables")));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<Object>> refVal_setTemplateVariables;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTemplateVariables);
            setTemplateVariables(refVal_setTemplateVariables);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("html"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("html")));
        if(!fieldValue.is_null())
        {
            bool refVal_setHtml;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHtml);
            setHtml(refVal_setHtml);
        }
    }
    return ok;
}

void SentEmailDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("userId")), m_UserId));
    }
    if(m_InboxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inboxId")), m_InboxId));
    }
    if(m_DomainIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("domainId")), m_DomainId));
    }
    if(m_ToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("to")), m_To));
    }
    if(m_FromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("from")), m_From));
    }
    if(m_ReplyToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("replyTo")), m_ReplyTo));
    }
    if(m_CcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cc")), m_Cc));
    }
    if(m_BccIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bcc")), m_Bcc));
    }
    if(m_AttachmentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("attachments")), m_Attachments));
    }
    if(m_SubjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subject")), m_Subject));
    }
    if(m_BodyMD5HashIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bodyMD5Hash")), m_BodyMD5Hash));
    }
    if(m_BodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("body")), m_Body));
    }
    if(m_ToContactsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("toContacts")), m_ToContacts));
    }
    if(m_ToGroupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("toGroup")), m_ToGroup));
    }
    if(m_CharsetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("charset")), m_Charset));
    }
    if(m_IsHTMLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isHTML")), m_IsHTML));
    }
    if(m_SentAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sentAt")), m_SentAt));
    }
    if(m_PixelIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pixelIds")), m_PixelIds));
    }
    if(m_MessageIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("messageId")), m_MessageId));
    }
    if(m_MessageIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("messageIds")), m_MessageIds));
    }
    if(m_VirtualSendIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("virtualSend")), m_VirtualSend));
    }
    if(m_TemplateIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("templateId")), m_TemplateId));
    }
    if(m_TemplateVariablesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("templateVariables")), m_TemplateVariables));
    }
    if(m_HtmlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("html")), m_Html));
    }
}

bool SentEmailDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("userId"))))
    {
        utility::string_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("userId"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("inboxId"))))
    {
        utility::string_t refVal_setInboxId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inboxId"))), refVal_setInboxId );
        setInboxId(refVal_setInboxId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("domainId"))))
    {
        utility::string_t refVal_setDomainId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("domainId"))), refVal_setDomainId );
        setDomainId(refVal_setDomainId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("to"))))
    {
        std::vector<utility::string_t> refVal_setTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("to"))), refVal_setTo );
        setTo(refVal_setTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("from"))))
    {
        utility::string_t refVal_setFrom;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("from"))), refVal_setFrom );
        setFrom(refVal_setFrom);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("replyTo"))))
    {
        utility::string_t refVal_setReplyTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("replyTo"))), refVal_setReplyTo );
        setReplyTo(refVal_setReplyTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cc"))))
    {
        std::vector<utility::string_t> refVal_setCc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cc"))), refVal_setCc );
        setCc(refVal_setCc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bcc"))))
    {
        std::vector<utility::string_t> refVal_setBcc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bcc"))), refVal_setBcc );
        setBcc(refVal_setBcc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("attachments"))))
    {
        std::vector<utility::string_t> refVal_setAttachments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("attachments"))), refVal_setAttachments );
        setAttachments(refVal_setAttachments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subject"))))
    {
        utility::string_t refVal_setSubject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subject"))), refVal_setSubject );
        setSubject(refVal_setSubject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bodyMD5Hash"))))
    {
        utility::string_t refVal_setBodyMD5Hash;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bodyMD5Hash"))), refVal_setBodyMD5Hash );
        setBodyMD5Hash(refVal_setBodyMD5Hash);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("body"))))
    {
        utility::string_t refVal_setBody;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("body"))), refVal_setBody );
        setBody(refVal_setBody);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("toContacts"))))
    {
        std::vector<utility::string_t> refVal_setToContacts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("toContacts"))), refVal_setToContacts );
        setToContacts(refVal_setToContacts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("toGroup"))))
    {
        utility::string_t refVal_setToGroup;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("toGroup"))), refVal_setToGroup );
        setToGroup(refVal_setToGroup);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("charset"))))
    {
        utility::string_t refVal_setCharset;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("charset"))), refVal_setCharset );
        setCharset(refVal_setCharset);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isHTML"))))
    {
        bool refVal_setIsHTML;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isHTML"))), refVal_setIsHTML );
        setIsHTML(refVal_setIsHTML);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sentAt"))))
    {
        utility::datetime refVal_setSentAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sentAt"))), refVal_setSentAt );
        setSentAt(refVal_setSentAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pixelIds"))))
    {
        std::vector<utility::string_t> refVal_setPixelIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pixelIds"))), refVal_setPixelIds );
        setPixelIds(refVal_setPixelIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("messageId"))))
    {
        utility::string_t refVal_setMessageId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("messageId"))), refVal_setMessageId );
        setMessageId(refVal_setMessageId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("messageIds"))))
    {
        std::vector<utility::string_t> refVal_setMessageIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("messageIds"))), refVal_setMessageIds );
        setMessageIds(refVal_setMessageIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("virtualSend"))))
    {
        bool refVal_setVirtualSend;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("virtualSend"))), refVal_setVirtualSend );
        setVirtualSend(refVal_setVirtualSend);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("templateId"))))
    {
        utility::string_t refVal_setTemplateId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("templateId"))), refVal_setTemplateId );
        setTemplateId(refVal_setTemplateId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("templateVariables"))))
    {
        std::map<utility::string_t, std::shared_ptr<Object>> refVal_setTemplateVariables;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("templateVariables"))), refVal_setTemplateVariables );
        setTemplateVariables(refVal_setTemplateVariables);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("html"))))
    {
        bool refVal_setHtml;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("html"))), refVal_setHtml );
        setHtml(refVal_setHtml);
    }
    return ok;
}

utility::string_t SentEmailDto::getId() const
{
    return m_Id;
}

void SentEmailDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool SentEmailDto::idIsSet() const
{
    return m_IdIsSet;
}

void SentEmailDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t SentEmailDto::getUserId() const
{
    return m_UserId;
}

void SentEmailDto::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool SentEmailDto::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void SentEmailDto::unsetUserId()
{
    m_UserIdIsSet = false;
}
utility::string_t SentEmailDto::getInboxId() const
{
    return m_InboxId;
}

void SentEmailDto::setInboxId(const utility::string_t& value)
{
    m_InboxId = value;
    m_InboxIdIsSet = true;
}

bool SentEmailDto::inboxIdIsSet() const
{
    return m_InboxIdIsSet;
}

void SentEmailDto::unsetInboxId()
{
    m_InboxIdIsSet = false;
}
utility::string_t SentEmailDto::getDomainId() const
{
    return m_DomainId;
}

void SentEmailDto::setDomainId(const utility::string_t& value)
{
    m_DomainId = value;
    m_DomainIdIsSet = true;
}

bool SentEmailDto::domainIdIsSet() const
{
    return m_DomainIdIsSet;
}

void SentEmailDto::unsetDomainId()
{
    m_DomainIdIsSet = false;
}
std::vector<utility::string_t>& SentEmailDto::getTo()
{
    return m_To;
}

void SentEmailDto::setTo(const std::vector<utility::string_t>& value)
{
    m_To = value;
    m_ToIsSet = true;
}

bool SentEmailDto::toIsSet() const
{
    return m_ToIsSet;
}

void SentEmailDto::unsetTo()
{
    m_ToIsSet = false;
}
utility::string_t SentEmailDto::getFrom() const
{
    return m_From;
}

void SentEmailDto::setFrom(const utility::string_t& value)
{
    m_From = value;
    m_FromIsSet = true;
}

bool SentEmailDto::fromIsSet() const
{
    return m_FromIsSet;
}

void SentEmailDto::unsetFrom()
{
    m_FromIsSet = false;
}
utility::string_t SentEmailDto::getReplyTo() const
{
    return m_ReplyTo;
}

void SentEmailDto::setReplyTo(const utility::string_t& value)
{
    m_ReplyTo = value;
    m_ReplyToIsSet = true;
}

bool SentEmailDto::replyToIsSet() const
{
    return m_ReplyToIsSet;
}

void SentEmailDto::unsetReplyTo()
{
    m_ReplyToIsSet = false;
}
std::vector<utility::string_t>& SentEmailDto::getCc()
{
    return m_Cc;
}

void SentEmailDto::setCc(const std::vector<utility::string_t>& value)
{
    m_Cc = value;
    m_CcIsSet = true;
}

bool SentEmailDto::ccIsSet() const
{
    return m_CcIsSet;
}

void SentEmailDto::unsetCc()
{
    m_CcIsSet = false;
}
std::vector<utility::string_t>& SentEmailDto::getBcc()
{
    return m_Bcc;
}

void SentEmailDto::setBcc(const std::vector<utility::string_t>& value)
{
    m_Bcc = value;
    m_BccIsSet = true;
}

bool SentEmailDto::bccIsSet() const
{
    return m_BccIsSet;
}

void SentEmailDto::unsetBcc()
{
    m_BccIsSet = false;
}
std::vector<utility::string_t>& SentEmailDto::getAttachments()
{
    return m_Attachments;
}

void SentEmailDto::setAttachments(const std::vector<utility::string_t>& value)
{
    m_Attachments = value;
    m_AttachmentsIsSet = true;
}

bool SentEmailDto::attachmentsIsSet() const
{
    return m_AttachmentsIsSet;
}

void SentEmailDto::unsetAttachments()
{
    m_AttachmentsIsSet = false;
}
utility::string_t SentEmailDto::getSubject() const
{
    return m_Subject;
}

void SentEmailDto::setSubject(const utility::string_t& value)
{
    m_Subject = value;
    m_SubjectIsSet = true;
}

bool SentEmailDto::subjectIsSet() const
{
    return m_SubjectIsSet;
}

void SentEmailDto::unsetSubject()
{
    m_SubjectIsSet = false;
}
utility::string_t SentEmailDto::getBodyMD5Hash() const
{
    return m_BodyMD5Hash;
}

void SentEmailDto::setBodyMD5Hash(const utility::string_t& value)
{
    m_BodyMD5Hash = value;
    m_BodyMD5HashIsSet = true;
}

bool SentEmailDto::bodyMD5HashIsSet() const
{
    return m_BodyMD5HashIsSet;
}

void SentEmailDto::unsetBodyMD5Hash()
{
    m_BodyMD5HashIsSet = false;
}
utility::string_t SentEmailDto::getBody() const
{
    return m_Body;
}

void SentEmailDto::setBody(const utility::string_t& value)
{
    m_Body = value;
    m_BodyIsSet = true;
}

bool SentEmailDto::bodyIsSet() const
{
    return m_BodyIsSet;
}

void SentEmailDto::unsetBody()
{
    m_BodyIsSet = false;
}
std::vector<utility::string_t>& SentEmailDto::getToContacts()
{
    return m_ToContacts;
}

void SentEmailDto::setToContacts(const std::vector<utility::string_t>& value)
{
    m_ToContacts = value;
    m_ToContactsIsSet = true;
}

bool SentEmailDto::toContactsIsSet() const
{
    return m_ToContactsIsSet;
}

void SentEmailDto::unsetToContacts()
{
    m_ToContactsIsSet = false;
}
utility::string_t SentEmailDto::getToGroup() const
{
    return m_ToGroup;
}

void SentEmailDto::setToGroup(const utility::string_t& value)
{
    m_ToGroup = value;
    m_ToGroupIsSet = true;
}

bool SentEmailDto::toGroupIsSet() const
{
    return m_ToGroupIsSet;
}

void SentEmailDto::unsetToGroup()
{
    m_ToGroupIsSet = false;
}
utility::string_t SentEmailDto::getCharset() const
{
    return m_Charset;
}

void SentEmailDto::setCharset(const utility::string_t& value)
{
    m_Charset = value;
    m_CharsetIsSet = true;
}

bool SentEmailDto::charsetIsSet() const
{
    return m_CharsetIsSet;
}

void SentEmailDto::unsetCharset()
{
    m_CharsetIsSet = false;
}
bool SentEmailDto::isIsHTML() const
{
    return m_IsHTML;
}

void SentEmailDto::setIsHTML(bool value)
{
    m_IsHTML = value;
    m_IsHTMLIsSet = true;
}

bool SentEmailDto::isHTMLIsSet() const
{
    return m_IsHTMLIsSet;
}

void SentEmailDto::unsetIsHTML()
{
    m_IsHTMLIsSet = false;
}
utility::datetime SentEmailDto::getSentAt() const
{
    return m_SentAt;
}

void SentEmailDto::setSentAt(const utility::datetime& value)
{
    m_SentAt = value;
    m_SentAtIsSet = true;
}

bool SentEmailDto::sentAtIsSet() const
{
    return m_SentAtIsSet;
}

void SentEmailDto::unsetSentAt()
{
    m_SentAtIsSet = false;
}
std::vector<utility::string_t>& SentEmailDto::getPixelIds()
{
    return m_PixelIds;
}

void SentEmailDto::setPixelIds(const std::vector<utility::string_t>& value)
{
    m_PixelIds = value;
    m_PixelIdsIsSet = true;
}

bool SentEmailDto::pixelIdsIsSet() const
{
    return m_PixelIdsIsSet;
}

void SentEmailDto::unsetPixelIds()
{
    m_PixelIdsIsSet = false;
}
utility::string_t SentEmailDto::getMessageId() const
{
    return m_MessageId;
}

void SentEmailDto::setMessageId(const utility::string_t& value)
{
    m_MessageId = value;
    m_MessageIdIsSet = true;
}

bool SentEmailDto::messageIdIsSet() const
{
    return m_MessageIdIsSet;
}

void SentEmailDto::unsetMessageId()
{
    m_MessageIdIsSet = false;
}
std::vector<utility::string_t>& SentEmailDto::getMessageIds()
{
    return m_MessageIds;
}

void SentEmailDto::setMessageIds(const std::vector<utility::string_t>& value)
{
    m_MessageIds = value;
    m_MessageIdsIsSet = true;
}

bool SentEmailDto::messageIdsIsSet() const
{
    return m_MessageIdsIsSet;
}

void SentEmailDto::unsetMessageIds()
{
    m_MessageIdsIsSet = false;
}
bool SentEmailDto::isVirtualSend() const
{
    return m_VirtualSend;
}

void SentEmailDto::setVirtualSend(bool value)
{
    m_VirtualSend = value;
    m_VirtualSendIsSet = true;
}

bool SentEmailDto::virtualSendIsSet() const
{
    return m_VirtualSendIsSet;
}

void SentEmailDto::unsetVirtualSend()
{
    m_VirtualSendIsSet = false;
}
utility::string_t SentEmailDto::getTemplateId() const
{
    return m_TemplateId;
}

void SentEmailDto::setTemplateId(const utility::string_t& value)
{
    m_TemplateId = value;
    m_TemplateIdIsSet = true;
}

bool SentEmailDto::templateIdIsSet() const
{
    return m_TemplateIdIsSet;
}

void SentEmailDto::unsetTemplateId()
{
    m_TemplateIdIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<Object>>& SentEmailDto::getTemplateVariables()
{
    return m_TemplateVariables;
}

void SentEmailDto::setTemplateVariables(const std::map<utility::string_t, std::shared_ptr<Object>>& value)
{
    m_TemplateVariables = value;
    m_TemplateVariablesIsSet = true;
}

bool SentEmailDto::templateVariablesIsSet() const
{
    return m_TemplateVariablesIsSet;
}

void SentEmailDto::unsetTemplateVariables()
{
    m_TemplateVariablesIsSet = false;
}
bool SentEmailDto::isHtml() const
{
    return m_Html;
}

void SentEmailDto::setHtml(bool value)
{
    m_Html = value;
    m_HtmlIsSet = true;
}

bool SentEmailDto::htmlIsSet() const
{
    return m_HtmlIsSet;
}

void SentEmailDto::unsetHtml()
{
    m_HtmlIsSet = false;
}
}
}
}
}


