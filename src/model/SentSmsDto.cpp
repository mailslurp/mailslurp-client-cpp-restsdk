/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SentSmsDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



SentSmsDto::SentSmsDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_PhoneNumber = utility::conversions::to_string_t("");
    m_PhoneNumberIsSet = false;
    m_FromNumber = utility::conversions::to_string_t("");
    m_FromNumberIsSet = false;
    m_ToNumber = utility::conversions::to_string_t("");
    m_ToNumberIsSet = false;
    m_Body = utility::conversions::to_string_t("");
    m_BodyIsSet = false;
    m_Sid = utility::conversions::to_string_t("");
    m_SidIsSet = false;
    m_ReplyToSid = utility::conversions::to_string_t("");
    m_ReplyToSidIsSet = false;
    m_ReplyToId = utility::conversions::to_string_t("");
    m_ReplyToIdIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_UpdatedAt = utility::datetime();
    m_UpdatedAtIsSet = false;
}

SentSmsDto::~SentSmsDto()
{
}

void SentSmsDto::validate()
{
    // TODO: implement validation
}

web::json::value SentSmsDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t(U("userId"))] = ModelBase::toJson(m_UserId);
    }
    if(m_PhoneNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("phoneNumber"))] = ModelBase::toJson(m_PhoneNumber);
    }
    if(m_FromNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("fromNumber"))] = ModelBase::toJson(m_FromNumber);
    }
    if(m_ToNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("toNumber"))] = ModelBase::toJson(m_ToNumber);
    }
    if(m_BodyIsSet)
    {
        val[utility::conversions::to_string_t(U("body"))] = ModelBase::toJson(m_Body);
    }
    if(m_SidIsSet)
    {
        val[utility::conversions::to_string_t(U("sid"))] = ModelBase::toJson(m_Sid);
    }
    if(m_ReplyToSidIsSet)
    {
        val[utility::conversions::to_string_t(U("replyToSid"))] = ModelBase::toJson(m_ReplyToSid);
    }
    if(m_ReplyToIdIsSet)
    {
        val[utility::conversions::to_string_t(U("replyToId"))] = ModelBase::toJson(m_ReplyToId);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_UpdatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("updatedAt"))] = ModelBase::toJson(m_UpdatedAt);
    }

    return val;
}

bool SentSmsDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("userId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("userId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserId);
            setUserId(refVal_setUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("phoneNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("phoneNumber")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPhoneNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPhoneNumber);
            setPhoneNumber(refVal_setPhoneNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fromNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fromNumber")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFromNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFromNumber);
            setFromNumber(refVal_setFromNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("toNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("toNumber")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setToNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setToNumber);
            setToNumber(refVal_setToNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("body"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("body")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBody;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBody);
            setBody(refVal_setBody);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sid")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSid);
            setSid(refVal_setSid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("replyToSid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("replyToSid")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setReplyToSid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReplyToSid);
            setReplyToSid(refVal_setReplyToSid);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("replyToId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("replyToId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setReplyToId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReplyToId);
            setReplyToId(refVal_setReplyToId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updatedAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updatedAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setUpdatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedAt);
            setUpdatedAt(refVal_setUpdatedAt);
        }
    }
    return ok;
}

void SentSmsDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("userId")), m_UserId));
    }
    if(m_PhoneNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("phoneNumber")), m_PhoneNumber));
    }
    if(m_FromNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fromNumber")), m_FromNumber));
    }
    if(m_ToNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("toNumber")), m_ToNumber));
    }
    if(m_BodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("body")), m_Body));
    }
    if(m_SidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sid")), m_Sid));
    }
    if(m_ReplyToSidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("replyToSid")), m_ReplyToSid));
    }
    if(m_ReplyToIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("replyToId")), m_ReplyToId));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updatedAt")), m_UpdatedAt));
    }
}

bool SentSmsDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("userId"))))
    {
        utility::string_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("userId"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("phoneNumber"))))
    {
        utility::string_t refVal_setPhoneNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("phoneNumber"))), refVal_setPhoneNumber );
        setPhoneNumber(refVal_setPhoneNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fromNumber"))))
    {
        utility::string_t refVal_setFromNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fromNumber"))), refVal_setFromNumber );
        setFromNumber(refVal_setFromNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("toNumber"))))
    {
        utility::string_t refVal_setToNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("toNumber"))), refVal_setToNumber );
        setToNumber(refVal_setToNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("body"))))
    {
        utility::string_t refVal_setBody;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("body"))), refVal_setBody );
        setBody(refVal_setBody);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sid"))))
    {
        utility::string_t refVal_setSid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sid"))), refVal_setSid );
        setSid(refVal_setSid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("replyToSid"))))
    {
        utility::string_t refVal_setReplyToSid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("replyToSid"))), refVal_setReplyToSid );
        setReplyToSid(refVal_setReplyToSid);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("replyToId"))))
    {
        utility::string_t refVal_setReplyToId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("replyToId"))), refVal_setReplyToId );
        setReplyToId(refVal_setReplyToId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updatedAt"))))
    {
        utility::datetime refVal_setUpdatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updatedAt"))), refVal_setUpdatedAt );
        setUpdatedAt(refVal_setUpdatedAt);
    }
    return ok;
}

utility::string_t SentSmsDto::getId() const
{
    return m_Id;
}

void SentSmsDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool SentSmsDto::idIsSet() const
{
    return m_IdIsSet;
}

void SentSmsDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t SentSmsDto::getUserId() const
{
    return m_UserId;
}

void SentSmsDto::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool SentSmsDto::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void SentSmsDto::unsetUserId()
{
    m_UserIdIsSet = false;
}
utility::string_t SentSmsDto::getPhoneNumber() const
{
    return m_PhoneNumber;
}

void SentSmsDto::setPhoneNumber(const utility::string_t& value)
{
    m_PhoneNumber = value;
    m_PhoneNumberIsSet = true;
}

bool SentSmsDto::phoneNumberIsSet() const
{
    return m_PhoneNumberIsSet;
}

void SentSmsDto::unsetPhoneNumber()
{
    m_PhoneNumberIsSet = false;
}
utility::string_t SentSmsDto::getFromNumber() const
{
    return m_FromNumber;
}

void SentSmsDto::setFromNumber(const utility::string_t& value)
{
    m_FromNumber = value;
    m_FromNumberIsSet = true;
}

bool SentSmsDto::fromNumberIsSet() const
{
    return m_FromNumberIsSet;
}

void SentSmsDto::unsetFromNumber()
{
    m_FromNumberIsSet = false;
}
utility::string_t SentSmsDto::getToNumber() const
{
    return m_ToNumber;
}

void SentSmsDto::setToNumber(const utility::string_t& value)
{
    m_ToNumber = value;
    m_ToNumberIsSet = true;
}

bool SentSmsDto::toNumberIsSet() const
{
    return m_ToNumberIsSet;
}

void SentSmsDto::unsetToNumber()
{
    m_ToNumberIsSet = false;
}
utility::string_t SentSmsDto::getBody() const
{
    return m_Body;
}

void SentSmsDto::setBody(const utility::string_t& value)
{
    m_Body = value;
    m_BodyIsSet = true;
}

bool SentSmsDto::bodyIsSet() const
{
    return m_BodyIsSet;
}

void SentSmsDto::unsetBody()
{
    m_BodyIsSet = false;
}
utility::string_t SentSmsDto::getSid() const
{
    return m_Sid;
}

void SentSmsDto::setSid(const utility::string_t& value)
{
    m_Sid = value;
    m_SidIsSet = true;
}

bool SentSmsDto::sidIsSet() const
{
    return m_SidIsSet;
}

void SentSmsDto::unsetSid()
{
    m_SidIsSet = false;
}
utility::string_t SentSmsDto::getReplyToSid() const
{
    return m_ReplyToSid;
}

void SentSmsDto::setReplyToSid(const utility::string_t& value)
{
    m_ReplyToSid = value;
    m_ReplyToSidIsSet = true;
}

bool SentSmsDto::replyToSidIsSet() const
{
    return m_ReplyToSidIsSet;
}

void SentSmsDto::unsetReplyToSid()
{
    m_ReplyToSidIsSet = false;
}
utility::string_t SentSmsDto::getReplyToId() const
{
    return m_ReplyToId;
}

void SentSmsDto::setReplyToId(const utility::string_t& value)
{
    m_ReplyToId = value;
    m_ReplyToIdIsSet = true;
}

bool SentSmsDto::replyToIdIsSet() const
{
    return m_ReplyToIdIsSet;
}

void SentSmsDto::unsetReplyToId()
{
    m_ReplyToIdIsSet = false;
}
utility::datetime SentSmsDto::getCreatedAt() const
{
    return m_CreatedAt;
}

void SentSmsDto::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool SentSmsDto::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void SentSmsDto::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::datetime SentSmsDto::getUpdatedAt() const
{
    return m_UpdatedAt;
}

void SentSmsDto::setUpdatedAt(const utility::datetime& value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}

bool SentSmsDto::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void SentSmsDto::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
}
}
}
}


