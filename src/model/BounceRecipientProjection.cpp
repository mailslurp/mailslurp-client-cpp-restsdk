/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/BounceRecipientProjection.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



BounceRecipientProjection::BounceRecipientProjection()
{
    m_SentEmailId = utility::conversions::to_string_t("");
    m_SentEmailIdIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_Recipient = utility::conversions::to_string_t("");
    m_RecipientIsSet = false;
    m_Action = utility::conversions::to_string_t("");
    m_ActionIsSet = false;
    m_BounceType = utility::conversions::to_string_t("");
    m_BounceTypeIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
}

BounceRecipientProjection::~BounceRecipientProjection()
{
}

void BounceRecipientProjection::validate()
{
    // TODO: implement validation
}

web::json::value BounceRecipientProjection::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SentEmailIdIsSet)
    {
        val[utility::conversions::to_string_t(U("sentEmailId"))] = ModelBase::toJson(m_SentEmailId);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_RecipientIsSet)
    {
        val[utility::conversions::to_string_t(U("recipient"))] = ModelBase::toJson(m_Recipient);
    }
    if(m_ActionIsSet)
    {
        val[utility::conversions::to_string_t(U("action"))] = ModelBase::toJson(m_Action);
    }
    if(m_BounceTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("bounceType"))] = ModelBase::toJson(m_BounceType);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }

    return val;
}

bool BounceRecipientProjection::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("sentEmailId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sentEmailId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSentEmailId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSentEmailId);
            setSentEmailId(refVal_setSentEmailId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recipient"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recipient")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRecipient;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecipient);
            setRecipient(refVal_setRecipient);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("action"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("action")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAction;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAction);
            setAction(refVal_setAction);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bounceType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bounceType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBounceType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBounceType);
            setBounceType(refVal_setBounceType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    return ok;
}

void BounceRecipientProjection::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SentEmailIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sentEmailId")), m_SentEmailId));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
    if(m_RecipientIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recipient")), m_Recipient));
    }
    if(m_ActionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("action")), m_Action));
    }
    if(m_BounceTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bounceType")), m_BounceType));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
}

bool BounceRecipientProjection::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("sentEmailId"))))
    {
        utility::string_t refVal_setSentEmailId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sentEmailId"))), refVal_setSentEmailId );
        setSentEmailId(refVal_setSentEmailId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recipient"))))
    {
        utility::string_t refVal_setRecipient;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recipient"))), refVal_setRecipient );
        setRecipient(refVal_setRecipient);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("action"))))
    {
        utility::string_t refVal_setAction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("action"))), refVal_setAction );
        setAction(refVal_setAction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bounceType"))))
    {
        utility::string_t refVal_setBounceType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bounceType"))), refVal_setBounceType );
        setBounceType(refVal_setBounceType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    return ok;
}

utility::string_t BounceRecipientProjection::getSentEmailId() const
{
    return m_SentEmailId;
}

void BounceRecipientProjection::setSentEmailId(const utility::string_t& value)
{
    m_SentEmailId = value;
    m_SentEmailIdIsSet = true;
}

bool BounceRecipientProjection::sentEmailIdIsSet() const
{
    return m_SentEmailIdIsSet;
}

void BounceRecipientProjection::unsetSentEmailId()
{
    m_SentEmailIdIsSet = false;
}
utility::datetime BounceRecipientProjection::getCreatedAt() const
{
    return m_CreatedAt;
}

void BounceRecipientProjection::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool BounceRecipientProjection::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void BounceRecipientProjection::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::string_t BounceRecipientProjection::getRecipient() const
{
    return m_Recipient;
}

void BounceRecipientProjection::setRecipient(const utility::string_t& value)
{
    m_Recipient = value;
    m_RecipientIsSet = true;
}

bool BounceRecipientProjection::recipientIsSet() const
{
    return m_RecipientIsSet;
}

void BounceRecipientProjection::unsetRecipient()
{
    m_RecipientIsSet = false;
}
utility::string_t BounceRecipientProjection::getAction() const
{
    return m_Action;
}

void BounceRecipientProjection::setAction(const utility::string_t& value)
{
    m_Action = value;
    m_ActionIsSet = true;
}

bool BounceRecipientProjection::actionIsSet() const
{
    return m_ActionIsSet;
}

void BounceRecipientProjection::unsetAction()
{
    m_ActionIsSet = false;
}
utility::string_t BounceRecipientProjection::getBounceType() const
{
    return m_BounceType;
}

void BounceRecipientProjection::setBounceType(const utility::string_t& value)
{
    m_BounceType = value;
    m_BounceTypeIsSet = true;
}

bool BounceRecipientProjection::bounceTypeIsSet() const
{
    return m_BounceTypeIsSet;
}

void BounceRecipientProjection::unsetBounceType()
{
    m_BounceTypeIsSet = false;
}
utility::string_t BounceRecipientProjection::getId() const
{
    return m_Id;
}

void BounceRecipientProjection::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BounceRecipientProjection::idIsSet() const
{
    return m_IdIsSet;
}

void BounceRecipientProjection::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t BounceRecipientProjection::getStatus() const
{
    return m_Status;
}

void BounceRecipientProjection::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool BounceRecipientProjection::statusIsSet() const
{
    return m_StatusIsSet;
}

void BounceRecipientProjection::unsetStatus()
{
    m_StatusIsSet = false;
}
}
}
}
}


