/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SendEmailBodyPart.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



SendEmailBodyPart::SendEmailBodyPart()
{
    m_ContentType = utility::conversions::to_string_t("");
    m_ContentTypeIsSet = false;
    m_ContentBody = utility::conversions::to_string_t("");
    m_ContentBodyIsSet = false;
}

SendEmailBodyPart::~SendEmailBodyPart()
{
}

void SendEmailBodyPart::validate()
{
    // TODO: implement validation
}

web::json::value SendEmailBodyPart::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ContentTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("contentType"))] = ModelBase::toJson(m_ContentType);
    }
    if(m_ContentBodyIsSet)
    {
        val[utility::conversions::to_string_t(U("contentBody"))] = ModelBase::toJson(m_ContentBody);
    }

    return val;
}

bool SendEmailBodyPart::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("contentType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("contentType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setContentType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContentType);
            setContentType(refVal_setContentType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("contentBody"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("contentBody")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setContentBody;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContentBody);
            setContentBody(refVal_setContentBody);
        }
    }
    return ok;
}

void SendEmailBodyPart::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ContentTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("contentType")), m_ContentType));
    }
    if(m_ContentBodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("contentBody")), m_ContentBody));
    }
}

bool SendEmailBodyPart::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("contentType"))))
    {
        utility::string_t refVal_setContentType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("contentType"))), refVal_setContentType );
        setContentType(refVal_setContentType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("contentBody"))))
    {
        utility::string_t refVal_setContentBody;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("contentBody"))), refVal_setContentBody );
        setContentBody(refVal_setContentBody);
    }
    return ok;
}

utility::string_t SendEmailBodyPart::getContentType() const
{
    return m_ContentType;
}

void SendEmailBodyPart::setContentType(const utility::string_t& value)
{
    m_ContentType = value;
    m_ContentTypeIsSet = true;
}

bool SendEmailBodyPart::contentTypeIsSet() const
{
    return m_ContentTypeIsSet;
}

void SendEmailBodyPart::unsetContentType()
{
    m_ContentTypeIsSet = false;
}
utility::string_t SendEmailBodyPart::getContentBody() const
{
    return m_ContentBody;
}

void SendEmailBodyPart::setContentBody(const utility::string_t& value)
{
    m_ContentBody = value;
    m_ContentBodyIsSet = true;
}

bool SendEmailBodyPart::contentBodyIsSet() const
{
    return m_ContentBodyIsSet;
}

void SendEmailBodyPart::unsetContentBody()
{
    m_ContentBodyIsSet = false;
}
}
}
}
}


