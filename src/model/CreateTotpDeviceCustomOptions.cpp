/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateTotpDeviceCustomOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



CreateTotpDeviceCustomOptions::CreateTotpDeviceCustomOptions()
{
    m_Secret = utility::conversions::to_string_t("");
    m_SecretIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Username = utility::conversions::to_string_t("");
    m_UsernameIsSet = false;
    m_Issuer = utility::conversions::to_string_t("");
    m_IssuerIsSet = false;
    m_Digits = 0;
    m_DigitsIsSet = false;
    m_Period = 0;
    m_PeriodIsSet = false;
    m_Algorithm = utility::conversions::to_string_t("");
    m_AlgorithmIsSet = false;
}

CreateTotpDeviceCustomOptions::~CreateTotpDeviceCustomOptions()
{
}

void CreateTotpDeviceCustomOptions::validate()
{
    // TODO: implement validation
}

web::json::value CreateTotpDeviceCustomOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SecretIsSet)
    {
        val[utility::conversions::to_string_t(U("secret"))] = ModelBase::toJson(m_Secret);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_UsernameIsSet)
    {
        val[utility::conversions::to_string_t(U("username"))] = ModelBase::toJson(m_Username);
    }
    if(m_IssuerIsSet)
    {
        val[utility::conversions::to_string_t(U("issuer"))] = ModelBase::toJson(m_Issuer);
    }
    if(m_DigitsIsSet)
    {
        val[utility::conversions::to_string_t(U("digits"))] = ModelBase::toJson(m_Digits);
    }
    if(m_PeriodIsSet)
    {
        val[utility::conversions::to_string_t(U("period"))] = ModelBase::toJson(m_Period);
    }
    if(m_AlgorithmIsSet)
    {
        val[utility::conversions::to_string_t(U("algorithm"))] = ModelBase::toJson(m_Algorithm);
    }

    return val;
}

bool CreateTotpDeviceCustomOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("secret"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("secret")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSecret;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSecret);
            setSecret(refVal_setSecret);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("username"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("username")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUsername;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUsername);
            setUsername(refVal_setUsername);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("issuer"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("issuer")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIssuer;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIssuer);
            setIssuer(refVal_setIssuer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("digits"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("digits")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDigits;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDigits);
            setDigits(refVal_setDigits);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("period"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("period")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPeriod;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPeriod);
            setPeriod(refVal_setPeriod);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("algorithm"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("algorithm")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAlgorithm;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAlgorithm);
            setAlgorithm(refVal_setAlgorithm);
        }
    }
    return ok;
}

void CreateTotpDeviceCustomOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SecretIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("secret")), m_Secret));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_UsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("username")), m_Username));
    }
    if(m_IssuerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("issuer")), m_Issuer));
    }
    if(m_DigitsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("digits")), m_Digits));
    }
    if(m_PeriodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("period")), m_Period));
    }
    if(m_AlgorithmIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("algorithm")), m_Algorithm));
    }
}

bool CreateTotpDeviceCustomOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("secret"))))
    {
        utility::string_t refVal_setSecret;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("secret"))), refVal_setSecret );
        setSecret(refVal_setSecret);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("username"))))
    {
        utility::string_t refVal_setUsername;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("username"))), refVal_setUsername );
        setUsername(refVal_setUsername);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("issuer"))))
    {
        utility::string_t refVal_setIssuer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("issuer"))), refVal_setIssuer );
        setIssuer(refVal_setIssuer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("digits"))))
    {
        int32_t refVal_setDigits;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("digits"))), refVal_setDigits );
        setDigits(refVal_setDigits);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("period"))))
    {
        int32_t refVal_setPeriod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("period"))), refVal_setPeriod );
        setPeriod(refVal_setPeriod);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("algorithm"))))
    {
        utility::string_t refVal_setAlgorithm;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("algorithm"))), refVal_setAlgorithm );
        setAlgorithm(refVal_setAlgorithm);
    }
    return ok;
}

utility::string_t CreateTotpDeviceCustomOptions::getSecret() const
{
    return m_Secret;
}

void CreateTotpDeviceCustomOptions::setSecret(const utility::string_t& value)
{
    m_Secret = value;
    m_SecretIsSet = true;
}

bool CreateTotpDeviceCustomOptions::secretIsSet() const
{
    return m_SecretIsSet;
}

void CreateTotpDeviceCustomOptions::unsetSecret()
{
    m_SecretIsSet = false;
}
utility::string_t CreateTotpDeviceCustomOptions::getName() const
{
    return m_Name;
}

void CreateTotpDeviceCustomOptions::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool CreateTotpDeviceCustomOptions::nameIsSet() const
{
    return m_NameIsSet;
}

void CreateTotpDeviceCustomOptions::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t CreateTotpDeviceCustomOptions::getUsername() const
{
    return m_Username;
}

void CreateTotpDeviceCustomOptions::setUsername(const utility::string_t& value)
{
    m_Username = value;
    m_UsernameIsSet = true;
}

bool CreateTotpDeviceCustomOptions::usernameIsSet() const
{
    return m_UsernameIsSet;
}

void CreateTotpDeviceCustomOptions::unsetUsername()
{
    m_UsernameIsSet = false;
}
utility::string_t CreateTotpDeviceCustomOptions::getIssuer() const
{
    return m_Issuer;
}

void CreateTotpDeviceCustomOptions::setIssuer(const utility::string_t& value)
{
    m_Issuer = value;
    m_IssuerIsSet = true;
}

bool CreateTotpDeviceCustomOptions::issuerIsSet() const
{
    return m_IssuerIsSet;
}

void CreateTotpDeviceCustomOptions::unsetIssuer()
{
    m_IssuerIsSet = false;
}
int32_t CreateTotpDeviceCustomOptions::getDigits() const
{
    return m_Digits;
}

void CreateTotpDeviceCustomOptions::setDigits(int32_t value)
{
    m_Digits = value;
    m_DigitsIsSet = true;
}

bool CreateTotpDeviceCustomOptions::digitsIsSet() const
{
    return m_DigitsIsSet;
}

void CreateTotpDeviceCustomOptions::unsetDigits()
{
    m_DigitsIsSet = false;
}
int32_t CreateTotpDeviceCustomOptions::getPeriod() const
{
    return m_Period;
}

void CreateTotpDeviceCustomOptions::setPeriod(int32_t value)
{
    m_Period = value;
    m_PeriodIsSet = true;
}

bool CreateTotpDeviceCustomOptions::periodIsSet() const
{
    return m_PeriodIsSet;
}

void CreateTotpDeviceCustomOptions::unsetPeriod()
{
    m_PeriodIsSet = false;
}
utility::string_t CreateTotpDeviceCustomOptions::getAlgorithm() const
{
    return m_Algorithm;
}

void CreateTotpDeviceCustomOptions::setAlgorithm(const utility::string_t& value)
{
    m_Algorithm = value;
    m_AlgorithmIsSet = true;
}

bool CreateTotpDeviceCustomOptions::algorithmIsSet() const
{
    return m_AlgorithmIsSet;
}

void CreateTotpDeviceCustomOptions::unsetAlgorithm()
{
    m_AlgorithmIsSet = false;
}
}
}
}
}


