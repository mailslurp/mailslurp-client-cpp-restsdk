/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SentSmsProjection.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



SentSmsProjection::SentSmsProjection()
{
    m_Body = utility::conversions::to_string_t("");
    m_BodyIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_PhoneNumber = utility::conversions::to_string_t("");
    m_PhoneNumberIsSet = false;
    m_FromNumber = utility::conversions::to_string_t("");
    m_FromNumberIsSet = false;
    m_ToNumber = utility::conversions::to_string_t("");
    m_ToNumberIsSet = false;
    m_ReplyToId = utility::conversions::to_string_t("");
    m_ReplyToIdIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
}

SentSmsProjection::~SentSmsProjection()
{
}

void SentSmsProjection::validate()
{
    // TODO: implement validation
}

web::json::value SentSmsProjection::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BodyIsSet)
    {
        val[utility::conversions::to_string_t(U("body"))] = ModelBase::toJson(m_Body);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t(U("userId"))] = ModelBase::toJson(m_UserId);
    }
    if(m_PhoneNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("phoneNumber"))] = ModelBase::toJson(m_PhoneNumber);
    }
    if(m_FromNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("fromNumber"))] = ModelBase::toJson(m_FromNumber);
    }
    if(m_ToNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("toNumber"))] = ModelBase::toJson(m_ToNumber);
    }
    if(m_ReplyToIdIsSet)
    {
        val[utility::conversions::to_string_t(U("replyToId"))] = ModelBase::toJson(m_ReplyToId);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }

    return val;
}

bool SentSmsProjection::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("body"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("body")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBody;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBody);
            setBody(refVal_setBody);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("userId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("userId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserId);
            setUserId(refVal_setUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("phoneNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("phoneNumber")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPhoneNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPhoneNumber);
            setPhoneNumber(refVal_setPhoneNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fromNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fromNumber")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFromNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFromNumber);
            setFromNumber(refVal_setFromNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("toNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("toNumber")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setToNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setToNumber);
            setToNumber(refVal_setToNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("replyToId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("replyToId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setReplyToId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReplyToId);
            setReplyToId(refVal_setReplyToId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    return ok;
}

void SentSmsProjection::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_BodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("body")), m_Body));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("userId")), m_UserId));
    }
    if(m_PhoneNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("phoneNumber")), m_PhoneNumber));
    }
    if(m_FromNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fromNumber")), m_FromNumber));
    }
    if(m_ToNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("toNumber")), m_ToNumber));
    }
    if(m_ReplyToIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("replyToId")), m_ReplyToId));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
}

bool SentSmsProjection::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("body"))))
    {
        utility::string_t refVal_setBody;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("body"))), refVal_setBody );
        setBody(refVal_setBody);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("userId"))))
    {
        utility::string_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("userId"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("phoneNumber"))))
    {
        utility::string_t refVal_setPhoneNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("phoneNumber"))), refVal_setPhoneNumber );
        setPhoneNumber(refVal_setPhoneNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fromNumber"))))
    {
        utility::string_t refVal_setFromNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fromNumber"))), refVal_setFromNumber );
        setFromNumber(refVal_setFromNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("toNumber"))))
    {
        utility::string_t refVal_setToNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("toNumber"))), refVal_setToNumber );
        setToNumber(refVal_setToNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("replyToId"))))
    {
        utility::string_t refVal_setReplyToId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("replyToId"))), refVal_setReplyToId );
        setReplyToId(refVal_setReplyToId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    return ok;
}

utility::string_t SentSmsProjection::getBody() const
{
    return m_Body;
}

void SentSmsProjection::setBody(const utility::string_t& value)
{
    m_Body = value;
    m_BodyIsSet = true;
}

bool SentSmsProjection::bodyIsSet() const
{
    return m_BodyIsSet;
}

void SentSmsProjection::unsetBody()
{
    m_BodyIsSet = false;
}
utility::datetime SentSmsProjection::getCreatedAt() const
{
    return m_CreatedAt;
}

void SentSmsProjection::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool SentSmsProjection::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void SentSmsProjection::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::string_t SentSmsProjection::getUserId() const
{
    return m_UserId;
}

void SentSmsProjection::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool SentSmsProjection::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void SentSmsProjection::unsetUserId()
{
    m_UserIdIsSet = false;
}
utility::string_t SentSmsProjection::getPhoneNumber() const
{
    return m_PhoneNumber;
}

void SentSmsProjection::setPhoneNumber(const utility::string_t& value)
{
    m_PhoneNumber = value;
    m_PhoneNumberIsSet = true;
}

bool SentSmsProjection::phoneNumberIsSet() const
{
    return m_PhoneNumberIsSet;
}

void SentSmsProjection::unsetPhoneNumber()
{
    m_PhoneNumberIsSet = false;
}
utility::string_t SentSmsProjection::getFromNumber() const
{
    return m_FromNumber;
}

void SentSmsProjection::setFromNumber(const utility::string_t& value)
{
    m_FromNumber = value;
    m_FromNumberIsSet = true;
}

bool SentSmsProjection::fromNumberIsSet() const
{
    return m_FromNumberIsSet;
}

void SentSmsProjection::unsetFromNumber()
{
    m_FromNumberIsSet = false;
}
utility::string_t SentSmsProjection::getToNumber() const
{
    return m_ToNumber;
}

void SentSmsProjection::setToNumber(const utility::string_t& value)
{
    m_ToNumber = value;
    m_ToNumberIsSet = true;
}

bool SentSmsProjection::toNumberIsSet() const
{
    return m_ToNumberIsSet;
}

void SentSmsProjection::unsetToNumber()
{
    m_ToNumberIsSet = false;
}
utility::string_t SentSmsProjection::getReplyToId() const
{
    return m_ReplyToId;
}

void SentSmsProjection::setReplyToId(const utility::string_t& value)
{
    m_ReplyToId = value;
    m_ReplyToIdIsSet = true;
}

bool SentSmsProjection::replyToIdIsSet() const
{
    return m_ReplyToIdIsSet;
}

void SentSmsProjection::unsetReplyToId()
{
    m_ReplyToIdIsSet = false;
}
utility::string_t SentSmsProjection::getId() const
{
    return m_Id;
}

void SentSmsProjection::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool SentSmsProjection::idIsSet() const
{
    return m_IdIsSet;
}

void SentSmsProjection::unsetId()
{
    m_IdIsSet = false;
}
}
}
}
}


