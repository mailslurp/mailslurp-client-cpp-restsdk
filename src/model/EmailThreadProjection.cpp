/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/EmailThreadProjection.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



EmailThreadProjection::EmailThreadProjection()
{
    m_SenderIsSet = false;
    m_RecipientsIsSet = false;
    m_InboxId = utility::conversions::to_string_t("");
    m_InboxIdIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_UpdatedAt = utility::datetime();
    m_UpdatedAtIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_ToIsSet = false;
    m_CcIsSet = false;
    m_BccIsSet = false;
    m_HasAttachments = false;
    m_HasAttachmentsIsSet = false;
    m_Unread = false;
    m_UnreadIsSet = false;
    m_MessageCount = 0;
    m_MessageCountIsSet = false;
    m_LastBodyExcerpt = utility::conversions::to_string_t("");
    m_LastBodyExcerptIsSet = false;
    m_LastTextExcerpt = utility::conversions::to_string_t("");
    m_LastTextExcerptIsSet = false;
    m_LastCreatedAt = utility::datetime();
    m_LastCreatedAtIsSet = false;
    m_LastFrom = utility::conversions::to_string_t("");
    m_LastFromIsSet = false;
    m_LastSenderIsSet = false;
    m_Subject = utility::conversions::to_string_t("");
    m_SubjectIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_From = utility::conversions::to_string_t("");
    m_FromIsSet = false;
}

EmailThreadProjection::~EmailThreadProjection()
{
}

void EmailThreadProjection::validate()
{
    // TODO: implement validation
}

web::json::value EmailThreadProjection::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SenderIsSet)
    {
        val[utility::conversions::to_string_t(U("sender"))] = ModelBase::toJson(m_Sender);
    }
    if(m_RecipientsIsSet)
    {
        val[utility::conversions::to_string_t(U("recipients"))] = ModelBase::toJson(m_Recipients);
    }
    if(m_InboxIdIsSet)
    {
        val[utility::conversions::to_string_t(U("inboxId"))] = ModelBase::toJson(m_InboxId);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t(U("userId"))] = ModelBase::toJson(m_UserId);
    }
    if(m_UpdatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("updatedAt"))] = ModelBase::toJson(m_UpdatedAt);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_ToIsSet)
    {
        val[utility::conversions::to_string_t(U("to"))] = ModelBase::toJson(m_To);
    }
    if(m_CcIsSet)
    {
        val[utility::conversions::to_string_t(U("cc"))] = ModelBase::toJson(m_Cc);
    }
    if(m_BccIsSet)
    {
        val[utility::conversions::to_string_t(U("bcc"))] = ModelBase::toJson(m_Bcc);
    }
    if(m_HasAttachmentsIsSet)
    {
        val[utility::conversions::to_string_t(U("hasAttachments"))] = ModelBase::toJson(m_HasAttachments);
    }
    if(m_UnreadIsSet)
    {
        val[utility::conversions::to_string_t(U("unread"))] = ModelBase::toJson(m_Unread);
    }
    if(m_MessageCountIsSet)
    {
        val[utility::conversions::to_string_t(U("messageCount"))] = ModelBase::toJson(m_MessageCount);
    }
    if(m_LastBodyExcerptIsSet)
    {
        val[utility::conversions::to_string_t(U("lastBodyExcerpt"))] = ModelBase::toJson(m_LastBodyExcerpt);
    }
    if(m_LastTextExcerptIsSet)
    {
        val[utility::conversions::to_string_t(U("lastTextExcerpt"))] = ModelBase::toJson(m_LastTextExcerpt);
    }
    if(m_LastCreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("lastCreatedAt"))] = ModelBase::toJson(m_LastCreatedAt);
    }
    if(m_LastFromIsSet)
    {
        val[utility::conversions::to_string_t(U("lastFrom"))] = ModelBase::toJson(m_LastFrom);
    }
    if(m_LastSenderIsSet)
    {
        val[utility::conversions::to_string_t(U("lastSender"))] = ModelBase::toJson(m_LastSender);
    }
    if(m_SubjectIsSet)
    {
        val[utility::conversions::to_string_t(U("subject"))] = ModelBase::toJson(m_Subject);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_FromIsSet)
    {
        val[utility::conversions::to_string_t(U("from"))] = ModelBase::toJson(m_From);
    }

    return val;
}

bool EmailThreadProjection::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("sender"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sender")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SenderProjection> refVal_setSender;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSender);
            setSender(refVal_setSender);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recipients"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recipients")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<EmailRecipientsProjection> refVal_setRecipients;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecipients);
            setRecipients(refVal_setRecipients);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("inboxId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inboxId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInboxId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInboxId);
            setInboxId(refVal_setInboxId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("userId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("userId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserId);
            setUserId(refVal_setUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updatedAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updatedAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setUpdatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedAt);
            setUpdatedAt(refVal_setUpdatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("to"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("to")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTo);
            setTo(refVal_setTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cc")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setCc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCc);
            setCc(refVal_setCc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bcc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bcc")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setBcc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBcc);
            setBcc(refVal_setBcc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hasAttachments"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hasAttachments")));
        if(!fieldValue.is_null())
        {
            bool refVal_setHasAttachments;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHasAttachments);
            setHasAttachments(refVal_setHasAttachments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("unread"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("unread")));
        if(!fieldValue.is_null())
        {
            bool refVal_setUnread;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUnread);
            setUnread(refVal_setUnread);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("messageCount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("messageCount")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMessageCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessageCount);
            setMessageCount(refVal_setMessageCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lastBodyExcerpt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lastBodyExcerpt")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLastBodyExcerpt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastBodyExcerpt);
            setLastBodyExcerpt(refVal_setLastBodyExcerpt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lastTextExcerpt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lastTextExcerpt")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLastTextExcerpt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastTextExcerpt);
            setLastTextExcerpt(refVal_setLastTextExcerpt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lastCreatedAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lastCreatedAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setLastCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastCreatedAt);
            setLastCreatedAt(refVal_setLastCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lastFrom"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lastFrom")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLastFrom;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastFrom);
            setLastFrom(refVal_setLastFrom);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lastSender"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lastSender")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SenderProjection> refVal_setLastSender;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastSender);
            setLastSender(refVal_setLastSender);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subject"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subject")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubject;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubject);
            setSubject(refVal_setSubject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("from"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("from")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFrom;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFrom);
            setFrom(refVal_setFrom);
        }
    }
    return ok;
}

void EmailThreadProjection::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SenderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sender")), m_Sender));
    }
    if(m_RecipientsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recipients")), m_Recipients));
    }
    if(m_InboxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inboxId")), m_InboxId));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("userId")), m_UserId));
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updatedAt")), m_UpdatedAt));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
    if(m_ToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("to")), m_To));
    }
    if(m_CcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cc")), m_Cc));
    }
    if(m_BccIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bcc")), m_Bcc));
    }
    if(m_HasAttachmentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hasAttachments")), m_HasAttachments));
    }
    if(m_UnreadIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("unread")), m_Unread));
    }
    if(m_MessageCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("messageCount")), m_MessageCount));
    }
    if(m_LastBodyExcerptIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lastBodyExcerpt")), m_LastBodyExcerpt));
    }
    if(m_LastTextExcerptIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lastTextExcerpt")), m_LastTextExcerpt));
    }
    if(m_LastCreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lastCreatedAt")), m_LastCreatedAt));
    }
    if(m_LastFromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lastFrom")), m_LastFrom));
    }
    if(m_LastSenderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lastSender")), m_LastSender));
    }
    if(m_SubjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subject")), m_Subject));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_FromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("from")), m_From));
    }
}

bool EmailThreadProjection::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("sender"))))
    {
        std::shared_ptr<SenderProjection> refVal_setSender;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sender"))), refVal_setSender );
        setSender(refVal_setSender);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recipients"))))
    {
        std::shared_ptr<EmailRecipientsProjection> refVal_setRecipients;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recipients"))), refVal_setRecipients );
        setRecipients(refVal_setRecipients);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("inboxId"))))
    {
        utility::string_t refVal_setInboxId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inboxId"))), refVal_setInboxId );
        setInboxId(refVal_setInboxId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("userId"))))
    {
        utility::string_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("userId"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updatedAt"))))
    {
        utility::datetime refVal_setUpdatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updatedAt"))), refVal_setUpdatedAt );
        setUpdatedAt(refVal_setUpdatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("to"))))
    {
        std::vector<utility::string_t> refVal_setTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("to"))), refVal_setTo );
        setTo(refVal_setTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cc"))))
    {
        std::vector<utility::string_t> refVal_setCc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cc"))), refVal_setCc );
        setCc(refVal_setCc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bcc"))))
    {
        std::vector<utility::string_t> refVal_setBcc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bcc"))), refVal_setBcc );
        setBcc(refVal_setBcc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hasAttachments"))))
    {
        bool refVal_setHasAttachments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hasAttachments"))), refVal_setHasAttachments );
        setHasAttachments(refVal_setHasAttachments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("unread"))))
    {
        bool refVal_setUnread;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("unread"))), refVal_setUnread );
        setUnread(refVal_setUnread);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("messageCount"))))
    {
        int32_t refVal_setMessageCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("messageCount"))), refVal_setMessageCount );
        setMessageCount(refVal_setMessageCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lastBodyExcerpt"))))
    {
        utility::string_t refVal_setLastBodyExcerpt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lastBodyExcerpt"))), refVal_setLastBodyExcerpt );
        setLastBodyExcerpt(refVal_setLastBodyExcerpt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lastTextExcerpt"))))
    {
        utility::string_t refVal_setLastTextExcerpt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lastTextExcerpt"))), refVal_setLastTextExcerpt );
        setLastTextExcerpt(refVal_setLastTextExcerpt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lastCreatedAt"))))
    {
        utility::datetime refVal_setLastCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lastCreatedAt"))), refVal_setLastCreatedAt );
        setLastCreatedAt(refVal_setLastCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lastFrom"))))
    {
        utility::string_t refVal_setLastFrom;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lastFrom"))), refVal_setLastFrom );
        setLastFrom(refVal_setLastFrom);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lastSender"))))
    {
        std::shared_ptr<SenderProjection> refVal_setLastSender;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lastSender"))), refVal_setLastSender );
        setLastSender(refVal_setLastSender);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subject"))))
    {
        utility::string_t refVal_setSubject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subject"))), refVal_setSubject );
        setSubject(refVal_setSubject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("from"))))
    {
        utility::string_t refVal_setFrom;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("from"))), refVal_setFrom );
        setFrom(refVal_setFrom);
    }
    return ok;
}

std::shared_ptr<SenderProjection> EmailThreadProjection::getSender() const
{
    return m_Sender;
}

void EmailThreadProjection::setSender(const std::shared_ptr<SenderProjection>& value)
{
    m_Sender = value;
    m_SenderIsSet = true;
}

bool EmailThreadProjection::senderIsSet() const
{
    return m_SenderIsSet;
}

void EmailThreadProjection::unsetSender()
{
    m_SenderIsSet = false;
}
std::shared_ptr<EmailRecipientsProjection> EmailThreadProjection::getRecipients() const
{
    return m_Recipients;
}

void EmailThreadProjection::setRecipients(const std::shared_ptr<EmailRecipientsProjection>& value)
{
    m_Recipients = value;
    m_RecipientsIsSet = true;
}

bool EmailThreadProjection::recipientsIsSet() const
{
    return m_RecipientsIsSet;
}

void EmailThreadProjection::unsetRecipients()
{
    m_RecipientsIsSet = false;
}
utility::string_t EmailThreadProjection::getInboxId() const
{
    return m_InboxId;
}

void EmailThreadProjection::setInboxId(const utility::string_t& value)
{
    m_InboxId = value;
    m_InboxIdIsSet = true;
}

bool EmailThreadProjection::inboxIdIsSet() const
{
    return m_InboxIdIsSet;
}

void EmailThreadProjection::unsetInboxId()
{
    m_InboxIdIsSet = false;
}
utility::string_t EmailThreadProjection::getUserId() const
{
    return m_UserId;
}

void EmailThreadProjection::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool EmailThreadProjection::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void EmailThreadProjection::unsetUserId()
{
    m_UserIdIsSet = false;
}
utility::datetime EmailThreadProjection::getUpdatedAt() const
{
    return m_UpdatedAt;
}

void EmailThreadProjection::setUpdatedAt(const utility::datetime& value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}

bool EmailThreadProjection::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void EmailThreadProjection::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
utility::datetime EmailThreadProjection::getCreatedAt() const
{
    return m_CreatedAt;
}

void EmailThreadProjection::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool EmailThreadProjection::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void EmailThreadProjection::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
std::vector<utility::string_t>& EmailThreadProjection::getTo()
{
    return m_To;
}

void EmailThreadProjection::setTo(const std::vector<utility::string_t>& value)
{
    m_To = value;
    m_ToIsSet = true;
}

bool EmailThreadProjection::toIsSet() const
{
    return m_ToIsSet;
}

void EmailThreadProjection::unsetTo()
{
    m_ToIsSet = false;
}
std::vector<utility::string_t>& EmailThreadProjection::getCc()
{
    return m_Cc;
}

void EmailThreadProjection::setCc(const std::vector<utility::string_t>& value)
{
    m_Cc = value;
    m_CcIsSet = true;
}

bool EmailThreadProjection::ccIsSet() const
{
    return m_CcIsSet;
}

void EmailThreadProjection::unsetCc()
{
    m_CcIsSet = false;
}
std::vector<utility::string_t>& EmailThreadProjection::getBcc()
{
    return m_Bcc;
}

void EmailThreadProjection::setBcc(const std::vector<utility::string_t>& value)
{
    m_Bcc = value;
    m_BccIsSet = true;
}

bool EmailThreadProjection::bccIsSet() const
{
    return m_BccIsSet;
}

void EmailThreadProjection::unsetBcc()
{
    m_BccIsSet = false;
}
bool EmailThreadProjection::isHasAttachments() const
{
    return m_HasAttachments;
}

void EmailThreadProjection::setHasAttachments(bool value)
{
    m_HasAttachments = value;
    m_HasAttachmentsIsSet = true;
}

bool EmailThreadProjection::hasAttachmentsIsSet() const
{
    return m_HasAttachmentsIsSet;
}

void EmailThreadProjection::unsetHasAttachments()
{
    m_HasAttachmentsIsSet = false;
}
bool EmailThreadProjection::isUnread() const
{
    return m_Unread;
}

void EmailThreadProjection::setUnread(bool value)
{
    m_Unread = value;
    m_UnreadIsSet = true;
}

bool EmailThreadProjection::unreadIsSet() const
{
    return m_UnreadIsSet;
}

void EmailThreadProjection::unsetUnread()
{
    m_UnreadIsSet = false;
}
int32_t EmailThreadProjection::getMessageCount() const
{
    return m_MessageCount;
}

void EmailThreadProjection::setMessageCount(int32_t value)
{
    m_MessageCount = value;
    m_MessageCountIsSet = true;
}

bool EmailThreadProjection::messageCountIsSet() const
{
    return m_MessageCountIsSet;
}

void EmailThreadProjection::unsetMessageCount()
{
    m_MessageCountIsSet = false;
}
utility::string_t EmailThreadProjection::getLastBodyExcerpt() const
{
    return m_LastBodyExcerpt;
}

void EmailThreadProjection::setLastBodyExcerpt(const utility::string_t& value)
{
    m_LastBodyExcerpt = value;
    m_LastBodyExcerptIsSet = true;
}

bool EmailThreadProjection::lastBodyExcerptIsSet() const
{
    return m_LastBodyExcerptIsSet;
}

void EmailThreadProjection::unsetLastBodyExcerpt()
{
    m_LastBodyExcerptIsSet = false;
}
utility::string_t EmailThreadProjection::getLastTextExcerpt() const
{
    return m_LastTextExcerpt;
}

void EmailThreadProjection::setLastTextExcerpt(const utility::string_t& value)
{
    m_LastTextExcerpt = value;
    m_LastTextExcerptIsSet = true;
}

bool EmailThreadProjection::lastTextExcerptIsSet() const
{
    return m_LastTextExcerptIsSet;
}

void EmailThreadProjection::unsetLastTextExcerpt()
{
    m_LastTextExcerptIsSet = false;
}
utility::datetime EmailThreadProjection::getLastCreatedAt() const
{
    return m_LastCreatedAt;
}

void EmailThreadProjection::setLastCreatedAt(const utility::datetime& value)
{
    m_LastCreatedAt = value;
    m_LastCreatedAtIsSet = true;
}

bool EmailThreadProjection::lastCreatedAtIsSet() const
{
    return m_LastCreatedAtIsSet;
}

void EmailThreadProjection::unsetLastCreatedAt()
{
    m_LastCreatedAtIsSet = false;
}
utility::string_t EmailThreadProjection::getLastFrom() const
{
    return m_LastFrom;
}

void EmailThreadProjection::setLastFrom(const utility::string_t& value)
{
    m_LastFrom = value;
    m_LastFromIsSet = true;
}

bool EmailThreadProjection::lastFromIsSet() const
{
    return m_LastFromIsSet;
}

void EmailThreadProjection::unsetLastFrom()
{
    m_LastFromIsSet = false;
}
std::shared_ptr<SenderProjection> EmailThreadProjection::getLastSender() const
{
    return m_LastSender;
}

void EmailThreadProjection::setLastSender(const std::shared_ptr<SenderProjection>& value)
{
    m_LastSender = value;
    m_LastSenderIsSet = true;
}

bool EmailThreadProjection::lastSenderIsSet() const
{
    return m_LastSenderIsSet;
}

void EmailThreadProjection::unsetLastSender()
{
    m_LastSenderIsSet = false;
}
utility::string_t EmailThreadProjection::getSubject() const
{
    return m_Subject;
}

void EmailThreadProjection::setSubject(const utility::string_t& value)
{
    m_Subject = value;
    m_SubjectIsSet = true;
}

bool EmailThreadProjection::subjectIsSet() const
{
    return m_SubjectIsSet;
}

void EmailThreadProjection::unsetSubject()
{
    m_SubjectIsSet = false;
}
utility::string_t EmailThreadProjection::getId() const
{
    return m_Id;
}

void EmailThreadProjection::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool EmailThreadProjection::idIsSet() const
{
    return m_IdIsSet;
}

void EmailThreadProjection::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t EmailThreadProjection::getFrom() const
{
    return m_From;
}

void EmailThreadProjection::setFrom(const utility::string_t& value)
{
    m_From = value;
    m_FromIsSet = true;
}

bool EmailThreadProjection::fromIsSet() const
{
    return m_FromIsSet;
}

void EmailThreadProjection::unsetFrom()
{
    m_FromIsSet = false;
}
}
}
}
}


