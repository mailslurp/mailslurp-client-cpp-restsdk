/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateInboxRulesetOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



CreateInboxRulesetOptions::CreateInboxRulesetOptions()
{
    m_Scope = utility::conversions::to_string_t("");
    m_ScopeIsSet = false;
    m_Action = utility::conversions::to_string_t("");
    m_ActionIsSet = false;
    m_Target = utility::conversions::to_string_t("");
    m_TargetIsSet = false;
}

CreateInboxRulesetOptions::~CreateInboxRulesetOptions()
{
}

void CreateInboxRulesetOptions::validate()
{
    // TODO: implement validation
}

web::json::value CreateInboxRulesetOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ScopeIsSet)
    {
        val[utility::conversions::to_string_t(U("scope"))] = ModelBase::toJson(m_Scope);
    }
    if(m_ActionIsSet)
    {
        val[utility::conversions::to_string_t(U("action"))] = ModelBase::toJson(m_Action);
    }
    if(m_TargetIsSet)
    {
        val[utility::conversions::to_string_t(U("target"))] = ModelBase::toJson(m_Target);
    }

    return val;
}

bool CreateInboxRulesetOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("scope"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("scope")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setScope;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScope);
            setScope(refVal_setScope);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("action"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("action")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAction;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAction);
            setAction(refVal_setAction);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("target"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("target")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTarget;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTarget);
            setTarget(refVal_setTarget);
        }
    }
    return ok;
}

void CreateInboxRulesetOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ScopeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("scope")), m_Scope));
    }
    if(m_ActionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("action")), m_Action));
    }
    if(m_TargetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("target")), m_Target));
    }
}

bool CreateInboxRulesetOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("scope"))))
    {
        utility::string_t refVal_setScope;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("scope"))), refVal_setScope );
        setScope(refVal_setScope);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("action"))))
    {
        utility::string_t refVal_setAction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("action"))), refVal_setAction );
        setAction(refVal_setAction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("target"))))
    {
        utility::string_t refVal_setTarget;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("target"))), refVal_setTarget );
        setTarget(refVal_setTarget);
    }
    return ok;
}

utility::string_t CreateInboxRulesetOptions::getScope() const
{
    return m_Scope;
}

void CreateInboxRulesetOptions::setScope(const utility::string_t& value)
{
    m_Scope = value;
    m_ScopeIsSet = true;
}

bool CreateInboxRulesetOptions::scopeIsSet() const
{
    return m_ScopeIsSet;
}

void CreateInboxRulesetOptions::unsetScope()
{
    m_ScopeIsSet = false;
}
utility::string_t CreateInboxRulesetOptions::getAction() const
{
    return m_Action;
}

void CreateInboxRulesetOptions::setAction(const utility::string_t& value)
{
    m_Action = value;
    m_ActionIsSet = true;
}

bool CreateInboxRulesetOptions::actionIsSet() const
{
    return m_ActionIsSet;
}

void CreateInboxRulesetOptions::unsetAction()
{
    m_ActionIsSet = false;
}
utility::string_t CreateInboxRulesetOptions::getTarget() const
{
    return m_Target;
}

void CreateInboxRulesetOptions::setTarget(const utility::string_t& value)
{
    m_Target = value;
    m_TargetIsSet = true;
}

bool CreateInboxRulesetOptions::targetIsSet() const
{
    return m_TargetIsSet;
}

void CreateInboxRulesetOptions::unsetTarget()
{
    m_TargetIsSet = false;
}
}
}
}
}


