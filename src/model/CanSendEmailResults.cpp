/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CanSendEmailResults.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



CanSendEmailResults::CanSendEmailResults()
{
    m_IsSendingPermitted = false;
    m_IsSendingPermittedIsSet = false;
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
}

CanSendEmailResults::~CanSendEmailResults()
{
}

void CanSendEmailResults::validate()
{
    // TODO: implement validation
}

web::json::value CanSendEmailResults::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IsSendingPermittedIsSet)
    {
        val[utility::conversions::to_string_t(U("isSendingPermitted"))] = ModelBase::toJson(m_IsSendingPermitted);
    }
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t(U("message"))] = ModelBase::toJson(m_Message);
    }

    return val;
}

bool CanSendEmailResults::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("isSendingPermitted"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isSendingPermitted")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsSendingPermitted;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsSendingPermitted);
            setIsSendingPermitted(refVal_setIsSendingPermitted);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("message"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("message")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessage);
            setMessage(refVal_setMessage);
        }
    }
    return ok;
}

void CanSendEmailResults::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IsSendingPermittedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isSendingPermitted")), m_IsSendingPermitted));
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("message")), m_Message));
    }
}

bool CanSendEmailResults::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("isSendingPermitted"))))
    {
        bool refVal_setIsSendingPermitted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isSendingPermitted"))), refVal_setIsSendingPermitted );
        setIsSendingPermitted(refVal_setIsSendingPermitted);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("message"))))
    {
        utility::string_t refVal_setMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("message"))), refVal_setMessage );
        setMessage(refVal_setMessage);
    }
    return ok;
}

bool CanSendEmailResults::isIsSendingPermitted() const
{
    return m_IsSendingPermitted;
}

void CanSendEmailResults::setIsSendingPermitted(bool value)
{
    m_IsSendingPermitted = value;
    m_IsSendingPermittedIsSet = true;
}

bool CanSendEmailResults::isSendingPermittedIsSet() const
{
    return m_IsSendingPermittedIsSet;
}

void CanSendEmailResults::unsetIsSendingPermitted()
{
    m_IsSendingPermittedIsSet = false;
}
utility::string_t CanSendEmailResults::getMessage() const
{
    return m_Message;
}

void CanSendEmailResults::setMessage(const utility::string_t& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}

bool CanSendEmailResults::messageIsSet() const
{
    return m_MessageIsSet;
}

void CanSendEmailResults::unsetMessage()
{
    m_MessageIsSet = false;
}
}
}
}
}


