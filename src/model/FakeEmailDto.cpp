/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/FakeEmailDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



FakeEmailDto::FakeEmailDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_EmailAddress = utility::conversions::to_string_t("");
    m_EmailAddressIsSet = false;
    m_SenderIsSet = false;
    m_RecipientsIsSet = false;
    m_Subject = utility::conversions::to_string_t("");
    m_SubjectIsSet = false;
    m_Preview = utility::conversions::to_string_t("");
    m_PreviewIsSet = false;
    m_Body = utility::conversions::to_string_t("");
    m_BodyIsSet = false;
    m_Seen = false;
    m_SeenIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
}

FakeEmailDto::~FakeEmailDto()
{
}

void FakeEmailDto::validate()
{
    // TODO: implement validation
}

web::json::value FakeEmailDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_EmailAddressIsSet)
    {
        val[utility::conversions::to_string_t(U("emailAddress"))] = ModelBase::toJson(m_EmailAddress);
    }
    if(m_SenderIsSet)
    {
        val[utility::conversions::to_string_t(U("sender"))] = ModelBase::toJson(m_Sender);
    }
    if(m_RecipientsIsSet)
    {
        val[utility::conversions::to_string_t(U("recipients"))] = ModelBase::toJson(m_Recipients);
    }
    if(m_SubjectIsSet)
    {
        val[utility::conversions::to_string_t(U("subject"))] = ModelBase::toJson(m_Subject);
    }
    if(m_PreviewIsSet)
    {
        val[utility::conversions::to_string_t(U("preview"))] = ModelBase::toJson(m_Preview);
    }
    if(m_BodyIsSet)
    {
        val[utility::conversions::to_string_t(U("body"))] = ModelBase::toJson(m_Body);
    }
    if(m_SeenIsSet)
    {
        val[utility::conversions::to_string_t(U("seen"))] = ModelBase::toJson(m_Seen);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }

    return val;
}

bool FakeEmailDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("emailAddress"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("emailAddress")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEmailAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmailAddress);
            setEmailAddress(refVal_setEmailAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sender"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sender")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Sender> refVal_setSender;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSender);
            setSender(refVal_setSender);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recipients"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recipients")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<EmailRecipients> refVal_setRecipients;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecipients);
            setRecipients(refVal_setRecipients);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subject"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subject")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubject;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubject);
            setSubject(refVal_setSubject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("preview"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("preview")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPreview;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPreview);
            setPreview(refVal_setPreview);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("body"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("body")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBody;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBody);
            setBody(refVal_setBody);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("seen"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("seen")));
        if(!fieldValue.is_null())
        {
            bool refVal_setSeen;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSeen);
            setSeen(refVal_setSeen);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    return ok;
}

void FakeEmailDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_EmailAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("emailAddress")), m_EmailAddress));
    }
    if(m_SenderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sender")), m_Sender));
    }
    if(m_RecipientsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recipients")), m_Recipients));
    }
    if(m_SubjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subject")), m_Subject));
    }
    if(m_PreviewIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("preview")), m_Preview));
    }
    if(m_BodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("body")), m_Body));
    }
    if(m_SeenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("seen")), m_Seen));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
}

bool FakeEmailDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("emailAddress"))))
    {
        utility::string_t refVal_setEmailAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("emailAddress"))), refVal_setEmailAddress );
        setEmailAddress(refVal_setEmailAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sender"))))
    {
        std::shared_ptr<Sender> refVal_setSender;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sender"))), refVal_setSender );
        setSender(refVal_setSender);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recipients"))))
    {
        std::shared_ptr<EmailRecipients> refVal_setRecipients;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recipients"))), refVal_setRecipients );
        setRecipients(refVal_setRecipients);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subject"))))
    {
        utility::string_t refVal_setSubject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subject"))), refVal_setSubject );
        setSubject(refVal_setSubject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("preview"))))
    {
        utility::string_t refVal_setPreview;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("preview"))), refVal_setPreview );
        setPreview(refVal_setPreview);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("body"))))
    {
        utility::string_t refVal_setBody;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("body"))), refVal_setBody );
        setBody(refVal_setBody);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("seen"))))
    {
        bool refVal_setSeen;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("seen"))), refVal_setSeen );
        setSeen(refVal_setSeen);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    return ok;
}

utility::string_t FakeEmailDto::getId() const
{
    return m_Id;
}

void FakeEmailDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool FakeEmailDto::idIsSet() const
{
    return m_IdIsSet;
}

void FakeEmailDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t FakeEmailDto::getEmailAddress() const
{
    return m_EmailAddress;
}

void FakeEmailDto::setEmailAddress(const utility::string_t& value)
{
    m_EmailAddress = value;
    m_EmailAddressIsSet = true;
}

bool FakeEmailDto::emailAddressIsSet() const
{
    return m_EmailAddressIsSet;
}

void FakeEmailDto::unsetEmailAddress()
{
    m_EmailAddressIsSet = false;
}
std::shared_ptr<Sender> FakeEmailDto::getSender() const
{
    return m_Sender;
}

void FakeEmailDto::setSender(const std::shared_ptr<Sender>& value)
{
    m_Sender = value;
    m_SenderIsSet = true;
}

bool FakeEmailDto::senderIsSet() const
{
    return m_SenderIsSet;
}

void FakeEmailDto::unsetSender()
{
    m_SenderIsSet = false;
}
std::shared_ptr<EmailRecipients> FakeEmailDto::getRecipients() const
{
    return m_Recipients;
}

void FakeEmailDto::setRecipients(const std::shared_ptr<EmailRecipients>& value)
{
    m_Recipients = value;
    m_RecipientsIsSet = true;
}

bool FakeEmailDto::recipientsIsSet() const
{
    return m_RecipientsIsSet;
}

void FakeEmailDto::unsetRecipients()
{
    m_RecipientsIsSet = false;
}
utility::string_t FakeEmailDto::getSubject() const
{
    return m_Subject;
}

void FakeEmailDto::setSubject(const utility::string_t& value)
{
    m_Subject = value;
    m_SubjectIsSet = true;
}

bool FakeEmailDto::subjectIsSet() const
{
    return m_SubjectIsSet;
}

void FakeEmailDto::unsetSubject()
{
    m_SubjectIsSet = false;
}
utility::string_t FakeEmailDto::getPreview() const
{
    return m_Preview;
}

void FakeEmailDto::setPreview(const utility::string_t& value)
{
    m_Preview = value;
    m_PreviewIsSet = true;
}

bool FakeEmailDto::previewIsSet() const
{
    return m_PreviewIsSet;
}

void FakeEmailDto::unsetPreview()
{
    m_PreviewIsSet = false;
}
utility::string_t FakeEmailDto::getBody() const
{
    return m_Body;
}

void FakeEmailDto::setBody(const utility::string_t& value)
{
    m_Body = value;
    m_BodyIsSet = true;
}

bool FakeEmailDto::bodyIsSet() const
{
    return m_BodyIsSet;
}

void FakeEmailDto::unsetBody()
{
    m_BodyIsSet = false;
}
bool FakeEmailDto::isSeen() const
{
    return m_Seen;
}

void FakeEmailDto::setSeen(bool value)
{
    m_Seen = value;
    m_SeenIsSet = true;
}

bool FakeEmailDto::seenIsSet() const
{
    return m_SeenIsSet;
}

void FakeEmailDto::unsetSeen()
{
    m_SeenIsSet = false;
}
utility::datetime FakeEmailDto::getCreatedAt() const
{
    return m_CreatedAt;
}

void FakeEmailDto::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool FakeEmailDto::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void FakeEmailDto::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
}
}
}
}


