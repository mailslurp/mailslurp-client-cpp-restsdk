/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/GenerateDmarcRecordOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



GenerateDmarcRecordOptions::GenerateDmarcRecordOptions()
{
    m_Domain = utility::conversions::to_string_t("");
    m_DomainIsSet = false;
    m_Version = utility::conversions::to_string_t("");
    m_VersionIsSet = false;
    m_Policy = utility::conversions::to_string_t("");
    m_PolicyIsSet = false;
    m_SubdomainPolicy = utility::conversions::to_string_t("");
    m_SubdomainPolicyIsSet = false;
    m_ReportEmailAddressIsSet = false;
    m_ForensicEmailAddressIsSet = false;
    m_Percentage = 0;
    m_PercentageIsSet = false;
    m_ReportFormat = utility::conversions::to_string_t("");
    m_ReportFormatIsSet = false;
    m_SecondsBetweenReports = 0;
    m_SecondsBetweenReportsIsSet = false;
    m_Adkim = utility::conversions::to_string_t("");
    m_AdkimIsSet = false;
    m_Aspf = utility::conversions::to_string_t("");
    m_AspfIsSet = false;
    m_Fo = utility::conversions::to_string_t("");
    m_FoIsSet = false;
}

GenerateDmarcRecordOptions::~GenerateDmarcRecordOptions()
{
}

void GenerateDmarcRecordOptions::validate()
{
    // TODO: implement validation
}

web::json::value GenerateDmarcRecordOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DomainIsSet)
    {
        val[utility::conversions::to_string_t(U("domain"))] = ModelBase::toJson(m_Domain);
    }
    if(m_VersionIsSet)
    {
        val[utility::conversions::to_string_t(U("version"))] = ModelBase::toJson(m_Version);
    }
    if(m_PolicyIsSet)
    {
        val[utility::conversions::to_string_t(U("policy"))] = ModelBase::toJson(m_Policy);
    }
    if(m_SubdomainPolicyIsSet)
    {
        val[utility::conversions::to_string_t(U("subdomainPolicy"))] = ModelBase::toJson(m_SubdomainPolicy);
    }
    if(m_ReportEmailAddressIsSet)
    {
        val[utility::conversions::to_string_t(U("reportEmailAddress"))] = ModelBase::toJson(m_ReportEmailAddress);
    }
    if(m_ForensicEmailAddressIsSet)
    {
        val[utility::conversions::to_string_t(U("forensicEmailAddress"))] = ModelBase::toJson(m_ForensicEmailAddress);
    }
    if(m_PercentageIsSet)
    {
        val[utility::conversions::to_string_t(U("percentage"))] = ModelBase::toJson(m_Percentage);
    }
    if(m_ReportFormatIsSet)
    {
        val[utility::conversions::to_string_t(U("reportFormat"))] = ModelBase::toJson(m_ReportFormat);
    }
    if(m_SecondsBetweenReportsIsSet)
    {
        val[utility::conversions::to_string_t(U("secondsBetweenReports"))] = ModelBase::toJson(m_SecondsBetweenReports);
    }
    if(m_AdkimIsSet)
    {
        val[utility::conversions::to_string_t(U("adkim"))] = ModelBase::toJson(m_Adkim);
    }
    if(m_AspfIsSet)
    {
        val[utility::conversions::to_string_t(U("aspf"))] = ModelBase::toJson(m_Aspf);
    }
    if(m_FoIsSet)
    {
        val[utility::conversions::to_string_t(U("fo"))] = ModelBase::toJson(m_Fo);
    }

    return val;
}

bool GenerateDmarcRecordOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("domain"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("domain")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDomain;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDomain);
            setDomain(refVal_setDomain);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("version")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVersion);
            setVersion(refVal_setVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("policy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("policy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPolicy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPolicy);
            setPolicy(refVal_setPolicy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subdomainPolicy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subdomainPolicy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubdomainPolicy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubdomainPolicy);
            setSubdomainPolicy(refVal_setSubdomainPolicy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reportEmailAddress"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reportEmailAddress")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setReportEmailAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReportEmailAddress);
            setReportEmailAddress(refVal_setReportEmailAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("forensicEmailAddress"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("forensicEmailAddress")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setForensicEmailAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setForensicEmailAddress);
            setForensicEmailAddress(refVal_setForensicEmailAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("percentage"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("percentage")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPercentage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPercentage);
            setPercentage(refVal_setPercentage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reportFormat"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reportFormat")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setReportFormat;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReportFormat);
            setReportFormat(refVal_setReportFormat);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("secondsBetweenReports"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("secondsBetweenReports")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSecondsBetweenReports;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSecondsBetweenReports);
            setSecondsBetweenReports(refVal_setSecondsBetweenReports);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("adkim"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("adkim")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAdkim;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdkim);
            setAdkim(refVal_setAdkim);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("aspf"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("aspf")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAspf;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAspf);
            setAspf(refVal_setAspf);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fo")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFo);
            setFo(refVal_setFo);
        }
    }
    return ok;
}

void GenerateDmarcRecordOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_DomainIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("domain")), m_Domain));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("version")), m_Version));
    }
    if(m_PolicyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("policy")), m_Policy));
    }
    if(m_SubdomainPolicyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subdomainPolicy")), m_SubdomainPolicy));
    }
    if(m_ReportEmailAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reportEmailAddress")), m_ReportEmailAddress));
    }
    if(m_ForensicEmailAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("forensicEmailAddress")), m_ForensicEmailAddress));
    }
    if(m_PercentageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("percentage")), m_Percentage));
    }
    if(m_ReportFormatIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reportFormat")), m_ReportFormat));
    }
    if(m_SecondsBetweenReportsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("secondsBetweenReports")), m_SecondsBetweenReports));
    }
    if(m_AdkimIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("adkim")), m_Adkim));
    }
    if(m_AspfIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("aspf")), m_Aspf));
    }
    if(m_FoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fo")), m_Fo));
    }
}

bool GenerateDmarcRecordOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("domain"))))
    {
        utility::string_t refVal_setDomain;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("domain"))), refVal_setDomain );
        setDomain(refVal_setDomain);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("version"))))
    {
        utility::string_t refVal_setVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("version"))), refVal_setVersion );
        setVersion(refVal_setVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("policy"))))
    {
        utility::string_t refVal_setPolicy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("policy"))), refVal_setPolicy );
        setPolicy(refVal_setPolicy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subdomainPolicy"))))
    {
        utility::string_t refVal_setSubdomainPolicy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subdomainPolicy"))), refVal_setSubdomainPolicy );
        setSubdomainPolicy(refVal_setSubdomainPolicy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reportEmailAddress"))))
    {
        std::vector<utility::string_t> refVal_setReportEmailAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reportEmailAddress"))), refVal_setReportEmailAddress );
        setReportEmailAddress(refVal_setReportEmailAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("forensicEmailAddress"))))
    {
        std::vector<utility::string_t> refVal_setForensicEmailAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("forensicEmailAddress"))), refVal_setForensicEmailAddress );
        setForensicEmailAddress(refVal_setForensicEmailAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("percentage"))))
    {
        int32_t refVal_setPercentage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("percentage"))), refVal_setPercentage );
        setPercentage(refVal_setPercentage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reportFormat"))))
    {
        utility::string_t refVal_setReportFormat;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reportFormat"))), refVal_setReportFormat );
        setReportFormat(refVal_setReportFormat);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("secondsBetweenReports"))))
    {
        int32_t refVal_setSecondsBetweenReports;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("secondsBetweenReports"))), refVal_setSecondsBetweenReports );
        setSecondsBetweenReports(refVal_setSecondsBetweenReports);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("adkim"))))
    {
        utility::string_t refVal_setAdkim;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("adkim"))), refVal_setAdkim );
        setAdkim(refVal_setAdkim);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("aspf"))))
    {
        utility::string_t refVal_setAspf;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("aspf"))), refVal_setAspf );
        setAspf(refVal_setAspf);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fo"))))
    {
        utility::string_t refVal_setFo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fo"))), refVal_setFo );
        setFo(refVal_setFo);
    }
    return ok;
}

utility::string_t GenerateDmarcRecordOptions::getDomain() const
{
    return m_Domain;
}

void GenerateDmarcRecordOptions::setDomain(const utility::string_t& value)
{
    m_Domain = value;
    m_DomainIsSet = true;
}

bool GenerateDmarcRecordOptions::domainIsSet() const
{
    return m_DomainIsSet;
}

void GenerateDmarcRecordOptions::unsetDomain()
{
    m_DomainIsSet = false;
}
utility::string_t GenerateDmarcRecordOptions::getVersion() const
{
    return m_Version;
}

void GenerateDmarcRecordOptions::setVersion(const utility::string_t& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool GenerateDmarcRecordOptions::versionIsSet() const
{
    return m_VersionIsSet;
}

void GenerateDmarcRecordOptions::unsetVersion()
{
    m_VersionIsSet = false;
}
utility::string_t GenerateDmarcRecordOptions::getPolicy() const
{
    return m_Policy;
}

void GenerateDmarcRecordOptions::setPolicy(const utility::string_t& value)
{
    m_Policy = value;
    m_PolicyIsSet = true;
}

bool GenerateDmarcRecordOptions::policyIsSet() const
{
    return m_PolicyIsSet;
}

void GenerateDmarcRecordOptions::unsetPolicy()
{
    m_PolicyIsSet = false;
}
utility::string_t GenerateDmarcRecordOptions::getSubdomainPolicy() const
{
    return m_SubdomainPolicy;
}

void GenerateDmarcRecordOptions::setSubdomainPolicy(const utility::string_t& value)
{
    m_SubdomainPolicy = value;
    m_SubdomainPolicyIsSet = true;
}

bool GenerateDmarcRecordOptions::subdomainPolicyIsSet() const
{
    return m_SubdomainPolicyIsSet;
}

void GenerateDmarcRecordOptions::unsetSubdomainPolicy()
{
    m_SubdomainPolicyIsSet = false;
}
std::vector<utility::string_t>& GenerateDmarcRecordOptions::getReportEmailAddress()
{
    return m_ReportEmailAddress;
}

void GenerateDmarcRecordOptions::setReportEmailAddress(const std::vector<utility::string_t>& value)
{
    m_ReportEmailAddress = value;
    m_ReportEmailAddressIsSet = true;
}

bool GenerateDmarcRecordOptions::reportEmailAddressIsSet() const
{
    return m_ReportEmailAddressIsSet;
}

void GenerateDmarcRecordOptions::unsetReportEmailAddress()
{
    m_ReportEmailAddressIsSet = false;
}
std::vector<utility::string_t>& GenerateDmarcRecordOptions::getForensicEmailAddress()
{
    return m_ForensicEmailAddress;
}

void GenerateDmarcRecordOptions::setForensicEmailAddress(const std::vector<utility::string_t>& value)
{
    m_ForensicEmailAddress = value;
    m_ForensicEmailAddressIsSet = true;
}

bool GenerateDmarcRecordOptions::forensicEmailAddressIsSet() const
{
    return m_ForensicEmailAddressIsSet;
}

void GenerateDmarcRecordOptions::unsetForensicEmailAddress()
{
    m_ForensicEmailAddressIsSet = false;
}
int32_t GenerateDmarcRecordOptions::getPercentage() const
{
    return m_Percentage;
}

void GenerateDmarcRecordOptions::setPercentage(int32_t value)
{
    m_Percentage = value;
    m_PercentageIsSet = true;
}

bool GenerateDmarcRecordOptions::percentageIsSet() const
{
    return m_PercentageIsSet;
}

void GenerateDmarcRecordOptions::unsetPercentage()
{
    m_PercentageIsSet = false;
}
utility::string_t GenerateDmarcRecordOptions::getReportFormat() const
{
    return m_ReportFormat;
}

void GenerateDmarcRecordOptions::setReportFormat(const utility::string_t& value)
{
    m_ReportFormat = value;
    m_ReportFormatIsSet = true;
}

bool GenerateDmarcRecordOptions::reportFormatIsSet() const
{
    return m_ReportFormatIsSet;
}

void GenerateDmarcRecordOptions::unsetReportFormat()
{
    m_ReportFormatIsSet = false;
}
int32_t GenerateDmarcRecordOptions::getSecondsBetweenReports() const
{
    return m_SecondsBetweenReports;
}

void GenerateDmarcRecordOptions::setSecondsBetweenReports(int32_t value)
{
    m_SecondsBetweenReports = value;
    m_SecondsBetweenReportsIsSet = true;
}

bool GenerateDmarcRecordOptions::secondsBetweenReportsIsSet() const
{
    return m_SecondsBetweenReportsIsSet;
}

void GenerateDmarcRecordOptions::unsetSecondsBetweenReports()
{
    m_SecondsBetweenReportsIsSet = false;
}
utility::string_t GenerateDmarcRecordOptions::getAdkim() const
{
    return m_Adkim;
}

void GenerateDmarcRecordOptions::setAdkim(const utility::string_t& value)
{
    m_Adkim = value;
    m_AdkimIsSet = true;
}

bool GenerateDmarcRecordOptions::adkimIsSet() const
{
    return m_AdkimIsSet;
}

void GenerateDmarcRecordOptions::unsetAdkim()
{
    m_AdkimIsSet = false;
}
utility::string_t GenerateDmarcRecordOptions::getAspf() const
{
    return m_Aspf;
}

void GenerateDmarcRecordOptions::setAspf(const utility::string_t& value)
{
    m_Aspf = value;
    m_AspfIsSet = true;
}

bool GenerateDmarcRecordOptions::aspfIsSet() const
{
    return m_AspfIsSet;
}

void GenerateDmarcRecordOptions::unsetAspf()
{
    m_AspfIsSet = false;
}
utility::string_t GenerateDmarcRecordOptions::getFo() const
{
    return m_Fo;
}

void GenerateDmarcRecordOptions::setFo(const utility::string_t& value)
{
    m_Fo = value;
    m_FoIsSet = true;
}

bool GenerateDmarcRecordOptions::foIsSet() const
{
    return m_FoIsSet;
}

void GenerateDmarcRecordOptions::unsetFo()
{
    m_FoIsSet = false;
}
}
}
}
}


