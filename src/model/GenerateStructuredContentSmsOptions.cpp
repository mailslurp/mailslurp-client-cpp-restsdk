/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/GenerateStructuredContentSmsOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



GenerateStructuredContentSmsOptions::GenerateStructuredContentSmsOptions()
{
    m_SmsId = utility::conversions::to_string_t("");
    m_SmsIdIsSet = false;
    m_Instructions = utility::conversions::to_string_t("");
    m_InstructionsIsSet = false;
    m_OutputSchemaIsSet = false;
    m_TransformId = utility::conversions::to_string_t("");
    m_TransformIdIsSet = false;
}

GenerateStructuredContentSmsOptions::~GenerateStructuredContentSmsOptions()
{
}

void GenerateStructuredContentSmsOptions::validate()
{
    // TODO: implement validation
}

web::json::value GenerateStructuredContentSmsOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SmsIdIsSet)
    {
        val[utility::conversions::to_string_t(U("smsId"))] = ModelBase::toJson(m_SmsId);
    }
    if(m_InstructionsIsSet)
    {
        val[utility::conversions::to_string_t(U("instructions"))] = ModelBase::toJson(m_Instructions);
    }
    if(m_OutputSchemaIsSet)
    {
        val[utility::conversions::to_string_t(U("outputSchema"))] = ModelBase::toJson(m_OutputSchema);
    }
    if(m_TransformIdIsSet)
    {
        val[utility::conversions::to_string_t(U("transformId"))] = ModelBase::toJson(m_TransformId);
    }

    return val;
}

bool GenerateStructuredContentSmsOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("smsId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("smsId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSmsId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSmsId);
            setSmsId(refVal_setSmsId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("instructions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("instructions")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInstructions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInstructions);
            setInstructions(refVal_setInstructions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("outputSchema"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("outputSchema")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<StructuredOutputSchema> refVal_setOutputSchema;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOutputSchema);
            setOutputSchema(refVal_setOutputSchema);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("transformId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("transformId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTransformId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTransformId);
            setTransformId(refVal_setTransformId);
        }
    }
    return ok;
}

void GenerateStructuredContentSmsOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SmsIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("smsId")), m_SmsId));
    }
    if(m_InstructionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("instructions")), m_Instructions));
    }
    if(m_OutputSchemaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("outputSchema")), m_OutputSchema));
    }
    if(m_TransformIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("transformId")), m_TransformId));
    }
}

bool GenerateStructuredContentSmsOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("smsId"))))
    {
        utility::string_t refVal_setSmsId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("smsId"))), refVal_setSmsId );
        setSmsId(refVal_setSmsId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("instructions"))))
    {
        utility::string_t refVal_setInstructions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("instructions"))), refVal_setInstructions );
        setInstructions(refVal_setInstructions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("outputSchema"))))
    {
        std::shared_ptr<StructuredOutputSchema> refVal_setOutputSchema;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("outputSchema"))), refVal_setOutputSchema );
        setOutputSchema(refVal_setOutputSchema);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("transformId"))))
    {
        utility::string_t refVal_setTransformId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("transformId"))), refVal_setTransformId );
        setTransformId(refVal_setTransformId);
    }
    return ok;
}

utility::string_t GenerateStructuredContentSmsOptions::getSmsId() const
{
    return m_SmsId;
}

void GenerateStructuredContentSmsOptions::setSmsId(const utility::string_t& value)
{
    m_SmsId = value;
    m_SmsIdIsSet = true;
}

bool GenerateStructuredContentSmsOptions::smsIdIsSet() const
{
    return m_SmsIdIsSet;
}

void GenerateStructuredContentSmsOptions::unsetSmsId()
{
    m_SmsIdIsSet = false;
}
utility::string_t GenerateStructuredContentSmsOptions::getInstructions() const
{
    return m_Instructions;
}

void GenerateStructuredContentSmsOptions::setInstructions(const utility::string_t& value)
{
    m_Instructions = value;
    m_InstructionsIsSet = true;
}

bool GenerateStructuredContentSmsOptions::instructionsIsSet() const
{
    return m_InstructionsIsSet;
}

void GenerateStructuredContentSmsOptions::unsetInstructions()
{
    m_InstructionsIsSet = false;
}
std::shared_ptr<StructuredOutputSchema> GenerateStructuredContentSmsOptions::getOutputSchema() const
{
    return m_OutputSchema;
}

void GenerateStructuredContentSmsOptions::setOutputSchema(const std::shared_ptr<StructuredOutputSchema>& value)
{
    m_OutputSchema = value;
    m_OutputSchemaIsSet = true;
}

bool GenerateStructuredContentSmsOptions::outputSchemaIsSet() const
{
    return m_OutputSchemaIsSet;
}

void GenerateStructuredContentSmsOptions::unsetOutputSchema()
{
    m_OutputSchemaIsSet = false;
}
utility::string_t GenerateStructuredContentSmsOptions::getTransformId() const
{
    return m_TransformId;
}

void GenerateStructuredContentSmsOptions::setTransformId(const utility::string_t& value)
{
    m_TransformId = value;
    m_TransformIdIsSet = true;
}

bool GenerateStructuredContentSmsOptions::transformIdIsSet() const
{
    return m_TransformIdIsSet;
}

void GenerateStructuredContentSmsOptions::unsetTransformId()
{
    m_TransformIdIsSet = false;
}
}
}
}
}


