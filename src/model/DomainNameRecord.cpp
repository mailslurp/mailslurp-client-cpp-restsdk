/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/DomainNameRecord.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



DomainNameRecord::DomainNameRecord()
{
    m_Label = utility::conversions::to_string_t("");
    m_LabelIsSet = false;
    m_Required = false;
    m_RequiredIsSet = false;
    m_RecordType = utility::conversions::to_string_t("");
    m_RecordTypeIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_RecordEntriesIsSet = false;
    m_Ttl = 0L;
    m_TtlIsSet = false;
}

DomainNameRecord::~DomainNameRecord()
{
}

void DomainNameRecord::validate()
{
    // TODO: implement validation
}

web::json::value DomainNameRecord::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_LabelIsSet)
    {
        val[utility::conversions::to_string_t(U("label"))] = ModelBase::toJson(m_Label);
    }
    if(m_RequiredIsSet)
    {
        val[utility::conversions::to_string_t(U("required"))] = ModelBase::toJson(m_Required);
    }
    if(m_RecordTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("recordType"))] = ModelBase::toJson(m_RecordType);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_RecordEntriesIsSet)
    {
        val[utility::conversions::to_string_t(U("recordEntries"))] = ModelBase::toJson(m_RecordEntries);
    }
    if(m_TtlIsSet)
    {
        val[utility::conversions::to_string_t(U("ttl"))] = ModelBase::toJson(m_Ttl);
    }

    return val;
}

bool DomainNameRecord::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("label"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("label")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLabel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLabel);
            setLabel(refVal_setLabel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("required"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("required")));
        if(!fieldValue.is_null())
        {
            bool refVal_setRequired;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRequired);
            setRequired(refVal_setRequired);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recordType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recordType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRecordType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecordType);
            setRecordType(refVal_setRecordType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recordEntries"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recordEntries")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setRecordEntries;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecordEntries);
            setRecordEntries(refVal_setRecordEntries);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ttl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ttl")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTtl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTtl);
            setTtl(refVal_setTtl);
        }
    }
    return ok;
}

void DomainNameRecord::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_LabelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("label")), m_Label));
    }
    if(m_RequiredIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("required")), m_Required));
    }
    if(m_RecordTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recordType")), m_RecordType));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_RecordEntriesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recordEntries")), m_RecordEntries));
    }
    if(m_TtlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ttl")), m_Ttl));
    }
}

bool DomainNameRecord::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("label"))))
    {
        utility::string_t refVal_setLabel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("label"))), refVal_setLabel );
        setLabel(refVal_setLabel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("required"))))
    {
        bool refVal_setRequired;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("required"))), refVal_setRequired );
        setRequired(refVal_setRequired);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recordType"))))
    {
        utility::string_t refVal_setRecordType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recordType"))), refVal_setRecordType );
        setRecordType(refVal_setRecordType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recordEntries"))))
    {
        std::vector<utility::string_t> refVal_setRecordEntries;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recordEntries"))), refVal_setRecordEntries );
        setRecordEntries(refVal_setRecordEntries);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ttl"))))
    {
        int64_t refVal_setTtl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ttl"))), refVal_setTtl );
        setTtl(refVal_setTtl);
    }
    return ok;
}

utility::string_t DomainNameRecord::getLabel() const
{
    return m_Label;
}

void DomainNameRecord::setLabel(const utility::string_t& value)
{
    m_Label = value;
    m_LabelIsSet = true;
}

bool DomainNameRecord::labelIsSet() const
{
    return m_LabelIsSet;
}

void DomainNameRecord::unsetLabel()
{
    m_LabelIsSet = false;
}
bool DomainNameRecord::isRequired() const
{
    return m_Required;
}

void DomainNameRecord::setRequired(bool value)
{
    m_Required = value;
    m_RequiredIsSet = true;
}

bool DomainNameRecord::requiredIsSet() const
{
    return m_RequiredIsSet;
}

void DomainNameRecord::unsetRequired()
{
    m_RequiredIsSet = false;
}
utility::string_t DomainNameRecord::getRecordType() const
{
    return m_RecordType;
}

void DomainNameRecord::setRecordType(const utility::string_t& value)
{
    m_RecordType = value;
    m_RecordTypeIsSet = true;
}

bool DomainNameRecord::recordTypeIsSet() const
{
    return m_RecordTypeIsSet;
}

void DomainNameRecord::unsetRecordType()
{
    m_RecordTypeIsSet = false;
}
utility::string_t DomainNameRecord::getName() const
{
    return m_Name;
}

void DomainNameRecord::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool DomainNameRecord::nameIsSet() const
{
    return m_NameIsSet;
}

void DomainNameRecord::unsetName()
{
    m_NameIsSet = false;
}
std::vector<utility::string_t>& DomainNameRecord::getRecordEntries()
{
    return m_RecordEntries;
}

void DomainNameRecord::setRecordEntries(const std::vector<utility::string_t>& value)
{
    m_RecordEntries = value;
    m_RecordEntriesIsSet = true;
}

bool DomainNameRecord::recordEntriesIsSet() const
{
    return m_RecordEntriesIsSet;
}

void DomainNameRecord::unsetRecordEntries()
{
    m_RecordEntriesIsSet = false;
}
int64_t DomainNameRecord::getTtl() const
{
    return m_Ttl;
}

void DomainNameRecord::setTtl(int64_t value)
{
    m_Ttl = value;
    m_TtlIsSet = true;
}

bool DomainNameRecord::ttlIsSet() const
{
    return m_TtlIsSet;
}

void DomainNameRecord::unsetTtl()
{
    m_TtlIsSet = false;
}
}
}
}
}


