/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ConnectorSyncResult.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



ConnectorSyncResult::ConnectorSyncResult()
{
    m_EmailSyncCount = 0;
    m_EmailSyncCountIsSet = false;
    m_LogsIsSet = false;
    m_EmailIdsIsSet = false;
}

ConnectorSyncResult::~ConnectorSyncResult()
{
}

void ConnectorSyncResult::validate()
{
    // TODO: implement validation
}

web::json::value ConnectorSyncResult::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EmailSyncCountIsSet)
    {
        val[utility::conversions::to_string_t(U("emailSyncCount"))] = ModelBase::toJson(m_EmailSyncCount);
    }
    if(m_LogsIsSet)
    {
        val[utility::conversions::to_string_t(U("logs"))] = ModelBase::toJson(m_Logs);
    }
    if(m_EmailIdsIsSet)
    {
        val[utility::conversions::to_string_t(U("emailIds"))] = ModelBase::toJson(m_EmailIds);
    }

    return val;
}

bool ConnectorSyncResult::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("emailSyncCount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("emailSyncCount")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setEmailSyncCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmailSyncCount);
            setEmailSyncCount(refVal_setEmailSyncCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("logs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("logs")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setLogs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLogs);
            setLogs(refVal_setLogs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("emailIds"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("emailIds")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setEmailIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmailIds);
            setEmailIds(refVal_setEmailIds);
        }
    }
    return ok;
}

void ConnectorSyncResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_EmailSyncCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("emailSyncCount")), m_EmailSyncCount));
    }
    if(m_LogsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("logs")), m_Logs));
    }
    if(m_EmailIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("emailIds")), m_EmailIds));
    }
}

bool ConnectorSyncResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("emailSyncCount"))))
    {
        int32_t refVal_setEmailSyncCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("emailSyncCount"))), refVal_setEmailSyncCount );
        setEmailSyncCount(refVal_setEmailSyncCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("logs"))))
    {
        std::vector<utility::string_t> refVal_setLogs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("logs"))), refVal_setLogs );
        setLogs(refVal_setLogs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("emailIds"))))
    {
        std::vector<utility::string_t> refVal_setEmailIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("emailIds"))), refVal_setEmailIds );
        setEmailIds(refVal_setEmailIds);
    }
    return ok;
}

int32_t ConnectorSyncResult::getEmailSyncCount() const
{
    return m_EmailSyncCount;
}

void ConnectorSyncResult::setEmailSyncCount(int32_t value)
{
    m_EmailSyncCount = value;
    m_EmailSyncCountIsSet = true;
}

bool ConnectorSyncResult::emailSyncCountIsSet() const
{
    return m_EmailSyncCountIsSet;
}

void ConnectorSyncResult::unsetEmailSyncCount()
{
    m_EmailSyncCountIsSet = false;
}
std::vector<utility::string_t>& ConnectorSyncResult::getLogs()
{
    return m_Logs;
}

void ConnectorSyncResult::setLogs(const std::vector<utility::string_t>& value)
{
    m_Logs = value;
    m_LogsIsSet = true;
}

bool ConnectorSyncResult::logsIsSet() const
{
    return m_LogsIsSet;
}

void ConnectorSyncResult::unsetLogs()
{
    m_LogsIsSet = false;
}
std::vector<utility::string_t>& ConnectorSyncResult::getEmailIds()
{
    return m_EmailIds;
}

void ConnectorSyncResult::setEmailIds(const std::vector<utility::string_t>& value)
{
    m_EmailIds = value;
    m_EmailIdsIsSet = true;
}

bool ConnectorSyncResult::emailIdsIsSet() const
{
    return m_EmailIdsIsSet;
}

void ConnectorSyncResult::unsetEmailIds()
{
    m_EmailIdsIsSet = false;
}
}
}
}
}


