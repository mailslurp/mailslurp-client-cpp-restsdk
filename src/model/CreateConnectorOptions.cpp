/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateConnectorOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



CreateConnectorOptions::CreateConnectorOptions()
{
    m_ConnectorType = utility::conversions::to_string_t("");
    m_ConnectorTypeIsSet = false;
    m_ConnectorAuthType = utility::conversions::to_string_t("");
    m_ConnectorAuthTypeIsSet = false;
    m_ImapSettingsIsSet = false;
    m_InboxId = utility::conversions::to_string_t("");
    m_InboxIdIsSet = false;
    m_SyncEnabled = false;
    m_SyncEnabledIsSet = false;
    m_SyncScheduleType = utility::conversions::to_string_t("");
    m_SyncScheduleTypeIsSet = false;
    m_SyncInterval = 0;
    m_SyncIntervalIsSet = false;
}

CreateConnectorOptions::~CreateConnectorOptions()
{
}

void CreateConnectorOptions::validate()
{
    // TODO: implement validation
}

web::json::value CreateConnectorOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ConnectorTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("connectorType"))] = ModelBase::toJson(m_ConnectorType);
    }
    if(m_ConnectorAuthTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("connectorAuthType"))] = ModelBase::toJson(m_ConnectorAuthType);
    }
    if(m_ImapSettingsIsSet)
    {
        val[utility::conversions::to_string_t(U("imapSettings"))] = ModelBase::toJson(m_ImapSettings);
    }
    if(m_InboxIdIsSet)
    {
        val[utility::conversions::to_string_t(U("inboxId"))] = ModelBase::toJson(m_InboxId);
    }
    if(m_SyncEnabledIsSet)
    {
        val[utility::conversions::to_string_t(U("syncEnabled"))] = ModelBase::toJson(m_SyncEnabled);
    }
    if(m_SyncScheduleTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("syncScheduleType"))] = ModelBase::toJson(m_SyncScheduleType);
    }
    if(m_SyncIntervalIsSet)
    {
        val[utility::conversions::to_string_t(U("syncInterval"))] = ModelBase::toJson(m_SyncInterval);
    }

    return val;
}

bool CreateConnectorOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("connectorType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("connectorType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setConnectorType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConnectorType);
            setConnectorType(refVal_setConnectorType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("connectorAuthType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("connectorAuthType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setConnectorAuthType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConnectorAuthType);
            setConnectorAuthType(refVal_setConnectorAuthType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("imapSettings"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imapSettings")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CreateConnectorImapOptions> refVal_setImapSettings;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImapSettings);
            setImapSettings(refVal_setImapSettings);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("inboxId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inboxId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInboxId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInboxId);
            setInboxId(refVal_setInboxId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("syncEnabled"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("syncEnabled")));
        if(!fieldValue.is_null())
        {
            bool refVal_setSyncEnabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSyncEnabled);
            setSyncEnabled(refVal_setSyncEnabled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("syncScheduleType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("syncScheduleType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSyncScheduleType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSyncScheduleType);
            setSyncScheduleType(refVal_setSyncScheduleType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("syncInterval"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("syncInterval")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSyncInterval;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSyncInterval);
            setSyncInterval(refVal_setSyncInterval);
        }
    }
    return ok;
}

void CreateConnectorOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ConnectorTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("connectorType")), m_ConnectorType));
    }
    if(m_ConnectorAuthTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("connectorAuthType")), m_ConnectorAuthType));
    }
    if(m_ImapSettingsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imapSettings")), m_ImapSettings));
    }
    if(m_InboxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inboxId")), m_InboxId));
    }
    if(m_SyncEnabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("syncEnabled")), m_SyncEnabled));
    }
    if(m_SyncScheduleTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("syncScheduleType")), m_SyncScheduleType));
    }
    if(m_SyncIntervalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("syncInterval")), m_SyncInterval));
    }
}

bool CreateConnectorOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("connectorType"))))
    {
        utility::string_t refVal_setConnectorType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("connectorType"))), refVal_setConnectorType );
        setConnectorType(refVal_setConnectorType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("connectorAuthType"))))
    {
        utility::string_t refVal_setConnectorAuthType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("connectorAuthType"))), refVal_setConnectorAuthType );
        setConnectorAuthType(refVal_setConnectorAuthType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("imapSettings"))))
    {
        std::shared_ptr<CreateConnectorImapOptions> refVal_setImapSettings;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imapSettings"))), refVal_setImapSettings );
        setImapSettings(refVal_setImapSettings);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("inboxId"))))
    {
        utility::string_t refVal_setInboxId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inboxId"))), refVal_setInboxId );
        setInboxId(refVal_setInboxId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("syncEnabled"))))
    {
        bool refVal_setSyncEnabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("syncEnabled"))), refVal_setSyncEnabled );
        setSyncEnabled(refVal_setSyncEnabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("syncScheduleType"))))
    {
        utility::string_t refVal_setSyncScheduleType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("syncScheduleType"))), refVal_setSyncScheduleType );
        setSyncScheduleType(refVal_setSyncScheduleType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("syncInterval"))))
    {
        int32_t refVal_setSyncInterval;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("syncInterval"))), refVal_setSyncInterval );
        setSyncInterval(refVal_setSyncInterval);
    }
    return ok;
}

utility::string_t CreateConnectorOptions::getConnectorType() const
{
    return m_ConnectorType;
}

void CreateConnectorOptions::setConnectorType(const utility::string_t& value)
{
    m_ConnectorType = value;
    m_ConnectorTypeIsSet = true;
}

bool CreateConnectorOptions::connectorTypeIsSet() const
{
    return m_ConnectorTypeIsSet;
}

void CreateConnectorOptions::unsetConnectorType()
{
    m_ConnectorTypeIsSet = false;
}
utility::string_t CreateConnectorOptions::getConnectorAuthType() const
{
    return m_ConnectorAuthType;
}

void CreateConnectorOptions::setConnectorAuthType(const utility::string_t& value)
{
    m_ConnectorAuthType = value;
    m_ConnectorAuthTypeIsSet = true;
}

bool CreateConnectorOptions::connectorAuthTypeIsSet() const
{
    return m_ConnectorAuthTypeIsSet;
}

void CreateConnectorOptions::unsetConnectorAuthType()
{
    m_ConnectorAuthTypeIsSet = false;
}
std::shared_ptr<CreateConnectorImapOptions> CreateConnectorOptions::getImapSettings() const
{
    return m_ImapSettings;
}

void CreateConnectorOptions::setImapSettings(const std::shared_ptr<CreateConnectorImapOptions>& value)
{
    m_ImapSettings = value;
    m_ImapSettingsIsSet = true;
}

bool CreateConnectorOptions::imapSettingsIsSet() const
{
    return m_ImapSettingsIsSet;
}

void CreateConnectorOptions::unsetImapSettings()
{
    m_ImapSettingsIsSet = false;
}
utility::string_t CreateConnectorOptions::getInboxId() const
{
    return m_InboxId;
}

void CreateConnectorOptions::setInboxId(const utility::string_t& value)
{
    m_InboxId = value;
    m_InboxIdIsSet = true;
}

bool CreateConnectorOptions::inboxIdIsSet() const
{
    return m_InboxIdIsSet;
}

void CreateConnectorOptions::unsetInboxId()
{
    m_InboxIdIsSet = false;
}
bool CreateConnectorOptions::isSyncEnabled() const
{
    return m_SyncEnabled;
}

void CreateConnectorOptions::setSyncEnabled(bool value)
{
    m_SyncEnabled = value;
    m_SyncEnabledIsSet = true;
}

bool CreateConnectorOptions::syncEnabledIsSet() const
{
    return m_SyncEnabledIsSet;
}

void CreateConnectorOptions::unsetSyncEnabled()
{
    m_SyncEnabledIsSet = false;
}
utility::string_t CreateConnectorOptions::getSyncScheduleType() const
{
    return m_SyncScheduleType;
}

void CreateConnectorOptions::setSyncScheduleType(const utility::string_t& value)
{
    m_SyncScheduleType = value;
    m_SyncScheduleTypeIsSet = true;
}

bool CreateConnectorOptions::syncScheduleTypeIsSet() const
{
    return m_SyncScheduleTypeIsSet;
}

void CreateConnectorOptions::unsetSyncScheduleType()
{
    m_SyncScheduleTypeIsSet = false;
}
int32_t CreateConnectorOptions::getSyncInterval() const
{
    return m_SyncInterval;
}

void CreateConnectorOptions::setSyncInterval(int32_t value)
{
    m_SyncInterval = value;
    m_SyncIntervalIsSet = true;
}

bool CreateConnectorOptions::syncIntervalIsSet() const
{
    return m_SyncIntervalIsSet;
}

void CreateConnectorOptions::unsetSyncInterval()
{
    m_SyncIntervalIsSet = false;
}
}
}
}
}


