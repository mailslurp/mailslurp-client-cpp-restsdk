/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ImapSmtpAccessDetails.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



ImapSmtpAccessDetails::ImapSmtpAccessDetails()
{
    m_SecureSmtpServerHost = utility::conversions::to_string_t("");
    m_SecureSmtpServerHostIsSet = false;
    m_SecureSmtpServerPort = 0;
    m_SecureSmtpServerPortIsSet = false;
    m_SecureSmtpUsername = utility::conversions::to_string_t("");
    m_SecureSmtpUsernameIsSet = false;
    m_SecureSmtpPassword = utility::conversions::to_string_t("");
    m_SecureSmtpPasswordIsSet = false;
    m_SmtpServerHost = utility::conversions::to_string_t("");
    m_SmtpServerHostIsSet = false;
    m_SmtpServerPort = 0;
    m_SmtpServerPortIsSet = false;
    m_SmtpUsername = utility::conversions::to_string_t("");
    m_SmtpUsernameIsSet = false;
    m_SmtpPassword = utility::conversions::to_string_t("");
    m_SmtpPasswordIsSet = false;
    m_SecureImapServerHost = utility::conversions::to_string_t("");
    m_SecureImapServerHostIsSet = false;
    m_SecureImapServerPort = 0;
    m_SecureImapServerPortIsSet = false;
    m_SecureImapUsername = utility::conversions::to_string_t("");
    m_SecureImapUsernameIsSet = false;
    m_SecureImapPassword = utility::conversions::to_string_t("");
    m_SecureImapPasswordIsSet = false;
    m_ImapServerHost = utility::conversions::to_string_t("");
    m_ImapServerHostIsSet = false;
    m_ImapServerPort = 0;
    m_ImapServerPortIsSet = false;
    m_ImapUsername = utility::conversions::to_string_t("");
    m_ImapUsernameIsSet = false;
    m_ImapPassword = utility::conversions::to_string_t("");
    m_ImapPasswordIsSet = false;
    m_ImapMailbox = utility::conversions::to_string_t("");
    m_ImapMailboxIsSet = false;
    m_MailFromDomain = utility::conversions::to_string_t("");
    m_MailFromDomainIsSet = false;
}

ImapSmtpAccessDetails::~ImapSmtpAccessDetails()
{
}

void ImapSmtpAccessDetails::validate()
{
    // TODO: implement validation
}

web::json::value ImapSmtpAccessDetails::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SecureSmtpServerHostIsSet)
    {
        val[utility::conversions::to_string_t(U("secureSmtpServerHost"))] = ModelBase::toJson(m_SecureSmtpServerHost);
    }
    if(m_SecureSmtpServerPortIsSet)
    {
        val[utility::conversions::to_string_t(U("secureSmtpServerPort"))] = ModelBase::toJson(m_SecureSmtpServerPort);
    }
    if(m_SecureSmtpUsernameIsSet)
    {
        val[utility::conversions::to_string_t(U("secureSmtpUsername"))] = ModelBase::toJson(m_SecureSmtpUsername);
    }
    if(m_SecureSmtpPasswordIsSet)
    {
        val[utility::conversions::to_string_t(U("secureSmtpPassword"))] = ModelBase::toJson(m_SecureSmtpPassword);
    }
    if(m_SmtpServerHostIsSet)
    {
        val[utility::conversions::to_string_t(U("smtpServerHost"))] = ModelBase::toJson(m_SmtpServerHost);
    }
    if(m_SmtpServerPortIsSet)
    {
        val[utility::conversions::to_string_t(U("smtpServerPort"))] = ModelBase::toJson(m_SmtpServerPort);
    }
    if(m_SmtpUsernameIsSet)
    {
        val[utility::conversions::to_string_t(U("smtpUsername"))] = ModelBase::toJson(m_SmtpUsername);
    }
    if(m_SmtpPasswordIsSet)
    {
        val[utility::conversions::to_string_t(U("smtpPassword"))] = ModelBase::toJson(m_SmtpPassword);
    }
    if(m_SecureImapServerHostIsSet)
    {
        val[utility::conversions::to_string_t(U("secureImapServerHost"))] = ModelBase::toJson(m_SecureImapServerHost);
    }
    if(m_SecureImapServerPortIsSet)
    {
        val[utility::conversions::to_string_t(U("secureImapServerPort"))] = ModelBase::toJson(m_SecureImapServerPort);
    }
    if(m_SecureImapUsernameIsSet)
    {
        val[utility::conversions::to_string_t(U("secureImapUsername"))] = ModelBase::toJson(m_SecureImapUsername);
    }
    if(m_SecureImapPasswordIsSet)
    {
        val[utility::conversions::to_string_t(U("secureImapPassword"))] = ModelBase::toJson(m_SecureImapPassword);
    }
    if(m_ImapServerHostIsSet)
    {
        val[utility::conversions::to_string_t(U("imapServerHost"))] = ModelBase::toJson(m_ImapServerHost);
    }
    if(m_ImapServerPortIsSet)
    {
        val[utility::conversions::to_string_t(U("imapServerPort"))] = ModelBase::toJson(m_ImapServerPort);
    }
    if(m_ImapUsernameIsSet)
    {
        val[utility::conversions::to_string_t(U("imapUsername"))] = ModelBase::toJson(m_ImapUsername);
    }
    if(m_ImapPasswordIsSet)
    {
        val[utility::conversions::to_string_t(U("imapPassword"))] = ModelBase::toJson(m_ImapPassword);
    }
    if(m_ImapMailboxIsSet)
    {
        val[utility::conversions::to_string_t(U("imapMailbox"))] = ModelBase::toJson(m_ImapMailbox);
    }
    if(m_MailFromDomainIsSet)
    {
        val[utility::conversions::to_string_t(U("mailFromDomain"))] = ModelBase::toJson(m_MailFromDomain);
    }

    return val;
}

bool ImapSmtpAccessDetails::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("secureSmtpServerHost"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("secureSmtpServerHost")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSecureSmtpServerHost;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSecureSmtpServerHost);
            setSecureSmtpServerHost(refVal_setSecureSmtpServerHost);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("secureSmtpServerPort"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("secureSmtpServerPort")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSecureSmtpServerPort;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSecureSmtpServerPort);
            setSecureSmtpServerPort(refVal_setSecureSmtpServerPort);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("secureSmtpUsername"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("secureSmtpUsername")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSecureSmtpUsername;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSecureSmtpUsername);
            setSecureSmtpUsername(refVal_setSecureSmtpUsername);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("secureSmtpPassword"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("secureSmtpPassword")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSecureSmtpPassword;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSecureSmtpPassword);
            setSecureSmtpPassword(refVal_setSecureSmtpPassword);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("smtpServerHost"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("smtpServerHost")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSmtpServerHost;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSmtpServerHost);
            setSmtpServerHost(refVal_setSmtpServerHost);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("smtpServerPort"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("smtpServerPort")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSmtpServerPort;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSmtpServerPort);
            setSmtpServerPort(refVal_setSmtpServerPort);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("smtpUsername"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("smtpUsername")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSmtpUsername;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSmtpUsername);
            setSmtpUsername(refVal_setSmtpUsername);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("smtpPassword"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("smtpPassword")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSmtpPassword;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSmtpPassword);
            setSmtpPassword(refVal_setSmtpPassword);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("secureImapServerHost"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("secureImapServerHost")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSecureImapServerHost;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSecureImapServerHost);
            setSecureImapServerHost(refVal_setSecureImapServerHost);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("secureImapServerPort"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("secureImapServerPort")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSecureImapServerPort;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSecureImapServerPort);
            setSecureImapServerPort(refVal_setSecureImapServerPort);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("secureImapUsername"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("secureImapUsername")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSecureImapUsername;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSecureImapUsername);
            setSecureImapUsername(refVal_setSecureImapUsername);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("secureImapPassword"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("secureImapPassword")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSecureImapPassword;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSecureImapPassword);
            setSecureImapPassword(refVal_setSecureImapPassword);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("imapServerHost"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imapServerHost")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setImapServerHost;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImapServerHost);
            setImapServerHost(refVal_setImapServerHost);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("imapServerPort"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imapServerPort")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setImapServerPort;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImapServerPort);
            setImapServerPort(refVal_setImapServerPort);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("imapUsername"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imapUsername")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setImapUsername;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImapUsername);
            setImapUsername(refVal_setImapUsername);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("imapPassword"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imapPassword")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setImapPassword;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImapPassword);
            setImapPassword(refVal_setImapPassword);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("imapMailbox"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imapMailbox")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setImapMailbox;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImapMailbox);
            setImapMailbox(refVal_setImapMailbox);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mailFromDomain"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mailFromDomain")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMailFromDomain;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMailFromDomain);
            setMailFromDomain(refVal_setMailFromDomain);
        }
    }
    return ok;
}

void ImapSmtpAccessDetails::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SecureSmtpServerHostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("secureSmtpServerHost")), m_SecureSmtpServerHost));
    }
    if(m_SecureSmtpServerPortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("secureSmtpServerPort")), m_SecureSmtpServerPort));
    }
    if(m_SecureSmtpUsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("secureSmtpUsername")), m_SecureSmtpUsername));
    }
    if(m_SecureSmtpPasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("secureSmtpPassword")), m_SecureSmtpPassword));
    }
    if(m_SmtpServerHostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("smtpServerHost")), m_SmtpServerHost));
    }
    if(m_SmtpServerPortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("smtpServerPort")), m_SmtpServerPort));
    }
    if(m_SmtpUsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("smtpUsername")), m_SmtpUsername));
    }
    if(m_SmtpPasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("smtpPassword")), m_SmtpPassword));
    }
    if(m_SecureImapServerHostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("secureImapServerHost")), m_SecureImapServerHost));
    }
    if(m_SecureImapServerPortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("secureImapServerPort")), m_SecureImapServerPort));
    }
    if(m_SecureImapUsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("secureImapUsername")), m_SecureImapUsername));
    }
    if(m_SecureImapPasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("secureImapPassword")), m_SecureImapPassword));
    }
    if(m_ImapServerHostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imapServerHost")), m_ImapServerHost));
    }
    if(m_ImapServerPortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imapServerPort")), m_ImapServerPort));
    }
    if(m_ImapUsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imapUsername")), m_ImapUsername));
    }
    if(m_ImapPasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imapPassword")), m_ImapPassword));
    }
    if(m_ImapMailboxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imapMailbox")), m_ImapMailbox));
    }
    if(m_MailFromDomainIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mailFromDomain")), m_MailFromDomain));
    }
}

bool ImapSmtpAccessDetails::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("secureSmtpServerHost"))))
    {
        utility::string_t refVal_setSecureSmtpServerHost;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("secureSmtpServerHost"))), refVal_setSecureSmtpServerHost );
        setSecureSmtpServerHost(refVal_setSecureSmtpServerHost);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("secureSmtpServerPort"))))
    {
        int32_t refVal_setSecureSmtpServerPort;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("secureSmtpServerPort"))), refVal_setSecureSmtpServerPort );
        setSecureSmtpServerPort(refVal_setSecureSmtpServerPort);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("secureSmtpUsername"))))
    {
        utility::string_t refVal_setSecureSmtpUsername;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("secureSmtpUsername"))), refVal_setSecureSmtpUsername );
        setSecureSmtpUsername(refVal_setSecureSmtpUsername);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("secureSmtpPassword"))))
    {
        utility::string_t refVal_setSecureSmtpPassword;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("secureSmtpPassword"))), refVal_setSecureSmtpPassword );
        setSecureSmtpPassword(refVal_setSecureSmtpPassword);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("smtpServerHost"))))
    {
        utility::string_t refVal_setSmtpServerHost;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("smtpServerHost"))), refVal_setSmtpServerHost );
        setSmtpServerHost(refVal_setSmtpServerHost);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("smtpServerPort"))))
    {
        int32_t refVal_setSmtpServerPort;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("smtpServerPort"))), refVal_setSmtpServerPort );
        setSmtpServerPort(refVal_setSmtpServerPort);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("smtpUsername"))))
    {
        utility::string_t refVal_setSmtpUsername;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("smtpUsername"))), refVal_setSmtpUsername );
        setSmtpUsername(refVal_setSmtpUsername);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("smtpPassword"))))
    {
        utility::string_t refVal_setSmtpPassword;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("smtpPassword"))), refVal_setSmtpPassword );
        setSmtpPassword(refVal_setSmtpPassword);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("secureImapServerHost"))))
    {
        utility::string_t refVal_setSecureImapServerHost;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("secureImapServerHost"))), refVal_setSecureImapServerHost );
        setSecureImapServerHost(refVal_setSecureImapServerHost);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("secureImapServerPort"))))
    {
        int32_t refVal_setSecureImapServerPort;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("secureImapServerPort"))), refVal_setSecureImapServerPort );
        setSecureImapServerPort(refVal_setSecureImapServerPort);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("secureImapUsername"))))
    {
        utility::string_t refVal_setSecureImapUsername;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("secureImapUsername"))), refVal_setSecureImapUsername );
        setSecureImapUsername(refVal_setSecureImapUsername);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("secureImapPassword"))))
    {
        utility::string_t refVal_setSecureImapPassword;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("secureImapPassword"))), refVal_setSecureImapPassword );
        setSecureImapPassword(refVal_setSecureImapPassword);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("imapServerHost"))))
    {
        utility::string_t refVal_setImapServerHost;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imapServerHost"))), refVal_setImapServerHost );
        setImapServerHost(refVal_setImapServerHost);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("imapServerPort"))))
    {
        int32_t refVal_setImapServerPort;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imapServerPort"))), refVal_setImapServerPort );
        setImapServerPort(refVal_setImapServerPort);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("imapUsername"))))
    {
        utility::string_t refVal_setImapUsername;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imapUsername"))), refVal_setImapUsername );
        setImapUsername(refVal_setImapUsername);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("imapPassword"))))
    {
        utility::string_t refVal_setImapPassword;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imapPassword"))), refVal_setImapPassword );
        setImapPassword(refVal_setImapPassword);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("imapMailbox"))))
    {
        utility::string_t refVal_setImapMailbox;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imapMailbox"))), refVal_setImapMailbox );
        setImapMailbox(refVal_setImapMailbox);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mailFromDomain"))))
    {
        utility::string_t refVal_setMailFromDomain;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mailFromDomain"))), refVal_setMailFromDomain );
        setMailFromDomain(refVal_setMailFromDomain);
    }
    return ok;
}

utility::string_t ImapSmtpAccessDetails::getSecureSmtpServerHost() const
{
    return m_SecureSmtpServerHost;
}

void ImapSmtpAccessDetails::setSecureSmtpServerHost(const utility::string_t& value)
{
    m_SecureSmtpServerHost = value;
    m_SecureSmtpServerHostIsSet = true;
}

bool ImapSmtpAccessDetails::secureSmtpServerHostIsSet() const
{
    return m_SecureSmtpServerHostIsSet;
}

void ImapSmtpAccessDetails::unsetSecureSmtpServerHost()
{
    m_SecureSmtpServerHostIsSet = false;
}
int32_t ImapSmtpAccessDetails::getSecureSmtpServerPort() const
{
    return m_SecureSmtpServerPort;
}

void ImapSmtpAccessDetails::setSecureSmtpServerPort(int32_t value)
{
    m_SecureSmtpServerPort = value;
    m_SecureSmtpServerPortIsSet = true;
}

bool ImapSmtpAccessDetails::secureSmtpServerPortIsSet() const
{
    return m_SecureSmtpServerPortIsSet;
}

void ImapSmtpAccessDetails::unsetSecureSmtpServerPort()
{
    m_SecureSmtpServerPortIsSet = false;
}
utility::string_t ImapSmtpAccessDetails::getSecureSmtpUsername() const
{
    return m_SecureSmtpUsername;
}

void ImapSmtpAccessDetails::setSecureSmtpUsername(const utility::string_t& value)
{
    m_SecureSmtpUsername = value;
    m_SecureSmtpUsernameIsSet = true;
}

bool ImapSmtpAccessDetails::secureSmtpUsernameIsSet() const
{
    return m_SecureSmtpUsernameIsSet;
}

void ImapSmtpAccessDetails::unsetSecureSmtpUsername()
{
    m_SecureSmtpUsernameIsSet = false;
}
utility::string_t ImapSmtpAccessDetails::getSecureSmtpPassword() const
{
    return m_SecureSmtpPassword;
}

void ImapSmtpAccessDetails::setSecureSmtpPassword(const utility::string_t& value)
{
    m_SecureSmtpPassword = value;
    m_SecureSmtpPasswordIsSet = true;
}

bool ImapSmtpAccessDetails::secureSmtpPasswordIsSet() const
{
    return m_SecureSmtpPasswordIsSet;
}

void ImapSmtpAccessDetails::unsetSecureSmtpPassword()
{
    m_SecureSmtpPasswordIsSet = false;
}
utility::string_t ImapSmtpAccessDetails::getSmtpServerHost() const
{
    return m_SmtpServerHost;
}

void ImapSmtpAccessDetails::setSmtpServerHost(const utility::string_t& value)
{
    m_SmtpServerHost = value;
    m_SmtpServerHostIsSet = true;
}

bool ImapSmtpAccessDetails::smtpServerHostIsSet() const
{
    return m_SmtpServerHostIsSet;
}

void ImapSmtpAccessDetails::unsetSmtpServerHost()
{
    m_SmtpServerHostIsSet = false;
}
int32_t ImapSmtpAccessDetails::getSmtpServerPort() const
{
    return m_SmtpServerPort;
}

void ImapSmtpAccessDetails::setSmtpServerPort(int32_t value)
{
    m_SmtpServerPort = value;
    m_SmtpServerPortIsSet = true;
}

bool ImapSmtpAccessDetails::smtpServerPortIsSet() const
{
    return m_SmtpServerPortIsSet;
}

void ImapSmtpAccessDetails::unsetSmtpServerPort()
{
    m_SmtpServerPortIsSet = false;
}
utility::string_t ImapSmtpAccessDetails::getSmtpUsername() const
{
    return m_SmtpUsername;
}

void ImapSmtpAccessDetails::setSmtpUsername(const utility::string_t& value)
{
    m_SmtpUsername = value;
    m_SmtpUsernameIsSet = true;
}

bool ImapSmtpAccessDetails::smtpUsernameIsSet() const
{
    return m_SmtpUsernameIsSet;
}

void ImapSmtpAccessDetails::unsetSmtpUsername()
{
    m_SmtpUsernameIsSet = false;
}
utility::string_t ImapSmtpAccessDetails::getSmtpPassword() const
{
    return m_SmtpPassword;
}

void ImapSmtpAccessDetails::setSmtpPassword(const utility::string_t& value)
{
    m_SmtpPassword = value;
    m_SmtpPasswordIsSet = true;
}

bool ImapSmtpAccessDetails::smtpPasswordIsSet() const
{
    return m_SmtpPasswordIsSet;
}

void ImapSmtpAccessDetails::unsetSmtpPassword()
{
    m_SmtpPasswordIsSet = false;
}
utility::string_t ImapSmtpAccessDetails::getSecureImapServerHost() const
{
    return m_SecureImapServerHost;
}

void ImapSmtpAccessDetails::setSecureImapServerHost(const utility::string_t& value)
{
    m_SecureImapServerHost = value;
    m_SecureImapServerHostIsSet = true;
}

bool ImapSmtpAccessDetails::secureImapServerHostIsSet() const
{
    return m_SecureImapServerHostIsSet;
}

void ImapSmtpAccessDetails::unsetSecureImapServerHost()
{
    m_SecureImapServerHostIsSet = false;
}
int32_t ImapSmtpAccessDetails::getSecureImapServerPort() const
{
    return m_SecureImapServerPort;
}

void ImapSmtpAccessDetails::setSecureImapServerPort(int32_t value)
{
    m_SecureImapServerPort = value;
    m_SecureImapServerPortIsSet = true;
}

bool ImapSmtpAccessDetails::secureImapServerPortIsSet() const
{
    return m_SecureImapServerPortIsSet;
}

void ImapSmtpAccessDetails::unsetSecureImapServerPort()
{
    m_SecureImapServerPortIsSet = false;
}
utility::string_t ImapSmtpAccessDetails::getSecureImapUsername() const
{
    return m_SecureImapUsername;
}

void ImapSmtpAccessDetails::setSecureImapUsername(const utility::string_t& value)
{
    m_SecureImapUsername = value;
    m_SecureImapUsernameIsSet = true;
}

bool ImapSmtpAccessDetails::secureImapUsernameIsSet() const
{
    return m_SecureImapUsernameIsSet;
}

void ImapSmtpAccessDetails::unsetSecureImapUsername()
{
    m_SecureImapUsernameIsSet = false;
}
utility::string_t ImapSmtpAccessDetails::getSecureImapPassword() const
{
    return m_SecureImapPassword;
}

void ImapSmtpAccessDetails::setSecureImapPassword(const utility::string_t& value)
{
    m_SecureImapPassword = value;
    m_SecureImapPasswordIsSet = true;
}

bool ImapSmtpAccessDetails::secureImapPasswordIsSet() const
{
    return m_SecureImapPasswordIsSet;
}

void ImapSmtpAccessDetails::unsetSecureImapPassword()
{
    m_SecureImapPasswordIsSet = false;
}
utility::string_t ImapSmtpAccessDetails::getImapServerHost() const
{
    return m_ImapServerHost;
}

void ImapSmtpAccessDetails::setImapServerHost(const utility::string_t& value)
{
    m_ImapServerHost = value;
    m_ImapServerHostIsSet = true;
}

bool ImapSmtpAccessDetails::imapServerHostIsSet() const
{
    return m_ImapServerHostIsSet;
}

void ImapSmtpAccessDetails::unsetImapServerHost()
{
    m_ImapServerHostIsSet = false;
}
int32_t ImapSmtpAccessDetails::getImapServerPort() const
{
    return m_ImapServerPort;
}

void ImapSmtpAccessDetails::setImapServerPort(int32_t value)
{
    m_ImapServerPort = value;
    m_ImapServerPortIsSet = true;
}

bool ImapSmtpAccessDetails::imapServerPortIsSet() const
{
    return m_ImapServerPortIsSet;
}

void ImapSmtpAccessDetails::unsetImapServerPort()
{
    m_ImapServerPortIsSet = false;
}
utility::string_t ImapSmtpAccessDetails::getImapUsername() const
{
    return m_ImapUsername;
}

void ImapSmtpAccessDetails::setImapUsername(const utility::string_t& value)
{
    m_ImapUsername = value;
    m_ImapUsernameIsSet = true;
}

bool ImapSmtpAccessDetails::imapUsernameIsSet() const
{
    return m_ImapUsernameIsSet;
}

void ImapSmtpAccessDetails::unsetImapUsername()
{
    m_ImapUsernameIsSet = false;
}
utility::string_t ImapSmtpAccessDetails::getImapPassword() const
{
    return m_ImapPassword;
}

void ImapSmtpAccessDetails::setImapPassword(const utility::string_t& value)
{
    m_ImapPassword = value;
    m_ImapPasswordIsSet = true;
}

bool ImapSmtpAccessDetails::imapPasswordIsSet() const
{
    return m_ImapPasswordIsSet;
}

void ImapSmtpAccessDetails::unsetImapPassword()
{
    m_ImapPasswordIsSet = false;
}
utility::string_t ImapSmtpAccessDetails::getImapMailbox() const
{
    return m_ImapMailbox;
}

void ImapSmtpAccessDetails::setImapMailbox(const utility::string_t& value)
{
    m_ImapMailbox = value;
    m_ImapMailboxIsSet = true;
}

bool ImapSmtpAccessDetails::imapMailboxIsSet() const
{
    return m_ImapMailboxIsSet;
}

void ImapSmtpAccessDetails::unsetImapMailbox()
{
    m_ImapMailboxIsSet = false;
}
utility::string_t ImapSmtpAccessDetails::getMailFromDomain() const
{
    return m_MailFromDomain;
}

void ImapSmtpAccessDetails::setMailFromDomain(const utility::string_t& value)
{
    m_MailFromDomain = value;
    m_MailFromDomainIsSet = true;
}

bool ImapSmtpAccessDetails::mailFromDomainIsSet() const
{
    return m_MailFromDomainIsSet;
}

void ImapSmtpAccessDetails::unsetMailFromDomain()
{
    m_MailFromDomainIsSet = false;
}
}
}
}
}


