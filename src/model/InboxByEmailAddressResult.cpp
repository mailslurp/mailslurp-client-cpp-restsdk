/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/InboxByEmailAddressResult.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



InboxByEmailAddressResult::InboxByEmailAddressResult()
{
    m_InboxId = utility::conversions::to_string_t("");
    m_InboxIdIsSet = false;
    m_Exists = false;
    m_ExistsIsSet = false;
}

InboxByEmailAddressResult::~InboxByEmailAddressResult()
{
}

void InboxByEmailAddressResult::validate()
{
    // TODO: implement validation
}

web::json::value InboxByEmailAddressResult::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_InboxIdIsSet)
    {
        val[utility::conversions::to_string_t(U("inboxId"))] = ModelBase::toJson(m_InboxId);
    }
    if(m_ExistsIsSet)
    {
        val[utility::conversions::to_string_t(U("exists"))] = ModelBase::toJson(m_Exists);
    }

    return val;
}

bool InboxByEmailAddressResult::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("inboxId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inboxId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInboxId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInboxId);
            setInboxId(refVal_setInboxId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("exists"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exists")));
        if(!fieldValue.is_null())
        {
            bool refVal_setExists;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExists);
            setExists(refVal_setExists);
        }
    }
    return ok;
}

void InboxByEmailAddressResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_InboxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inboxId")), m_InboxId));
    }
    if(m_ExistsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exists")), m_Exists));
    }
}

bool InboxByEmailAddressResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("inboxId"))))
    {
        utility::string_t refVal_setInboxId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inboxId"))), refVal_setInboxId );
        setInboxId(refVal_setInboxId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("exists"))))
    {
        bool refVal_setExists;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exists"))), refVal_setExists );
        setExists(refVal_setExists);
    }
    return ok;
}

utility::string_t InboxByEmailAddressResult::getInboxId() const
{
    return m_InboxId;
}

void InboxByEmailAddressResult::setInboxId(const utility::string_t& value)
{
    m_InboxId = value;
    m_InboxIdIsSet = true;
}

bool InboxByEmailAddressResult::inboxIdIsSet() const
{
    return m_InboxIdIsSet;
}

void InboxByEmailAddressResult::unsetInboxId()
{
    m_InboxIdIsSet = false;
}
bool InboxByEmailAddressResult::isExists() const
{
    return m_Exists;
}

void InboxByEmailAddressResult::setExists(bool value)
{
    m_Exists = value;
    m_ExistsIsSet = true;
}

bool InboxByEmailAddressResult::existsIsSet() const
{
    return m_ExistsIsSet;
}

void InboxByEmailAddressResult::unsetExists()
{
    m_ExistsIsSet = false;
}
}
}
}
}


