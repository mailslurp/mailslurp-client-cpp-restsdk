/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/InboxReplierDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



InboxReplierDto::InboxReplierDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_InboxId = utility::conversions::to_string_t("");
    m_InboxIdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Field = utility::conversions::to_string_t("");
    m_FieldIsSet = false;
    m_Match = utility::conversions::to_string_t("");
    m_MatchIsSet = false;
    m_ReplyTo = utility::conversions::to_string_t("");
    m_ReplyToIsSet = false;
    m_Subject = utility::conversions::to_string_t("");
    m_SubjectIsSet = false;
    m_From = utility::conversions::to_string_t("");
    m_FromIsSet = false;
    m_Charset = utility::conversions::to_string_t("");
    m_CharsetIsSet = false;
    m_IsHTML = false;
    m_IsHTMLIsSet = false;
    m_TemplateId = utility::conversions::to_string_t("");
    m_TemplateIdIsSet = false;
    m_TemplateVariablesIsSet = false;
    m_IgnoreReplyTo = false;
    m_IgnoreReplyToIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
}

InboxReplierDto::~InboxReplierDto()
{
}

void InboxReplierDto::validate()
{
    // TODO: implement validation
}

web::json::value InboxReplierDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_InboxIdIsSet)
    {
        val[utility::conversions::to_string_t(U("inboxId"))] = ModelBase::toJson(m_InboxId);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_FieldIsSet)
    {
        val[utility::conversions::to_string_t(U("field"))] = ModelBase::toJson(m_Field);
    }
    if(m_MatchIsSet)
    {
        val[utility::conversions::to_string_t(U("match"))] = ModelBase::toJson(m_Match);
    }
    if(m_ReplyToIsSet)
    {
        val[utility::conversions::to_string_t(U("replyTo"))] = ModelBase::toJson(m_ReplyTo);
    }
    if(m_SubjectIsSet)
    {
        val[utility::conversions::to_string_t(U("subject"))] = ModelBase::toJson(m_Subject);
    }
    if(m_FromIsSet)
    {
        val[utility::conversions::to_string_t(U("from"))] = ModelBase::toJson(m_From);
    }
    if(m_CharsetIsSet)
    {
        val[utility::conversions::to_string_t(U("charset"))] = ModelBase::toJson(m_Charset);
    }
    if(m_IsHTMLIsSet)
    {
        val[utility::conversions::to_string_t(U("isHTML"))] = ModelBase::toJson(m_IsHTML);
    }
    if(m_TemplateIdIsSet)
    {
        val[utility::conversions::to_string_t(U("templateId"))] = ModelBase::toJson(m_TemplateId);
    }
    if(m_TemplateVariablesIsSet)
    {
        val[utility::conversions::to_string_t(U("templateVariables"))] = ModelBase::toJson(m_TemplateVariables);
    }
    if(m_IgnoreReplyToIsSet)
    {
        val[utility::conversions::to_string_t(U("ignoreReplyTo"))] = ModelBase::toJson(m_IgnoreReplyTo);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }

    return val;
}

bool InboxReplierDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("inboxId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inboxId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInboxId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInboxId);
            setInboxId(refVal_setInboxId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("field"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("field")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setField;
            ok &= ModelBase::fromJson(fieldValue, refVal_setField);
            setField(refVal_setField);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("match"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("match")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMatch;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMatch);
            setMatch(refVal_setMatch);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("replyTo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("replyTo")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setReplyTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReplyTo);
            setReplyTo(refVal_setReplyTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subject"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subject")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubject;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubject);
            setSubject(refVal_setSubject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("from"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("from")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFrom;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFrom);
            setFrom(refVal_setFrom);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("charset"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("charset")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCharset;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCharset);
            setCharset(refVal_setCharset);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isHTML"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isHTML")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsHTML;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsHTML);
            setIsHTML(refVal_setIsHTML);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("templateId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("templateId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTemplateId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTemplateId);
            setTemplateId(refVal_setTemplateId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("templateVariables"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("templateVariables")));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<Object>> refVal_setTemplateVariables;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTemplateVariables);
            setTemplateVariables(refVal_setTemplateVariables);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ignoreReplyTo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ignoreReplyTo")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIgnoreReplyTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIgnoreReplyTo);
            setIgnoreReplyTo(refVal_setIgnoreReplyTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    return ok;
}

void InboxReplierDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_InboxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inboxId")), m_InboxId));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_FieldIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("field")), m_Field));
    }
    if(m_MatchIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("match")), m_Match));
    }
    if(m_ReplyToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("replyTo")), m_ReplyTo));
    }
    if(m_SubjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subject")), m_Subject));
    }
    if(m_FromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("from")), m_From));
    }
    if(m_CharsetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("charset")), m_Charset));
    }
    if(m_IsHTMLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isHTML")), m_IsHTML));
    }
    if(m_TemplateIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("templateId")), m_TemplateId));
    }
    if(m_TemplateVariablesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("templateVariables")), m_TemplateVariables));
    }
    if(m_IgnoreReplyToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ignoreReplyTo")), m_IgnoreReplyTo));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
}

bool InboxReplierDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("inboxId"))))
    {
        utility::string_t refVal_setInboxId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inboxId"))), refVal_setInboxId );
        setInboxId(refVal_setInboxId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("field"))))
    {
        utility::string_t refVal_setField;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("field"))), refVal_setField );
        setField(refVal_setField);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("match"))))
    {
        utility::string_t refVal_setMatch;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("match"))), refVal_setMatch );
        setMatch(refVal_setMatch);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("replyTo"))))
    {
        utility::string_t refVal_setReplyTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("replyTo"))), refVal_setReplyTo );
        setReplyTo(refVal_setReplyTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subject"))))
    {
        utility::string_t refVal_setSubject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subject"))), refVal_setSubject );
        setSubject(refVal_setSubject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("from"))))
    {
        utility::string_t refVal_setFrom;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("from"))), refVal_setFrom );
        setFrom(refVal_setFrom);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("charset"))))
    {
        utility::string_t refVal_setCharset;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("charset"))), refVal_setCharset );
        setCharset(refVal_setCharset);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isHTML"))))
    {
        bool refVal_setIsHTML;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isHTML"))), refVal_setIsHTML );
        setIsHTML(refVal_setIsHTML);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("templateId"))))
    {
        utility::string_t refVal_setTemplateId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("templateId"))), refVal_setTemplateId );
        setTemplateId(refVal_setTemplateId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("templateVariables"))))
    {
        std::map<utility::string_t, std::shared_ptr<Object>> refVal_setTemplateVariables;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("templateVariables"))), refVal_setTemplateVariables );
        setTemplateVariables(refVal_setTemplateVariables);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ignoreReplyTo"))))
    {
        bool refVal_setIgnoreReplyTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ignoreReplyTo"))), refVal_setIgnoreReplyTo );
        setIgnoreReplyTo(refVal_setIgnoreReplyTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    return ok;
}

utility::string_t InboxReplierDto::getId() const
{
    return m_Id;
}

void InboxReplierDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool InboxReplierDto::idIsSet() const
{
    return m_IdIsSet;
}

void InboxReplierDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t InboxReplierDto::getInboxId() const
{
    return m_InboxId;
}

void InboxReplierDto::setInboxId(const utility::string_t& value)
{
    m_InboxId = value;
    m_InboxIdIsSet = true;
}

bool InboxReplierDto::inboxIdIsSet() const
{
    return m_InboxIdIsSet;
}

void InboxReplierDto::unsetInboxId()
{
    m_InboxIdIsSet = false;
}
utility::string_t InboxReplierDto::getName() const
{
    return m_Name;
}

void InboxReplierDto::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool InboxReplierDto::nameIsSet() const
{
    return m_NameIsSet;
}

void InboxReplierDto::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t InboxReplierDto::getField() const
{
    return m_Field;
}

void InboxReplierDto::setField(const utility::string_t& value)
{
    m_Field = value;
    m_FieldIsSet = true;
}

bool InboxReplierDto::fieldIsSet() const
{
    return m_FieldIsSet;
}

void InboxReplierDto::unsetField()
{
    m_FieldIsSet = false;
}
utility::string_t InboxReplierDto::getMatch() const
{
    return m_Match;
}

void InboxReplierDto::setMatch(const utility::string_t& value)
{
    m_Match = value;
    m_MatchIsSet = true;
}

bool InboxReplierDto::matchIsSet() const
{
    return m_MatchIsSet;
}

void InboxReplierDto::unsetMatch()
{
    m_MatchIsSet = false;
}
utility::string_t InboxReplierDto::getReplyTo() const
{
    return m_ReplyTo;
}

void InboxReplierDto::setReplyTo(const utility::string_t& value)
{
    m_ReplyTo = value;
    m_ReplyToIsSet = true;
}

bool InboxReplierDto::replyToIsSet() const
{
    return m_ReplyToIsSet;
}

void InboxReplierDto::unsetReplyTo()
{
    m_ReplyToIsSet = false;
}
utility::string_t InboxReplierDto::getSubject() const
{
    return m_Subject;
}

void InboxReplierDto::setSubject(const utility::string_t& value)
{
    m_Subject = value;
    m_SubjectIsSet = true;
}

bool InboxReplierDto::subjectIsSet() const
{
    return m_SubjectIsSet;
}

void InboxReplierDto::unsetSubject()
{
    m_SubjectIsSet = false;
}
utility::string_t InboxReplierDto::getFrom() const
{
    return m_From;
}

void InboxReplierDto::setFrom(const utility::string_t& value)
{
    m_From = value;
    m_FromIsSet = true;
}

bool InboxReplierDto::fromIsSet() const
{
    return m_FromIsSet;
}

void InboxReplierDto::unsetFrom()
{
    m_FromIsSet = false;
}
utility::string_t InboxReplierDto::getCharset() const
{
    return m_Charset;
}

void InboxReplierDto::setCharset(const utility::string_t& value)
{
    m_Charset = value;
    m_CharsetIsSet = true;
}

bool InboxReplierDto::charsetIsSet() const
{
    return m_CharsetIsSet;
}

void InboxReplierDto::unsetCharset()
{
    m_CharsetIsSet = false;
}
bool InboxReplierDto::isIsHTML() const
{
    return m_IsHTML;
}

void InboxReplierDto::setIsHTML(bool value)
{
    m_IsHTML = value;
    m_IsHTMLIsSet = true;
}

bool InboxReplierDto::isHTMLIsSet() const
{
    return m_IsHTMLIsSet;
}

void InboxReplierDto::unsetIsHTML()
{
    m_IsHTMLIsSet = false;
}
utility::string_t InboxReplierDto::getTemplateId() const
{
    return m_TemplateId;
}

void InboxReplierDto::setTemplateId(const utility::string_t& value)
{
    m_TemplateId = value;
    m_TemplateIdIsSet = true;
}

bool InboxReplierDto::templateIdIsSet() const
{
    return m_TemplateIdIsSet;
}

void InboxReplierDto::unsetTemplateId()
{
    m_TemplateIdIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<Object>>& InboxReplierDto::getTemplateVariables()
{
    return m_TemplateVariables;
}

void InboxReplierDto::setTemplateVariables(const std::map<utility::string_t, std::shared_ptr<Object>>& value)
{
    m_TemplateVariables = value;
    m_TemplateVariablesIsSet = true;
}

bool InboxReplierDto::templateVariablesIsSet() const
{
    return m_TemplateVariablesIsSet;
}

void InboxReplierDto::unsetTemplateVariables()
{
    m_TemplateVariablesIsSet = false;
}
bool InboxReplierDto::isIgnoreReplyTo() const
{
    return m_IgnoreReplyTo;
}

void InboxReplierDto::setIgnoreReplyTo(bool value)
{
    m_IgnoreReplyTo = value;
    m_IgnoreReplyToIsSet = true;
}

bool InboxReplierDto::ignoreReplyToIsSet() const
{
    return m_IgnoreReplyToIsSet;
}

void InboxReplierDto::unsetIgnoreReplyTo()
{
    m_IgnoreReplyToIsSet = false;
}
utility::datetime InboxReplierDto::getCreatedAt() const
{
    return m_CreatedAt;
}

void InboxReplierDto::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool InboxReplierDto::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void InboxReplierDto::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
}
}
}
}


