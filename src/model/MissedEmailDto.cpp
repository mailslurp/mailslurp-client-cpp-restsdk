/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/MissedEmailDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



MissedEmailDto::MissedEmailDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_Subject = utility::conversions::to_string_t("");
    m_SubjectIsSet = false;
    m_BodyExcerpt = utility::conversions::to_string_t("");
    m_BodyExcerptIsSet = false;
    m_AttachmentCount = 0;
    m_AttachmentCountIsSet = false;
    m_From = utility::conversions::to_string_t("");
    m_FromIsSet = false;
    m_RawUrl = utility::conversions::to_string_t("");
    m_RawUrlIsSet = false;
    m_RawKey = utility::conversions::to_string_t("");
    m_RawKeyIsSet = false;
    m_RawBucket = utility::conversions::to_string_t("");
    m_RawBucketIsSet = false;
    m_CanRestore = false;
    m_CanRestoreIsSet = false;
    m_ToIsSet = false;
    m_CcIsSet = false;
    m_BccIsSet = false;
    m_InboxIdsIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_UpdatedAt = utility::datetime();
    m_UpdatedAtIsSet = false;
}

MissedEmailDto::~MissedEmailDto()
{
}

void MissedEmailDto::validate()
{
    // TODO: implement validation
}

web::json::value MissedEmailDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t(U("userId"))] = ModelBase::toJson(m_UserId);
    }
    if(m_SubjectIsSet)
    {
        val[utility::conversions::to_string_t(U("subject"))] = ModelBase::toJson(m_Subject);
    }
    if(m_BodyExcerptIsSet)
    {
        val[utility::conversions::to_string_t(U("bodyExcerpt"))] = ModelBase::toJson(m_BodyExcerpt);
    }
    if(m_AttachmentCountIsSet)
    {
        val[utility::conversions::to_string_t(U("attachmentCount"))] = ModelBase::toJson(m_AttachmentCount);
    }
    if(m_FromIsSet)
    {
        val[utility::conversions::to_string_t(U("from"))] = ModelBase::toJson(m_From);
    }
    if(m_RawUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("rawUrl"))] = ModelBase::toJson(m_RawUrl);
    }
    if(m_RawKeyIsSet)
    {
        val[utility::conversions::to_string_t(U("rawKey"))] = ModelBase::toJson(m_RawKey);
    }
    if(m_RawBucketIsSet)
    {
        val[utility::conversions::to_string_t(U("rawBucket"))] = ModelBase::toJson(m_RawBucket);
    }
    if(m_CanRestoreIsSet)
    {
        val[utility::conversions::to_string_t(U("canRestore"))] = ModelBase::toJson(m_CanRestore);
    }
    if(m_ToIsSet)
    {
        val[utility::conversions::to_string_t(U("to"))] = ModelBase::toJson(m_To);
    }
    if(m_CcIsSet)
    {
        val[utility::conversions::to_string_t(U("cc"))] = ModelBase::toJson(m_Cc);
    }
    if(m_BccIsSet)
    {
        val[utility::conversions::to_string_t(U("bcc"))] = ModelBase::toJson(m_Bcc);
    }
    if(m_InboxIdsIsSet)
    {
        val[utility::conversions::to_string_t(U("inboxIds"))] = ModelBase::toJson(m_InboxIds);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_UpdatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("updatedAt"))] = ModelBase::toJson(m_UpdatedAt);
    }

    return val;
}

bool MissedEmailDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("userId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("userId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserId);
            setUserId(refVal_setUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subject"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subject")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubject;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubject);
            setSubject(refVal_setSubject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bodyExcerpt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bodyExcerpt")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBodyExcerpt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBodyExcerpt);
            setBodyExcerpt(refVal_setBodyExcerpt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("attachmentCount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("attachmentCount")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAttachmentCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAttachmentCount);
            setAttachmentCount(refVal_setAttachmentCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("from"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("from")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFrom;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFrom);
            setFrom(refVal_setFrom);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rawUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rawUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRawUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRawUrl);
            setRawUrl(refVal_setRawUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rawKey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rawKey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRawKey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRawKey);
            setRawKey(refVal_setRawKey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rawBucket"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rawBucket")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRawBucket;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRawBucket);
            setRawBucket(refVal_setRawBucket);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("canRestore"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("canRestore")));
        if(!fieldValue.is_null())
        {
            bool refVal_setCanRestore;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCanRestore);
            setCanRestore(refVal_setCanRestore);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("to"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("to")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTo);
            setTo(refVal_setTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cc")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setCc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCc);
            setCc(refVal_setCc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bcc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bcc")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setBcc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBcc);
            setBcc(refVal_setBcc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("inboxIds"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inboxIds")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setInboxIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInboxIds);
            setInboxIds(refVal_setInboxIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updatedAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updatedAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setUpdatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedAt);
            setUpdatedAt(refVal_setUpdatedAt);
        }
    }
    return ok;
}

void MissedEmailDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("userId")), m_UserId));
    }
    if(m_SubjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subject")), m_Subject));
    }
    if(m_BodyExcerptIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bodyExcerpt")), m_BodyExcerpt));
    }
    if(m_AttachmentCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("attachmentCount")), m_AttachmentCount));
    }
    if(m_FromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("from")), m_From));
    }
    if(m_RawUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rawUrl")), m_RawUrl));
    }
    if(m_RawKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rawKey")), m_RawKey));
    }
    if(m_RawBucketIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rawBucket")), m_RawBucket));
    }
    if(m_CanRestoreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("canRestore")), m_CanRestore));
    }
    if(m_ToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("to")), m_To));
    }
    if(m_CcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cc")), m_Cc));
    }
    if(m_BccIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bcc")), m_Bcc));
    }
    if(m_InboxIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inboxIds")), m_InboxIds));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updatedAt")), m_UpdatedAt));
    }
}

bool MissedEmailDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("userId"))))
    {
        utility::string_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("userId"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subject"))))
    {
        utility::string_t refVal_setSubject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subject"))), refVal_setSubject );
        setSubject(refVal_setSubject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bodyExcerpt"))))
    {
        utility::string_t refVal_setBodyExcerpt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bodyExcerpt"))), refVal_setBodyExcerpt );
        setBodyExcerpt(refVal_setBodyExcerpt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("attachmentCount"))))
    {
        int32_t refVal_setAttachmentCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("attachmentCount"))), refVal_setAttachmentCount );
        setAttachmentCount(refVal_setAttachmentCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("from"))))
    {
        utility::string_t refVal_setFrom;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("from"))), refVal_setFrom );
        setFrom(refVal_setFrom);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rawUrl"))))
    {
        utility::string_t refVal_setRawUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rawUrl"))), refVal_setRawUrl );
        setRawUrl(refVal_setRawUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rawKey"))))
    {
        utility::string_t refVal_setRawKey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rawKey"))), refVal_setRawKey );
        setRawKey(refVal_setRawKey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rawBucket"))))
    {
        utility::string_t refVal_setRawBucket;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rawBucket"))), refVal_setRawBucket );
        setRawBucket(refVal_setRawBucket);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("canRestore"))))
    {
        bool refVal_setCanRestore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("canRestore"))), refVal_setCanRestore );
        setCanRestore(refVal_setCanRestore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("to"))))
    {
        std::vector<utility::string_t> refVal_setTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("to"))), refVal_setTo );
        setTo(refVal_setTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cc"))))
    {
        std::vector<utility::string_t> refVal_setCc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cc"))), refVal_setCc );
        setCc(refVal_setCc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bcc"))))
    {
        std::vector<utility::string_t> refVal_setBcc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bcc"))), refVal_setBcc );
        setBcc(refVal_setBcc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("inboxIds"))))
    {
        std::vector<utility::string_t> refVal_setInboxIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inboxIds"))), refVal_setInboxIds );
        setInboxIds(refVal_setInboxIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updatedAt"))))
    {
        utility::datetime refVal_setUpdatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updatedAt"))), refVal_setUpdatedAt );
        setUpdatedAt(refVal_setUpdatedAt);
    }
    return ok;
}

utility::string_t MissedEmailDto::getId() const
{
    return m_Id;
}

void MissedEmailDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool MissedEmailDto::idIsSet() const
{
    return m_IdIsSet;
}

void MissedEmailDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t MissedEmailDto::getUserId() const
{
    return m_UserId;
}

void MissedEmailDto::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool MissedEmailDto::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void MissedEmailDto::unsetUserId()
{
    m_UserIdIsSet = false;
}
utility::string_t MissedEmailDto::getSubject() const
{
    return m_Subject;
}

void MissedEmailDto::setSubject(const utility::string_t& value)
{
    m_Subject = value;
    m_SubjectIsSet = true;
}

bool MissedEmailDto::subjectIsSet() const
{
    return m_SubjectIsSet;
}

void MissedEmailDto::unsetSubject()
{
    m_SubjectIsSet = false;
}
utility::string_t MissedEmailDto::getBodyExcerpt() const
{
    return m_BodyExcerpt;
}

void MissedEmailDto::setBodyExcerpt(const utility::string_t& value)
{
    m_BodyExcerpt = value;
    m_BodyExcerptIsSet = true;
}

bool MissedEmailDto::bodyExcerptIsSet() const
{
    return m_BodyExcerptIsSet;
}

void MissedEmailDto::unsetBodyExcerpt()
{
    m_BodyExcerptIsSet = false;
}
int32_t MissedEmailDto::getAttachmentCount() const
{
    return m_AttachmentCount;
}

void MissedEmailDto::setAttachmentCount(int32_t value)
{
    m_AttachmentCount = value;
    m_AttachmentCountIsSet = true;
}

bool MissedEmailDto::attachmentCountIsSet() const
{
    return m_AttachmentCountIsSet;
}

void MissedEmailDto::unsetAttachmentCount()
{
    m_AttachmentCountIsSet = false;
}
utility::string_t MissedEmailDto::getFrom() const
{
    return m_From;
}

void MissedEmailDto::setFrom(const utility::string_t& value)
{
    m_From = value;
    m_FromIsSet = true;
}

bool MissedEmailDto::fromIsSet() const
{
    return m_FromIsSet;
}

void MissedEmailDto::unsetFrom()
{
    m_FromIsSet = false;
}
utility::string_t MissedEmailDto::getRawUrl() const
{
    return m_RawUrl;
}

void MissedEmailDto::setRawUrl(const utility::string_t& value)
{
    m_RawUrl = value;
    m_RawUrlIsSet = true;
}

bool MissedEmailDto::rawUrlIsSet() const
{
    return m_RawUrlIsSet;
}

void MissedEmailDto::unsetRawUrl()
{
    m_RawUrlIsSet = false;
}
utility::string_t MissedEmailDto::getRawKey() const
{
    return m_RawKey;
}

void MissedEmailDto::setRawKey(const utility::string_t& value)
{
    m_RawKey = value;
    m_RawKeyIsSet = true;
}

bool MissedEmailDto::rawKeyIsSet() const
{
    return m_RawKeyIsSet;
}

void MissedEmailDto::unsetRawKey()
{
    m_RawKeyIsSet = false;
}
utility::string_t MissedEmailDto::getRawBucket() const
{
    return m_RawBucket;
}

void MissedEmailDto::setRawBucket(const utility::string_t& value)
{
    m_RawBucket = value;
    m_RawBucketIsSet = true;
}

bool MissedEmailDto::rawBucketIsSet() const
{
    return m_RawBucketIsSet;
}

void MissedEmailDto::unsetRawBucket()
{
    m_RawBucketIsSet = false;
}
bool MissedEmailDto::isCanRestore() const
{
    return m_CanRestore;
}

void MissedEmailDto::setCanRestore(bool value)
{
    m_CanRestore = value;
    m_CanRestoreIsSet = true;
}

bool MissedEmailDto::canRestoreIsSet() const
{
    return m_CanRestoreIsSet;
}

void MissedEmailDto::unsetCanRestore()
{
    m_CanRestoreIsSet = false;
}
std::vector<utility::string_t>& MissedEmailDto::getTo()
{
    return m_To;
}

void MissedEmailDto::setTo(const std::vector<utility::string_t>& value)
{
    m_To = value;
    m_ToIsSet = true;
}

bool MissedEmailDto::toIsSet() const
{
    return m_ToIsSet;
}

void MissedEmailDto::unsetTo()
{
    m_ToIsSet = false;
}
std::vector<utility::string_t>& MissedEmailDto::getCc()
{
    return m_Cc;
}

void MissedEmailDto::setCc(const std::vector<utility::string_t>& value)
{
    m_Cc = value;
    m_CcIsSet = true;
}

bool MissedEmailDto::ccIsSet() const
{
    return m_CcIsSet;
}

void MissedEmailDto::unsetCc()
{
    m_CcIsSet = false;
}
std::vector<utility::string_t>& MissedEmailDto::getBcc()
{
    return m_Bcc;
}

void MissedEmailDto::setBcc(const std::vector<utility::string_t>& value)
{
    m_Bcc = value;
    m_BccIsSet = true;
}

bool MissedEmailDto::bccIsSet() const
{
    return m_BccIsSet;
}

void MissedEmailDto::unsetBcc()
{
    m_BccIsSet = false;
}
std::vector<utility::string_t>& MissedEmailDto::getInboxIds()
{
    return m_InboxIds;
}

void MissedEmailDto::setInboxIds(const std::vector<utility::string_t>& value)
{
    m_InboxIds = value;
    m_InboxIdsIsSet = true;
}

bool MissedEmailDto::inboxIdsIsSet() const
{
    return m_InboxIdsIsSet;
}

void MissedEmailDto::unsetInboxIds()
{
    m_InboxIdsIsSet = false;
}
utility::datetime MissedEmailDto::getCreatedAt() const
{
    return m_CreatedAt;
}

void MissedEmailDto::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool MissedEmailDto::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void MissedEmailDto::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::datetime MissedEmailDto::getUpdatedAt() const
{
    return m_UpdatedAt;
}

void MissedEmailDto::setUpdatedAt(const utility::datetime& value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}

bool MissedEmailDto::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void MissedEmailDto::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
}
}
}
}


