/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CheckEmailClientSupportOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



CheckEmailClientSupportOptions::CheckEmailClientSupportOptions()
{
    m_EmailBody = utility::conversions::to_string_t("");
    m_EmailBodyIsSet = false;
}

CheckEmailClientSupportOptions::~CheckEmailClientSupportOptions()
{
}

void CheckEmailClientSupportOptions::validate()
{
    // TODO: implement validation
}

web::json::value CheckEmailClientSupportOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EmailBodyIsSet)
    {
        val[utility::conversions::to_string_t(U("emailBody"))] = ModelBase::toJson(m_EmailBody);
    }

    return val;
}

bool CheckEmailClientSupportOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("emailBody"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("emailBody")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEmailBody;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmailBody);
            setEmailBody(refVal_setEmailBody);
        }
    }
    return ok;
}

void CheckEmailClientSupportOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_EmailBodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("emailBody")), m_EmailBody));
    }
}

bool CheckEmailClientSupportOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("emailBody"))))
    {
        utility::string_t refVal_setEmailBody;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("emailBody"))), refVal_setEmailBody );
        setEmailBody(refVal_setEmailBody);
    }
    return ok;
}

utility::string_t CheckEmailClientSupportOptions::getEmailBody() const
{
    return m_EmailBody;
}

void CheckEmailClientSupportOptions::setEmailBody(const utility::string_t& value)
{
    m_EmailBody = value;
    m_EmailBodyIsSet = true;
}

bool CheckEmailClientSupportOptions::emailBodyIsSet() const
{
    return m_EmailBodyIsSet;
}

void CheckEmailClientSupportOptions::unsetEmailBody()
{
    m_EmailBodyIsSet = false;
}
}
}
}
}


