/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SendSMTPEnvelopeOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



SendSMTPEnvelopeOptions::SendSMTPEnvelopeOptions()
{
    m_RcptToIsSet = false;
    m_MailFrom = utility::conversions::to_string_t("");
    m_MailFromIsSet = false;
    m_Data = utility::conversions::to_string_t("");
    m_DataIsSet = false;
}

SendSMTPEnvelopeOptions::~SendSMTPEnvelopeOptions()
{
}

void SendSMTPEnvelopeOptions::validate()
{
    // TODO: implement validation
}

web::json::value SendSMTPEnvelopeOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_RcptToIsSet)
    {
        val[utility::conversions::to_string_t(U("rcptTo"))] = ModelBase::toJson(m_RcptTo);
    }
    if(m_MailFromIsSet)
    {
        val[utility::conversions::to_string_t(U("mailFrom"))] = ModelBase::toJson(m_MailFrom);
    }
    if(m_DataIsSet)
    {
        val[utility::conversions::to_string_t(U("data"))] = ModelBase::toJson(m_Data);
    }

    return val;
}

bool SendSMTPEnvelopeOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("rcptTo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rcptTo")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setRcptTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRcptTo);
            setRcptTo(refVal_setRcptTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mailFrom"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mailFrom")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMailFrom;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMailFrom);
            setMailFrom(refVal_setMailFrom);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("data"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("data")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setData;
            ok &= ModelBase::fromJson(fieldValue, refVal_setData);
            setData(refVal_setData);
        }
    }
    return ok;
}

void SendSMTPEnvelopeOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_RcptToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rcptTo")), m_RcptTo));
    }
    if(m_MailFromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mailFrom")), m_MailFrom));
    }
    if(m_DataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("data")), m_Data));
    }
}

bool SendSMTPEnvelopeOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("rcptTo"))))
    {
        std::vector<utility::string_t> refVal_setRcptTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rcptTo"))), refVal_setRcptTo );
        setRcptTo(refVal_setRcptTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mailFrom"))))
    {
        utility::string_t refVal_setMailFrom;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mailFrom"))), refVal_setMailFrom );
        setMailFrom(refVal_setMailFrom);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("data"))))
    {
        utility::string_t refVal_setData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("data"))), refVal_setData );
        setData(refVal_setData);
    }
    return ok;
}

std::vector<utility::string_t>& SendSMTPEnvelopeOptions::getRcptTo()
{
    return m_RcptTo;
}

void SendSMTPEnvelopeOptions::setRcptTo(const std::vector<utility::string_t>& value)
{
    m_RcptTo = value;
    m_RcptToIsSet = true;
}

bool SendSMTPEnvelopeOptions::rcptToIsSet() const
{
    return m_RcptToIsSet;
}

void SendSMTPEnvelopeOptions::unsetRcptTo()
{
    m_RcptToIsSet = false;
}
utility::string_t SendSMTPEnvelopeOptions::getMailFrom() const
{
    return m_MailFrom;
}

void SendSMTPEnvelopeOptions::setMailFrom(const utility::string_t& value)
{
    m_MailFrom = value;
    m_MailFromIsSet = true;
}

bool SendSMTPEnvelopeOptions::mailFromIsSet() const
{
    return m_MailFromIsSet;
}

void SendSMTPEnvelopeOptions::unsetMailFrom()
{
    m_MailFromIsSet = false;
}
utility::string_t SendSMTPEnvelopeOptions::getData() const
{
    return m_Data;
}

void SendSMTPEnvelopeOptions::setData(const utility::string_t& value)
{
    m_Data = value;
    m_DataIsSet = true;
}

bool SendSMTPEnvelopeOptions::dataIsSet() const
{
    return m_DataIsSet;
}

void SendSMTPEnvelopeOptions::unsetData()
{
    m_DataIsSet = false;
}
}
}
}
}


