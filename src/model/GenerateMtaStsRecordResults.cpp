/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/GenerateMtaStsRecordResults.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



GenerateMtaStsRecordResults::GenerateMtaStsRecordResults()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Ttl = 0;
    m_TtlIsSet = false;
    m_Value = utility::conversions::to_string_t("");
    m_ValueIsSet = false;
    m_WellKnownValue = utility::conversions::to_string_t("");
    m_WellKnownValueIsSet = false;
    m_WellKnownUrl = utility::conversions::to_string_t("");
    m_WellKnownUrlIsSet = false;
}

GenerateMtaStsRecordResults::~GenerateMtaStsRecordResults()
{
}

void GenerateMtaStsRecordResults::validate()
{
    // TODO: implement validation
}

web::json::value GenerateMtaStsRecordResults::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_TtlIsSet)
    {
        val[utility::conversions::to_string_t(U("ttl"))] = ModelBase::toJson(m_Ttl);
    }
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t(U("value"))] = ModelBase::toJson(m_Value);
    }
    if(m_WellKnownValueIsSet)
    {
        val[utility::conversions::to_string_t(U("wellKnownValue"))] = ModelBase::toJson(m_WellKnownValue);
    }
    if(m_WellKnownUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("wellKnownUrl"))] = ModelBase::toJson(m_WellKnownUrl);
    }

    return val;
}

bool GenerateMtaStsRecordResults::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ttl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ttl")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTtl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTtl);
            setTtl(refVal_setTtl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("value"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("value")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValue);
            setValue(refVal_setValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("wellKnownValue"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("wellKnownValue")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWellKnownValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWellKnownValue);
            setWellKnownValue(refVal_setWellKnownValue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("wellKnownUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("wellKnownUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWellKnownUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWellKnownUrl);
            setWellKnownUrl(refVal_setWellKnownUrl);
        }
    }
    return ok;
}

void GenerateMtaStsRecordResults::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_TtlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ttl")), m_Ttl));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("value")), m_Value));
    }
    if(m_WellKnownValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("wellKnownValue")), m_WellKnownValue));
    }
    if(m_WellKnownUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("wellKnownUrl")), m_WellKnownUrl));
    }
}

bool GenerateMtaStsRecordResults::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ttl"))))
    {
        int32_t refVal_setTtl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ttl"))), refVal_setTtl );
        setTtl(refVal_setTtl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("value"))))
    {
        utility::string_t refVal_setValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("value"))), refVal_setValue );
        setValue(refVal_setValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("wellKnownValue"))))
    {
        utility::string_t refVal_setWellKnownValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("wellKnownValue"))), refVal_setWellKnownValue );
        setWellKnownValue(refVal_setWellKnownValue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("wellKnownUrl"))))
    {
        utility::string_t refVal_setWellKnownUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("wellKnownUrl"))), refVal_setWellKnownUrl );
        setWellKnownUrl(refVal_setWellKnownUrl);
    }
    return ok;
}

utility::string_t GenerateMtaStsRecordResults::getName() const
{
    return m_Name;
}

void GenerateMtaStsRecordResults::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool GenerateMtaStsRecordResults::nameIsSet() const
{
    return m_NameIsSet;
}

void GenerateMtaStsRecordResults::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t GenerateMtaStsRecordResults::getType() const
{
    return m_Type;
}

void GenerateMtaStsRecordResults::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool GenerateMtaStsRecordResults::typeIsSet() const
{
    return m_TypeIsSet;
}

void GenerateMtaStsRecordResults::unsetType()
{
    m_TypeIsSet = false;
}
int32_t GenerateMtaStsRecordResults::getTtl() const
{
    return m_Ttl;
}

void GenerateMtaStsRecordResults::setTtl(int32_t value)
{
    m_Ttl = value;
    m_TtlIsSet = true;
}

bool GenerateMtaStsRecordResults::ttlIsSet() const
{
    return m_TtlIsSet;
}

void GenerateMtaStsRecordResults::unsetTtl()
{
    m_TtlIsSet = false;
}
utility::string_t GenerateMtaStsRecordResults::getValue() const
{
    return m_Value;
}

void GenerateMtaStsRecordResults::setValue(const utility::string_t& value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool GenerateMtaStsRecordResults::valueIsSet() const
{
    return m_ValueIsSet;
}

void GenerateMtaStsRecordResults::unsetValue()
{
    m_ValueIsSet = false;
}
utility::string_t GenerateMtaStsRecordResults::getWellKnownValue() const
{
    return m_WellKnownValue;
}

void GenerateMtaStsRecordResults::setWellKnownValue(const utility::string_t& value)
{
    m_WellKnownValue = value;
    m_WellKnownValueIsSet = true;
}

bool GenerateMtaStsRecordResults::wellKnownValueIsSet() const
{
    return m_WellKnownValueIsSet;
}

void GenerateMtaStsRecordResults::unsetWellKnownValue()
{
    m_WellKnownValueIsSet = false;
}
utility::string_t GenerateMtaStsRecordResults::getWellKnownUrl() const
{
    return m_WellKnownUrl;
}

void GenerateMtaStsRecordResults::setWellKnownUrl(const utility::string_t& value)
{
    m_WellKnownUrl = value;
    m_WellKnownUrlIsSet = true;
}

bool GenerateMtaStsRecordResults::wellKnownUrlIsSet() const
{
    return m_WellKnownUrlIsSet;
}

void GenerateMtaStsRecordResults::unsetWellKnownUrl()
{
    m_WellKnownUrlIsSet = false;
}
}
}
}
}


