/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/OptInConsentOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



OptInConsentOptions::OptInConsentOptions()
{
    m_EmailAddress = utility::conversions::to_string_t("");
    m_EmailAddressIsSet = false;
    m_CompanyName = utility::conversions::to_string_t("");
    m_CompanyNameIsSet = false;
    m_SendOptInOptionsIsSet = false;
}

OptInConsentOptions::~OptInConsentOptions()
{
}

void OptInConsentOptions::validate()
{
    // TODO: implement validation
}

web::json::value OptInConsentOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EmailAddressIsSet)
    {
        val[utility::conversions::to_string_t(U("emailAddress"))] = ModelBase::toJson(m_EmailAddress);
    }
    if(m_CompanyNameIsSet)
    {
        val[utility::conversions::to_string_t(U("companyName"))] = ModelBase::toJson(m_CompanyName);
    }
    if(m_SendOptInOptionsIsSet)
    {
        val[utility::conversions::to_string_t(U("sendOptInOptions"))] = ModelBase::toJson(m_SendOptInOptions);
    }

    return val;
}

bool OptInConsentOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("emailAddress"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("emailAddress")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEmailAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmailAddress);
            setEmailAddress(refVal_setEmailAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("companyName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("companyName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCompanyName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCompanyName);
            setCompanyName(refVal_setCompanyName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sendOptInOptions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sendOptInOptions")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SendOptInConsentEmailOptions> refVal_setSendOptInOptions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSendOptInOptions);
            setSendOptInOptions(refVal_setSendOptInOptions);
        }
    }
    return ok;
}

void OptInConsentOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_EmailAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("emailAddress")), m_EmailAddress));
    }
    if(m_CompanyNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("companyName")), m_CompanyName));
    }
    if(m_SendOptInOptionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sendOptInOptions")), m_SendOptInOptions));
    }
}

bool OptInConsentOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("emailAddress"))))
    {
        utility::string_t refVal_setEmailAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("emailAddress"))), refVal_setEmailAddress );
        setEmailAddress(refVal_setEmailAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("companyName"))))
    {
        utility::string_t refVal_setCompanyName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("companyName"))), refVal_setCompanyName );
        setCompanyName(refVal_setCompanyName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sendOptInOptions"))))
    {
        std::shared_ptr<SendOptInConsentEmailOptions> refVal_setSendOptInOptions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sendOptInOptions"))), refVal_setSendOptInOptions );
        setSendOptInOptions(refVal_setSendOptInOptions);
    }
    return ok;
}

utility::string_t OptInConsentOptions::getEmailAddress() const
{
    return m_EmailAddress;
}

void OptInConsentOptions::setEmailAddress(const utility::string_t& value)
{
    m_EmailAddress = value;
    m_EmailAddressIsSet = true;
}

bool OptInConsentOptions::emailAddressIsSet() const
{
    return m_EmailAddressIsSet;
}

void OptInConsentOptions::unsetEmailAddress()
{
    m_EmailAddressIsSet = false;
}
utility::string_t OptInConsentOptions::getCompanyName() const
{
    return m_CompanyName;
}

void OptInConsentOptions::setCompanyName(const utility::string_t& value)
{
    m_CompanyName = value;
    m_CompanyNameIsSet = true;
}

bool OptInConsentOptions::companyNameIsSet() const
{
    return m_CompanyNameIsSet;
}

void OptInConsentOptions::unsetCompanyName()
{
    m_CompanyNameIsSet = false;
}
std::shared_ptr<SendOptInConsentEmailOptions> OptInConsentOptions::getSendOptInOptions() const
{
    return m_SendOptInOptions;
}

void OptInConsentOptions::setSendOptInOptions(const std::shared_ptr<SendOptInConsentEmailOptions>& value)
{
    m_SendOptInOptions = value;
    m_SendOptInOptionsIsSet = true;
}

bool OptInConsentOptions::sendOptInOptionsIsSet() const
{
    return m_SendOptInOptionsIsSet;
}

void OptInConsentOptions::unsetSendOptInOptions()
{
    m_SendOptInOptionsIsSet = false;
}
}
}
}
}


