/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreatePortalUserOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



CreatePortalUserOptions::CreatePortalUserOptions()
{
    m_Password = utility::conversions::to_string_t("");
    m_PasswordIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Username = utility::conversions::to_string_t("");
    m_UsernameIsSet = false;
    m_SkipInboxCreation = false;
    m_SkipInboxCreationIsSet = false;
    m_InboxId = utility::conversions::to_string_t("");
    m_InboxIdIsSet = false;
    m_CreateInboxOptionsIsSet = false;
}

CreatePortalUserOptions::~CreatePortalUserOptions()
{
}

void CreatePortalUserOptions::validate()
{
    // TODO: implement validation
}

web::json::value CreatePortalUserOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PasswordIsSet)
    {
        val[utility::conversions::to_string_t(U("password"))] = ModelBase::toJson(m_Password);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_UsernameIsSet)
    {
        val[utility::conversions::to_string_t(U("username"))] = ModelBase::toJson(m_Username);
    }
    if(m_SkipInboxCreationIsSet)
    {
        val[utility::conversions::to_string_t(U("skipInboxCreation"))] = ModelBase::toJson(m_SkipInboxCreation);
    }
    if(m_InboxIdIsSet)
    {
        val[utility::conversions::to_string_t(U("inboxId"))] = ModelBase::toJson(m_InboxId);
    }
    if(m_CreateInboxOptionsIsSet)
    {
        val[utility::conversions::to_string_t(U("createInboxOptions"))] = ModelBase::toJson(m_CreateInboxOptions);
    }

    return val;
}

bool CreatePortalUserOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("password"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("password")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPassword;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPassword);
            setPassword(refVal_setPassword);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("username"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("username")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUsername;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUsername);
            setUsername(refVal_setUsername);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("skipInboxCreation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("skipInboxCreation")));
        if(!fieldValue.is_null())
        {
            bool refVal_setSkipInboxCreation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSkipInboxCreation);
            setSkipInboxCreation(refVal_setSkipInboxCreation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("inboxId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inboxId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInboxId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInboxId);
            setInboxId(refVal_setInboxId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createInboxOptions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createInboxOptions")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<CreateInboxDto> refVal_setCreateInboxOptions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreateInboxOptions);
            setCreateInboxOptions(refVal_setCreateInboxOptions);
        }
    }
    return ok;
}

void CreatePortalUserOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("password")), m_Password));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_UsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("username")), m_Username));
    }
    if(m_SkipInboxCreationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("skipInboxCreation")), m_SkipInboxCreation));
    }
    if(m_InboxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inboxId")), m_InboxId));
    }
    if(m_CreateInboxOptionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createInboxOptions")), m_CreateInboxOptions));
    }
}

bool CreatePortalUserOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("password"))))
    {
        utility::string_t refVal_setPassword;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("password"))), refVal_setPassword );
        setPassword(refVal_setPassword);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("username"))))
    {
        utility::string_t refVal_setUsername;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("username"))), refVal_setUsername );
        setUsername(refVal_setUsername);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("skipInboxCreation"))))
    {
        bool refVal_setSkipInboxCreation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("skipInboxCreation"))), refVal_setSkipInboxCreation );
        setSkipInboxCreation(refVal_setSkipInboxCreation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("inboxId"))))
    {
        utility::string_t refVal_setInboxId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inboxId"))), refVal_setInboxId );
        setInboxId(refVal_setInboxId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createInboxOptions"))))
    {
        std::shared_ptr<CreateInboxDto> refVal_setCreateInboxOptions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createInboxOptions"))), refVal_setCreateInboxOptions );
        setCreateInboxOptions(refVal_setCreateInboxOptions);
    }
    return ok;
}

utility::string_t CreatePortalUserOptions::getPassword() const
{
    return m_Password;
}

void CreatePortalUserOptions::setPassword(const utility::string_t& value)
{
    m_Password = value;
    m_PasswordIsSet = true;
}

bool CreatePortalUserOptions::passwordIsSet() const
{
    return m_PasswordIsSet;
}

void CreatePortalUserOptions::unsetPassword()
{
    m_PasswordIsSet = false;
}
utility::string_t CreatePortalUserOptions::getName() const
{
    return m_Name;
}

void CreatePortalUserOptions::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool CreatePortalUserOptions::nameIsSet() const
{
    return m_NameIsSet;
}

void CreatePortalUserOptions::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t CreatePortalUserOptions::getUsername() const
{
    return m_Username;
}

void CreatePortalUserOptions::setUsername(const utility::string_t& value)
{
    m_Username = value;
    m_UsernameIsSet = true;
}

bool CreatePortalUserOptions::usernameIsSet() const
{
    return m_UsernameIsSet;
}

void CreatePortalUserOptions::unsetUsername()
{
    m_UsernameIsSet = false;
}
bool CreatePortalUserOptions::isSkipInboxCreation() const
{
    return m_SkipInboxCreation;
}

void CreatePortalUserOptions::setSkipInboxCreation(bool value)
{
    m_SkipInboxCreation = value;
    m_SkipInboxCreationIsSet = true;
}

bool CreatePortalUserOptions::skipInboxCreationIsSet() const
{
    return m_SkipInboxCreationIsSet;
}

void CreatePortalUserOptions::unsetSkipInboxCreation()
{
    m_SkipInboxCreationIsSet = false;
}
utility::string_t CreatePortalUserOptions::getInboxId() const
{
    return m_InboxId;
}

void CreatePortalUserOptions::setInboxId(const utility::string_t& value)
{
    m_InboxId = value;
    m_InboxIdIsSet = true;
}

bool CreatePortalUserOptions::inboxIdIsSet() const
{
    return m_InboxIdIsSet;
}

void CreatePortalUserOptions::unsetInboxId()
{
    m_InboxIdIsSet = false;
}
std::shared_ptr<CreateInboxDto> CreatePortalUserOptions::getCreateInboxOptions() const
{
    return m_CreateInboxOptions;
}

void CreatePortalUserOptions::setCreateInboxOptions(const std::shared_ptr<CreateInboxDto>& value)
{
    m_CreateInboxOptions = value;
    m_CreateInboxOptionsIsSet = true;
}

bool CreatePortalUserOptions::createInboxOptionsIsSet() const
{
    return m_CreateInboxOptionsIsSet;
}

void CreatePortalUserOptions::unsetCreateInboxOptions()
{
    m_CreateInboxOptionsIsSet = false;
}
}
}
}
}


