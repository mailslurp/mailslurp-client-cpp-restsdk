/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreatePhoneNumberOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



CreatePhoneNumberOptions::CreatePhoneNumberOptions()
{
    m_PhoneCountry = utility::conversions::to_string_t("");
    m_PhoneCountryIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Schedule = utility::conversions::to_string_t("");
    m_ScheduleIsSet = false;
}

CreatePhoneNumberOptions::~CreatePhoneNumberOptions()
{
}

void CreatePhoneNumberOptions::validate()
{
    // TODO: implement validation
}

web::json::value CreatePhoneNumberOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PhoneCountryIsSet)
    {
        val[utility::conversions::to_string_t(U("phoneCountry"))] = ModelBase::toJson(m_PhoneCountry);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_ScheduleIsSet)
    {
        val[utility::conversions::to_string_t(U("schedule"))] = ModelBase::toJson(m_Schedule);
    }

    return val;
}

bool CreatePhoneNumberOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("phoneCountry"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("phoneCountry")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPhoneCountry;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPhoneCountry);
            setPhoneCountry(refVal_setPhoneCountry);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("schedule"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("schedule")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSchedule;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSchedule);
            setSchedule(refVal_setSchedule);
        }
    }
    return ok;
}

void CreatePhoneNumberOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PhoneCountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("phoneCountry")), m_PhoneCountry));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_ScheduleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("schedule")), m_Schedule));
    }
}

bool CreatePhoneNumberOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("phoneCountry"))))
    {
        utility::string_t refVal_setPhoneCountry;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("phoneCountry"))), refVal_setPhoneCountry );
        setPhoneCountry(refVal_setPhoneCountry);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("schedule"))))
    {
        utility::string_t refVal_setSchedule;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("schedule"))), refVal_setSchedule );
        setSchedule(refVal_setSchedule);
    }
    return ok;
}

utility::string_t CreatePhoneNumberOptions::getPhoneCountry() const
{
    return m_PhoneCountry;
}

void CreatePhoneNumberOptions::setPhoneCountry(const utility::string_t& value)
{
    m_PhoneCountry = value;
    m_PhoneCountryIsSet = true;
}

bool CreatePhoneNumberOptions::phoneCountryIsSet() const
{
    return m_PhoneCountryIsSet;
}

void CreatePhoneNumberOptions::unsetPhoneCountry()
{
    m_PhoneCountryIsSet = false;
}
utility::string_t CreatePhoneNumberOptions::getName() const
{
    return m_Name;
}

void CreatePhoneNumberOptions::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool CreatePhoneNumberOptions::nameIsSet() const
{
    return m_NameIsSet;
}

void CreatePhoneNumberOptions::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t CreatePhoneNumberOptions::getDescription() const
{
    return m_Description;
}

void CreatePhoneNumberOptions::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool CreatePhoneNumberOptions::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void CreatePhoneNumberOptions::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t CreatePhoneNumberOptions::getSchedule() const
{
    return m_Schedule;
}

void CreatePhoneNumberOptions::setSchedule(const utility::string_t& value)
{
    m_Schedule = value;
    m_ScheduleIsSet = true;
}

bool CreatePhoneNumberOptions::scheduleIsSet() const
{
    return m_ScheduleIsSet;
}

void CreatePhoneNumberOptions::unsetSchedule()
{
    m_ScheduleIsSet = false;
}
}
}
}
}


