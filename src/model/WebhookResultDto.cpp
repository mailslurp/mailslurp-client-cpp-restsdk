/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/WebhookResultDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



WebhookResultDto::WebhookResultDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_WebhookId = utility::conversions::to_string_t("");
    m_WebhookIdIsSet = false;
    m_WebhookUrl = utility::conversions::to_string_t("");
    m_WebhookUrlIsSet = false;
    m_MessageId = utility::conversions::to_string_t("");
    m_MessageIdIsSet = false;
    m_RedriveId = utility::conversions::to_string_t("");
    m_RedriveIdIsSet = false;
    m_HttpMethod = utility::conversions::to_string_t("");
    m_HttpMethodIsSet = false;
    m_WebhookEvent = utility::conversions::to_string_t("");
    m_WebhookEventIsSet = false;
    m_ResponseStatus = 0;
    m_ResponseStatusIsSet = false;
    m_ResponseTimeMillis = 0L;
    m_ResponseTimeMillisIsSet = false;
    m_ResponseBodyExtract = utility::conversions::to_string_t("");
    m_ResponseBodyExtractIsSet = false;
    m_ResultType = utility::conversions::to_string_t("");
    m_ResultTypeIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_UpdatedAt = utility::datetime();
    m_UpdatedAtIsSet = false;
    m_Seen = false;
    m_SeenIsSet = false;
    m_InboxId = utility::conversions::to_string_t("");
    m_InboxIdIsSet = false;
    m_EmailId = utility::conversions::to_string_t("");
    m_EmailIdIsSet = false;
    m_AttachmentId = utility::conversions::to_string_t("");
    m_AttachmentIdIsSet = false;
    m_PhoneId = utility::conversions::to_string_t("");
    m_PhoneIdIsSet = false;
    m_SmsId = utility::conversions::to_string_t("");
    m_SmsIdIsSet = false;
}

WebhookResultDto::~WebhookResultDto()
{
}

void WebhookResultDto::validate()
{
    // TODO: implement validation
}

web::json::value WebhookResultDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t(U("userId"))] = ModelBase::toJson(m_UserId);
    }
    if(m_WebhookIdIsSet)
    {
        val[utility::conversions::to_string_t(U("webhookId"))] = ModelBase::toJson(m_WebhookId);
    }
    if(m_WebhookUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("webhookUrl"))] = ModelBase::toJson(m_WebhookUrl);
    }
    if(m_MessageIdIsSet)
    {
        val[utility::conversions::to_string_t(U("messageId"))] = ModelBase::toJson(m_MessageId);
    }
    if(m_RedriveIdIsSet)
    {
        val[utility::conversions::to_string_t(U("redriveId"))] = ModelBase::toJson(m_RedriveId);
    }
    if(m_HttpMethodIsSet)
    {
        val[utility::conversions::to_string_t(U("httpMethod"))] = ModelBase::toJson(m_HttpMethod);
    }
    if(m_WebhookEventIsSet)
    {
        val[utility::conversions::to_string_t(U("webhookEvent"))] = ModelBase::toJson(m_WebhookEvent);
    }
    if(m_ResponseStatusIsSet)
    {
        val[utility::conversions::to_string_t(U("responseStatus"))] = ModelBase::toJson(m_ResponseStatus);
    }
    if(m_ResponseTimeMillisIsSet)
    {
        val[utility::conversions::to_string_t(U("responseTimeMillis"))] = ModelBase::toJson(m_ResponseTimeMillis);
    }
    if(m_ResponseBodyExtractIsSet)
    {
        val[utility::conversions::to_string_t(U("responseBodyExtract"))] = ModelBase::toJson(m_ResponseBodyExtract);
    }
    if(m_ResultTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("resultType"))] = ModelBase::toJson(m_ResultType);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_UpdatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("updatedAt"))] = ModelBase::toJson(m_UpdatedAt);
    }
    if(m_SeenIsSet)
    {
        val[utility::conversions::to_string_t(U("seen"))] = ModelBase::toJson(m_Seen);
    }
    if(m_InboxIdIsSet)
    {
        val[utility::conversions::to_string_t(U("inboxId"))] = ModelBase::toJson(m_InboxId);
    }
    if(m_EmailIdIsSet)
    {
        val[utility::conversions::to_string_t(U("emailId"))] = ModelBase::toJson(m_EmailId);
    }
    if(m_AttachmentIdIsSet)
    {
        val[utility::conversions::to_string_t(U("attachmentId"))] = ModelBase::toJson(m_AttachmentId);
    }
    if(m_PhoneIdIsSet)
    {
        val[utility::conversions::to_string_t(U("phoneId"))] = ModelBase::toJson(m_PhoneId);
    }
    if(m_SmsIdIsSet)
    {
        val[utility::conversions::to_string_t(U("smsId"))] = ModelBase::toJson(m_SmsId);
    }

    return val;
}

bool WebhookResultDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("userId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("userId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserId);
            setUserId(refVal_setUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("webhookId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("webhookId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWebhookId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWebhookId);
            setWebhookId(refVal_setWebhookId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("webhookUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("webhookUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWebhookUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWebhookUrl);
            setWebhookUrl(refVal_setWebhookUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("messageId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("messageId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMessageId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessageId);
            setMessageId(refVal_setMessageId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("redriveId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("redriveId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRedriveId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRedriveId);
            setRedriveId(refVal_setRedriveId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("httpMethod"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("httpMethod")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHttpMethod;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHttpMethod);
            setHttpMethod(refVal_setHttpMethod);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("webhookEvent"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("webhookEvent")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWebhookEvent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWebhookEvent);
            setWebhookEvent(refVal_setWebhookEvent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("responseStatus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("responseStatus")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setResponseStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResponseStatus);
            setResponseStatus(refVal_setResponseStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("responseTimeMillis"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("responseTimeMillis")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setResponseTimeMillis;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResponseTimeMillis);
            setResponseTimeMillis(refVal_setResponseTimeMillis);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("responseBodyExtract"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("responseBodyExtract")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setResponseBodyExtract;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResponseBodyExtract);
            setResponseBodyExtract(refVal_setResponseBodyExtract);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("resultType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("resultType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setResultType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResultType);
            setResultType(refVal_setResultType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updatedAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updatedAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setUpdatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedAt);
            setUpdatedAt(refVal_setUpdatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("seen"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("seen")));
        if(!fieldValue.is_null())
        {
            bool refVal_setSeen;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSeen);
            setSeen(refVal_setSeen);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("inboxId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inboxId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInboxId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInboxId);
            setInboxId(refVal_setInboxId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("emailId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("emailId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEmailId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmailId);
            setEmailId(refVal_setEmailId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("attachmentId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("attachmentId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAttachmentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAttachmentId);
            setAttachmentId(refVal_setAttachmentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("phoneId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("phoneId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPhoneId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPhoneId);
            setPhoneId(refVal_setPhoneId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("smsId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("smsId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSmsId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSmsId);
            setSmsId(refVal_setSmsId);
        }
    }
    return ok;
}

void WebhookResultDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("userId")), m_UserId));
    }
    if(m_WebhookIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("webhookId")), m_WebhookId));
    }
    if(m_WebhookUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("webhookUrl")), m_WebhookUrl));
    }
    if(m_MessageIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("messageId")), m_MessageId));
    }
    if(m_RedriveIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("redriveId")), m_RedriveId));
    }
    if(m_HttpMethodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("httpMethod")), m_HttpMethod));
    }
    if(m_WebhookEventIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("webhookEvent")), m_WebhookEvent));
    }
    if(m_ResponseStatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("responseStatus")), m_ResponseStatus));
    }
    if(m_ResponseTimeMillisIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("responseTimeMillis")), m_ResponseTimeMillis));
    }
    if(m_ResponseBodyExtractIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("responseBodyExtract")), m_ResponseBodyExtract));
    }
    if(m_ResultTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("resultType")), m_ResultType));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updatedAt")), m_UpdatedAt));
    }
    if(m_SeenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("seen")), m_Seen));
    }
    if(m_InboxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inboxId")), m_InboxId));
    }
    if(m_EmailIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("emailId")), m_EmailId));
    }
    if(m_AttachmentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("attachmentId")), m_AttachmentId));
    }
    if(m_PhoneIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("phoneId")), m_PhoneId));
    }
    if(m_SmsIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("smsId")), m_SmsId));
    }
}

bool WebhookResultDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("userId"))))
    {
        utility::string_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("userId"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("webhookId"))))
    {
        utility::string_t refVal_setWebhookId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("webhookId"))), refVal_setWebhookId );
        setWebhookId(refVal_setWebhookId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("webhookUrl"))))
    {
        utility::string_t refVal_setWebhookUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("webhookUrl"))), refVal_setWebhookUrl );
        setWebhookUrl(refVal_setWebhookUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("messageId"))))
    {
        utility::string_t refVal_setMessageId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("messageId"))), refVal_setMessageId );
        setMessageId(refVal_setMessageId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("redriveId"))))
    {
        utility::string_t refVal_setRedriveId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("redriveId"))), refVal_setRedriveId );
        setRedriveId(refVal_setRedriveId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("httpMethod"))))
    {
        utility::string_t refVal_setHttpMethod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("httpMethod"))), refVal_setHttpMethod );
        setHttpMethod(refVal_setHttpMethod);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("webhookEvent"))))
    {
        utility::string_t refVal_setWebhookEvent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("webhookEvent"))), refVal_setWebhookEvent );
        setWebhookEvent(refVal_setWebhookEvent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("responseStatus"))))
    {
        int32_t refVal_setResponseStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("responseStatus"))), refVal_setResponseStatus );
        setResponseStatus(refVal_setResponseStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("responseTimeMillis"))))
    {
        int64_t refVal_setResponseTimeMillis;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("responseTimeMillis"))), refVal_setResponseTimeMillis );
        setResponseTimeMillis(refVal_setResponseTimeMillis);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("responseBodyExtract"))))
    {
        utility::string_t refVal_setResponseBodyExtract;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("responseBodyExtract"))), refVal_setResponseBodyExtract );
        setResponseBodyExtract(refVal_setResponseBodyExtract);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("resultType"))))
    {
        utility::string_t refVal_setResultType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("resultType"))), refVal_setResultType );
        setResultType(refVal_setResultType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updatedAt"))))
    {
        utility::datetime refVal_setUpdatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updatedAt"))), refVal_setUpdatedAt );
        setUpdatedAt(refVal_setUpdatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("seen"))))
    {
        bool refVal_setSeen;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("seen"))), refVal_setSeen );
        setSeen(refVal_setSeen);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("inboxId"))))
    {
        utility::string_t refVal_setInboxId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inboxId"))), refVal_setInboxId );
        setInboxId(refVal_setInboxId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("emailId"))))
    {
        utility::string_t refVal_setEmailId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("emailId"))), refVal_setEmailId );
        setEmailId(refVal_setEmailId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("attachmentId"))))
    {
        utility::string_t refVal_setAttachmentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("attachmentId"))), refVal_setAttachmentId );
        setAttachmentId(refVal_setAttachmentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("phoneId"))))
    {
        utility::string_t refVal_setPhoneId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("phoneId"))), refVal_setPhoneId );
        setPhoneId(refVal_setPhoneId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("smsId"))))
    {
        utility::string_t refVal_setSmsId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("smsId"))), refVal_setSmsId );
        setSmsId(refVal_setSmsId);
    }
    return ok;
}

utility::string_t WebhookResultDto::getId() const
{
    return m_Id;
}

void WebhookResultDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool WebhookResultDto::idIsSet() const
{
    return m_IdIsSet;
}

void WebhookResultDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t WebhookResultDto::getUserId() const
{
    return m_UserId;
}

void WebhookResultDto::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool WebhookResultDto::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void WebhookResultDto::unsetUserId()
{
    m_UserIdIsSet = false;
}
utility::string_t WebhookResultDto::getWebhookId() const
{
    return m_WebhookId;
}

void WebhookResultDto::setWebhookId(const utility::string_t& value)
{
    m_WebhookId = value;
    m_WebhookIdIsSet = true;
}

bool WebhookResultDto::webhookIdIsSet() const
{
    return m_WebhookIdIsSet;
}

void WebhookResultDto::unsetWebhookId()
{
    m_WebhookIdIsSet = false;
}
utility::string_t WebhookResultDto::getWebhookUrl() const
{
    return m_WebhookUrl;
}

void WebhookResultDto::setWebhookUrl(const utility::string_t& value)
{
    m_WebhookUrl = value;
    m_WebhookUrlIsSet = true;
}

bool WebhookResultDto::webhookUrlIsSet() const
{
    return m_WebhookUrlIsSet;
}

void WebhookResultDto::unsetWebhookUrl()
{
    m_WebhookUrlIsSet = false;
}
utility::string_t WebhookResultDto::getMessageId() const
{
    return m_MessageId;
}

void WebhookResultDto::setMessageId(const utility::string_t& value)
{
    m_MessageId = value;
    m_MessageIdIsSet = true;
}

bool WebhookResultDto::messageIdIsSet() const
{
    return m_MessageIdIsSet;
}

void WebhookResultDto::unsetMessageId()
{
    m_MessageIdIsSet = false;
}
utility::string_t WebhookResultDto::getRedriveId() const
{
    return m_RedriveId;
}

void WebhookResultDto::setRedriveId(const utility::string_t& value)
{
    m_RedriveId = value;
    m_RedriveIdIsSet = true;
}

bool WebhookResultDto::redriveIdIsSet() const
{
    return m_RedriveIdIsSet;
}

void WebhookResultDto::unsetRedriveId()
{
    m_RedriveIdIsSet = false;
}
utility::string_t WebhookResultDto::getHttpMethod() const
{
    return m_HttpMethod;
}

void WebhookResultDto::setHttpMethod(const utility::string_t& value)
{
    m_HttpMethod = value;
    m_HttpMethodIsSet = true;
}

bool WebhookResultDto::httpMethodIsSet() const
{
    return m_HttpMethodIsSet;
}

void WebhookResultDto::unsetHttpMethod()
{
    m_HttpMethodIsSet = false;
}
utility::string_t WebhookResultDto::getWebhookEvent() const
{
    return m_WebhookEvent;
}

void WebhookResultDto::setWebhookEvent(const utility::string_t& value)
{
    m_WebhookEvent = value;
    m_WebhookEventIsSet = true;
}

bool WebhookResultDto::webhookEventIsSet() const
{
    return m_WebhookEventIsSet;
}

void WebhookResultDto::unsetWebhookEvent()
{
    m_WebhookEventIsSet = false;
}
int32_t WebhookResultDto::getResponseStatus() const
{
    return m_ResponseStatus;
}

void WebhookResultDto::setResponseStatus(int32_t value)
{
    m_ResponseStatus = value;
    m_ResponseStatusIsSet = true;
}

bool WebhookResultDto::responseStatusIsSet() const
{
    return m_ResponseStatusIsSet;
}

void WebhookResultDto::unsetResponseStatus()
{
    m_ResponseStatusIsSet = false;
}
int64_t WebhookResultDto::getResponseTimeMillis() const
{
    return m_ResponseTimeMillis;
}

void WebhookResultDto::setResponseTimeMillis(int64_t value)
{
    m_ResponseTimeMillis = value;
    m_ResponseTimeMillisIsSet = true;
}

bool WebhookResultDto::responseTimeMillisIsSet() const
{
    return m_ResponseTimeMillisIsSet;
}

void WebhookResultDto::unsetResponseTimeMillis()
{
    m_ResponseTimeMillisIsSet = false;
}
utility::string_t WebhookResultDto::getResponseBodyExtract() const
{
    return m_ResponseBodyExtract;
}

void WebhookResultDto::setResponseBodyExtract(const utility::string_t& value)
{
    m_ResponseBodyExtract = value;
    m_ResponseBodyExtractIsSet = true;
}

bool WebhookResultDto::responseBodyExtractIsSet() const
{
    return m_ResponseBodyExtractIsSet;
}

void WebhookResultDto::unsetResponseBodyExtract()
{
    m_ResponseBodyExtractIsSet = false;
}
utility::string_t WebhookResultDto::getResultType() const
{
    return m_ResultType;
}

void WebhookResultDto::setResultType(const utility::string_t& value)
{
    m_ResultType = value;
    m_ResultTypeIsSet = true;
}

bool WebhookResultDto::resultTypeIsSet() const
{
    return m_ResultTypeIsSet;
}

void WebhookResultDto::unsetResultType()
{
    m_ResultTypeIsSet = false;
}
utility::datetime WebhookResultDto::getCreatedAt() const
{
    return m_CreatedAt;
}

void WebhookResultDto::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool WebhookResultDto::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void WebhookResultDto::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::datetime WebhookResultDto::getUpdatedAt() const
{
    return m_UpdatedAt;
}

void WebhookResultDto::setUpdatedAt(const utility::datetime& value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}

bool WebhookResultDto::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void WebhookResultDto::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
bool WebhookResultDto::isSeen() const
{
    return m_Seen;
}

void WebhookResultDto::setSeen(bool value)
{
    m_Seen = value;
    m_SeenIsSet = true;
}

bool WebhookResultDto::seenIsSet() const
{
    return m_SeenIsSet;
}

void WebhookResultDto::unsetSeen()
{
    m_SeenIsSet = false;
}
utility::string_t WebhookResultDto::getInboxId() const
{
    return m_InboxId;
}

void WebhookResultDto::setInboxId(const utility::string_t& value)
{
    m_InboxId = value;
    m_InboxIdIsSet = true;
}

bool WebhookResultDto::inboxIdIsSet() const
{
    return m_InboxIdIsSet;
}

void WebhookResultDto::unsetInboxId()
{
    m_InboxIdIsSet = false;
}
utility::string_t WebhookResultDto::getEmailId() const
{
    return m_EmailId;
}

void WebhookResultDto::setEmailId(const utility::string_t& value)
{
    m_EmailId = value;
    m_EmailIdIsSet = true;
}

bool WebhookResultDto::emailIdIsSet() const
{
    return m_EmailIdIsSet;
}

void WebhookResultDto::unsetEmailId()
{
    m_EmailIdIsSet = false;
}
utility::string_t WebhookResultDto::getAttachmentId() const
{
    return m_AttachmentId;
}

void WebhookResultDto::setAttachmentId(const utility::string_t& value)
{
    m_AttachmentId = value;
    m_AttachmentIdIsSet = true;
}

bool WebhookResultDto::attachmentIdIsSet() const
{
    return m_AttachmentIdIsSet;
}

void WebhookResultDto::unsetAttachmentId()
{
    m_AttachmentIdIsSet = false;
}
utility::string_t WebhookResultDto::getPhoneId() const
{
    return m_PhoneId;
}

void WebhookResultDto::setPhoneId(const utility::string_t& value)
{
    m_PhoneId = value;
    m_PhoneIdIsSet = true;
}

bool WebhookResultDto::phoneIdIsSet() const
{
    return m_PhoneIdIsSet;
}

void WebhookResultDto::unsetPhoneId()
{
    m_PhoneIdIsSet = false;
}
utility::string_t WebhookResultDto::getSmsId() const
{
    return m_SmsId;
}

void WebhookResultDto::setSmsId(const utility::string_t& value)
{
    m_SmsId = value;
    m_SmsIdIsSet = true;
}

bool WebhookResultDto::smsIdIsSet() const
{
    return m_SmsIdIsSet;
}

void WebhookResultDto::unsetSmsId()
{
    m_SmsIdIsSet = false;
}
}
}
}
}


