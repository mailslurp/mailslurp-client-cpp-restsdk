/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/DNSLookupResult.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



DNSLookupResult::DNSLookupResult()
{
    m_RecordType = utility::conversions::to_string_t("");
    m_RecordTypeIsSet = false;
    m_Ttl = 0L;
    m_TtlIsSet = false;
    m_RecordEntriesIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
}

DNSLookupResult::~DNSLookupResult()
{
}

void DNSLookupResult::validate()
{
    // TODO: implement validation
}

web::json::value DNSLookupResult::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_RecordTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("recordType"))] = ModelBase::toJson(m_RecordType);
    }
    if(m_TtlIsSet)
    {
        val[utility::conversions::to_string_t(U("ttl"))] = ModelBase::toJson(m_Ttl);
    }
    if(m_RecordEntriesIsSet)
    {
        val[utility::conversions::to_string_t(U("recordEntries"))] = ModelBase::toJson(m_RecordEntries);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }

    return val;
}

bool DNSLookupResult::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("recordType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recordType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRecordType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecordType);
            setRecordType(refVal_setRecordType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ttl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ttl")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTtl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTtl);
            setTtl(refVal_setTtl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recordEntries"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recordEntries")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setRecordEntries;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecordEntries);
            setRecordEntries(refVal_setRecordEntries);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    return ok;
}

void DNSLookupResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_RecordTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recordType")), m_RecordType));
    }
    if(m_TtlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ttl")), m_Ttl));
    }
    if(m_RecordEntriesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recordEntries")), m_RecordEntries));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
}

bool DNSLookupResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("recordType"))))
    {
        utility::string_t refVal_setRecordType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recordType"))), refVal_setRecordType );
        setRecordType(refVal_setRecordType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ttl"))))
    {
        int64_t refVal_setTtl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ttl"))), refVal_setTtl );
        setTtl(refVal_setTtl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recordEntries"))))
    {
        std::vector<utility::string_t> refVal_setRecordEntries;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recordEntries"))), refVal_setRecordEntries );
        setRecordEntries(refVal_setRecordEntries);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    return ok;
}

utility::string_t DNSLookupResult::getRecordType() const
{
    return m_RecordType;
}

void DNSLookupResult::setRecordType(const utility::string_t& value)
{
    m_RecordType = value;
    m_RecordTypeIsSet = true;
}

bool DNSLookupResult::recordTypeIsSet() const
{
    return m_RecordTypeIsSet;
}

void DNSLookupResult::unsetRecordType()
{
    m_RecordTypeIsSet = false;
}
int64_t DNSLookupResult::getTtl() const
{
    return m_Ttl;
}

void DNSLookupResult::setTtl(int64_t value)
{
    m_Ttl = value;
    m_TtlIsSet = true;
}

bool DNSLookupResult::ttlIsSet() const
{
    return m_TtlIsSet;
}

void DNSLookupResult::unsetTtl()
{
    m_TtlIsSet = false;
}
std::vector<utility::string_t>& DNSLookupResult::getRecordEntries()
{
    return m_RecordEntries;
}

void DNSLookupResult::setRecordEntries(const std::vector<utility::string_t>& value)
{
    m_RecordEntries = value;
    m_RecordEntriesIsSet = true;
}

bool DNSLookupResult::recordEntriesIsSet() const
{
    return m_RecordEntriesIsSet;
}

void DNSLookupResult::unsetRecordEntries()
{
    m_RecordEntriesIsSet = false;
}
utility::string_t DNSLookupResult::getName() const
{
    return m_Name;
}

void DNSLookupResult::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool DNSLookupResult::nameIsSet() const
{
    return m_NameIsSet;
}

void DNSLookupResult::unsetName()
{
    m_NameIsSet = false;
}
}
}
}
}


