/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateInboxDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



CreateInboxDto::CreateInboxDto()
{
    m_EmailAddress = utility::conversions::to_string_t("");
    m_EmailAddressIsSet = false;
    m_DomainName = utility::conversions::to_string_t("");
    m_DomainNameIsSet = false;
    m_DomainId = utility::conversions::to_string_t("");
    m_DomainIdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_UseDomainPool = false;
    m_UseDomainPoolIsSet = false;
    m_TagsIsSet = false;
    m_ExpiresAt = utility::datetime();
    m_ExpiresAtIsSet = false;
    m_Favourite = false;
    m_FavouriteIsSet = false;
    m_ExpiresIn = 0L;
    m_ExpiresInIsSet = false;
    m_AllowTeamAccess = false;
    m_AllowTeamAccessIsSet = false;
    m_InboxType = utility::conversions::to_string_t("");
    m_InboxTypeIsSet = false;
    m_VirtualInbox = false;
    m_VirtualInboxIsSet = false;
    m_UseShortAddress = false;
    m_UseShortAddressIsSet = false;
}

CreateInboxDto::~CreateInboxDto()
{
}

void CreateInboxDto::validate()
{
    // TODO: implement validation
}

web::json::value CreateInboxDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EmailAddressIsSet)
    {
        val[utility::conversions::to_string_t(U("emailAddress"))] = ModelBase::toJson(m_EmailAddress);
    }
    if(m_DomainNameIsSet)
    {
        val[utility::conversions::to_string_t(U("domainName"))] = ModelBase::toJson(m_DomainName);
    }
    if(m_DomainIdIsSet)
    {
        val[utility::conversions::to_string_t(U("domainId"))] = ModelBase::toJson(m_DomainId);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_UseDomainPoolIsSet)
    {
        val[utility::conversions::to_string_t(U("useDomainPool"))] = ModelBase::toJson(m_UseDomainPool);
    }
    if(m_TagsIsSet)
    {
        val[utility::conversions::to_string_t(U("tags"))] = ModelBase::toJson(m_Tags);
    }
    if(m_ExpiresAtIsSet)
    {
        val[utility::conversions::to_string_t(U("expiresAt"))] = ModelBase::toJson(m_ExpiresAt);
    }
    if(m_FavouriteIsSet)
    {
        val[utility::conversions::to_string_t(U("favourite"))] = ModelBase::toJson(m_Favourite);
    }
    if(m_ExpiresInIsSet)
    {
        val[utility::conversions::to_string_t(U("expiresIn"))] = ModelBase::toJson(m_ExpiresIn);
    }
    if(m_AllowTeamAccessIsSet)
    {
        val[utility::conversions::to_string_t(U("allowTeamAccess"))] = ModelBase::toJson(m_AllowTeamAccess);
    }
    if(m_InboxTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("inboxType"))] = ModelBase::toJson(m_InboxType);
    }
    if(m_VirtualInboxIsSet)
    {
        val[utility::conversions::to_string_t(U("virtualInbox"))] = ModelBase::toJson(m_VirtualInbox);
    }
    if(m_UseShortAddressIsSet)
    {
        val[utility::conversions::to_string_t(U("useShortAddress"))] = ModelBase::toJson(m_UseShortAddress);
    }

    return val;
}

bool CreateInboxDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("emailAddress"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("emailAddress")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEmailAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmailAddress);
            setEmailAddress(refVal_setEmailAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("domainName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("domainName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDomainName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDomainName);
            setDomainName(refVal_setDomainName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("domainId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("domainId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDomainId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDomainId);
            setDomainId(refVal_setDomainId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("useDomainPool"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("useDomainPool")));
        if(!fieldValue.is_null())
        {
            bool refVal_setUseDomainPool;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUseDomainPool);
            setUseDomainPool(refVal_setUseDomainPool);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tags"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tags")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setTags;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTags);
            setTags(refVal_setTags);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expiresAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expiresAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setExpiresAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpiresAt);
            setExpiresAt(refVal_setExpiresAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("favourite"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("favourite")));
        if(!fieldValue.is_null())
        {
            bool refVal_setFavourite;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFavourite);
            setFavourite(refVal_setFavourite);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expiresIn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expiresIn")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setExpiresIn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpiresIn);
            setExpiresIn(refVal_setExpiresIn);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("allowTeamAccess"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("allowTeamAccess")));
        if(!fieldValue.is_null())
        {
            bool refVal_setAllowTeamAccess;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAllowTeamAccess);
            setAllowTeamAccess(refVal_setAllowTeamAccess);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("inboxType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inboxType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInboxType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInboxType);
            setInboxType(refVal_setInboxType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("virtualInbox"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("virtualInbox")));
        if(!fieldValue.is_null())
        {
            bool refVal_setVirtualInbox;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVirtualInbox);
            setVirtualInbox(refVal_setVirtualInbox);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("useShortAddress"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("useShortAddress")));
        if(!fieldValue.is_null())
        {
            bool refVal_setUseShortAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUseShortAddress);
            setUseShortAddress(refVal_setUseShortAddress);
        }
    }
    return ok;
}

void CreateInboxDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_EmailAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("emailAddress")), m_EmailAddress));
    }
    if(m_DomainNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("domainName")), m_DomainName));
    }
    if(m_DomainIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("domainId")), m_DomainId));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_UseDomainPoolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("useDomainPool")), m_UseDomainPool));
    }
    if(m_TagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tags")), m_Tags));
    }
    if(m_ExpiresAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expiresAt")), m_ExpiresAt));
    }
    if(m_FavouriteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("favourite")), m_Favourite));
    }
    if(m_ExpiresInIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expiresIn")), m_ExpiresIn));
    }
    if(m_AllowTeamAccessIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("allowTeamAccess")), m_AllowTeamAccess));
    }
    if(m_InboxTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inboxType")), m_InboxType));
    }
    if(m_VirtualInboxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("virtualInbox")), m_VirtualInbox));
    }
    if(m_UseShortAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("useShortAddress")), m_UseShortAddress));
    }
}

bool CreateInboxDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("emailAddress"))))
    {
        utility::string_t refVal_setEmailAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("emailAddress"))), refVal_setEmailAddress );
        setEmailAddress(refVal_setEmailAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("domainName"))))
    {
        utility::string_t refVal_setDomainName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("domainName"))), refVal_setDomainName );
        setDomainName(refVal_setDomainName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("domainId"))))
    {
        utility::string_t refVal_setDomainId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("domainId"))), refVal_setDomainId );
        setDomainId(refVal_setDomainId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("useDomainPool"))))
    {
        bool refVal_setUseDomainPool;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("useDomainPool"))), refVal_setUseDomainPool );
        setUseDomainPool(refVal_setUseDomainPool);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tags"))))
    {
        std::vector<utility::string_t> refVal_setTags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tags"))), refVal_setTags );
        setTags(refVal_setTags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expiresAt"))))
    {
        utility::datetime refVal_setExpiresAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expiresAt"))), refVal_setExpiresAt );
        setExpiresAt(refVal_setExpiresAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("favourite"))))
    {
        bool refVal_setFavourite;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("favourite"))), refVal_setFavourite );
        setFavourite(refVal_setFavourite);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expiresIn"))))
    {
        int64_t refVal_setExpiresIn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expiresIn"))), refVal_setExpiresIn );
        setExpiresIn(refVal_setExpiresIn);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("allowTeamAccess"))))
    {
        bool refVal_setAllowTeamAccess;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("allowTeamAccess"))), refVal_setAllowTeamAccess );
        setAllowTeamAccess(refVal_setAllowTeamAccess);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("inboxType"))))
    {
        utility::string_t refVal_setInboxType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inboxType"))), refVal_setInboxType );
        setInboxType(refVal_setInboxType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("virtualInbox"))))
    {
        bool refVal_setVirtualInbox;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("virtualInbox"))), refVal_setVirtualInbox );
        setVirtualInbox(refVal_setVirtualInbox);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("useShortAddress"))))
    {
        bool refVal_setUseShortAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("useShortAddress"))), refVal_setUseShortAddress );
        setUseShortAddress(refVal_setUseShortAddress);
    }
    return ok;
}

utility::string_t CreateInboxDto::getEmailAddress() const
{
    return m_EmailAddress;
}

void CreateInboxDto::setEmailAddress(const utility::string_t& value)
{
    m_EmailAddress = value;
    m_EmailAddressIsSet = true;
}

bool CreateInboxDto::emailAddressIsSet() const
{
    return m_EmailAddressIsSet;
}

void CreateInboxDto::unsetEmailAddress()
{
    m_EmailAddressIsSet = false;
}
utility::string_t CreateInboxDto::getDomainName() const
{
    return m_DomainName;
}

void CreateInboxDto::setDomainName(const utility::string_t& value)
{
    m_DomainName = value;
    m_DomainNameIsSet = true;
}

bool CreateInboxDto::domainNameIsSet() const
{
    return m_DomainNameIsSet;
}

void CreateInboxDto::unsetDomainName()
{
    m_DomainNameIsSet = false;
}
utility::string_t CreateInboxDto::getDomainId() const
{
    return m_DomainId;
}

void CreateInboxDto::setDomainId(const utility::string_t& value)
{
    m_DomainId = value;
    m_DomainIdIsSet = true;
}

bool CreateInboxDto::domainIdIsSet() const
{
    return m_DomainIdIsSet;
}

void CreateInboxDto::unsetDomainId()
{
    m_DomainIdIsSet = false;
}
utility::string_t CreateInboxDto::getName() const
{
    return m_Name;
}

void CreateInboxDto::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool CreateInboxDto::nameIsSet() const
{
    return m_NameIsSet;
}

void CreateInboxDto::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t CreateInboxDto::getDescription() const
{
    return m_Description;
}

void CreateInboxDto::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool CreateInboxDto::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void CreateInboxDto::unsetDescription()
{
    m_DescriptionIsSet = false;
}
bool CreateInboxDto::isUseDomainPool() const
{
    return m_UseDomainPool;
}

void CreateInboxDto::setUseDomainPool(bool value)
{
    m_UseDomainPool = value;
    m_UseDomainPoolIsSet = true;
}

bool CreateInboxDto::useDomainPoolIsSet() const
{
    return m_UseDomainPoolIsSet;
}

void CreateInboxDto::unsetUseDomainPool()
{
    m_UseDomainPoolIsSet = false;
}
std::vector<utility::string_t>& CreateInboxDto::getTags()
{
    return m_Tags;
}

void CreateInboxDto::setTags(const std::vector<utility::string_t>& value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}

bool CreateInboxDto::tagsIsSet() const
{
    return m_TagsIsSet;
}

void CreateInboxDto::unsetTags()
{
    m_TagsIsSet = false;
}
utility::datetime CreateInboxDto::getExpiresAt() const
{
    return m_ExpiresAt;
}

void CreateInboxDto::setExpiresAt(const utility::datetime& value)
{
    m_ExpiresAt = value;
    m_ExpiresAtIsSet = true;
}

bool CreateInboxDto::expiresAtIsSet() const
{
    return m_ExpiresAtIsSet;
}

void CreateInboxDto::unsetExpiresAt()
{
    m_ExpiresAtIsSet = false;
}
bool CreateInboxDto::isFavourite() const
{
    return m_Favourite;
}

void CreateInboxDto::setFavourite(bool value)
{
    m_Favourite = value;
    m_FavouriteIsSet = true;
}

bool CreateInboxDto::favouriteIsSet() const
{
    return m_FavouriteIsSet;
}

void CreateInboxDto::unsetFavourite()
{
    m_FavouriteIsSet = false;
}
int64_t CreateInboxDto::getExpiresIn() const
{
    return m_ExpiresIn;
}

void CreateInboxDto::setExpiresIn(int64_t value)
{
    m_ExpiresIn = value;
    m_ExpiresInIsSet = true;
}

bool CreateInboxDto::expiresInIsSet() const
{
    return m_ExpiresInIsSet;
}

void CreateInboxDto::unsetExpiresIn()
{
    m_ExpiresInIsSet = false;
}
bool CreateInboxDto::isAllowTeamAccess() const
{
    return m_AllowTeamAccess;
}

void CreateInboxDto::setAllowTeamAccess(bool value)
{
    m_AllowTeamAccess = value;
    m_AllowTeamAccessIsSet = true;
}

bool CreateInboxDto::allowTeamAccessIsSet() const
{
    return m_AllowTeamAccessIsSet;
}

void CreateInboxDto::unsetAllowTeamAccess()
{
    m_AllowTeamAccessIsSet = false;
}
utility::string_t CreateInboxDto::getInboxType() const
{
    return m_InboxType;
}

void CreateInboxDto::setInboxType(const utility::string_t& value)
{
    m_InboxType = value;
    m_InboxTypeIsSet = true;
}

bool CreateInboxDto::inboxTypeIsSet() const
{
    return m_InboxTypeIsSet;
}

void CreateInboxDto::unsetInboxType()
{
    m_InboxTypeIsSet = false;
}
bool CreateInboxDto::isVirtualInbox() const
{
    return m_VirtualInbox;
}

void CreateInboxDto::setVirtualInbox(bool value)
{
    m_VirtualInbox = value;
    m_VirtualInboxIsSet = true;
}

bool CreateInboxDto::virtualInboxIsSet() const
{
    return m_VirtualInboxIsSet;
}

void CreateInboxDto::unsetVirtualInbox()
{
    m_VirtualInboxIsSet = false;
}
bool CreateInboxDto::isUseShortAddress() const
{
    return m_UseShortAddress;
}

void CreateInboxDto::setUseShortAddress(bool value)
{
    m_UseShortAddress = value;
    m_UseShortAddressIsSet = true;
}

bool CreateInboxDto::useShortAddressIsSet() const
{
    return m_UseShortAddressIsSet;
}

void CreateInboxDto::unsetUseShortAddress()
{
    m_UseShortAddressIsSet = false;
}
}
}
}
}


