/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/DomainIssuesDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



DomainIssuesDto::DomainIssuesDto()
{
    m_HasIssues = false;
    m_HasIssuesIsSet = false;
}

DomainIssuesDto::~DomainIssuesDto()
{
}

void DomainIssuesDto::validate()
{
    // TODO: implement validation
}

web::json::value DomainIssuesDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_HasIssuesIsSet)
    {
        val[utility::conversions::to_string_t(U("hasIssues"))] = ModelBase::toJson(m_HasIssues);
    }

    return val;
}

bool DomainIssuesDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("hasIssues"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hasIssues")));
        if(!fieldValue.is_null())
        {
            bool refVal_setHasIssues;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHasIssues);
            setHasIssues(refVal_setHasIssues);
        }
    }
    return ok;
}

void DomainIssuesDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_HasIssuesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hasIssues")), m_HasIssues));
    }
}

bool DomainIssuesDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("hasIssues"))))
    {
        bool refVal_setHasIssues;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hasIssues"))), refVal_setHasIssues );
        setHasIssues(refVal_setHasIssues);
    }
    return ok;
}

bool DomainIssuesDto::isHasIssues() const
{
    return m_HasIssues;
}

void DomainIssuesDto::setHasIssues(bool value)
{
    m_HasIssues = value;
    m_HasIssuesIsSet = true;
}

bool DomainIssuesDto::hasIssuesIsSet() const
{
    return m_HasIssuesIsSet;
}

void DomainIssuesDto::unsetHasIssues()
{
    m_HasIssuesIsSet = false;
}
}
}
}
}


