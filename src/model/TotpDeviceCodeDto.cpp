/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/TotpDeviceCodeDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



TotpDeviceCodeDto::TotpDeviceCodeDto()
{
    m_Code = utility::conversions::to_string_t("");
    m_CodeIsSet = false;
    m_ExpiresAt = utility::datetime();
    m_ExpiresAtIsSet = false;
}

TotpDeviceCodeDto::~TotpDeviceCodeDto()
{
}

void TotpDeviceCodeDto::validate()
{
    // TODO: implement validation
}

web::json::value TotpDeviceCodeDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CodeIsSet)
    {
        val[utility::conversions::to_string_t(U("code"))] = ModelBase::toJson(m_Code);
    }
    if(m_ExpiresAtIsSet)
    {
        val[utility::conversions::to_string_t(U("expiresAt"))] = ModelBase::toJson(m_ExpiresAt);
    }

    return val;
}

bool TotpDeviceCodeDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("code")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCode);
            setCode(refVal_setCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expiresAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expiresAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setExpiresAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpiresAt);
            setExpiresAt(refVal_setExpiresAt);
        }
    }
    return ok;
}

void TotpDeviceCodeDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("code")), m_Code));
    }
    if(m_ExpiresAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expiresAt")), m_ExpiresAt));
    }
}

bool TotpDeviceCodeDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("code"))))
    {
        utility::string_t refVal_setCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("code"))), refVal_setCode );
        setCode(refVal_setCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expiresAt"))))
    {
        utility::datetime refVal_setExpiresAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expiresAt"))), refVal_setExpiresAt );
        setExpiresAt(refVal_setExpiresAt);
    }
    return ok;
}

utility::string_t TotpDeviceCodeDto::getCode() const
{
    return m_Code;
}

void TotpDeviceCodeDto::setCode(const utility::string_t& value)
{
    m_Code = value;
    m_CodeIsSet = true;
}

bool TotpDeviceCodeDto::codeIsSet() const
{
    return m_CodeIsSet;
}

void TotpDeviceCodeDto::unsetCode()
{
    m_CodeIsSet = false;
}
utility::datetime TotpDeviceCodeDto::getExpiresAt() const
{
    return m_ExpiresAt;
}

void TotpDeviceCodeDto::setExpiresAt(const utility::datetime& value)
{
    m_ExpiresAt = value;
    m_ExpiresAtIsSet = true;
}

bool TotpDeviceCodeDto::expiresAtIsSet() const
{
    return m_ExpiresAtIsSet;
}

void TotpDeviceCodeDto::unsetExpiresAt()
{
    m_ExpiresAtIsSet = false;
}
}
}
}
}


