/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/TestInboxRulesetReceivingResult.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



TestInboxRulesetReceivingResult::TestInboxRulesetReceivingResult()
{
    m_CanReceive = false;
    m_CanReceiveIsSet = false;
}

TestInboxRulesetReceivingResult::~TestInboxRulesetReceivingResult()
{
}

void TestInboxRulesetReceivingResult::validate()
{
    // TODO: implement validation
}

web::json::value TestInboxRulesetReceivingResult::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CanReceiveIsSet)
    {
        val[utility::conversions::to_string_t(U("canReceive"))] = ModelBase::toJson(m_CanReceive);
    }

    return val;
}

bool TestInboxRulesetReceivingResult::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("canReceive"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("canReceive")));
        if(!fieldValue.is_null())
        {
            bool refVal_setCanReceive;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCanReceive);
            setCanReceive(refVal_setCanReceive);
        }
    }
    return ok;
}

void TestInboxRulesetReceivingResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CanReceiveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("canReceive")), m_CanReceive));
    }
}

bool TestInboxRulesetReceivingResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("canReceive"))))
    {
        bool refVal_setCanReceive;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("canReceive"))), refVal_setCanReceive );
        setCanReceive(refVal_setCanReceive);
    }
    return ok;
}

bool TestInboxRulesetReceivingResult::isCanReceive() const
{
    return m_CanReceive;
}

void TestInboxRulesetReceivingResult::setCanReceive(bool value)
{
    m_CanReceive = value;
    m_CanReceiveIsSet = true;
}

bool TestInboxRulesetReceivingResult::canReceiveIsSet() const
{
    return m_CanReceiveIsSet;
}

void TestInboxRulesetReceivingResult::unsetCanReceive()
{
    m_CanReceiveIsSet = false;
}
}
}
}
}


