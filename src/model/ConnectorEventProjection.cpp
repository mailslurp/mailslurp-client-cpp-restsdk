/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ConnectorEventProjection.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



ConnectorEventProjection::ConnectorEventProjection()
{
    m_EventType = utility::conversions::to_string_t("");
    m_EventTypeIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_ConnectorId = utility::conversions::to_string_t("");
    m_ConnectorIdIsSet = false;
    m_Seen = false;
    m_SeenIsSet = false;
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Size = 0L;
    m_SizeIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
}

ConnectorEventProjection::~ConnectorEventProjection()
{
}

void ConnectorEventProjection::validate()
{
    // TODO: implement validation
}

web::json::value ConnectorEventProjection::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EventTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("eventType"))] = ModelBase::toJson(m_EventType);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_ConnectorIdIsSet)
    {
        val[utility::conversions::to_string_t(U("connectorId"))] = ModelBase::toJson(m_ConnectorId);
    }
    if(m_SeenIsSet)
    {
        val[utility::conversions::to_string_t(U("seen"))] = ModelBase::toJson(m_Seen);
    }
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t(U("message"))] = ModelBase::toJson(m_Message);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_SizeIsSet)
    {
        val[utility::conversions::to_string_t(U("size"))] = ModelBase::toJson(m_Size);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }

    return val;
}

bool ConnectorEventProjection::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("eventType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("eventType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEventType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEventType);
            setEventType(refVal_setEventType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("connectorId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("connectorId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setConnectorId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConnectorId);
            setConnectorId(refVal_setConnectorId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("seen"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("seen")));
        if(!fieldValue.is_null())
        {
            bool refVal_setSeen;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSeen);
            setSeen(refVal_setSeen);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("message"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("message")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessage);
            setMessage(refVal_setMessage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("size")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSize);
            setSize(refVal_setSize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    return ok;
}

void ConnectorEventProjection::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_EventTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("eventType")), m_EventType));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
    if(m_ConnectorIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("connectorId")), m_ConnectorId));
    }
    if(m_SeenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("seen")), m_Seen));
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("message")), m_Message));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_SizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("size")), m_Size));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
}

bool ConnectorEventProjection::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("eventType"))))
    {
        utility::string_t refVal_setEventType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("eventType"))), refVal_setEventType );
        setEventType(refVal_setEventType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("connectorId"))))
    {
        utility::string_t refVal_setConnectorId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("connectorId"))), refVal_setConnectorId );
        setConnectorId(refVal_setConnectorId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("seen"))))
    {
        bool refVal_setSeen;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("seen"))), refVal_setSeen );
        setSeen(refVal_setSeen);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("message"))))
    {
        utility::string_t refVal_setMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("message"))), refVal_setMessage );
        setMessage(refVal_setMessage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("size"))))
    {
        int64_t refVal_setSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("size"))), refVal_setSize );
        setSize(refVal_setSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    return ok;
}

utility::string_t ConnectorEventProjection::getEventType() const
{
    return m_EventType;
}

void ConnectorEventProjection::setEventType(const utility::string_t& value)
{
    m_EventType = value;
    m_EventTypeIsSet = true;
}

bool ConnectorEventProjection::eventTypeIsSet() const
{
    return m_EventTypeIsSet;
}

void ConnectorEventProjection::unsetEventType()
{
    m_EventTypeIsSet = false;
}
utility::datetime ConnectorEventProjection::getCreatedAt() const
{
    return m_CreatedAt;
}

void ConnectorEventProjection::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool ConnectorEventProjection::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void ConnectorEventProjection::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::string_t ConnectorEventProjection::getConnectorId() const
{
    return m_ConnectorId;
}

void ConnectorEventProjection::setConnectorId(const utility::string_t& value)
{
    m_ConnectorId = value;
    m_ConnectorIdIsSet = true;
}

bool ConnectorEventProjection::connectorIdIsSet() const
{
    return m_ConnectorIdIsSet;
}

void ConnectorEventProjection::unsetConnectorId()
{
    m_ConnectorIdIsSet = false;
}
bool ConnectorEventProjection::isSeen() const
{
    return m_Seen;
}

void ConnectorEventProjection::setSeen(bool value)
{
    m_Seen = value;
    m_SeenIsSet = true;
}

bool ConnectorEventProjection::seenIsSet() const
{
    return m_SeenIsSet;
}

void ConnectorEventProjection::unsetSeen()
{
    m_SeenIsSet = false;
}
utility::string_t ConnectorEventProjection::getMessage() const
{
    return m_Message;
}

void ConnectorEventProjection::setMessage(const utility::string_t& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}

bool ConnectorEventProjection::messageIsSet() const
{
    return m_MessageIsSet;
}

void ConnectorEventProjection::unsetMessage()
{
    m_MessageIsSet = false;
}
utility::string_t ConnectorEventProjection::getId() const
{
    return m_Id;
}

void ConnectorEventProjection::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool ConnectorEventProjection::idIsSet() const
{
    return m_IdIsSet;
}

void ConnectorEventProjection::unsetId()
{
    m_IdIsSet = false;
}
int64_t ConnectorEventProjection::getSize() const
{
    return m_Size;
}

void ConnectorEventProjection::setSize(int64_t value)
{
    m_Size = value;
    m_SizeIsSet = true;
}

bool ConnectorEventProjection::sizeIsSet() const
{
    return m_SizeIsSet;
}

void ConnectorEventProjection::unsetSize()
{
    m_SizeIsSet = false;
}
utility::string_t ConnectorEventProjection::getStatus() const
{
    return m_Status;
}

void ConnectorEventProjection::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool ConnectorEventProjection::statusIsSet() const
{
    return m_StatusIsSet;
}

void ConnectorEventProjection::unsetStatus()
{
    m_StatusIsSet = false;
}
}
}
}
}


