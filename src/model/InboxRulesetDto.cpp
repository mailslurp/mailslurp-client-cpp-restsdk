/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/InboxRulesetDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



InboxRulesetDto::InboxRulesetDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_InboxId = utility::conversions::to_string_t("");
    m_InboxIdIsSet = false;
    m_Scope = utility::conversions::to_string_t("");
    m_ScopeIsSet = false;
    m_Action = utility::conversions::to_string_t("");
    m_ActionIsSet = false;
    m_Target = utility::conversions::to_string_t("");
    m_TargetIsSet = false;
    m_Handler = utility::conversions::to_string_t("");
    m_HandlerIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
}

InboxRulesetDto::~InboxRulesetDto()
{
}

void InboxRulesetDto::validate()
{
    // TODO: implement validation
}

web::json::value InboxRulesetDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_InboxIdIsSet)
    {
        val[utility::conversions::to_string_t(U("inboxId"))] = ModelBase::toJson(m_InboxId);
    }
    if(m_ScopeIsSet)
    {
        val[utility::conversions::to_string_t(U("scope"))] = ModelBase::toJson(m_Scope);
    }
    if(m_ActionIsSet)
    {
        val[utility::conversions::to_string_t(U("action"))] = ModelBase::toJson(m_Action);
    }
    if(m_TargetIsSet)
    {
        val[utility::conversions::to_string_t(U("target"))] = ModelBase::toJson(m_Target);
    }
    if(m_HandlerIsSet)
    {
        val[utility::conversions::to_string_t(U("handler"))] = ModelBase::toJson(m_Handler);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }

    return val;
}

bool InboxRulesetDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("inboxId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inboxId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInboxId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInboxId);
            setInboxId(refVal_setInboxId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("scope"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("scope")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setScope;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScope);
            setScope(refVal_setScope);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("action"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("action")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAction;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAction);
            setAction(refVal_setAction);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("target"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("target")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTarget;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTarget);
            setTarget(refVal_setTarget);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("handler"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("handler")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHandler;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHandler);
            setHandler(refVal_setHandler);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    return ok;
}

void InboxRulesetDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_InboxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inboxId")), m_InboxId));
    }
    if(m_ScopeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("scope")), m_Scope));
    }
    if(m_ActionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("action")), m_Action));
    }
    if(m_TargetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("target")), m_Target));
    }
    if(m_HandlerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("handler")), m_Handler));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
}

bool InboxRulesetDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("inboxId"))))
    {
        utility::string_t refVal_setInboxId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inboxId"))), refVal_setInboxId );
        setInboxId(refVal_setInboxId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("scope"))))
    {
        utility::string_t refVal_setScope;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("scope"))), refVal_setScope );
        setScope(refVal_setScope);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("action"))))
    {
        utility::string_t refVal_setAction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("action"))), refVal_setAction );
        setAction(refVal_setAction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("target"))))
    {
        utility::string_t refVal_setTarget;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("target"))), refVal_setTarget );
        setTarget(refVal_setTarget);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("handler"))))
    {
        utility::string_t refVal_setHandler;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("handler"))), refVal_setHandler );
        setHandler(refVal_setHandler);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    return ok;
}

utility::string_t InboxRulesetDto::getId() const
{
    return m_Id;
}

void InboxRulesetDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool InboxRulesetDto::idIsSet() const
{
    return m_IdIsSet;
}

void InboxRulesetDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t InboxRulesetDto::getInboxId() const
{
    return m_InboxId;
}

void InboxRulesetDto::setInboxId(const utility::string_t& value)
{
    m_InboxId = value;
    m_InboxIdIsSet = true;
}

bool InboxRulesetDto::inboxIdIsSet() const
{
    return m_InboxIdIsSet;
}

void InboxRulesetDto::unsetInboxId()
{
    m_InboxIdIsSet = false;
}
utility::string_t InboxRulesetDto::getScope() const
{
    return m_Scope;
}

void InboxRulesetDto::setScope(const utility::string_t& value)
{
    m_Scope = value;
    m_ScopeIsSet = true;
}

bool InboxRulesetDto::scopeIsSet() const
{
    return m_ScopeIsSet;
}

void InboxRulesetDto::unsetScope()
{
    m_ScopeIsSet = false;
}
utility::string_t InboxRulesetDto::getAction() const
{
    return m_Action;
}

void InboxRulesetDto::setAction(const utility::string_t& value)
{
    m_Action = value;
    m_ActionIsSet = true;
}

bool InboxRulesetDto::actionIsSet() const
{
    return m_ActionIsSet;
}

void InboxRulesetDto::unsetAction()
{
    m_ActionIsSet = false;
}
utility::string_t InboxRulesetDto::getTarget() const
{
    return m_Target;
}

void InboxRulesetDto::setTarget(const utility::string_t& value)
{
    m_Target = value;
    m_TargetIsSet = true;
}

bool InboxRulesetDto::targetIsSet() const
{
    return m_TargetIsSet;
}

void InboxRulesetDto::unsetTarget()
{
    m_TargetIsSet = false;
}
utility::string_t InboxRulesetDto::getHandler() const
{
    return m_Handler;
}

void InboxRulesetDto::setHandler(const utility::string_t& value)
{
    m_Handler = value;
    m_HandlerIsSet = true;
}

bool InboxRulesetDto::handlerIsSet() const
{
    return m_HandlerIsSet;
}

void InboxRulesetDto::unsetHandler()
{
    m_HandlerIsSet = false;
}
utility::datetime InboxRulesetDto::getCreatedAt() const
{
    return m_CreatedAt;
}

void InboxRulesetDto::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool InboxRulesetDto::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void InboxRulesetDto::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
}
}
}
}


