/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ExportLink.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



ExportLink::ExportLink()
{
    m_DownloadLink = utility::conversions::to_string_t("");
    m_DownloadLinkIsSet = false;
}

ExportLink::~ExportLink()
{
}

void ExportLink::validate()
{
    // TODO: implement validation
}

web::json::value ExportLink::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DownloadLinkIsSet)
    {
        val[utility::conversions::to_string_t(U("downloadLink"))] = ModelBase::toJson(m_DownloadLink);
    }

    return val;
}

bool ExportLink::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("downloadLink"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("downloadLink")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDownloadLink;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDownloadLink);
            setDownloadLink(refVal_setDownloadLink);
        }
    }
    return ok;
}

void ExportLink::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_DownloadLinkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("downloadLink")), m_DownloadLink));
    }
}

bool ExportLink::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("downloadLink"))))
    {
        utility::string_t refVal_setDownloadLink;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("downloadLink"))), refVal_setDownloadLink );
        setDownloadLink(refVal_setDownloadLink);
    }
    return ok;
}

utility::string_t ExportLink::getDownloadLink() const
{
    return m_DownloadLink;
}

void ExportLink::setDownloadLink(const utility::string_t& value)
{
    m_DownloadLink = value;
    m_DownloadLinkIsSet = true;
}

bool ExportLink::downloadLinkIsSet() const
{
    return m_DownloadLinkIsSet;
}

void ExportLink::unsetDownloadLink()
{
    m_DownloadLinkIsSet = false;
}
}
}
}
}


