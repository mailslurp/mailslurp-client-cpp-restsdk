/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/GenerateMtaStsRecordOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



GenerateMtaStsRecordOptions::GenerateMtaStsRecordOptions()
{
    m_Host = utility::conversions::to_string_t("");
    m_HostIsSet = false;
    m_Version = utility::conversions::to_string_t("");
    m_VersionIsSet = false;
    m_Mode = utility::conversions::to_string_t("");
    m_ModeIsSet = false;
    m_Ttl = 0;
    m_TtlIsSet = false;
    m_MaxAgeSeconds = 0;
    m_MaxAgeSecondsIsSet = false;
    m_MxRecordsIsSet = false;
}

GenerateMtaStsRecordOptions::~GenerateMtaStsRecordOptions()
{
}

void GenerateMtaStsRecordOptions::validate()
{
    // TODO: implement validation
}

web::json::value GenerateMtaStsRecordOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_HostIsSet)
    {
        val[utility::conversions::to_string_t(U("host"))] = ModelBase::toJson(m_Host);
    }
    if(m_VersionIsSet)
    {
        val[utility::conversions::to_string_t(U("version"))] = ModelBase::toJson(m_Version);
    }
    if(m_ModeIsSet)
    {
        val[utility::conversions::to_string_t(U("mode"))] = ModelBase::toJson(m_Mode);
    }
    if(m_TtlIsSet)
    {
        val[utility::conversions::to_string_t(U("ttl"))] = ModelBase::toJson(m_Ttl);
    }
    if(m_MaxAgeSecondsIsSet)
    {
        val[utility::conversions::to_string_t(U("maxAgeSeconds"))] = ModelBase::toJson(m_MaxAgeSeconds);
    }
    if(m_MxRecordsIsSet)
    {
        val[utility::conversions::to_string_t(U("mxRecords"))] = ModelBase::toJson(m_MxRecords);
    }

    return val;
}

bool GenerateMtaStsRecordOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("host"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("host")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHost;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHost);
            setHost(refVal_setHost);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("version")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVersion);
            setVersion(refVal_setVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMode);
            setMode(refVal_setMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ttl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ttl")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTtl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTtl);
            setTtl(refVal_setTtl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("maxAgeSeconds"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("maxAgeSeconds")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMaxAgeSeconds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxAgeSeconds);
            setMaxAgeSeconds(refVal_setMaxAgeSeconds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mxRecords"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mxRecords")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setMxRecords;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMxRecords);
            setMxRecords(refVal_setMxRecords);
        }
    }
    return ok;
}

void GenerateMtaStsRecordOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_HostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("host")), m_Host));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("version")), m_Version));
    }
    if(m_ModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mode")), m_Mode));
    }
    if(m_TtlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ttl")), m_Ttl));
    }
    if(m_MaxAgeSecondsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("maxAgeSeconds")), m_MaxAgeSeconds));
    }
    if(m_MxRecordsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mxRecords")), m_MxRecords));
    }
}

bool GenerateMtaStsRecordOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("host"))))
    {
        utility::string_t refVal_setHost;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("host"))), refVal_setHost );
        setHost(refVal_setHost);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("version"))))
    {
        utility::string_t refVal_setVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("version"))), refVal_setVersion );
        setVersion(refVal_setVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mode"))))
    {
        utility::string_t refVal_setMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mode"))), refVal_setMode );
        setMode(refVal_setMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ttl"))))
    {
        int32_t refVal_setTtl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ttl"))), refVal_setTtl );
        setTtl(refVal_setTtl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("maxAgeSeconds"))))
    {
        int32_t refVal_setMaxAgeSeconds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("maxAgeSeconds"))), refVal_setMaxAgeSeconds );
        setMaxAgeSeconds(refVal_setMaxAgeSeconds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mxRecords"))))
    {
        std::vector<utility::string_t> refVal_setMxRecords;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mxRecords"))), refVal_setMxRecords );
        setMxRecords(refVal_setMxRecords);
    }
    return ok;
}

utility::string_t GenerateMtaStsRecordOptions::getHost() const
{
    return m_Host;
}

void GenerateMtaStsRecordOptions::setHost(const utility::string_t& value)
{
    m_Host = value;
    m_HostIsSet = true;
}

bool GenerateMtaStsRecordOptions::hostIsSet() const
{
    return m_HostIsSet;
}

void GenerateMtaStsRecordOptions::unsetHost()
{
    m_HostIsSet = false;
}
utility::string_t GenerateMtaStsRecordOptions::getVersion() const
{
    return m_Version;
}

void GenerateMtaStsRecordOptions::setVersion(const utility::string_t& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool GenerateMtaStsRecordOptions::versionIsSet() const
{
    return m_VersionIsSet;
}

void GenerateMtaStsRecordOptions::unsetVersion()
{
    m_VersionIsSet = false;
}
utility::string_t GenerateMtaStsRecordOptions::getMode() const
{
    return m_Mode;
}

void GenerateMtaStsRecordOptions::setMode(const utility::string_t& value)
{
    m_Mode = value;
    m_ModeIsSet = true;
}

bool GenerateMtaStsRecordOptions::modeIsSet() const
{
    return m_ModeIsSet;
}

void GenerateMtaStsRecordOptions::unsetMode()
{
    m_ModeIsSet = false;
}
int32_t GenerateMtaStsRecordOptions::getTtl() const
{
    return m_Ttl;
}

void GenerateMtaStsRecordOptions::setTtl(int32_t value)
{
    m_Ttl = value;
    m_TtlIsSet = true;
}

bool GenerateMtaStsRecordOptions::ttlIsSet() const
{
    return m_TtlIsSet;
}

void GenerateMtaStsRecordOptions::unsetTtl()
{
    m_TtlIsSet = false;
}
int32_t GenerateMtaStsRecordOptions::getMaxAgeSeconds() const
{
    return m_MaxAgeSeconds;
}

void GenerateMtaStsRecordOptions::setMaxAgeSeconds(int32_t value)
{
    m_MaxAgeSeconds = value;
    m_MaxAgeSecondsIsSet = true;
}

bool GenerateMtaStsRecordOptions::maxAgeSecondsIsSet() const
{
    return m_MaxAgeSecondsIsSet;
}

void GenerateMtaStsRecordOptions::unsetMaxAgeSeconds()
{
    m_MaxAgeSecondsIsSet = false;
}
std::vector<utility::string_t>& GenerateMtaStsRecordOptions::getMxRecords()
{
    return m_MxRecords;
}

void GenerateMtaStsRecordOptions::setMxRecords(const std::vector<utility::string_t>& value)
{
    m_MxRecords = value;
    m_MxRecordsIsSet = true;
}

bool GenerateMtaStsRecordOptions::mxRecordsIsSet() const
{
    return m_MxRecordsIsSet;
}

void GenerateMtaStsRecordOptions::unsetMxRecords()
{
    m_MxRecordsIsSet = false;
}
}
}
}
}


