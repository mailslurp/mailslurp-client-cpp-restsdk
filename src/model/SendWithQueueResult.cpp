/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SendWithQueueResult.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



SendWithQueueResult::SendWithQueueResult()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_Subject = utility::conversions::to_string_t("");
    m_SubjectIsSet = false;
    m_InboxId = utility::conversions::to_string_t("");
    m_InboxIdIsSet = false;
    m_HeaderId = utility::conversions::to_string_t("");
    m_HeaderIdIsSet = false;
    m_Delivered = false;
    m_DeliveredIsSet = false;
    m_ExceptionName = utility::conversions::to_string_t("");
    m_ExceptionNameIsSet = false;
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_UpdatedAt = utility::datetime();
    m_UpdatedAtIsSet = false;
}

SendWithQueueResult::~SendWithQueueResult()
{
}

void SendWithQueueResult::validate()
{
    // TODO: implement validation
}

web::json::value SendWithQueueResult::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t(U("userId"))] = ModelBase::toJson(m_UserId);
    }
    if(m_SubjectIsSet)
    {
        val[utility::conversions::to_string_t(U("subject"))] = ModelBase::toJson(m_Subject);
    }
    if(m_InboxIdIsSet)
    {
        val[utility::conversions::to_string_t(U("inboxId"))] = ModelBase::toJson(m_InboxId);
    }
    if(m_HeaderIdIsSet)
    {
        val[utility::conversions::to_string_t(U("headerId"))] = ModelBase::toJson(m_HeaderId);
    }
    if(m_DeliveredIsSet)
    {
        val[utility::conversions::to_string_t(U("delivered"))] = ModelBase::toJson(m_Delivered);
    }
    if(m_ExceptionNameIsSet)
    {
        val[utility::conversions::to_string_t(U("exceptionName"))] = ModelBase::toJson(m_ExceptionName);
    }
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t(U("message"))] = ModelBase::toJson(m_Message);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_UpdatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("updatedAt"))] = ModelBase::toJson(m_UpdatedAt);
    }

    return val;
}

bool SendWithQueueResult::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("userId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("userId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserId);
            setUserId(refVal_setUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subject"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subject")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubject;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubject);
            setSubject(refVal_setSubject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("inboxId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inboxId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInboxId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInboxId);
            setInboxId(refVal_setInboxId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("headerId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("headerId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHeaderId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHeaderId);
            setHeaderId(refVal_setHeaderId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("delivered"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("delivered")));
        if(!fieldValue.is_null())
        {
            bool refVal_setDelivered;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDelivered);
            setDelivered(refVal_setDelivered);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("exceptionName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exceptionName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExceptionName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExceptionName);
            setExceptionName(refVal_setExceptionName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("message"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("message")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessage);
            setMessage(refVal_setMessage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updatedAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updatedAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setUpdatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedAt);
            setUpdatedAt(refVal_setUpdatedAt);
        }
    }
    return ok;
}

void SendWithQueueResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("userId")), m_UserId));
    }
    if(m_SubjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subject")), m_Subject));
    }
    if(m_InboxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inboxId")), m_InboxId));
    }
    if(m_HeaderIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("headerId")), m_HeaderId));
    }
    if(m_DeliveredIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("delivered")), m_Delivered));
    }
    if(m_ExceptionNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exceptionName")), m_ExceptionName));
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("message")), m_Message));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updatedAt")), m_UpdatedAt));
    }
}

bool SendWithQueueResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("userId"))))
    {
        utility::string_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("userId"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subject"))))
    {
        utility::string_t refVal_setSubject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subject"))), refVal_setSubject );
        setSubject(refVal_setSubject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("inboxId"))))
    {
        utility::string_t refVal_setInboxId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inboxId"))), refVal_setInboxId );
        setInboxId(refVal_setInboxId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("headerId"))))
    {
        utility::string_t refVal_setHeaderId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("headerId"))), refVal_setHeaderId );
        setHeaderId(refVal_setHeaderId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("delivered"))))
    {
        bool refVal_setDelivered;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("delivered"))), refVal_setDelivered );
        setDelivered(refVal_setDelivered);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("exceptionName"))))
    {
        utility::string_t refVal_setExceptionName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exceptionName"))), refVal_setExceptionName );
        setExceptionName(refVal_setExceptionName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("message"))))
    {
        utility::string_t refVal_setMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("message"))), refVal_setMessage );
        setMessage(refVal_setMessage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updatedAt"))))
    {
        utility::datetime refVal_setUpdatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updatedAt"))), refVal_setUpdatedAt );
        setUpdatedAt(refVal_setUpdatedAt);
    }
    return ok;
}

utility::string_t SendWithQueueResult::getId() const
{
    return m_Id;
}

void SendWithQueueResult::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool SendWithQueueResult::idIsSet() const
{
    return m_IdIsSet;
}

void SendWithQueueResult::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t SendWithQueueResult::getUserId() const
{
    return m_UserId;
}

void SendWithQueueResult::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool SendWithQueueResult::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void SendWithQueueResult::unsetUserId()
{
    m_UserIdIsSet = false;
}
utility::string_t SendWithQueueResult::getSubject() const
{
    return m_Subject;
}

void SendWithQueueResult::setSubject(const utility::string_t& value)
{
    m_Subject = value;
    m_SubjectIsSet = true;
}

bool SendWithQueueResult::subjectIsSet() const
{
    return m_SubjectIsSet;
}

void SendWithQueueResult::unsetSubject()
{
    m_SubjectIsSet = false;
}
utility::string_t SendWithQueueResult::getInboxId() const
{
    return m_InboxId;
}

void SendWithQueueResult::setInboxId(const utility::string_t& value)
{
    m_InboxId = value;
    m_InboxIdIsSet = true;
}

bool SendWithQueueResult::inboxIdIsSet() const
{
    return m_InboxIdIsSet;
}

void SendWithQueueResult::unsetInboxId()
{
    m_InboxIdIsSet = false;
}
utility::string_t SendWithQueueResult::getHeaderId() const
{
    return m_HeaderId;
}

void SendWithQueueResult::setHeaderId(const utility::string_t& value)
{
    m_HeaderId = value;
    m_HeaderIdIsSet = true;
}

bool SendWithQueueResult::headerIdIsSet() const
{
    return m_HeaderIdIsSet;
}

void SendWithQueueResult::unsetHeaderId()
{
    m_HeaderIdIsSet = false;
}
bool SendWithQueueResult::isDelivered() const
{
    return m_Delivered;
}

void SendWithQueueResult::setDelivered(bool value)
{
    m_Delivered = value;
    m_DeliveredIsSet = true;
}

bool SendWithQueueResult::deliveredIsSet() const
{
    return m_DeliveredIsSet;
}

void SendWithQueueResult::unsetDelivered()
{
    m_DeliveredIsSet = false;
}
utility::string_t SendWithQueueResult::getExceptionName() const
{
    return m_ExceptionName;
}

void SendWithQueueResult::setExceptionName(const utility::string_t& value)
{
    m_ExceptionName = value;
    m_ExceptionNameIsSet = true;
}

bool SendWithQueueResult::exceptionNameIsSet() const
{
    return m_ExceptionNameIsSet;
}

void SendWithQueueResult::unsetExceptionName()
{
    m_ExceptionNameIsSet = false;
}
utility::string_t SendWithQueueResult::getMessage() const
{
    return m_Message;
}

void SendWithQueueResult::setMessage(const utility::string_t& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}

bool SendWithQueueResult::messageIsSet() const
{
    return m_MessageIsSet;
}

void SendWithQueueResult::unsetMessage()
{
    m_MessageIsSet = false;
}
utility::datetime SendWithQueueResult::getCreatedAt() const
{
    return m_CreatedAt;
}

void SendWithQueueResult::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool SendWithQueueResult::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void SendWithQueueResult::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::datetime SendWithQueueResult::getUpdatedAt() const
{
    return m_UpdatedAt;
}

void SendWithQueueResult::setUpdatedAt(const utility::datetime& value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}

bool SendWithQueueResult::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void SendWithQueueResult::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
}
}
}
}


