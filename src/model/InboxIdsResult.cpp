/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/InboxIdsResult.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



InboxIdsResult::InboxIdsResult()
{
    m_InboxIdsIsSet = false;
}

InboxIdsResult::~InboxIdsResult()
{
}

void InboxIdsResult::validate()
{
    // TODO: implement validation
}

web::json::value InboxIdsResult::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_InboxIdsIsSet)
    {
        val[utility::conversions::to_string_t(U("inboxIds"))] = ModelBase::toJson(m_InboxIds);
    }

    return val;
}

bool InboxIdsResult::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("inboxIds"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inboxIds")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<InboxIdItem>> refVal_setInboxIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInboxIds);
            setInboxIds(refVal_setInboxIds);
        }
    }
    return ok;
}

void InboxIdsResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_InboxIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inboxIds")), m_InboxIds));
    }
}

bool InboxIdsResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("inboxIds"))))
    {
        std::vector<std::shared_ptr<InboxIdItem>> refVal_setInboxIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inboxIds"))), refVal_setInboxIds );
        setInboxIds(refVal_setInboxIds);
    }
    return ok;
}

std::vector<std::shared_ptr<InboxIdItem>>& InboxIdsResult::getInboxIds()
{
    return m_InboxIds;
}

void InboxIdsResult::setInboxIds(const std::vector<std::shared_ptr<InboxIdItem>>& value)
{
    m_InboxIds = value;
    m_InboxIdsIsSet = true;
}

bool InboxIdsResult::inboxIdsIsSet() const
{
    return m_InboxIdsIsSet;
}

void InboxIdsResult::unsetInboxIds()
{
    m_InboxIdsIsSet = false;
}
}
}
}
}


