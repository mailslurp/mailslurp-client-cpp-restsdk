/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateAITransformerMappingOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



CreateAITransformerMappingOptions::CreateAITransformerMappingOptions()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_AiTransformId = utility::conversions::to_string_t("");
    m_AiTransformIdIsSet = false;
    m_EntityId = utility::conversions::to_string_t("");
    m_EntityIdIsSet = false;
    m_EntityType = utility::conversions::to_string_t("");
    m_EntityTypeIsSet = false;
    m_ContentSelector = utility::conversions::to_string_t("");
    m_ContentSelectorIsSet = false;
    m_TriggerSelector = utility::conversions::to_string_t("");
    m_TriggerSelectorIsSet = false;
    m_SpreadRootArray = false;
    m_SpreadRootArrayIsSet = false;
}

CreateAITransformerMappingOptions::~CreateAITransformerMappingOptions()
{
}

void CreateAITransformerMappingOptions::validate()
{
    // TODO: implement validation
}

web::json::value CreateAITransformerMappingOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_AiTransformIdIsSet)
    {
        val[utility::conversions::to_string_t(U("aiTransformId"))] = ModelBase::toJson(m_AiTransformId);
    }
    if(m_EntityIdIsSet)
    {
        val[utility::conversions::to_string_t(U("entityId"))] = ModelBase::toJson(m_EntityId);
    }
    if(m_EntityTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("entityType"))] = ModelBase::toJson(m_EntityType);
    }
    if(m_ContentSelectorIsSet)
    {
        val[utility::conversions::to_string_t(U("contentSelector"))] = ModelBase::toJson(m_ContentSelector);
    }
    if(m_TriggerSelectorIsSet)
    {
        val[utility::conversions::to_string_t(U("triggerSelector"))] = ModelBase::toJson(m_TriggerSelector);
    }
    if(m_SpreadRootArrayIsSet)
    {
        val[utility::conversions::to_string_t(U("spreadRootArray"))] = ModelBase::toJson(m_SpreadRootArray);
    }

    return val;
}

bool CreateAITransformerMappingOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("aiTransformId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("aiTransformId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAiTransformId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAiTransformId);
            setAiTransformId(refVal_setAiTransformId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("entityId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entityId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEntityId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntityId);
            setEntityId(refVal_setEntityId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("entityType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entityType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEntityType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntityType);
            setEntityType(refVal_setEntityType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("contentSelector"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("contentSelector")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setContentSelector;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContentSelector);
            setContentSelector(refVal_setContentSelector);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("triggerSelector"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("triggerSelector")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTriggerSelector;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTriggerSelector);
            setTriggerSelector(refVal_setTriggerSelector);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("spreadRootArray"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("spreadRootArray")));
        if(!fieldValue.is_null())
        {
            bool refVal_setSpreadRootArray;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSpreadRootArray);
            setSpreadRootArray(refVal_setSpreadRootArray);
        }
    }
    return ok;
}

void CreateAITransformerMappingOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_AiTransformIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("aiTransformId")), m_AiTransformId));
    }
    if(m_EntityIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entityId")), m_EntityId));
    }
    if(m_EntityTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entityType")), m_EntityType));
    }
    if(m_ContentSelectorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("contentSelector")), m_ContentSelector));
    }
    if(m_TriggerSelectorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("triggerSelector")), m_TriggerSelector));
    }
    if(m_SpreadRootArrayIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("spreadRootArray")), m_SpreadRootArray));
    }
}

bool CreateAITransformerMappingOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("aiTransformId"))))
    {
        utility::string_t refVal_setAiTransformId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("aiTransformId"))), refVal_setAiTransformId );
        setAiTransformId(refVal_setAiTransformId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("entityId"))))
    {
        utility::string_t refVal_setEntityId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entityId"))), refVal_setEntityId );
        setEntityId(refVal_setEntityId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("entityType"))))
    {
        utility::string_t refVal_setEntityType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entityType"))), refVal_setEntityType );
        setEntityType(refVal_setEntityType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("contentSelector"))))
    {
        utility::string_t refVal_setContentSelector;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("contentSelector"))), refVal_setContentSelector );
        setContentSelector(refVal_setContentSelector);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("triggerSelector"))))
    {
        utility::string_t refVal_setTriggerSelector;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("triggerSelector"))), refVal_setTriggerSelector );
        setTriggerSelector(refVal_setTriggerSelector);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("spreadRootArray"))))
    {
        bool refVal_setSpreadRootArray;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("spreadRootArray"))), refVal_setSpreadRootArray );
        setSpreadRootArray(refVal_setSpreadRootArray);
    }
    return ok;
}

utility::string_t CreateAITransformerMappingOptions::getName() const
{
    return m_Name;
}

void CreateAITransformerMappingOptions::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool CreateAITransformerMappingOptions::nameIsSet() const
{
    return m_NameIsSet;
}

void CreateAITransformerMappingOptions::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t CreateAITransformerMappingOptions::getAiTransformId() const
{
    return m_AiTransformId;
}

void CreateAITransformerMappingOptions::setAiTransformId(const utility::string_t& value)
{
    m_AiTransformId = value;
    m_AiTransformIdIsSet = true;
}

bool CreateAITransformerMappingOptions::aiTransformIdIsSet() const
{
    return m_AiTransformIdIsSet;
}

void CreateAITransformerMappingOptions::unsetAiTransformId()
{
    m_AiTransformIdIsSet = false;
}
utility::string_t CreateAITransformerMappingOptions::getEntityId() const
{
    return m_EntityId;
}

void CreateAITransformerMappingOptions::setEntityId(const utility::string_t& value)
{
    m_EntityId = value;
    m_EntityIdIsSet = true;
}

bool CreateAITransformerMappingOptions::entityIdIsSet() const
{
    return m_EntityIdIsSet;
}

void CreateAITransformerMappingOptions::unsetEntityId()
{
    m_EntityIdIsSet = false;
}
utility::string_t CreateAITransformerMappingOptions::getEntityType() const
{
    return m_EntityType;
}

void CreateAITransformerMappingOptions::setEntityType(const utility::string_t& value)
{
    m_EntityType = value;
    m_EntityTypeIsSet = true;
}

bool CreateAITransformerMappingOptions::entityTypeIsSet() const
{
    return m_EntityTypeIsSet;
}

void CreateAITransformerMappingOptions::unsetEntityType()
{
    m_EntityTypeIsSet = false;
}
utility::string_t CreateAITransformerMappingOptions::getContentSelector() const
{
    return m_ContentSelector;
}

void CreateAITransformerMappingOptions::setContentSelector(const utility::string_t& value)
{
    m_ContentSelector = value;
    m_ContentSelectorIsSet = true;
}

bool CreateAITransformerMappingOptions::contentSelectorIsSet() const
{
    return m_ContentSelectorIsSet;
}

void CreateAITransformerMappingOptions::unsetContentSelector()
{
    m_ContentSelectorIsSet = false;
}
utility::string_t CreateAITransformerMappingOptions::getTriggerSelector() const
{
    return m_TriggerSelector;
}

void CreateAITransformerMappingOptions::setTriggerSelector(const utility::string_t& value)
{
    m_TriggerSelector = value;
    m_TriggerSelectorIsSet = true;
}

bool CreateAITransformerMappingOptions::triggerSelectorIsSet() const
{
    return m_TriggerSelectorIsSet;
}

void CreateAITransformerMappingOptions::unsetTriggerSelector()
{
    m_TriggerSelectorIsSet = false;
}
bool CreateAITransformerMappingOptions::isSpreadRootArray() const
{
    return m_SpreadRootArray;
}

void CreateAITransformerMappingOptions::setSpreadRootArray(bool value)
{
    m_SpreadRootArray = value;
    m_SpreadRootArrayIsSet = true;
}

bool CreateAITransformerMappingOptions::spreadRootArrayIsSet() const
{
    return m_SpreadRootArrayIsSet;
}

void CreateAITransformerMappingOptions::unsetSpreadRootArray()
{
    m_SpreadRootArrayIsSet = false;
}
}
}
}
}


