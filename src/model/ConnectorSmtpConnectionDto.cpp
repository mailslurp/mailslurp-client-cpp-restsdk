/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ConnectorSmtpConnectionDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



ConnectorSmtpConnectionDto::ConnectorSmtpConnectionDto()
{
    m_ConnectorId = utility::conversions::to_string_t("");
    m_ConnectorIdIsSet = false;
    m_SmtpHost = utility::conversions::to_string_t("");
    m_SmtpHostIsSet = false;
    m_SmtpPort = 0;
    m_SmtpPortIsSet = false;
    m_SmtpUsername = utility::conversions::to_string_t("");
    m_SmtpUsernameIsSet = false;
    m_SmtpPassword = utility::conversions::to_string_t("");
    m_SmtpPasswordIsSet = false;
    m_SmtpSsl = false;
    m_SmtpSslIsSet = false;
    m_StartTls = false;
    m_StartTlsIsSet = false;
    m_SmtpMechanismsIsSet = false;
    m_LocalHostName = utility::conversions::to_string_t("");
    m_LocalHostNameIsSet = false;
    m_ProxyHost = utility::conversions::to_string_t("");
    m_ProxyHostIsSet = false;
    m_ProxyPort = 0;
    m_ProxyPortIsSet = false;
    m_ProxyEnabled = false;
    m_ProxyEnabledIsSet = false;
    m_Enabled = false;
    m_EnabledIsSet = false;
    m_SslTrust = utility::conversions::to_string_t("");
    m_SslTrustIsSet = false;
    m_SslProtocolsIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
}

ConnectorSmtpConnectionDto::~ConnectorSmtpConnectionDto()
{
}

void ConnectorSmtpConnectionDto::validate()
{
    // TODO: implement validation
}

web::json::value ConnectorSmtpConnectionDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ConnectorIdIsSet)
    {
        val[utility::conversions::to_string_t(U("connectorId"))] = ModelBase::toJson(m_ConnectorId);
    }
    if(m_SmtpHostIsSet)
    {
        val[utility::conversions::to_string_t(U("smtpHost"))] = ModelBase::toJson(m_SmtpHost);
    }
    if(m_SmtpPortIsSet)
    {
        val[utility::conversions::to_string_t(U("smtpPort"))] = ModelBase::toJson(m_SmtpPort);
    }
    if(m_SmtpUsernameIsSet)
    {
        val[utility::conversions::to_string_t(U("smtpUsername"))] = ModelBase::toJson(m_SmtpUsername);
    }
    if(m_SmtpPasswordIsSet)
    {
        val[utility::conversions::to_string_t(U("smtpPassword"))] = ModelBase::toJson(m_SmtpPassword);
    }
    if(m_SmtpSslIsSet)
    {
        val[utility::conversions::to_string_t(U("smtpSsl"))] = ModelBase::toJson(m_SmtpSsl);
    }
    if(m_StartTlsIsSet)
    {
        val[utility::conversions::to_string_t(U("startTls"))] = ModelBase::toJson(m_StartTls);
    }
    if(m_SmtpMechanismsIsSet)
    {
        val[utility::conversions::to_string_t(U("smtpMechanisms"))] = ModelBase::toJson(m_SmtpMechanisms);
    }
    if(m_LocalHostNameIsSet)
    {
        val[utility::conversions::to_string_t(U("localHostName"))] = ModelBase::toJson(m_LocalHostName);
    }
    if(m_ProxyHostIsSet)
    {
        val[utility::conversions::to_string_t(U("proxyHost"))] = ModelBase::toJson(m_ProxyHost);
    }
    if(m_ProxyPortIsSet)
    {
        val[utility::conversions::to_string_t(U("proxyPort"))] = ModelBase::toJson(m_ProxyPort);
    }
    if(m_ProxyEnabledIsSet)
    {
        val[utility::conversions::to_string_t(U("proxyEnabled"))] = ModelBase::toJson(m_ProxyEnabled);
    }
    if(m_EnabledIsSet)
    {
        val[utility::conversions::to_string_t(U("enabled"))] = ModelBase::toJson(m_Enabled);
    }
    if(m_SslTrustIsSet)
    {
        val[utility::conversions::to_string_t(U("sslTrust"))] = ModelBase::toJson(m_SslTrust);
    }
    if(m_SslProtocolsIsSet)
    {
        val[utility::conversions::to_string_t(U("sslProtocols"))] = ModelBase::toJson(m_SslProtocols);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }

    return val;
}

bool ConnectorSmtpConnectionDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("connectorId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("connectorId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setConnectorId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConnectorId);
            setConnectorId(refVal_setConnectorId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("smtpHost"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("smtpHost")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSmtpHost;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSmtpHost);
            setSmtpHost(refVal_setSmtpHost);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("smtpPort"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("smtpPort")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSmtpPort;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSmtpPort);
            setSmtpPort(refVal_setSmtpPort);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("smtpUsername"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("smtpUsername")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSmtpUsername;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSmtpUsername);
            setSmtpUsername(refVal_setSmtpUsername);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("smtpPassword"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("smtpPassword")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSmtpPassword;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSmtpPassword);
            setSmtpPassword(refVal_setSmtpPassword);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("smtpSsl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("smtpSsl")));
        if(!fieldValue.is_null())
        {
            bool refVal_setSmtpSsl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSmtpSsl);
            setSmtpSsl(refVal_setSmtpSsl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("startTls"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("startTls")));
        if(!fieldValue.is_null())
        {
            bool refVal_setStartTls;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStartTls);
            setStartTls(refVal_setStartTls);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("smtpMechanisms"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("smtpMechanisms")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setSmtpMechanisms;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSmtpMechanisms);
            setSmtpMechanisms(refVal_setSmtpMechanisms);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("localHostName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("localHostName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLocalHostName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLocalHostName);
            setLocalHostName(refVal_setLocalHostName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("proxyHost"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("proxyHost")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProxyHost;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProxyHost);
            setProxyHost(refVal_setProxyHost);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("proxyPort"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("proxyPort")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setProxyPort;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProxyPort);
            setProxyPort(refVal_setProxyPort);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("proxyEnabled"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("proxyEnabled")));
        if(!fieldValue.is_null())
        {
            bool refVal_setProxyEnabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProxyEnabled);
            setProxyEnabled(refVal_setProxyEnabled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("enabled"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("enabled")));
        if(!fieldValue.is_null())
        {
            bool refVal_setEnabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEnabled);
            setEnabled(refVal_setEnabled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sslTrust"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sslTrust")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSslTrust;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSslTrust);
            setSslTrust(refVal_setSslTrust);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sslProtocols"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sslProtocols")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setSslProtocols;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSslProtocols);
            setSslProtocols(refVal_setSslProtocols);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    return ok;
}

void ConnectorSmtpConnectionDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ConnectorIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("connectorId")), m_ConnectorId));
    }
    if(m_SmtpHostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("smtpHost")), m_SmtpHost));
    }
    if(m_SmtpPortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("smtpPort")), m_SmtpPort));
    }
    if(m_SmtpUsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("smtpUsername")), m_SmtpUsername));
    }
    if(m_SmtpPasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("smtpPassword")), m_SmtpPassword));
    }
    if(m_SmtpSslIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("smtpSsl")), m_SmtpSsl));
    }
    if(m_StartTlsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("startTls")), m_StartTls));
    }
    if(m_SmtpMechanismsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("smtpMechanisms")), m_SmtpMechanisms));
    }
    if(m_LocalHostNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("localHostName")), m_LocalHostName));
    }
    if(m_ProxyHostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("proxyHost")), m_ProxyHost));
    }
    if(m_ProxyPortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("proxyPort")), m_ProxyPort));
    }
    if(m_ProxyEnabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("proxyEnabled")), m_ProxyEnabled));
    }
    if(m_EnabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("enabled")), m_Enabled));
    }
    if(m_SslTrustIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sslTrust")), m_SslTrust));
    }
    if(m_SslProtocolsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sslProtocols")), m_SslProtocols));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
}

bool ConnectorSmtpConnectionDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("connectorId"))))
    {
        utility::string_t refVal_setConnectorId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("connectorId"))), refVal_setConnectorId );
        setConnectorId(refVal_setConnectorId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("smtpHost"))))
    {
        utility::string_t refVal_setSmtpHost;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("smtpHost"))), refVal_setSmtpHost );
        setSmtpHost(refVal_setSmtpHost);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("smtpPort"))))
    {
        int32_t refVal_setSmtpPort;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("smtpPort"))), refVal_setSmtpPort );
        setSmtpPort(refVal_setSmtpPort);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("smtpUsername"))))
    {
        utility::string_t refVal_setSmtpUsername;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("smtpUsername"))), refVal_setSmtpUsername );
        setSmtpUsername(refVal_setSmtpUsername);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("smtpPassword"))))
    {
        utility::string_t refVal_setSmtpPassword;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("smtpPassword"))), refVal_setSmtpPassword );
        setSmtpPassword(refVal_setSmtpPassword);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("smtpSsl"))))
    {
        bool refVal_setSmtpSsl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("smtpSsl"))), refVal_setSmtpSsl );
        setSmtpSsl(refVal_setSmtpSsl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("startTls"))))
    {
        bool refVal_setStartTls;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("startTls"))), refVal_setStartTls );
        setStartTls(refVal_setStartTls);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("smtpMechanisms"))))
    {
        std::vector<utility::string_t> refVal_setSmtpMechanisms;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("smtpMechanisms"))), refVal_setSmtpMechanisms );
        setSmtpMechanisms(refVal_setSmtpMechanisms);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("localHostName"))))
    {
        utility::string_t refVal_setLocalHostName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("localHostName"))), refVal_setLocalHostName );
        setLocalHostName(refVal_setLocalHostName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("proxyHost"))))
    {
        utility::string_t refVal_setProxyHost;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("proxyHost"))), refVal_setProxyHost );
        setProxyHost(refVal_setProxyHost);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("proxyPort"))))
    {
        int32_t refVal_setProxyPort;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("proxyPort"))), refVal_setProxyPort );
        setProxyPort(refVal_setProxyPort);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("proxyEnabled"))))
    {
        bool refVal_setProxyEnabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("proxyEnabled"))), refVal_setProxyEnabled );
        setProxyEnabled(refVal_setProxyEnabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("enabled"))))
    {
        bool refVal_setEnabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("enabled"))), refVal_setEnabled );
        setEnabled(refVal_setEnabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sslTrust"))))
    {
        utility::string_t refVal_setSslTrust;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sslTrust"))), refVal_setSslTrust );
        setSslTrust(refVal_setSslTrust);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sslProtocols"))))
    {
        std::vector<utility::string_t> refVal_setSslProtocols;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sslProtocols"))), refVal_setSslProtocols );
        setSslProtocols(refVal_setSslProtocols);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    return ok;
}

utility::string_t ConnectorSmtpConnectionDto::getConnectorId() const
{
    return m_ConnectorId;
}

void ConnectorSmtpConnectionDto::setConnectorId(const utility::string_t& value)
{
    m_ConnectorId = value;
    m_ConnectorIdIsSet = true;
}

bool ConnectorSmtpConnectionDto::connectorIdIsSet() const
{
    return m_ConnectorIdIsSet;
}

void ConnectorSmtpConnectionDto::unsetConnectorId()
{
    m_ConnectorIdIsSet = false;
}
utility::string_t ConnectorSmtpConnectionDto::getSmtpHost() const
{
    return m_SmtpHost;
}

void ConnectorSmtpConnectionDto::setSmtpHost(const utility::string_t& value)
{
    m_SmtpHost = value;
    m_SmtpHostIsSet = true;
}

bool ConnectorSmtpConnectionDto::smtpHostIsSet() const
{
    return m_SmtpHostIsSet;
}

void ConnectorSmtpConnectionDto::unsetSmtpHost()
{
    m_SmtpHostIsSet = false;
}
int32_t ConnectorSmtpConnectionDto::getSmtpPort() const
{
    return m_SmtpPort;
}

void ConnectorSmtpConnectionDto::setSmtpPort(int32_t value)
{
    m_SmtpPort = value;
    m_SmtpPortIsSet = true;
}

bool ConnectorSmtpConnectionDto::smtpPortIsSet() const
{
    return m_SmtpPortIsSet;
}

void ConnectorSmtpConnectionDto::unsetSmtpPort()
{
    m_SmtpPortIsSet = false;
}
utility::string_t ConnectorSmtpConnectionDto::getSmtpUsername() const
{
    return m_SmtpUsername;
}

void ConnectorSmtpConnectionDto::setSmtpUsername(const utility::string_t& value)
{
    m_SmtpUsername = value;
    m_SmtpUsernameIsSet = true;
}

bool ConnectorSmtpConnectionDto::smtpUsernameIsSet() const
{
    return m_SmtpUsernameIsSet;
}

void ConnectorSmtpConnectionDto::unsetSmtpUsername()
{
    m_SmtpUsernameIsSet = false;
}
utility::string_t ConnectorSmtpConnectionDto::getSmtpPassword() const
{
    return m_SmtpPassword;
}

void ConnectorSmtpConnectionDto::setSmtpPassword(const utility::string_t& value)
{
    m_SmtpPassword = value;
    m_SmtpPasswordIsSet = true;
}

bool ConnectorSmtpConnectionDto::smtpPasswordIsSet() const
{
    return m_SmtpPasswordIsSet;
}

void ConnectorSmtpConnectionDto::unsetSmtpPassword()
{
    m_SmtpPasswordIsSet = false;
}
bool ConnectorSmtpConnectionDto::isSmtpSsl() const
{
    return m_SmtpSsl;
}

void ConnectorSmtpConnectionDto::setSmtpSsl(bool value)
{
    m_SmtpSsl = value;
    m_SmtpSslIsSet = true;
}

bool ConnectorSmtpConnectionDto::smtpSslIsSet() const
{
    return m_SmtpSslIsSet;
}

void ConnectorSmtpConnectionDto::unsetSmtpSsl()
{
    m_SmtpSslIsSet = false;
}
bool ConnectorSmtpConnectionDto::isStartTls() const
{
    return m_StartTls;
}

void ConnectorSmtpConnectionDto::setStartTls(bool value)
{
    m_StartTls = value;
    m_StartTlsIsSet = true;
}

bool ConnectorSmtpConnectionDto::startTlsIsSet() const
{
    return m_StartTlsIsSet;
}

void ConnectorSmtpConnectionDto::unsetStartTls()
{
    m_StartTlsIsSet = false;
}
std::vector<utility::string_t>& ConnectorSmtpConnectionDto::getSmtpMechanisms()
{
    return m_SmtpMechanisms;
}

void ConnectorSmtpConnectionDto::setSmtpMechanisms(const std::vector<utility::string_t>& value)
{
    m_SmtpMechanisms = value;
    m_SmtpMechanismsIsSet = true;
}

bool ConnectorSmtpConnectionDto::smtpMechanismsIsSet() const
{
    return m_SmtpMechanismsIsSet;
}

void ConnectorSmtpConnectionDto::unsetSmtpMechanisms()
{
    m_SmtpMechanismsIsSet = false;
}
utility::string_t ConnectorSmtpConnectionDto::getLocalHostName() const
{
    return m_LocalHostName;
}

void ConnectorSmtpConnectionDto::setLocalHostName(const utility::string_t& value)
{
    m_LocalHostName = value;
    m_LocalHostNameIsSet = true;
}

bool ConnectorSmtpConnectionDto::localHostNameIsSet() const
{
    return m_LocalHostNameIsSet;
}

void ConnectorSmtpConnectionDto::unsetLocalHostName()
{
    m_LocalHostNameIsSet = false;
}
utility::string_t ConnectorSmtpConnectionDto::getProxyHost() const
{
    return m_ProxyHost;
}

void ConnectorSmtpConnectionDto::setProxyHost(const utility::string_t& value)
{
    m_ProxyHost = value;
    m_ProxyHostIsSet = true;
}

bool ConnectorSmtpConnectionDto::proxyHostIsSet() const
{
    return m_ProxyHostIsSet;
}

void ConnectorSmtpConnectionDto::unsetProxyHost()
{
    m_ProxyHostIsSet = false;
}
int32_t ConnectorSmtpConnectionDto::getProxyPort() const
{
    return m_ProxyPort;
}

void ConnectorSmtpConnectionDto::setProxyPort(int32_t value)
{
    m_ProxyPort = value;
    m_ProxyPortIsSet = true;
}

bool ConnectorSmtpConnectionDto::proxyPortIsSet() const
{
    return m_ProxyPortIsSet;
}

void ConnectorSmtpConnectionDto::unsetProxyPort()
{
    m_ProxyPortIsSet = false;
}
bool ConnectorSmtpConnectionDto::isProxyEnabled() const
{
    return m_ProxyEnabled;
}

void ConnectorSmtpConnectionDto::setProxyEnabled(bool value)
{
    m_ProxyEnabled = value;
    m_ProxyEnabledIsSet = true;
}

bool ConnectorSmtpConnectionDto::proxyEnabledIsSet() const
{
    return m_ProxyEnabledIsSet;
}

void ConnectorSmtpConnectionDto::unsetProxyEnabled()
{
    m_ProxyEnabledIsSet = false;
}
bool ConnectorSmtpConnectionDto::isEnabled() const
{
    return m_Enabled;
}

void ConnectorSmtpConnectionDto::setEnabled(bool value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}

bool ConnectorSmtpConnectionDto::enabledIsSet() const
{
    return m_EnabledIsSet;
}

void ConnectorSmtpConnectionDto::unsetEnabled()
{
    m_EnabledIsSet = false;
}
utility::string_t ConnectorSmtpConnectionDto::getSslTrust() const
{
    return m_SslTrust;
}

void ConnectorSmtpConnectionDto::setSslTrust(const utility::string_t& value)
{
    m_SslTrust = value;
    m_SslTrustIsSet = true;
}

bool ConnectorSmtpConnectionDto::sslTrustIsSet() const
{
    return m_SslTrustIsSet;
}

void ConnectorSmtpConnectionDto::unsetSslTrust()
{
    m_SslTrustIsSet = false;
}
std::vector<utility::string_t>& ConnectorSmtpConnectionDto::getSslProtocols()
{
    return m_SslProtocols;
}

void ConnectorSmtpConnectionDto::setSslProtocols(const std::vector<utility::string_t>& value)
{
    m_SslProtocols = value;
    m_SslProtocolsIsSet = true;
}

bool ConnectorSmtpConnectionDto::sslProtocolsIsSet() const
{
    return m_SslProtocolsIsSet;
}

void ConnectorSmtpConnectionDto::unsetSslProtocols()
{
    m_SslProtocolsIsSet = false;
}
utility::datetime ConnectorSmtpConnectionDto::getCreatedAt() const
{
    return m_CreatedAt;
}

void ConnectorSmtpConnectionDto::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool ConnectorSmtpConnectionDto::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void ConnectorSmtpConnectionDto::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::string_t ConnectorSmtpConnectionDto::getId() const
{
    return m_Id;
}

void ConnectorSmtpConnectionDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool ConnectorSmtpConnectionDto::idIsSet() const
{
    return m_IdIsSet;
}

void ConnectorSmtpConnectionDto::unsetId()
{
    m_IdIsSet = false;
}
}
}
}
}


