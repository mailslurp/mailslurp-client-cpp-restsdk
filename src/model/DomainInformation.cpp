/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/DomainInformation.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



DomainInformation::DomainInformation()
{
    m_DomainName = utility::conversions::to_string_t("");
    m_DomainNameIsSet = false;
    m_Verified = false;
    m_VerifiedIsSet = false;
    m_DomainType = utility::conversions::to_string_t("");
    m_DomainTypeIsSet = false;
}

DomainInformation::~DomainInformation()
{
}

void DomainInformation::validate()
{
    // TODO: implement validation
}

web::json::value DomainInformation::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DomainNameIsSet)
    {
        val[utility::conversions::to_string_t(U("domainName"))] = ModelBase::toJson(m_DomainName);
    }
    if(m_VerifiedIsSet)
    {
        val[utility::conversions::to_string_t(U("verified"))] = ModelBase::toJson(m_Verified);
    }
    if(m_DomainTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("domainType"))] = ModelBase::toJson(m_DomainType);
    }

    return val;
}

bool DomainInformation::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("domainName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("domainName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDomainName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDomainName);
            setDomainName(refVal_setDomainName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("verified"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("verified")));
        if(!fieldValue.is_null())
        {
            bool refVal_setVerified;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVerified);
            setVerified(refVal_setVerified);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("domainType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("domainType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDomainType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDomainType);
            setDomainType(refVal_setDomainType);
        }
    }
    return ok;
}

void DomainInformation::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_DomainNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("domainName")), m_DomainName));
    }
    if(m_VerifiedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("verified")), m_Verified));
    }
    if(m_DomainTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("domainType")), m_DomainType));
    }
}

bool DomainInformation::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("domainName"))))
    {
        utility::string_t refVal_setDomainName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("domainName"))), refVal_setDomainName );
        setDomainName(refVal_setDomainName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("verified"))))
    {
        bool refVal_setVerified;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("verified"))), refVal_setVerified );
        setVerified(refVal_setVerified);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("domainType"))))
    {
        utility::string_t refVal_setDomainType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("domainType"))), refVal_setDomainType );
        setDomainType(refVal_setDomainType);
    }
    return ok;
}

utility::string_t DomainInformation::getDomainName() const
{
    return m_DomainName;
}

void DomainInformation::setDomainName(const utility::string_t& value)
{
    m_DomainName = value;
    m_DomainNameIsSet = true;
}

bool DomainInformation::domainNameIsSet() const
{
    return m_DomainNameIsSet;
}

void DomainInformation::unsetDomainName()
{
    m_DomainNameIsSet = false;
}
bool DomainInformation::isVerified() const
{
    return m_Verified;
}

void DomainInformation::setVerified(bool value)
{
    m_Verified = value;
    m_VerifiedIsSet = true;
}

bool DomainInformation::verifiedIsSet() const
{
    return m_VerifiedIsSet;
}

void DomainInformation::unsetVerified()
{
    m_VerifiedIsSet = false;
}
utility::string_t DomainInformation::getDomainType() const
{
    return m_DomainType;
}

void DomainInformation::setDomainType(const utility::string_t& value)
{
    m_DomainType = value;
    m_DomainTypeIsSet = true;
}

bool DomainInformation::domainTypeIsSet() const
{
    return m_DomainTypeIsSet;
}

void DomainInformation::unsetDomainType()
{
    m_DomainTypeIsSet = false;
}
}
}
}
}


