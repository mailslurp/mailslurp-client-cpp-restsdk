/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ConnectorProviderSettingsDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



ConnectorProviderSettingsDto::ConnectorProviderSettingsDto()
{
    m_GoogleSettingsIsSet = false;
    m_MicrosoftSettingsIsSet = false;
}

ConnectorProviderSettingsDto::~ConnectorProviderSettingsDto()
{
}

void ConnectorProviderSettingsDto::validate()
{
    // TODO: implement validation
}

web::json::value ConnectorProviderSettingsDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_GoogleSettingsIsSet)
    {
        val[utility::conversions::to_string_t(U("googleSettings"))] = ModelBase::toJson(m_GoogleSettings);
    }
    if(m_MicrosoftSettingsIsSet)
    {
        val[utility::conversions::to_string_t(U("microsoftSettings"))] = ModelBase::toJson(m_MicrosoftSettings);
    }

    return val;
}

bool ConnectorProviderSettingsDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("googleSettings"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("googleSettings")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ProviderSettings> refVal_setGoogleSettings;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGoogleSettings);
            setGoogleSettings(refVal_setGoogleSettings);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("microsoftSettings"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("microsoftSettings")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ProviderSettings> refVal_setMicrosoftSettings;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMicrosoftSettings);
            setMicrosoftSettings(refVal_setMicrosoftSettings);
        }
    }
    return ok;
}

void ConnectorProviderSettingsDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_GoogleSettingsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("googleSettings")), m_GoogleSettings));
    }
    if(m_MicrosoftSettingsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("microsoftSettings")), m_MicrosoftSettings));
    }
}

bool ConnectorProviderSettingsDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("googleSettings"))))
    {
        std::shared_ptr<ProviderSettings> refVal_setGoogleSettings;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("googleSettings"))), refVal_setGoogleSettings );
        setGoogleSettings(refVal_setGoogleSettings);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("microsoftSettings"))))
    {
        std::shared_ptr<ProviderSettings> refVal_setMicrosoftSettings;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("microsoftSettings"))), refVal_setMicrosoftSettings );
        setMicrosoftSettings(refVal_setMicrosoftSettings);
    }
    return ok;
}

std::shared_ptr<ProviderSettings> ConnectorProviderSettingsDto::getGoogleSettings() const
{
    return m_GoogleSettings;
}

void ConnectorProviderSettingsDto::setGoogleSettings(const std::shared_ptr<ProviderSettings>& value)
{
    m_GoogleSettings = value;
    m_GoogleSettingsIsSet = true;
}

bool ConnectorProviderSettingsDto::googleSettingsIsSet() const
{
    return m_GoogleSettingsIsSet;
}

void ConnectorProviderSettingsDto::unsetGoogleSettings()
{
    m_GoogleSettingsIsSet = false;
}
std::shared_ptr<ProviderSettings> ConnectorProviderSettingsDto::getMicrosoftSettings() const
{
    return m_MicrosoftSettings;
}

void ConnectorProviderSettingsDto::setMicrosoftSettings(const std::shared_ptr<ProviderSettings>& value)
{
    m_MicrosoftSettings = value;
    m_MicrosoftSettingsIsSet = true;
}

bool ConnectorProviderSettingsDto::microsoftSettingsIsSet() const
{
    return m_MicrosoftSettingsIsSet;
}

void ConnectorProviderSettingsDto::unsetMicrosoftSettings()
{
    m_MicrosoftSettingsIsSet = false;
}
}
}
}
}


