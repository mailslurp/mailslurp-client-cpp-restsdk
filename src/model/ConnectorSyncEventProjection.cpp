/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ConnectorSyncEventProjection.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



ConnectorSyncEventProjection::ConnectorSyncEventProjection()
{
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_ConnectorId = utility::conversions::to_string_t("");
    m_ConnectorIdIsSet = false;
    m_SyncCount = 0L;
    m_SyncCountIsSet = false;
    m_SyncStatus = utility::conversions::to_string_t("");
    m_SyncStatusIsSet = false;
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
}

ConnectorSyncEventProjection::~ConnectorSyncEventProjection()
{
}

void ConnectorSyncEventProjection::validate()
{
    // TODO: implement validation
}

web::json::value ConnectorSyncEventProjection::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_ConnectorIdIsSet)
    {
        val[utility::conversions::to_string_t(U("connectorId"))] = ModelBase::toJson(m_ConnectorId);
    }
    if(m_SyncCountIsSet)
    {
        val[utility::conversions::to_string_t(U("syncCount"))] = ModelBase::toJson(m_SyncCount);
    }
    if(m_SyncStatusIsSet)
    {
        val[utility::conversions::to_string_t(U("syncStatus"))] = ModelBase::toJson(m_SyncStatus);
    }
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t(U("message"))] = ModelBase::toJson(m_Message);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }

    return val;
}

bool ConnectorSyncEventProjection::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("connectorId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("connectorId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setConnectorId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConnectorId);
            setConnectorId(refVal_setConnectorId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("syncCount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("syncCount")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setSyncCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSyncCount);
            setSyncCount(refVal_setSyncCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("syncStatus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("syncStatus")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSyncStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSyncStatus);
            setSyncStatus(refVal_setSyncStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("message"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("message")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessage);
            setMessage(refVal_setMessage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    return ok;
}

void ConnectorSyncEventProjection::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
    if(m_ConnectorIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("connectorId")), m_ConnectorId));
    }
    if(m_SyncCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("syncCount")), m_SyncCount));
    }
    if(m_SyncStatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("syncStatus")), m_SyncStatus));
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("message")), m_Message));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
}

bool ConnectorSyncEventProjection::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("connectorId"))))
    {
        utility::string_t refVal_setConnectorId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("connectorId"))), refVal_setConnectorId );
        setConnectorId(refVal_setConnectorId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("syncCount"))))
    {
        int64_t refVal_setSyncCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("syncCount"))), refVal_setSyncCount );
        setSyncCount(refVal_setSyncCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("syncStatus"))))
    {
        utility::string_t refVal_setSyncStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("syncStatus"))), refVal_setSyncStatus );
        setSyncStatus(refVal_setSyncStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("message"))))
    {
        utility::string_t refVal_setMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("message"))), refVal_setMessage );
        setMessage(refVal_setMessage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    return ok;
}

utility::datetime ConnectorSyncEventProjection::getCreatedAt() const
{
    return m_CreatedAt;
}

void ConnectorSyncEventProjection::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool ConnectorSyncEventProjection::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void ConnectorSyncEventProjection::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::string_t ConnectorSyncEventProjection::getConnectorId() const
{
    return m_ConnectorId;
}

void ConnectorSyncEventProjection::setConnectorId(const utility::string_t& value)
{
    m_ConnectorId = value;
    m_ConnectorIdIsSet = true;
}

bool ConnectorSyncEventProjection::connectorIdIsSet() const
{
    return m_ConnectorIdIsSet;
}

void ConnectorSyncEventProjection::unsetConnectorId()
{
    m_ConnectorIdIsSet = false;
}
int64_t ConnectorSyncEventProjection::getSyncCount() const
{
    return m_SyncCount;
}

void ConnectorSyncEventProjection::setSyncCount(int64_t value)
{
    m_SyncCount = value;
    m_SyncCountIsSet = true;
}

bool ConnectorSyncEventProjection::syncCountIsSet() const
{
    return m_SyncCountIsSet;
}

void ConnectorSyncEventProjection::unsetSyncCount()
{
    m_SyncCountIsSet = false;
}
utility::string_t ConnectorSyncEventProjection::getSyncStatus() const
{
    return m_SyncStatus;
}

void ConnectorSyncEventProjection::setSyncStatus(const utility::string_t& value)
{
    m_SyncStatus = value;
    m_SyncStatusIsSet = true;
}

bool ConnectorSyncEventProjection::syncStatusIsSet() const
{
    return m_SyncStatusIsSet;
}

void ConnectorSyncEventProjection::unsetSyncStatus()
{
    m_SyncStatusIsSet = false;
}
utility::string_t ConnectorSyncEventProjection::getMessage() const
{
    return m_Message;
}

void ConnectorSyncEventProjection::setMessage(const utility::string_t& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}

bool ConnectorSyncEventProjection::messageIsSet() const
{
    return m_MessageIsSet;
}

void ConnectorSyncEventProjection::unsetMessage()
{
    m_MessageIsSet = false;
}
utility::string_t ConnectorSyncEventProjection::getId() const
{
    return m_Id;
}

void ConnectorSyncEventProjection::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool ConnectorSyncEventProjection::idIsSet() const
{
    return m_IdIsSet;
}

void ConnectorSyncEventProjection::unsetId()
{
    m_IdIsSet = false;
}
}
}
}
}


