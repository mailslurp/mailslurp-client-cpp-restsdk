/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ConditionalStructuredContentResult.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



ConditionalStructuredContentResult::ConditionalStructuredContentResult()
{
    m_ResultIsSet = false;
    m_ConditionsMatch = false;
    m_ConditionsMatchIsSet = false;
}

ConditionalStructuredContentResult::~ConditionalStructuredContentResult()
{
}

void ConditionalStructuredContentResult::validate()
{
    // TODO: implement validation
}

web::json::value ConditionalStructuredContentResult::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ResultIsSet)
    {
        val[utility::conversions::to_string_t(U("result"))] = ModelBase::toJson(m_Result);
    }
    if(m_ConditionsMatchIsSet)
    {
        val[utility::conversions::to_string_t(U("conditionsMatch"))] = ModelBase::toJson(m_ConditionsMatch);
    }

    return val;
}

bool ConditionalStructuredContentResult::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("result"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("result")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setResult;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResult);
            setResult(refVal_setResult);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("conditionsMatch"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("conditionsMatch")));
        if(!fieldValue.is_null())
        {
            bool refVal_setConditionsMatch;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConditionsMatch);
            setConditionsMatch(refVal_setConditionsMatch);
        }
    }
    return ok;
}

void ConditionalStructuredContentResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ResultIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("result")), m_Result));
    }
    if(m_ConditionsMatchIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("conditionsMatch")), m_ConditionsMatch));
    }
}

bool ConditionalStructuredContentResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("result"))))
    {
        std::shared_ptr<Object> refVal_setResult;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("result"))), refVal_setResult );
        setResult(refVal_setResult);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("conditionsMatch"))))
    {
        bool refVal_setConditionsMatch;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("conditionsMatch"))), refVal_setConditionsMatch );
        setConditionsMatch(refVal_setConditionsMatch);
    }
    return ok;
}

std::shared_ptr<Object> ConditionalStructuredContentResult::getResult() const
{
    return m_Result;
}

void ConditionalStructuredContentResult::setResult(const std::shared_ptr<Object>& value)
{
    m_Result = value;
    m_ResultIsSet = true;
}

bool ConditionalStructuredContentResult::resultIsSet() const
{
    return m_ResultIsSet;
}

void ConditionalStructuredContentResult::unsetResult()
{
    m_ResultIsSet = false;
}
bool ConditionalStructuredContentResult::isConditionsMatch() const
{
    return m_ConditionsMatch;
}

void ConditionalStructuredContentResult::setConditionsMatch(bool value)
{
    m_ConditionsMatch = value;
    m_ConditionsMatchIsSet = true;
}

bool ConditionalStructuredContentResult::conditionsMatchIsSet() const
{
    return m_ConditionsMatchIsSet;
}

void ConditionalStructuredContentResult::unsetConditionsMatch()
{
    m_ConditionsMatchIsSet = false;
}
}
}
}
}


