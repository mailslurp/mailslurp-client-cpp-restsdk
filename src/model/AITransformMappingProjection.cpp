/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/AITransformMappingProjection.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



AITransformMappingProjection::AITransformMappingProjection()
{
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_AiTransformId = utility::conversions::to_string_t("");
    m_AiTransformIdIsSet = false;
    m_EntityId = utility::conversions::to_string_t("");
    m_EntityIdIsSet = false;
    m_EntityType = utility::conversions::to_string_t("");
    m_EntityTypeIsSet = false;
    m_ContentSelector = utility::conversions::to_string_t("");
    m_ContentSelectorIsSet = false;
    m_TriggerSelector = utility::conversions::to_string_t("");
    m_TriggerSelectorIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
}

AITransformMappingProjection::~AITransformMappingProjection()
{
}

void AITransformMappingProjection::validate()
{
    // TODO: implement validation
}

web::json::value AITransformMappingProjection::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t(U("userId"))] = ModelBase::toJson(m_UserId);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_AiTransformIdIsSet)
    {
        val[utility::conversions::to_string_t(U("aiTransformId"))] = ModelBase::toJson(m_AiTransformId);
    }
    if(m_EntityIdIsSet)
    {
        val[utility::conversions::to_string_t(U("entityId"))] = ModelBase::toJson(m_EntityId);
    }
    if(m_EntityTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("entityType"))] = ModelBase::toJson(m_EntityType);
    }
    if(m_ContentSelectorIsSet)
    {
        val[utility::conversions::to_string_t(U("contentSelector"))] = ModelBase::toJson(m_ContentSelector);
    }
    if(m_TriggerSelectorIsSet)
    {
        val[utility::conversions::to_string_t(U("triggerSelector"))] = ModelBase::toJson(m_TriggerSelector);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }

    return val;
}

bool AITransformMappingProjection::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("userId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("userId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserId);
            setUserId(refVal_setUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("aiTransformId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("aiTransformId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAiTransformId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAiTransformId);
            setAiTransformId(refVal_setAiTransformId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("entityId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entityId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEntityId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntityId);
            setEntityId(refVal_setEntityId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("entityType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entityType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEntityType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntityType);
            setEntityType(refVal_setEntityType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("contentSelector"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("contentSelector")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setContentSelector;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContentSelector);
            setContentSelector(refVal_setContentSelector);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("triggerSelector"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("triggerSelector")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTriggerSelector;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTriggerSelector);
            setTriggerSelector(refVal_setTriggerSelector);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    return ok;
}

void AITransformMappingProjection::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("userId")), m_UserId));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
    if(m_AiTransformIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("aiTransformId")), m_AiTransformId));
    }
    if(m_EntityIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entityId")), m_EntityId));
    }
    if(m_EntityTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entityType")), m_EntityType));
    }
    if(m_ContentSelectorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("contentSelector")), m_ContentSelector));
    }
    if(m_TriggerSelectorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("triggerSelector")), m_TriggerSelector));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
}

bool AITransformMappingProjection::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("userId"))))
    {
        utility::string_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("userId"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("aiTransformId"))))
    {
        utility::string_t refVal_setAiTransformId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("aiTransformId"))), refVal_setAiTransformId );
        setAiTransformId(refVal_setAiTransformId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("entityId"))))
    {
        utility::string_t refVal_setEntityId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entityId"))), refVal_setEntityId );
        setEntityId(refVal_setEntityId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("entityType"))))
    {
        utility::string_t refVal_setEntityType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entityType"))), refVal_setEntityType );
        setEntityType(refVal_setEntityType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("contentSelector"))))
    {
        utility::string_t refVal_setContentSelector;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("contentSelector"))), refVal_setContentSelector );
        setContentSelector(refVal_setContentSelector);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("triggerSelector"))))
    {
        utility::string_t refVal_setTriggerSelector;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("triggerSelector"))), refVal_setTriggerSelector );
        setTriggerSelector(refVal_setTriggerSelector);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    return ok;
}

utility::string_t AITransformMappingProjection::getUserId() const
{
    return m_UserId;
}

void AITransformMappingProjection::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool AITransformMappingProjection::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void AITransformMappingProjection::unsetUserId()
{
    m_UserIdIsSet = false;
}
utility::datetime AITransformMappingProjection::getCreatedAt() const
{
    return m_CreatedAt;
}

void AITransformMappingProjection::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool AITransformMappingProjection::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void AITransformMappingProjection::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::string_t AITransformMappingProjection::getAiTransformId() const
{
    return m_AiTransformId;
}

void AITransformMappingProjection::setAiTransformId(const utility::string_t& value)
{
    m_AiTransformId = value;
    m_AiTransformIdIsSet = true;
}

bool AITransformMappingProjection::aiTransformIdIsSet() const
{
    return m_AiTransformIdIsSet;
}

void AITransformMappingProjection::unsetAiTransformId()
{
    m_AiTransformIdIsSet = false;
}
utility::string_t AITransformMappingProjection::getEntityId() const
{
    return m_EntityId;
}

void AITransformMappingProjection::setEntityId(const utility::string_t& value)
{
    m_EntityId = value;
    m_EntityIdIsSet = true;
}

bool AITransformMappingProjection::entityIdIsSet() const
{
    return m_EntityIdIsSet;
}

void AITransformMappingProjection::unsetEntityId()
{
    m_EntityIdIsSet = false;
}
utility::string_t AITransformMappingProjection::getEntityType() const
{
    return m_EntityType;
}

void AITransformMappingProjection::setEntityType(const utility::string_t& value)
{
    m_EntityType = value;
    m_EntityTypeIsSet = true;
}

bool AITransformMappingProjection::entityTypeIsSet() const
{
    return m_EntityTypeIsSet;
}

void AITransformMappingProjection::unsetEntityType()
{
    m_EntityTypeIsSet = false;
}
utility::string_t AITransformMappingProjection::getContentSelector() const
{
    return m_ContentSelector;
}

void AITransformMappingProjection::setContentSelector(const utility::string_t& value)
{
    m_ContentSelector = value;
    m_ContentSelectorIsSet = true;
}

bool AITransformMappingProjection::contentSelectorIsSet() const
{
    return m_ContentSelectorIsSet;
}

void AITransformMappingProjection::unsetContentSelector()
{
    m_ContentSelectorIsSet = false;
}
utility::string_t AITransformMappingProjection::getTriggerSelector() const
{
    return m_TriggerSelector;
}

void AITransformMappingProjection::setTriggerSelector(const utility::string_t& value)
{
    m_TriggerSelector = value;
    m_TriggerSelectorIsSet = true;
}

bool AITransformMappingProjection::triggerSelectorIsSet() const
{
    return m_TriggerSelectorIsSet;
}

void AITransformMappingProjection::unsetTriggerSelector()
{
    m_TriggerSelectorIsSet = false;
}
utility::string_t AITransformMappingProjection::getName() const
{
    return m_Name;
}

void AITransformMappingProjection::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool AITransformMappingProjection::nameIsSet() const
{
    return m_NameIsSet;
}

void AITransformMappingProjection::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t AITransformMappingProjection::getId() const
{
    return m_Id;
}

void AITransformMappingProjection::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool AITransformMappingProjection::idIsSet() const
{
    return m_IdIsSet;
}

void AITransformMappingProjection::unsetId()
{
    m_IdIsSet = false;
}
}
}
}
}


