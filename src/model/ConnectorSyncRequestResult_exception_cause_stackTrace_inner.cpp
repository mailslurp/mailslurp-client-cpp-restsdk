/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ConnectorSyncRequestResult_exception_cause_stackTrace_inner.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



ConnectorSyncRequestResult_exception_cause_stackTrace_inner::ConnectorSyncRequestResult_exception_cause_stackTrace_inner()
{
    m_ClassLoaderName = utility::conversions::to_string_t("");
    m_ClassLoaderNameIsSet = false;
    m_ModuleName = utility::conversions::to_string_t("");
    m_ModuleNameIsSet = false;
    m_ModuleVersion = utility::conversions::to_string_t("");
    m_ModuleVersionIsSet = false;
    m_MethodName = utility::conversions::to_string_t("");
    m_MethodNameIsSet = false;
    m_FileName = utility::conversions::to_string_t("");
    m_FileNameIsSet = false;
    m_LineNumber = 0;
    m_LineNumberIsSet = false;
    m_NativeMethod = false;
    m_NativeMethodIsSet = false;
    m_ClassName = utility::conversions::to_string_t("");
    m_ClassNameIsSet = false;
}

ConnectorSyncRequestResult_exception_cause_stackTrace_inner::~ConnectorSyncRequestResult_exception_cause_stackTrace_inner()
{
}

void ConnectorSyncRequestResult_exception_cause_stackTrace_inner::validate()
{
    // TODO: implement validation
}

web::json::value ConnectorSyncRequestResult_exception_cause_stackTrace_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ClassLoaderNameIsSet)
    {
        val[utility::conversions::to_string_t(U("classLoaderName"))] = ModelBase::toJson(m_ClassLoaderName);
    }
    if(m_ModuleNameIsSet)
    {
        val[utility::conversions::to_string_t(U("moduleName"))] = ModelBase::toJson(m_ModuleName);
    }
    if(m_ModuleVersionIsSet)
    {
        val[utility::conversions::to_string_t(U("moduleVersion"))] = ModelBase::toJson(m_ModuleVersion);
    }
    if(m_MethodNameIsSet)
    {
        val[utility::conversions::to_string_t(U("methodName"))] = ModelBase::toJson(m_MethodName);
    }
    if(m_FileNameIsSet)
    {
        val[utility::conversions::to_string_t(U("fileName"))] = ModelBase::toJson(m_FileName);
    }
    if(m_LineNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("lineNumber"))] = ModelBase::toJson(m_LineNumber);
    }
    if(m_NativeMethodIsSet)
    {
        val[utility::conversions::to_string_t(U("nativeMethod"))] = ModelBase::toJson(m_NativeMethod);
    }
    if(m_ClassNameIsSet)
    {
        val[utility::conversions::to_string_t(U("className"))] = ModelBase::toJson(m_ClassName);
    }

    return val;
}

bool ConnectorSyncRequestResult_exception_cause_stackTrace_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("classLoaderName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("classLoaderName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClassLoaderName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClassLoaderName);
            setClassLoaderName(refVal_setClassLoaderName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("moduleName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("moduleName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setModuleName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModuleName);
            setModuleName(refVal_setModuleName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("moduleVersion"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("moduleVersion")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setModuleVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModuleVersion);
            setModuleVersion(refVal_setModuleVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("methodName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("methodName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMethodName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMethodName);
            setMethodName(refVal_setMethodName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fileName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fileName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFileName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFileName);
            setFileName(refVal_setFileName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lineNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lineNumber")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLineNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLineNumber);
            setLineNumber(refVal_setLineNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nativeMethod"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nativeMethod")));
        if(!fieldValue.is_null())
        {
            bool refVal_setNativeMethod;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNativeMethod);
            setNativeMethod(refVal_setNativeMethod);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("className"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("className")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClassName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClassName);
            setClassName(refVal_setClassName);
        }
    }
    return ok;
}

void ConnectorSyncRequestResult_exception_cause_stackTrace_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ClassLoaderNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("classLoaderName")), m_ClassLoaderName));
    }
    if(m_ModuleNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("moduleName")), m_ModuleName));
    }
    if(m_ModuleVersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("moduleVersion")), m_ModuleVersion));
    }
    if(m_MethodNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("methodName")), m_MethodName));
    }
    if(m_FileNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fileName")), m_FileName));
    }
    if(m_LineNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lineNumber")), m_LineNumber));
    }
    if(m_NativeMethodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nativeMethod")), m_NativeMethod));
    }
    if(m_ClassNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("className")), m_ClassName));
    }
}

bool ConnectorSyncRequestResult_exception_cause_stackTrace_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("classLoaderName"))))
    {
        utility::string_t refVal_setClassLoaderName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("classLoaderName"))), refVal_setClassLoaderName );
        setClassLoaderName(refVal_setClassLoaderName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("moduleName"))))
    {
        utility::string_t refVal_setModuleName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("moduleName"))), refVal_setModuleName );
        setModuleName(refVal_setModuleName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("moduleVersion"))))
    {
        utility::string_t refVal_setModuleVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("moduleVersion"))), refVal_setModuleVersion );
        setModuleVersion(refVal_setModuleVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("methodName"))))
    {
        utility::string_t refVal_setMethodName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("methodName"))), refVal_setMethodName );
        setMethodName(refVal_setMethodName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fileName"))))
    {
        utility::string_t refVal_setFileName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fileName"))), refVal_setFileName );
        setFileName(refVal_setFileName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lineNumber"))))
    {
        int32_t refVal_setLineNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lineNumber"))), refVal_setLineNumber );
        setLineNumber(refVal_setLineNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nativeMethod"))))
    {
        bool refVal_setNativeMethod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nativeMethod"))), refVal_setNativeMethod );
        setNativeMethod(refVal_setNativeMethod);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("className"))))
    {
        utility::string_t refVal_setClassName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("className"))), refVal_setClassName );
        setClassName(refVal_setClassName);
    }
    return ok;
}

utility::string_t ConnectorSyncRequestResult_exception_cause_stackTrace_inner::getClassLoaderName() const
{
    return m_ClassLoaderName;
}

void ConnectorSyncRequestResult_exception_cause_stackTrace_inner::setClassLoaderName(const utility::string_t& value)
{
    m_ClassLoaderName = value;
    m_ClassLoaderNameIsSet = true;
}

bool ConnectorSyncRequestResult_exception_cause_stackTrace_inner::classLoaderNameIsSet() const
{
    return m_ClassLoaderNameIsSet;
}

void ConnectorSyncRequestResult_exception_cause_stackTrace_inner::unsetClassLoaderName()
{
    m_ClassLoaderNameIsSet = false;
}
utility::string_t ConnectorSyncRequestResult_exception_cause_stackTrace_inner::getModuleName() const
{
    return m_ModuleName;
}

void ConnectorSyncRequestResult_exception_cause_stackTrace_inner::setModuleName(const utility::string_t& value)
{
    m_ModuleName = value;
    m_ModuleNameIsSet = true;
}

bool ConnectorSyncRequestResult_exception_cause_stackTrace_inner::moduleNameIsSet() const
{
    return m_ModuleNameIsSet;
}

void ConnectorSyncRequestResult_exception_cause_stackTrace_inner::unsetModuleName()
{
    m_ModuleNameIsSet = false;
}
utility::string_t ConnectorSyncRequestResult_exception_cause_stackTrace_inner::getModuleVersion() const
{
    return m_ModuleVersion;
}

void ConnectorSyncRequestResult_exception_cause_stackTrace_inner::setModuleVersion(const utility::string_t& value)
{
    m_ModuleVersion = value;
    m_ModuleVersionIsSet = true;
}

bool ConnectorSyncRequestResult_exception_cause_stackTrace_inner::moduleVersionIsSet() const
{
    return m_ModuleVersionIsSet;
}

void ConnectorSyncRequestResult_exception_cause_stackTrace_inner::unsetModuleVersion()
{
    m_ModuleVersionIsSet = false;
}
utility::string_t ConnectorSyncRequestResult_exception_cause_stackTrace_inner::getMethodName() const
{
    return m_MethodName;
}

void ConnectorSyncRequestResult_exception_cause_stackTrace_inner::setMethodName(const utility::string_t& value)
{
    m_MethodName = value;
    m_MethodNameIsSet = true;
}

bool ConnectorSyncRequestResult_exception_cause_stackTrace_inner::methodNameIsSet() const
{
    return m_MethodNameIsSet;
}

void ConnectorSyncRequestResult_exception_cause_stackTrace_inner::unsetMethodName()
{
    m_MethodNameIsSet = false;
}
utility::string_t ConnectorSyncRequestResult_exception_cause_stackTrace_inner::getFileName() const
{
    return m_FileName;
}

void ConnectorSyncRequestResult_exception_cause_stackTrace_inner::setFileName(const utility::string_t& value)
{
    m_FileName = value;
    m_FileNameIsSet = true;
}

bool ConnectorSyncRequestResult_exception_cause_stackTrace_inner::fileNameIsSet() const
{
    return m_FileNameIsSet;
}

void ConnectorSyncRequestResult_exception_cause_stackTrace_inner::unsetFileName()
{
    m_FileNameIsSet = false;
}
int32_t ConnectorSyncRequestResult_exception_cause_stackTrace_inner::getLineNumber() const
{
    return m_LineNumber;
}

void ConnectorSyncRequestResult_exception_cause_stackTrace_inner::setLineNumber(int32_t value)
{
    m_LineNumber = value;
    m_LineNumberIsSet = true;
}

bool ConnectorSyncRequestResult_exception_cause_stackTrace_inner::lineNumberIsSet() const
{
    return m_LineNumberIsSet;
}

void ConnectorSyncRequestResult_exception_cause_stackTrace_inner::unsetLineNumber()
{
    m_LineNumberIsSet = false;
}
bool ConnectorSyncRequestResult_exception_cause_stackTrace_inner::isNativeMethod() const
{
    return m_NativeMethod;
}

void ConnectorSyncRequestResult_exception_cause_stackTrace_inner::setNativeMethod(bool value)
{
    m_NativeMethod = value;
    m_NativeMethodIsSet = true;
}

bool ConnectorSyncRequestResult_exception_cause_stackTrace_inner::nativeMethodIsSet() const
{
    return m_NativeMethodIsSet;
}

void ConnectorSyncRequestResult_exception_cause_stackTrace_inner::unsetNativeMethod()
{
    m_NativeMethodIsSet = false;
}
utility::string_t ConnectorSyncRequestResult_exception_cause_stackTrace_inner::getClassName() const
{
    return m_ClassName;
}

void ConnectorSyncRequestResult_exception_cause_stackTrace_inner::setClassName(const utility::string_t& value)
{
    m_ClassName = value;
    m_ClassNameIsSet = true;
}

bool ConnectorSyncRequestResult_exception_cause_stackTrace_inner::classNameIsSet() const
{
    return m_ClassNameIsSet;
}

void ConnectorSyncRequestResult_exception_cause_stackTrace_inner::unsetClassName()
{
    m_ClassNameIsSet = false;
}
}
}
}
}


