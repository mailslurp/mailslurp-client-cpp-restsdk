/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/EntityEventItemProjection.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



EntityEventItemProjection::EntityEventItemProjection()
{
    m_EventType = utility::conversions::to_string_t("");
    m_EventTypeIsSet = false;
    m_InboxId = utility::conversions::to_string_t("");
    m_InboxIdIsSet = false;
    m_PhoneId = utility::conversions::to_string_t("");
    m_PhoneIdIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Severity = utility::conversions::to_string_t("");
    m_SeverityIsSet = false;
}

EntityEventItemProjection::~EntityEventItemProjection()
{
}

void EntityEventItemProjection::validate()
{
    // TODO: implement validation
}

web::json::value EntityEventItemProjection::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EventTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("eventType"))] = ModelBase::toJson(m_EventType);
    }
    if(m_InboxIdIsSet)
    {
        val[utility::conversions::to_string_t(U("inboxId"))] = ModelBase::toJson(m_InboxId);
    }
    if(m_PhoneIdIsSet)
    {
        val[utility::conversions::to_string_t(U("phoneId"))] = ModelBase::toJson(m_PhoneId);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_SeverityIsSet)
    {
        val[utility::conversions::to_string_t(U("severity"))] = ModelBase::toJson(m_Severity);
    }

    return val;
}

bool EntityEventItemProjection::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("eventType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("eventType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEventType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEventType);
            setEventType(refVal_setEventType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("inboxId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inboxId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInboxId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInboxId);
            setInboxId(refVal_setInboxId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("phoneId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("phoneId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPhoneId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPhoneId);
            setPhoneId(refVal_setPhoneId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("severity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("severity")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSeverity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSeverity);
            setSeverity(refVal_setSeverity);
        }
    }
    return ok;
}

void EntityEventItemProjection::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_EventTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("eventType")), m_EventType));
    }
    if(m_InboxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inboxId")), m_InboxId));
    }
    if(m_PhoneIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("phoneId")), m_PhoneId));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_SeverityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("severity")), m_Severity));
    }
}

bool EntityEventItemProjection::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("eventType"))))
    {
        utility::string_t refVal_setEventType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("eventType"))), refVal_setEventType );
        setEventType(refVal_setEventType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("inboxId"))))
    {
        utility::string_t refVal_setInboxId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inboxId"))), refVal_setInboxId );
        setInboxId(refVal_setInboxId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("phoneId"))))
    {
        utility::string_t refVal_setPhoneId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("phoneId"))), refVal_setPhoneId );
        setPhoneId(refVal_setPhoneId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("severity"))))
    {
        utility::string_t refVal_setSeverity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("severity"))), refVal_setSeverity );
        setSeverity(refVal_setSeverity);
    }
    return ok;
}

utility::string_t EntityEventItemProjection::getEventType() const
{
    return m_EventType;
}

void EntityEventItemProjection::setEventType(const utility::string_t& value)
{
    m_EventType = value;
    m_EventTypeIsSet = true;
}

bool EntityEventItemProjection::eventTypeIsSet() const
{
    return m_EventTypeIsSet;
}

void EntityEventItemProjection::unsetEventType()
{
    m_EventTypeIsSet = false;
}
utility::string_t EntityEventItemProjection::getInboxId() const
{
    return m_InboxId;
}

void EntityEventItemProjection::setInboxId(const utility::string_t& value)
{
    m_InboxId = value;
    m_InboxIdIsSet = true;
}

bool EntityEventItemProjection::inboxIdIsSet() const
{
    return m_InboxIdIsSet;
}

void EntityEventItemProjection::unsetInboxId()
{
    m_InboxIdIsSet = false;
}
utility::string_t EntityEventItemProjection::getPhoneId() const
{
    return m_PhoneId;
}

void EntityEventItemProjection::setPhoneId(const utility::string_t& value)
{
    m_PhoneId = value;
    m_PhoneIdIsSet = true;
}

bool EntityEventItemProjection::phoneIdIsSet() const
{
    return m_PhoneIdIsSet;
}

void EntityEventItemProjection::unsetPhoneId()
{
    m_PhoneIdIsSet = false;
}
utility::string_t EntityEventItemProjection::getId() const
{
    return m_Id;
}

void EntityEventItemProjection::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool EntityEventItemProjection::idIsSet() const
{
    return m_IdIsSet;
}

void EntityEventItemProjection::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t EntityEventItemProjection::getSeverity() const
{
    return m_Severity;
}

void EntityEventItemProjection::setSeverity(const utility::string_t& value)
{
    m_Severity = value;
    m_SeverityIsSet = true;
}

bool EntityEventItemProjection::severityIsSet() const
{
    return m_SeverityIsSet;
}

void EntityEventItemProjection::unsetSeverity()
{
    m_SeverityIsSet = false;
}
}
}
}
}


