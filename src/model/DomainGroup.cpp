/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/DomainGroup.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



DomainGroup::DomainGroup()
{
    m_Label = utility::conversions::to_string_t("");
    m_LabelIsSet = false;
    m_DomainsIsSet = false;
}

DomainGroup::~DomainGroup()
{
}

void DomainGroup::validate()
{
    // TODO: implement validation
}

web::json::value DomainGroup::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_LabelIsSet)
    {
        val[utility::conversions::to_string_t(U("label"))] = ModelBase::toJson(m_Label);
    }
    if(m_DomainsIsSet)
    {
        val[utility::conversions::to_string_t(U("domains"))] = ModelBase::toJson(m_Domains);
    }

    return val;
}

bool DomainGroup::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("label"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("label")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLabel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLabel);
            setLabel(refVal_setLabel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("domains"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("domains")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<DomainInformation>> refVal_setDomains;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDomains);
            setDomains(refVal_setDomains);
        }
    }
    return ok;
}

void DomainGroup::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_LabelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("label")), m_Label));
    }
    if(m_DomainsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("domains")), m_Domains));
    }
}

bool DomainGroup::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("label"))))
    {
        utility::string_t refVal_setLabel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("label"))), refVal_setLabel );
        setLabel(refVal_setLabel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("domains"))))
    {
        std::vector<std::shared_ptr<DomainInformation>> refVal_setDomains;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("domains"))), refVal_setDomains );
        setDomains(refVal_setDomains);
    }
    return ok;
}

utility::string_t DomainGroup::getLabel() const
{
    return m_Label;
}

void DomainGroup::setLabel(const utility::string_t& value)
{
    m_Label = value;
    m_LabelIsSet = true;
}

bool DomainGroup::labelIsSet() const
{
    return m_LabelIsSet;
}

void DomainGroup::unsetLabel()
{
    m_LabelIsSet = false;
}
std::vector<std::shared_ptr<DomainInformation>>& DomainGroup::getDomains()
{
    return m_Domains;
}

void DomainGroup::setDomains(const std::vector<std::shared_ptr<DomainInformation>>& value)
{
    m_Domains = value;
    m_DomainsIsSet = true;
}

bool DomainGroup::domainsIsSet() const
{
    return m_DomainsIsSet;
}

void DomainGroup::unsetDomains()
{
    m_DomainsIsSet = false;
}
}
}
}
}


