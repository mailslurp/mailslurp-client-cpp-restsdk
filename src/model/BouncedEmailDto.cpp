/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/BouncedEmailDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



BouncedEmailDto::BouncedEmailDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_NotificationType = utility::conversions::to_string_t("");
    m_NotificationTypeIsSet = false;
    m_SentToRecipientsIsSet = false;
    m_Sender = utility::conversions::to_string_t("");
    m_SenderIsSet = false;
    m_BounceMta = utility::conversions::to_string_t("");
    m_BounceMtaIsSet = false;
    m_BounceType = utility::conversions::to_string_t("");
    m_BounceTypeIsSet = false;
    m_BounceRecipientsIsSet = false;
    m_BounceSubType = utility::conversions::to_string_t("");
    m_BounceSubTypeIsSet = false;
    m_SentEmailId = utility::conversions::to_string_t("");
    m_SentEmailIdIsSet = false;
    m_Subject = utility::conversions::to_string_t("");
    m_SubjectIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
}

BouncedEmailDto::~BouncedEmailDto()
{
}

void BouncedEmailDto::validate()
{
    // TODO: implement validation
}

web::json::value BouncedEmailDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t(U("userId"))] = ModelBase::toJson(m_UserId);
    }
    if(m_NotificationTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("notificationType"))] = ModelBase::toJson(m_NotificationType);
    }
    if(m_SentToRecipientsIsSet)
    {
        val[utility::conversions::to_string_t(U("sentToRecipients"))] = ModelBase::toJson(m_SentToRecipients);
    }
    if(m_SenderIsSet)
    {
        val[utility::conversions::to_string_t(U("sender"))] = ModelBase::toJson(m_Sender);
    }
    if(m_BounceMtaIsSet)
    {
        val[utility::conversions::to_string_t(U("bounceMta"))] = ModelBase::toJson(m_BounceMta);
    }
    if(m_BounceTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("bounceType"))] = ModelBase::toJson(m_BounceType);
    }
    if(m_BounceRecipientsIsSet)
    {
        val[utility::conversions::to_string_t(U("bounceRecipients"))] = ModelBase::toJson(m_BounceRecipients);
    }
    if(m_BounceSubTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("bounceSubType"))] = ModelBase::toJson(m_BounceSubType);
    }
    if(m_SentEmailIdIsSet)
    {
        val[utility::conversions::to_string_t(U("sentEmailId"))] = ModelBase::toJson(m_SentEmailId);
    }
    if(m_SubjectIsSet)
    {
        val[utility::conversions::to_string_t(U("subject"))] = ModelBase::toJson(m_Subject);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }

    return val;
}

bool BouncedEmailDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("userId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("userId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserId);
            setUserId(refVal_setUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("notificationType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("notificationType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNotificationType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNotificationType);
            setNotificationType(refVal_setNotificationType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sentToRecipients"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sentToRecipients")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setSentToRecipients;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSentToRecipients);
            setSentToRecipients(refVal_setSentToRecipients);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sender"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sender")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSender;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSender);
            setSender(refVal_setSender);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bounceMta"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bounceMta")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBounceMta;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBounceMta);
            setBounceMta(refVal_setBounceMta);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bounceType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bounceType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBounceType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBounceType);
            setBounceType(refVal_setBounceType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bounceRecipients"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bounceRecipients")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setBounceRecipients;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBounceRecipients);
            setBounceRecipients(refVal_setBounceRecipients);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bounceSubType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bounceSubType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBounceSubType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBounceSubType);
            setBounceSubType(refVal_setBounceSubType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sentEmailId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sentEmailId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSentEmailId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSentEmailId);
            setSentEmailId(refVal_setSentEmailId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subject"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subject")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubject;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubject);
            setSubject(refVal_setSubject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    return ok;
}

void BouncedEmailDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("userId")), m_UserId));
    }
    if(m_NotificationTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("notificationType")), m_NotificationType));
    }
    if(m_SentToRecipientsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sentToRecipients")), m_SentToRecipients));
    }
    if(m_SenderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sender")), m_Sender));
    }
    if(m_BounceMtaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bounceMta")), m_BounceMta));
    }
    if(m_BounceTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bounceType")), m_BounceType));
    }
    if(m_BounceRecipientsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bounceRecipients")), m_BounceRecipients));
    }
    if(m_BounceSubTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bounceSubType")), m_BounceSubType));
    }
    if(m_SentEmailIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sentEmailId")), m_SentEmailId));
    }
    if(m_SubjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subject")), m_Subject));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
}

bool BouncedEmailDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("userId"))))
    {
        utility::string_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("userId"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("notificationType"))))
    {
        utility::string_t refVal_setNotificationType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("notificationType"))), refVal_setNotificationType );
        setNotificationType(refVal_setNotificationType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sentToRecipients"))))
    {
        std::vector<utility::string_t> refVal_setSentToRecipients;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sentToRecipients"))), refVal_setSentToRecipients );
        setSentToRecipients(refVal_setSentToRecipients);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sender"))))
    {
        utility::string_t refVal_setSender;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sender"))), refVal_setSender );
        setSender(refVal_setSender);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bounceMta"))))
    {
        utility::string_t refVal_setBounceMta;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bounceMta"))), refVal_setBounceMta );
        setBounceMta(refVal_setBounceMta);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bounceType"))))
    {
        utility::string_t refVal_setBounceType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bounceType"))), refVal_setBounceType );
        setBounceType(refVal_setBounceType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bounceRecipients"))))
    {
        std::vector<utility::string_t> refVal_setBounceRecipients;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bounceRecipients"))), refVal_setBounceRecipients );
        setBounceRecipients(refVal_setBounceRecipients);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bounceSubType"))))
    {
        utility::string_t refVal_setBounceSubType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bounceSubType"))), refVal_setBounceSubType );
        setBounceSubType(refVal_setBounceSubType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sentEmailId"))))
    {
        utility::string_t refVal_setSentEmailId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sentEmailId"))), refVal_setSentEmailId );
        setSentEmailId(refVal_setSentEmailId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subject"))))
    {
        utility::string_t refVal_setSubject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subject"))), refVal_setSubject );
        setSubject(refVal_setSubject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    return ok;
}

utility::string_t BouncedEmailDto::getId() const
{
    return m_Id;
}

void BouncedEmailDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool BouncedEmailDto::idIsSet() const
{
    return m_IdIsSet;
}

void BouncedEmailDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t BouncedEmailDto::getUserId() const
{
    return m_UserId;
}

void BouncedEmailDto::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool BouncedEmailDto::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void BouncedEmailDto::unsetUserId()
{
    m_UserIdIsSet = false;
}
utility::string_t BouncedEmailDto::getNotificationType() const
{
    return m_NotificationType;
}

void BouncedEmailDto::setNotificationType(const utility::string_t& value)
{
    m_NotificationType = value;
    m_NotificationTypeIsSet = true;
}

bool BouncedEmailDto::notificationTypeIsSet() const
{
    return m_NotificationTypeIsSet;
}

void BouncedEmailDto::unsetNotificationType()
{
    m_NotificationTypeIsSet = false;
}
std::vector<utility::string_t>& BouncedEmailDto::getSentToRecipients()
{
    return m_SentToRecipients;
}

void BouncedEmailDto::setSentToRecipients(const std::vector<utility::string_t>& value)
{
    m_SentToRecipients = value;
    m_SentToRecipientsIsSet = true;
}

bool BouncedEmailDto::sentToRecipientsIsSet() const
{
    return m_SentToRecipientsIsSet;
}

void BouncedEmailDto::unsetSentToRecipients()
{
    m_SentToRecipientsIsSet = false;
}
utility::string_t BouncedEmailDto::getSender() const
{
    return m_Sender;
}

void BouncedEmailDto::setSender(const utility::string_t& value)
{
    m_Sender = value;
    m_SenderIsSet = true;
}

bool BouncedEmailDto::senderIsSet() const
{
    return m_SenderIsSet;
}

void BouncedEmailDto::unsetSender()
{
    m_SenderIsSet = false;
}
utility::string_t BouncedEmailDto::getBounceMta() const
{
    return m_BounceMta;
}

void BouncedEmailDto::setBounceMta(const utility::string_t& value)
{
    m_BounceMta = value;
    m_BounceMtaIsSet = true;
}

bool BouncedEmailDto::bounceMtaIsSet() const
{
    return m_BounceMtaIsSet;
}

void BouncedEmailDto::unsetBounceMta()
{
    m_BounceMtaIsSet = false;
}
utility::string_t BouncedEmailDto::getBounceType() const
{
    return m_BounceType;
}

void BouncedEmailDto::setBounceType(const utility::string_t& value)
{
    m_BounceType = value;
    m_BounceTypeIsSet = true;
}

bool BouncedEmailDto::bounceTypeIsSet() const
{
    return m_BounceTypeIsSet;
}

void BouncedEmailDto::unsetBounceType()
{
    m_BounceTypeIsSet = false;
}
std::vector<utility::string_t>& BouncedEmailDto::getBounceRecipients()
{
    return m_BounceRecipients;
}

void BouncedEmailDto::setBounceRecipients(const std::vector<utility::string_t>& value)
{
    m_BounceRecipients = value;
    m_BounceRecipientsIsSet = true;
}

bool BouncedEmailDto::bounceRecipientsIsSet() const
{
    return m_BounceRecipientsIsSet;
}

void BouncedEmailDto::unsetBounceRecipients()
{
    m_BounceRecipientsIsSet = false;
}
utility::string_t BouncedEmailDto::getBounceSubType() const
{
    return m_BounceSubType;
}

void BouncedEmailDto::setBounceSubType(const utility::string_t& value)
{
    m_BounceSubType = value;
    m_BounceSubTypeIsSet = true;
}

bool BouncedEmailDto::bounceSubTypeIsSet() const
{
    return m_BounceSubTypeIsSet;
}

void BouncedEmailDto::unsetBounceSubType()
{
    m_BounceSubTypeIsSet = false;
}
utility::string_t BouncedEmailDto::getSentEmailId() const
{
    return m_SentEmailId;
}

void BouncedEmailDto::setSentEmailId(const utility::string_t& value)
{
    m_SentEmailId = value;
    m_SentEmailIdIsSet = true;
}

bool BouncedEmailDto::sentEmailIdIsSet() const
{
    return m_SentEmailIdIsSet;
}

void BouncedEmailDto::unsetSentEmailId()
{
    m_SentEmailIdIsSet = false;
}
utility::string_t BouncedEmailDto::getSubject() const
{
    return m_Subject;
}

void BouncedEmailDto::setSubject(const utility::string_t& value)
{
    m_Subject = value;
    m_SubjectIsSet = true;
}

bool BouncedEmailDto::subjectIsSet() const
{
    return m_SubjectIsSet;
}

void BouncedEmailDto::unsetSubject()
{
    m_SubjectIsSet = false;
}
utility::datetime BouncedEmailDto::getCreatedAt() const
{
    return m_CreatedAt;
}

void BouncedEmailDto::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool BouncedEmailDto::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void BouncedEmailDto::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
}
}
}
}


