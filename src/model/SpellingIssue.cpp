/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SpellingIssue.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



SpellingIssue::SpellingIssue()
{
    m_Group = utility::conversions::to_string_t("");
    m_GroupIsSet = false;
    m_Suggestion = utility::conversions::to_string_t("");
    m_SuggestionIsSet = false;
    m_Severity = utility::conversions::to_string_t("");
    m_SeverityIsSet = false;
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
}

SpellingIssue::~SpellingIssue()
{
}

void SpellingIssue::validate()
{
    // TODO: implement validation
}

web::json::value SpellingIssue::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_GroupIsSet)
    {
        val[utility::conversions::to_string_t(U("group"))] = ModelBase::toJson(m_Group);
    }
    if(m_SuggestionIsSet)
    {
        val[utility::conversions::to_string_t(U("suggestion"))] = ModelBase::toJson(m_Suggestion);
    }
    if(m_SeverityIsSet)
    {
        val[utility::conversions::to_string_t(U("severity"))] = ModelBase::toJson(m_Severity);
    }
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t(U("message"))] = ModelBase::toJson(m_Message);
    }

    return val;
}

bool SpellingIssue::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("group"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("group")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGroup;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGroup);
            setGroup(refVal_setGroup);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("suggestion"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("suggestion")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSuggestion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSuggestion);
            setSuggestion(refVal_setSuggestion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("severity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("severity")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSeverity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSeverity);
            setSeverity(refVal_setSeverity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("message"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("message")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessage);
            setMessage(refVal_setMessage);
        }
    }
    return ok;
}

void SpellingIssue::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_GroupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("group")), m_Group));
    }
    if(m_SuggestionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("suggestion")), m_Suggestion));
    }
    if(m_SeverityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("severity")), m_Severity));
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("message")), m_Message));
    }
}

bool SpellingIssue::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("group"))))
    {
        utility::string_t refVal_setGroup;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("group"))), refVal_setGroup );
        setGroup(refVal_setGroup);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("suggestion"))))
    {
        utility::string_t refVal_setSuggestion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("suggestion"))), refVal_setSuggestion );
        setSuggestion(refVal_setSuggestion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("severity"))))
    {
        utility::string_t refVal_setSeverity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("severity"))), refVal_setSeverity );
        setSeverity(refVal_setSeverity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("message"))))
    {
        utility::string_t refVal_setMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("message"))), refVal_setMessage );
        setMessage(refVal_setMessage);
    }
    return ok;
}

utility::string_t SpellingIssue::getGroup() const
{
    return m_Group;
}

void SpellingIssue::setGroup(const utility::string_t& value)
{
    m_Group = value;
    m_GroupIsSet = true;
}

bool SpellingIssue::groupIsSet() const
{
    return m_GroupIsSet;
}

void SpellingIssue::unsetGroup()
{
    m_GroupIsSet = false;
}
utility::string_t SpellingIssue::getSuggestion() const
{
    return m_Suggestion;
}

void SpellingIssue::setSuggestion(const utility::string_t& value)
{
    m_Suggestion = value;
    m_SuggestionIsSet = true;
}

bool SpellingIssue::suggestionIsSet() const
{
    return m_SuggestionIsSet;
}

void SpellingIssue::unsetSuggestion()
{
    m_SuggestionIsSet = false;
}
utility::string_t SpellingIssue::getSeverity() const
{
    return m_Severity;
}

void SpellingIssue::setSeverity(const utility::string_t& value)
{
    m_Severity = value;
    m_SeverityIsSet = true;
}

bool SpellingIssue::severityIsSet() const
{
    return m_SeverityIsSet;
}

void SpellingIssue::unsetSeverity()
{
    m_SeverityIsSet = false;
}
utility::string_t SpellingIssue::getMessage() const
{
    return m_Message;
}

void SpellingIssue::setMessage(const utility::string_t& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}

bool SpellingIssue::messageIsSet() const
{
    return m_MessageIsSet;
}

void SpellingIssue::unsetMessage()
{
    m_MessageIsSet = false;
}
}
}
}
}


