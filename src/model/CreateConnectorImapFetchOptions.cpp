/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateConnectorImapFetchOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



CreateConnectorImapFetchOptions::CreateConnectorImapFetchOptions()
{
    m_SelectFolder = utility::conversions::to_string_t("");
    m_SelectFolderIsSet = false;
    m_SearchTerms = utility::conversions::to_string_t("");
    m_SearchTermsIsSet = false;
}

CreateConnectorImapFetchOptions::~CreateConnectorImapFetchOptions()
{
}

void CreateConnectorImapFetchOptions::validate()
{
    // TODO: implement validation
}

web::json::value CreateConnectorImapFetchOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SelectFolderIsSet)
    {
        val[utility::conversions::to_string_t(U("selectFolder"))] = ModelBase::toJson(m_SelectFolder);
    }
    if(m_SearchTermsIsSet)
    {
        val[utility::conversions::to_string_t(U("searchTerms"))] = ModelBase::toJson(m_SearchTerms);
    }

    return val;
}

bool CreateConnectorImapFetchOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("selectFolder"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("selectFolder")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSelectFolder;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSelectFolder);
            setSelectFolder(refVal_setSelectFolder);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("searchTerms"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("searchTerms")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSearchTerms;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSearchTerms);
            setSearchTerms(refVal_setSearchTerms);
        }
    }
    return ok;
}

void CreateConnectorImapFetchOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SelectFolderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("selectFolder")), m_SelectFolder));
    }
    if(m_SearchTermsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("searchTerms")), m_SearchTerms));
    }
}

bool CreateConnectorImapFetchOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("selectFolder"))))
    {
        utility::string_t refVal_setSelectFolder;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("selectFolder"))), refVal_setSelectFolder );
        setSelectFolder(refVal_setSelectFolder);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("searchTerms"))))
    {
        utility::string_t refVal_setSearchTerms;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("searchTerms"))), refVal_setSearchTerms );
        setSearchTerms(refVal_setSearchTerms);
    }
    return ok;
}

utility::string_t CreateConnectorImapFetchOptions::getSelectFolder() const
{
    return m_SelectFolder;
}

void CreateConnectorImapFetchOptions::setSelectFolder(const utility::string_t& value)
{
    m_SelectFolder = value;
    m_SelectFolderIsSet = true;
}

bool CreateConnectorImapFetchOptions::selectFolderIsSet() const
{
    return m_SelectFolderIsSet;
}

void CreateConnectorImapFetchOptions::unsetSelectFolder()
{
    m_SelectFolderIsSet = false;
}
utility::string_t CreateConnectorImapFetchOptions::getSearchTerms() const
{
    return m_SearchTerms;
}

void CreateConnectorImapFetchOptions::setSearchTerms(const utility::string_t& value)
{
    m_SearchTerms = value;
    m_SearchTermsIsSet = true;
}

bool CreateConnectorImapFetchOptions::searchTermsIsSet() const
{
    return m_SearchTermsIsSet;
}

void CreateConnectorImapFetchOptions::unsetSearchTerms()
{
    m_SearchTermsIsSet = false;
}
}
}
}
}


