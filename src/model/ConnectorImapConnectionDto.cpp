/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ConnectorImapConnectionDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



ConnectorImapConnectionDto::ConnectorImapConnectionDto()
{
    m_ConnectorId = utility::conversions::to_string_t("");
    m_ConnectorIdIsSet = false;
    m_ImapHost = utility::conversions::to_string_t("");
    m_ImapHostIsSet = false;
    m_ImapPort = 0;
    m_ImapPortIsSet = false;
    m_ImapUsername = utility::conversions::to_string_t("");
    m_ImapUsernameIsSet = false;
    m_ImapPassword = utility::conversions::to_string_t("");
    m_ImapPasswordIsSet = false;
    m_ImapSsl = false;
    m_ImapSslIsSet = false;
    m_SelectFolder = utility::conversions::to_string_t("");
    m_SelectFolderIsSet = false;
    m_SearchTerms = utility::conversions::to_string_t("");
    m_SearchTermsIsSet = false;
    m_Enabled = false;
    m_EnabledIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
}

ConnectorImapConnectionDto::~ConnectorImapConnectionDto()
{
}

void ConnectorImapConnectionDto::validate()
{
    // TODO: implement validation
}

web::json::value ConnectorImapConnectionDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ConnectorIdIsSet)
    {
        val[utility::conversions::to_string_t(U("connectorId"))] = ModelBase::toJson(m_ConnectorId);
    }
    if(m_ImapHostIsSet)
    {
        val[utility::conversions::to_string_t(U("imapHost"))] = ModelBase::toJson(m_ImapHost);
    }
    if(m_ImapPortIsSet)
    {
        val[utility::conversions::to_string_t(U("imapPort"))] = ModelBase::toJson(m_ImapPort);
    }
    if(m_ImapUsernameIsSet)
    {
        val[utility::conversions::to_string_t(U("imapUsername"))] = ModelBase::toJson(m_ImapUsername);
    }
    if(m_ImapPasswordIsSet)
    {
        val[utility::conversions::to_string_t(U("imapPassword"))] = ModelBase::toJson(m_ImapPassword);
    }
    if(m_ImapSslIsSet)
    {
        val[utility::conversions::to_string_t(U("imapSsl"))] = ModelBase::toJson(m_ImapSsl);
    }
    if(m_SelectFolderIsSet)
    {
        val[utility::conversions::to_string_t(U("selectFolder"))] = ModelBase::toJson(m_SelectFolder);
    }
    if(m_SearchTermsIsSet)
    {
        val[utility::conversions::to_string_t(U("searchTerms"))] = ModelBase::toJson(m_SearchTerms);
    }
    if(m_EnabledIsSet)
    {
        val[utility::conversions::to_string_t(U("enabled"))] = ModelBase::toJson(m_Enabled);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }

    return val;
}

bool ConnectorImapConnectionDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("connectorId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("connectorId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setConnectorId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConnectorId);
            setConnectorId(refVal_setConnectorId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("imapHost"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imapHost")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setImapHost;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImapHost);
            setImapHost(refVal_setImapHost);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("imapPort"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imapPort")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setImapPort;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImapPort);
            setImapPort(refVal_setImapPort);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("imapUsername"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imapUsername")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setImapUsername;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImapUsername);
            setImapUsername(refVal_setImapUsername);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("imapPassword"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imapPassword")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setImapPassword;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImapPassword);
            setImapPassword(refVal_setImapPassword);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("imapSsl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imapSsl")));
        if(!fieldValue.is_null())
        {
            bool refVal_setImapSsl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImapSsl);
            setImapSsl(refVal_setImapSsl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("selectFolder"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("selectFolder")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSelectFolder;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSelectFolder);
            setSelectFolder(refVal_setSelectFolder);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("searchTerms"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("searchTerms")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSearchTerms;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSearchTerms);
            setSearchTerms(refVal_setSearchTerms);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("enabled"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("enabled")));
        if(!fieldValue.is_null())
        {
            bool refVal_setEnabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEnabled);
            setEnabled(refVal_setEnabled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    return ok;
}

void ConnectorImapConnectionDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ConnectorIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("connectorId")), m_ConnectorId));
    }
    if(m_ImapHostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imapHost")), m_ImapHost));
    }
    if(m_ImapPortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imapPort")), m_ImapPort));
    }
    if(m_ImapUsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imapUsername")), m_ImapUsername));
    }
    if(m_ImapPasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imapPassword")), m_ImapPassword));
    }
    if(m_ImapSslIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imapSsl")), m_ImapSsl));
    }
    if(m_SelectFolderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("selectFolder")), m_SelectFolder));
    }
    if(m_SearchTermsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("searchTerms")), m_SearchTerms));
    }
    if(m_EnabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("enabled")), m_Enabled));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
}

bool ConnectorImapConnectionDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("connectorId"))))
    {
        utility::string_t refVal_setConnectorId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("connectorId"))), refVal_setConnectorId );
        setConnectorId(refVal_setConnectorId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("imapHost"))))
    {
        utility::string_t refVal_setImapHost;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imapHost"))), refVal_setImapHost );
        setImapHost(refVal_setImapHost);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("imapPort"))))
    {
        int32_t refVal_setImapPort;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imapPort"))), refVal_setImapPort );
        setImapPort(refVal_setImapPort);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("imapUsername"))))
    {
        utility::string_t refVal_setImapUsername;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imapUsername"))), refVal_setImapUsername );
        setImapUsername(refVal_setImapUsername);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("imapPassword"))))
    {
        utility::string_t refVal_setImapPassword;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imapPassword"))), refVal_setImapPassword );
        setImapPassword(refVal_setImapPassword);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("imapSsl"))))
    {
        bool refVal_setImapSsl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imapSsl"))), refVal_setImapSsl );
        setImapSsl(refVal_setImapSsl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("selectFolder"))))
    {
        utility::string_t refVal_setSelectFolder;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("selectFolder"))), refVal_setSelectFolder );
        setSelectFolder(refVal_setSelectFolder);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("searchTerms"))))
    {
        utility::string_t refVal_setSearchTerms;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("searchTerms"))), refVal_setSearchTerms );
        setSearchTerms(refVal_setSearchTerms);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("enabled"))))
    {
        bool refVal_setEnabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("enabled"))), refVal_setEnabled );
        setEnabled(refVal_setEnabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    return ok;
}

utility::string_t ConnectorImapConnectionDto::getConnectorId() const
{
    return m_ConnectorId;
}

void ConnectorImapConnectionDto::setConnectorId(const utility::string_t& value)
{
    m_ConnectorId = value;
    m_ConnectorIdIsSet = true;
}

bool ConnectorImapConnectionDto::connectorIdIsSet() const
{
    return m_ConnectorIdIsSet;
}

void ConnectorImapConnectionDto::unsetConnectorId()
{
    m_ConnectorIdIsSet = false;
}
utility::string_t ConnectorImapConnectionDto::getImapHost() const
{
    return m_ImapHost;
}

void ConnectorImapConnectionDto::setImapHost(const utility::string_t& value)
{
    m_ImapHost = value;
    m_ImapHostIsSet = true;
}

bool ConnectorImapConnectionDto::imapHostIsSet() const
{
    return m_ImapHostIsSet;
}

void ConnectorImapConnectionDto::unsetImapHost()
{
    m_ImapHostIsSet = false;
}
int32_t ConnectorImapConnectionDto::getImapPort() const
{
    return m_ImapPort;
}

void ConnectorImapConnectionDto::setImapPort(int32_t value)
{
    m_ImapPort = value;
    m_ImapPortIsSet = true;
}

bool ConnectorImapConnectionDto::imapPortIsSet() const
{
    return m_ImapPortIsSet;
}

void ConnectorImapConnectionDto::unsetImapPort()
{
    m_ImapPortIsSet = false;
}
utility::string_t ConnectorImapConnectionDto::getImapUsername() const
{
    return m_ImapUsername;
}

void ConnectorImapConnectionDto::setImapUsername(const utility::string_t& value)
{
    m_ImapUsername = value;
    m_ImapUsernameIsSet = true;
}

bool ConnectorImapConnectionDto::imapUsernameIsSet() const
{
    return m_ImapUsernameIsSet;
}

void ConnectorImapConnectionDto::unsetImapUsername()
{
    m_ImapUsernameIsSet = false;
}
utility::string_t ConnectorImapConnectionDto::getImapPassword() const
{
    return m_ImapPassword;
}

void ConnectorImapConnectionDto::setImapPassword(const utility::string_t& value)
{
    m_ImapPassword = value;
    m_ImapPasswordIsSet = true;
}

bool ConnectorImapConnectionDto::imapPasswordIsSet() const
{
    return m_ImapPasswordIsSet;
}

void ConnectorImapConnectionDto::unsetImapPassword()
{
    m_ImapPasswordIsSet = false;
}
bool ConnectorImapConnectionDto::isImapSsl() const
{
    return m_ImapSsl;
}

void ConnectorImapConnectionDto::setImapSsl(bool value)
{
    m_ImapSsl = value;
    m_ImapSslIsSet = true;
}

bool ConnectorImapConnectionDto::imapSslIsSet() const
{
    return m_ImapSslIsSet;
}

void ConnectorImapConnectionDto::unsetImapSsl()
{
    m_ImapSslIsSet = false;
}
utility::string_t ConnectorImapConnectionDto::getSelectFolder() const
{
    return m_SelectFolder;
}

void ConnectorImapConnectionDto::setSelectFolder(const utility::string_t& value)
{
    m_SelectFolder = value;
    m_SelectFolderIsSet = true;
}

bool ConnectorImapConnectionDto::selectFolderIsSet() const
{
    return m_SelectFolderIsSet;
}

void ConnectorImapConnectionDto::unsetSelectFolder()
{
    m_SelectFolderIsSet = false;
}
utility::string_t ConnectorImapConnectionDto::getSearchTerms() const
{
    return m_SearchTerms;
}

void ConnectorImapConnectionDto::setSearchTerms(const utility::string_t& value)
{
    m_SearchTerms = value;
    m_SearchTermsIsSet = true;
}

bool ConnectorImapConnectionDto::searchTermsIsSet() const
{
    return m_SearchTermsIsSet;
}

void ConnectorImapConnectionDto::unsetSearchTerms()
{
    m_SearchTermsIsSet = false;
}
bool ConnectorImapConnectionDto::isEnabled() const
{
    return m_Enabled;
}

void ConnectorImapConnectionDto::setEnabled(bool value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}

bool ConnectorImapConnectionDto::enabledIsSet() const
{
    return m_EnabledIsSet;
}

void ConnectorImapConnectionDto::unsetEnabled()
{
    m_EnabledIsSet = false;
}
utility::datetime ConnectorImapConnectionDto::getCreatedAt() const
{
    return m_CreatedAt;
}

void ConnectorImapConnectionDto::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool ConnectorImapConnectionDto::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void ConnectorImapConnectionDto::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::string_t ConnectorImapConnectionDto::getId() const
{
    return m_Id;
}

void ConnectorImapConnectionDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool ConnectorImapConnectionDto::idIsSet() const
{
    return m_IdIsSet;
}

void ConnectorImapConnectionDto::unsetId()
{
    m_IdIsSet = false;
}
}
}
}
}


