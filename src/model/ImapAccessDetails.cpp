/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ImapAccessDetails.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



ImapAccessDetails::ImapAccessDetails()
{
    m_SecureImapServerHost = utility::conversions::to_string_t("");
    m_SecureImapServerHostIsSet = false;
    m_SecureImapServerPort = 0;
    m_SecureImapServerPortIsSet = false;
    m_SecureImapUsername = utility::conversions::to_string_t("");
    m_SecureImapUsernameIsSet = false;
    m_SecureImapPassword = utility::conversions::to_string_t("");
    m_SecureImapPasswordIsSet = false;
    m_ImapServerHost = utility::conversions::to_string_t("");
    m_ImapServerHostIsSet = false;
    m_ImapServerPort = 0;
    m_ImapServerPortIsSet = false;
    m_ImapUsername = utility::conversions::to_string_t("");
    m_ImapUsernameIsSet = false;
    m_ImapPassword = utility::conversions::to_string_t("");
    m_ImapPasswordIsSet = false;
    m_ImapMailbox = utility::conversions::to_string_t("");
    m_ImapMailboxIsSet = false;
}

ImapAccessDetails::~ImapAccessDetails()
{
}

void ImapAccessDetails::validate()
{
    // TODO: implement validation
}

web::json::value ImapAccessDetails::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SecureImapServerHostIsSet)
    {
        val[utility::conversions::to_string_t(U("secureImapServerHost"))] = ModelBase::toJson(m_SecureImapServerHost);
    }
    if(m_SecureImapServerPortIsSet)
    {
        val[utility::conversions::to_string_t(U("secureImapServerPort"))] = ModelBase::toJson(m_SecureImapServerPort);
    }
    if(m_SecureImapUsernameIsSet)
    {
        val[utility::conversions::to_string_t(U("secureImapUsername"))] = ModelBase::toJson(m_SecureImapUsername);
    }
    if(m_SecureImapPasswordIsSet)
    {
        val[utility::conversions::to_string_t(U("secureImapPassword"))] = ModelBase::toJson(m_SecureImapPassword);
    }
    if(m_ImapServerHostIsSet)
    {
        val[utility::conversions::to_string_t(U("imapServerHost"))] = ModelBase::toJson(m_ImapServerHost);
    }
    if(m_ImapServerPortIsSet)
    {
        val[utility::conversions::to_string_t(U("imapServerPort"))] = ModelBase::toJson(m_ImapServerPort);
    }
    if(m_ImapUsernameIsSet)
    {
        val[utility::conversions::to_string_t(U("imapUsername"))] = ModelBase::toJson(m_ImapUsername);
    }
    if(m_ImapPasswordIsSet)
    {
        val[utility::conversions::to_string_t(U("imapPassword"))] = ModelBase::toJson(m_ImapPassword);
    }
    if(m_ImapMailboxIsSet)
    {
        val[utility::conversions::to_string_t(U("imapMailbox"))] = ModelBase::toJson(m_ImapMailbox);
    }

    return val;
}

bool ImapAccessDetails::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("secureImapServerHost"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("secureImapServerHost")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSecureImapServerHost;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSecureImapServerHost);
            setSecureImapServerHost(refVal_setSecureImapServerHost);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("secureImapServerPort"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("secureImapServerPort")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSecureImapServerPort;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSecureImapServerPort);
            setSecureImapServerPort(refVal_setSecureImapServerPort);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("secureImapUsername"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("secureImapUsername")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSecureImapUsername;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSecureImapUsername);
            setSecureImapUsername(refVal_setSecureImapUsername);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("secureImapPassword"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("secureImapPassword")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSecureImapPassword;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSecureImapPassword);
            setSecureImapPassword(refVal_setSecureImapPassword);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("imapServerHost"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imapServerHost")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setImapServerHost;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImapServerHost);
            setImapServerHost(refVal_setImapServerHost);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("imapServerPort"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imapServerPort")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setImapServerPort;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImapServerPort);
            setImapServerPort(refVal_setImapServerPort);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("imapUsername"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imapUsername")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setImapUsername;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImapUsername);
            setImapUsername(refVal_setImapUsername);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("imapPassword"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imapPassword")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setImapPassword;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImapPassword);
            setImapPassword(refVal_setImapPassword);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("imapMailbox"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imapMailbox")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setImapMailbox;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImapMailbox);
            setImapMailbox(refVal_setImapMailbox);
        }
    }
    return ok;
}

void ImapAccessDetails::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SecureImapServerHostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("secureImapServerHost")), m_SecureImapServerHost));
    }
    if(m_SecureImapServerPortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("secureImapServerPort")), m_SecureImapServerPort));
    }
    if(m_SecureImapUsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("secureImapUsername")), m_SecureImapUsername));
    }
    if(m_SecureImapPasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("secureImapPassword")), m_SecureImapPassword));
    }
    if(m_ImapServerHostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imapServerHost")), m_ImapServerHost));
    }
    if(m_ImapServerPortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imapServerPort")), m_ImapServerPort));
    }
    if(m_ImapUsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imapUsername")), m_ImapUsername));
    }
    if(m_ImapPasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imapPassword")), m_ImapPassword));
    }
    if(m_ImapMailboxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imapMailbox")), m_ImapMailbox));
    }
}

bool ImapAccessDetails::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("secureImapServerHost"))))
    {
        utility::string_t refVal_setSecureImapServerHost;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("secureImapServerHost"))), refVal_setSecureImapServerHost );
        setSecureImapServerHost(refVal_setSecureImapServerHost);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("secureImapServerPort"))))
    {
        int32_t refVal_setSecureImapServerPort;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("secureImapServerPort"))), refVal_setSecureImapServerPort );
        setSecureImapServerPort(refVal_setSecureImapServerPort);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("secureImapUsername"))))
    {
        utility::string_t refVal_setSecureImapUsername;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("secureImapUsername"))), refVal_setSecureImapUsername );
        setSecureImapUsername(refVal_setSecureImapUsername);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("secureImapPassword"))))
    {
        utility::string_t refVal_setSecureImapPassword;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("secureImapPassword"))), refVal_setSecureImapPassword );
        setSecureImapPassword(refVal_setSecureImapPassword);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("imapServerHost"))))
    {
        utility::string_t refVal_setImapServerHost;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imapServerHost"))), refVal_setImapServerHost );
        setImapServerHost(refVal_setImapServerHost);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("imapServerPort"))))
    {
        int32_t refVal_setImapServerPort;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imapServerPort"))), refVal_setImapServerPort );
        setImapServerPort(refVal_setImapServerPort);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("imapUsername"))))
    {
        utility::string_t refVal_setImapUsername;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imapUsername"))), refVal_setImapUsername );
        setImapUsername(refVal_setImapUsername);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("imapPassword"))))
    {
        utility::string_t refVal_setImapPassword;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imapPassword"))), refVal_setImapPassword );
        setImapPassword(refVal_setImapPassword);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("imapMailbox"))))
    {
        utility::string_t refVal_setImapMailbox;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imapMailbox"))), refVal_setImapMailbox );
        setImapMailbox(refVal_setImapMailbox);
    }
    return ok;
}

utility::string_t ImapAccessDetails::getSecureImapServerHost() const
{
    return m_SecureImapServerHost;
}

void ImapAccessDetails::setSecureImapServerHost(const utility::string_t& value)
{
    m_SecureImapServerHost = value;
    m_SecureImapServerHostIsSet = true;
}

bool ImapAccessDetails::secureImapServerHostIsSet() const
{
    return m_SecureImapServerHostIsSet;
}

void ImapAccessDetails::unsetSecureImapServerHost()
{
    m_SecureImapServerHostIsSet = false;
}
int32_t ImapAccessDetails::getSecureImapServerPort() const
{
    return m_SecureImapServerPort;
}

void ImapAccessDetails::setSecureImapServerPort(int32_t value)
{
    m_SecureImapServerPort = value;
    m_SecureImapServerPortIsSet = true;
}

bool ImapAccessDetails::secureImapServerPortIsSet() const
{
    return m_SecureImapServerPortIsSet;
}

void ImapAccessDetails::unsetSecureImapServerPort()
{
    m_SecureImapServerPortIsSet = false;
}
utility::string_t ImapAccessDetails::getSecureImapUsername() const
{
    return m_SecureImapUsername;
}

void ImapAccessDetails::setSecureImapUsername(const utility::string_t& value)
{
    m_SecureImapUsername = value;
    m_SecureImapUsernameIsSet = true;
}

bool ImapAccessDetails::secureImapUsernameIsSet() const
{
    return m_SecureImapUsernameIsSet;
}

void ImapAccessDetails::unsetSecureImapUsername()
{
    m_SecureImapUsernameIsSet = false;
}
utility::string_t ImapAccessDetails::getSecureImapPassword() const
{
    return m_SecureImapPassword;
}

void ImapAccessDetails::setSecureImapPassword(const utility::string_t& value)
{
    m_SecureImapPassword = value;
    m_SecureImapPasswordIsSet = true;
}

bool ImapAccessDetails::secureImapPasswordIsSet() const
{
    return m_SecureImapPasswordIsSet;
}

void ImapAccessDetails::unsetSecureImapPassword()
{
    m_SecureImapPasswordIsSet = false;
}
utility::string_t ImapAccessDetails::getImapServerHost() const
{
    return m_ImapServerHost;
}

void ImapAccessDetails::setImapServerHost(const utility::string_t& value)
{
    m_ImapServerHost = value;
    m_ImapServerHostIsSet = true;
}

bool ImapAccessDetails::imapServerHostIsSet() const
{
    return m_ImapServerHostIsSet;
}

void ImapAccessDetails::unsetImapServerHost()
{
    m_ImapServerHostIsSet = false;
}
int32_t ImapAccessDetails::getImapServerPort() const
{
    return m_ImapServerPort;
}

void ImapAccessDetails::setImapServerPort(int32_t value)
{
    m_ImapServerPort = value;
    m_ImapServerPortIsSet = true;
}

bool ImapAccessDetails::imapServerPortIsSet() const
{
    return m_ImapServerPortIsSet;
}

void ImapAccessDetails::unsetImapServerPort()
{
    m_ImapServerPortIsSet = false;
}
utility::string_t ImapAccessDetails::getImapUsername() const
{
    return m_ImapUsername;
}

void ImapAccessDetails::setImapUsername(const utility::string_t& value)
{
    m_ImapUsername = value;
    m_ImapUsernameIsSet = true;
}

bool ImapAccessDetails::imapUsernameIsSet() const
{
    return m_ImapUsernameIsSet;
}

void ImapAccessDetails::unsetImapUsername()
{
    m_ImapUsernameIsSet = false;
}
utility::string_t ImapAccessDetails::getImapPassword() const
{
    return m_ImapPassword;
}

void ImapAccessDetails::setImapPassword(const utility::string_t& value)
{
    m_ImapPassword = value;
    m_ImapPasswordIsSet = true;
}

bool ImapAccessDetails::imapPasswordIsSet() const
{
    return m_ImapPasswordIsSet;
}

void ImapAccessDetails::unsetImapPassword()
{
    m_ImapPasswordIsSet = false;
}
utility::string_t ImapAccessDetails::getImapMailbox() const
{
    return m_ImapMailbox;
}

void ImapAccessDetails::setImapMailbox(const utility::string_t& value)
{
    m_ImapMailbox = value;
    m_ImapMailboxIsSet = true;
}

bool ImapAccessDetails::imapMailboxIsSet() const
{
    return m_ImapMailboxIsSet;
}

void ImapAccessDetails::unsetImapMailbox()
{
    m_ImapMailboxIsSet = false;
}
}
}
}
}


