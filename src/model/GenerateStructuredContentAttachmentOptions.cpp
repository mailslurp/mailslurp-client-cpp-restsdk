/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/GenerateStructuredContentAttachmentOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



GenerateStructuredContentAttachmentOptions::GenerateStructuredContentAttachmentOptions()
{
    m_AttachmentId = utility::conversions::to_string_t("");
    m_AttachmentIdIsSet = false;
    m_Instructions = utility::conversions::to_string_t("");
    m_InstructionsIsSet = false;
    m_OutputSchemaIsSet = false;
    m_TransformId = utility::conversions::to_string_t("");
    m_TransformIdIsSet = false;
    m_EmailId = utility::conversions::to_string_t("");
    m_EmailIdIsSet = false;
}

GenerateStructuredContentAttachmentOptions::~GenerateStructuredContentAttachmentOptions()
{
}

void GenerateStructuredContentAttachmentOptions::validate()
{
    // TODO: implement validation
}

web::json::value GenerateStructuredContentAttachmentOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AttachmentIdIsSet)
    {
        val[utility::conversions::to_string_t(U("attachmentId"))] = ModelBase::toJson(m_AttachmentId);
    }
    if(m_InstructionsIsSet)
    {
        val[utility::conversions::to_string_t(U("instructions"))] = ModelBase::toJson(m_Instructions);
    }
    if(m_OutputSchemaIsSet)
    {
        val[utility::conversions::to_string_t(U("outputSchema"))] = ModelBase::toJson(m_OutputSchema);
    }
    if(m_TransformIdIsSet)
    {
        val[utility::conversions::to_string_t(U("transformId"))] = ModelBase::toJson(m_TransformId);
    }
    if(m_EmailIdIsSet)
    {
        val[utility::conversions::to_string_t(U("emailId"))] = ModelBase::toJson(m_EmailId);
    }

    return val;
}

bool GenerateStructuredContentAttachmentOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("attachmentId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("attachmentId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAttachmentId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAttachmentId);
            setAttachmentId(refVal_setAttachmentId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("instructions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("instructions")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInstructions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInstructions);
            setInstructions(refVal_setInstructions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("outputSchema"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("outputSchema")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<StructuredOutputSchema> refVal_setOutputSchema;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOutputSchema);
            setOutputSchema(refVal_setOutputSchema);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("transformId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("transformId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTransformId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTransformId);
            setTransformId(refVal_setTransformId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("emailId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("emailId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEmailId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmailId);
            setEmailId(refVal_setEmailId);
        }
    }
    return ok;
}

void GenerateStructuredContentAttachmentOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AttachmentIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("attachmentId")), m_AttachmentId));
    }
    if(m_InstructionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("instructions")), m_Instructions));
    }
    if(m_OutputSchemaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("outputSchema")), m_OutputSchema));
    }
    if(m_TransformIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("transformId")), m_TransformId));
    }
    if(m_EmailIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("emailId")), m_EmailId));
    }
}

bool GenerateStructuredContentAttachmentOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("attachmentId"))))
    {
        utility::string_t refVal_setAttachmentId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("attachmentId"))), refVal_setAttachmentId );
        setAttachmentId(refVal_setAttachmentId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("instructions"))))
    {
        utility::string_t refVal_setInstructions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("instructions"))), refVal_setInstructions );
        setInstructions(refVal_setInstructions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("outputSchema"))))
    {
        std::shared_ptr<StructuredOutputSchema> refVal_setOutputSchema;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("outputSchema"))), refVal_setOutputSchema );
        setOutputSchema(refVal_setOutputSchema);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("transformId"))))
    {
        utility::string_t refVal_setTransformId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("transformId"))), refVal_setTransformId );
        setTransformId(refVal_setTransformId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("emailId"))))
    {
        utility::string_t refVal_setEmailId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("emailId"))), refVal_setEmailId );
        setEmailId(refVal_setEmailId);
    }
    return ok;
}

utility::string_t GenerateStructuredContentAttachmentOptions::getAttachmentId() const
{
    return m_AttachmentId;
}

void GenerateStructuredContentAttachmentOptions::setAttachmentId(const utility::string_t& value)
{
    m_AttachmentId = value;
    m_AttachmentIdIsSet = true;
}

bool GenerateStructuredContentAttachmentOptions::attachmentIdIsSet() const
{
    return m_AttachmentIdIsSet;
}

void GenerateStructuredContentAttachmentOptions::unsetAttachmentId()
{
    m_AttachmentIdIsSet = false;
}
utility::string_t GenerateStructuredContentAttachmentOptions::getInstructions() const
{
    return m_Instructions;
}

void GenerateStructuredContentAttachmentOptions::setInstructions(const utility::string_t& value)
{
    m_Instructions = value;
    m_InstructionsIsSet = true;
}

bool GenerateStructuredContentAttachmentOptions::instructionsIsSet() const
{
    return m_InstructionsIsSet;
}

void GenerateStructuredContentAttachmentOptions::unsetInstructions()
{
    m_InstructionsIsSet = false;
}
std::shared_ptr<StructuredOutputSchema> GenerateStructuredContentAttachmentOptions::getOutputSchema() const
{
    return m_OutputSchema;
}

void GenerateStructuredContentAttachmentOptions::setOutputSchema(const std::shared_ptr<StructuredOutputSchema>& value)
{
    m_OutputSchema = value;
    m_OutputSchemaIsSet = true;
}

bool GenerateStructuredContentAttachmentOptions::outputSchemaIsSet() const
{
    return m_OutputSchemaIsSet;
}

void GenerateStructuredContentAttachmentOptions::unsetOutputSchema()
{
    m_OutputSchemaIsSet = false;
}
utility::string_t GenerateStructuredContentAttachmentOptions::getTransformId() const
{
    return m_TransformId;
}

void GenerateStructuredContentAttachmentOptions::setTransformId(const utility::string_t& value)
{
    m_TransformId = value;
    m_TransformIdIsSet = true;
}

bool GenerateStructuredContentAttachmentOptions::transformIdIsSet() const
{
    return m_TransformIdIsSet;
}

void GenerateStructuredContentAttachmentOptions::unsetTransformId()
{
    m_TransformIdIsSet = false;
}
utility::string_t GenerateStructuredContentAttachmentOptions::getEmailId() const
{
    return m_EmailId;
}

void GenerateStructuredContentAttachmentOptions::setEmailId(const utility::string_t& value)
{
    m_EmailId = value;
    m_EmailIdIsSet = true;
}

bool GenerateStructuredContentAttachmentOptions::emailIdIsSet() const
{
    return m_EmailIdIsSet;
}

void GenerateStructuredContentAttachmentOptions::unsetEmailId()
{
    m_EmailIdIsSet = false;
}
}
}
}
}


