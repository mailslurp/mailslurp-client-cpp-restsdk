/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateConnectorSmtpConnectionOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



CreateConnectorSmtpConnectionOptions::CreateConnectorSmtpConnectionOptions()
{
    m_Enabled = false;
    m_EnabledIsSet = false;
    m_SmtpHost = utility::conversions::to_string_t("");
    m_SmtpHostIsSet = false;
    m_SmtpPort = 0;
    m_SmtpPortIsSet = false;
    m_SmtpSsl = false;
    m_SmtpSslIsSet = false;
    m_SmtpUsername = utility::conversions::to_string_t("");
    m_SmtpUsernameIsSet = false;
    m_SmtpPassword = utility::conversions::to_string_t("");
    m_SmtpPasswordIsSet = false;
    m_SmtpMechanismsIsSet = false;
    m_StartTls = false;
    m_StartTlsIsSet = false;
    m_LocalHostName = utility::conversions::to_string_t("");
    m_LocalHostNameIsSet = false;
    m_ProxyHost = utility::conversions::to_string_t("");
    m_ProxyHostIsSet = false;
    m_ProxyPort = 0;
    m_ProxyPortIsSet = false;
    m_ProxyEnabled = false;
    m_ProxyEnabledIsSet = false;
    m_SslTrust = utility::conversions::to_string_t("");
    m_SslTrustIsSet = false;
    m_SslProtocolsIsSet = false;
}

CreateConnectorSmtpConnectionOptions::~CreateConnectorSmtpConnectionOptions()
{
}

void CreateConnectorSmtpConnectionOptions::validate()
{
    // TODO: implement validation
}

web::json::value CreateConnectorSmtpConnectionOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_EnabledIsSet)
    {
        val[utility::conversions::to_string_t(U("enabled"))] = ModelBase::toJson(m_Enabled);
    }
    if(m_SmtpHostIsSet)
    {
        val[utility::conversions::to_string_t(U("smtpHost"))] = ModelBase::toJson(m_SmtpHost);
    }
    if(m_SmtpPortIsSet)
    {
        val[utility::conversions::to_string_t(U("smtpPort"))] = ModelBase::toJson(m_SmtpPort);
    }
    if(m_SmtpSslIsSet)
    {
        val[utility::conversions::to_string_t(U("smtpSsl"))] = ModelBase::toJson(m_SmtpSsl);
    }
    if(m_SmtpUsernameIsSet)
    {
        val[utility::conversions::to_string_t(U("smtpUsername"))] = ModelBase::toJson(m_SmtpUsername);
    }
    if(m_SmtpPasswordIsSet)
    {
        val[utility::conversions::to_string_t(U("smtpPassword"))] = ModelBase::toJson(m_SmtpPassword);
    }
    if(m_SmtpMechanismsIsSet)
    {
        val[utility::conversions::to_string_t(U("smtpMechanisms"))] = ModelBase::toJson(m_SmtpMechanisms);
    }
    if(m_StartTlsIsSet)
    {
        val[utility::conversions::to_string_t(U("startTls"))] = ModelBase::toJson(m_StartTls);
    }
    if(m_LocalHostNameIsSet)
    {
        val[utility::conversions::to_string_t(U("localHostName"))] = ModelBase::toJson(m_LocalHostName);
    }
    if(m_ProxyHostIsSet)
    {
        val[utility::conversions::to_string_t(U("proxyHost"))] = ModelBase::toJson(m_ProxyHost);
    }
    if(m_ProxyPortIsSet)
    {
        val[utility::conversions::to_string_t(U("proxyPort"))] = ModelBase::toJson(m_ProxyPort);
    }
    if(m_ProxyEnabledIsSet)
    {
        val[utility::conversions::to_string_t(U("proxyEnabled"))] = ModelBase::toJson(m_ProxyEnabled);
    }
    if(m_SslTrustIsSet)
    {
        val[utility::conversions::to_string_t(U("sslTrust"))] = ModelBase::toJson(m_SslTrust);
    }
    if(m_SslProtocolsIsSet)
    {
        val[utility::conversions::to_string_t(U("sslProtocols"))] = ModelBase::toJson(m_SslProtocols);
    }

    return val;
}

bool CreateConnectorSmtpConnectionOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("enabled"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("enabled")));
        if(!fieldValue.is_null())
        {
            bool refVal_setEnabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEnabled);
            setEnabled(refVal_setEnabled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("smtpHost"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("smtpHost")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSmtpHost;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSmtpHost);
            setSmtpHost(refVal_setSmtpHost);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("smtpPort"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("smtpPort")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSmtpPort;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSmtpPort);
            setSmtpPort(refVal_setSmtpPort);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("smtpSsl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("smtpSsl")));
        if(!fieldValue.is_null())
        {
            bool refVal_setSmtpSsl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSmtpSsl);
            setSmtpSsl(refVal_setSmtpSsl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("smtpUsername"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("smtpUsername")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSmtpUsername;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSmtpUsername);
            setSmtpUsername(refVal_setSmtpUsername);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("smtpPassword"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("smtpPassword")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSmtpPassword;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSmtpPassword);
            setSmtpPassword(refVal_setSmtpPassword);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("smtpMechanisms"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("smtpMechanisms")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setSmtpMechanisms;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSmtpMechanisms);
            setSmtpMechanisms(refVal_setSmtpMechanisms);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("startTls"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("startTls")));
        if(!fieldValue.is_null())
        {
            bool refVal_setStartTls;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStartTls);
            setStartTls(refVal_setStartTls);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("localHostName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("localHostName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLocalHostName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLocalHostName);
            setLocalHostName(refVal_setLocalHostName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("proxyHost"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("proxyHost")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProxyHost;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProxyHost);
            setProxyHost(refVal_setProxyHost);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("proxyPort"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("proxyPort")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setProxyPort;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProxyPort);
            setProxyPort(refVal_setProxyPort);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("proxyEnabled"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("proxyEnabled")));
        if(!fieldValue.is_null())
        {
            bool refVal_setProxyEnabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProxyEnabled);
            setProxyEnabled(refVal_setProxyEnabled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sslTrust"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sslTrust")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSslTrust;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSslTrust);
            setSslTrust(refVal_setSslTrust);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sslProtocols"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sslProtocols")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setSslProtocols;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSslProtocols);
            setSslProtocols(refVal_setSslProtocols);
        }
    }
    return ok;
}

void CreateConnectorSmtpConnectionOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_EnabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("enabled")), m_Enabled));
    }
    if(m_SmtpHostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("smtpHost")), m_SmtpHost));
    }
    if(m_SmtpPortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("smtpPort")), m_SmtpPort));
    }
    if(m_SmtpSslIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("smtpSsl")), m_SmtpSsl));
    }
    if(m_SmtpUsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("smtpUsername")), m_SmtpUsername));
    }
    if(m_SmtpPasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("smtpPassword")), m_SmtpPassword));
    }
    if(m_SmtpMechanismsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("smtpMechanisms")), m_SmtpMechanisms));
    }
    if(m_StartTlsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("startTls")), m_StartTls));
    }
    if(m_LocalHostNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("localHostName")), m_LocalHostName));
    }
    if(m_ProxyHostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("proxyHost")), m_ProxyHost));
    }
    if(m_ProxyPortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("proxyPort")), m_ProxyPort));
    }
    if(m_ProxyEnabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("proxyEnabled")), m_ProxyEnabled));
    }
    if(m_SslTrustIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sslTrust")), m_SslTrust));
    }
    if(m_SslProtocolsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sslProtocols")), m_SslProtocols));
    }
}

bool CreateConnectorSmtpConnectionOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("enabled"))))
    {
        bool refVal_setEnabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("enabled"))), refVal_setEnabled );
        setEnabled(refVal_setEnabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("smtpHost"))))
    {
        utility::string_t refVal_setSmtpHost;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("smtpHost"))), refVal_setSmtpHost );
        setSmtpHost(refVal_setSmtpHost);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("smtpPort"))))
    {
        int32_t refVal_setSmtpPort;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("smtpPort"))), refVal_setSmtpPort );
        setSmtpPort(refVal_setSmtpPort);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("smtpSsl"))))
    {
        bool refVal_setSmtpSsl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("smtpSsl"))), refVal_setSmtpSsl );
        setSmtpSsl(refVal_setSmtpSsl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("smtpUsername"))))
    {
        utility::string_t refVal_setSmtpUsername;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("smtpUsername"))), refVal_setSmtpUsername );
        setSmtpUsername(refVal_setSmtpUsername);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("smtpPassword"))))
    {
        utility::string_t refVal_setSmtpPassword;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("smtpPassword"))), refVal_setSmtpPassword );
        setSmtpPassword(refVal_setSmtpPassword);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("smtpMechanisms"))))
    {
        std::vector<utility::string_t> refVal_setSmtpMechanisms;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("smtpMechanisms"))), refVal_setSmtpMechanisms );
        setSmtpMechanisms(refVal_setSmtpMechanisms);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("startTls"))))
    {
        bool refVal_setStartTls;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("startTls"))), refVal_setStartTls );
        setStartTls(refVal_setStartTls);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("localHostName"))))
    {
        utility::string_t refVal_setLocalHostName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("localHostName"))), refVal_setLocalHostName );
        setLocalHostName(refVal_setLocalHostName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("proxyHost"))))
    {
        utility::string_t refVal_setProxyHost;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("proxyHost"))), refVal_setProxyHost );
        setProxyHost(refVal_setProxyHost);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("proxyPort"))))
    {
        int32_t refVal_setProxyPort;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("proxyPort"))), refVal_setProxyPort );
        setProxyPort(refVal_setProxyPort);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("proxyEnabled"))))
    {
        bool refVal_setProxyEnabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("proxyEnabled"))), refVal_setProxyEnabled );
        setProxyEnabled(refVal_setProxyEnabled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sslTrust"))))
    {
        utility::string_t refVal_setSslTrust;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sslTrust"))), refVal_setSslTrust );
        setSslTrust(refVal_setSslTrust);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sslProtocols"))))
    {
        std::vector<utility::string_t> refVal_setSslProtocols;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sslProtocols"))), refVal_setSslProtocols );
        setSslProtocols(refVal_setSslProtocols);
    }
    return ok;
}

bool CreateConnectorSmtpConnectionOptions::isEnabled() const
{
    return m_Enabled;
}

void CreateConnectorSmtpConnectionOptions::setEnabled(bool value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}

bool CreateConnectorSmtpConnectionOptions::enabledIsSet() const
{
    return m_EnabledIsSet;
}

void CreateConnectorSmtpConnectionOptions::unsetEnabled()
{
    m_EnabledIsSet = false;
}
utility::string_t CreateConnectorSmtpConnectionOptions::getSmtpHost() const
{
    return m_SmtpHost;
}

void CreateConnectorSmtpConnectionOptions::setSmtpHost(const utility::string_t& value)
{
    m_SmtpHost = value;
    m_SmtpHostIsSet = true;
}

bool CreateConnectorSmtpConnectionOptions::smtpHostIsSet() const
{
    return m_SmtpHostIsSet;
}

void CreateConnectorSmtpConnectionOptions::unsetSmtpHost()
{
    m_SmtpHostIsSet = false;
}
int32_t CreateConnectorSmtpConnectionOptions::getSmtpPort() const
{
    return m_SmtpPort;
}

void CreateConnectorSmtpConnectionOptions::setSmtpPort(int32_t value)
{
    m_SmtpPort = value;
    m_SmtpPortIsSet = true;
}

bool CreateConnectorSmtpConnectionOptions::smtpPortIsSet() const
{
    return m_SmtpPortIsSet;
}

void CreateConnectorSmtpConnectionOptions::unsetSmtpPort()
{
    m_SmtpPortIsSet = false;
}
bool CreateConnectorSmtpConnectionOptions::isSmtpSsl() const
{
    return m_SmtpSsl;
}

void CreateConnectorSmtpConnectionOptions::setSmtpSsl(bool value)
{
    m_SmtpSsl = value;
    m_SmtpSslIsSet = true;
}

bool CreateConnectorSmtpConnectionOptions::smtpSslIsSet() const
{
    return m_SmtpSslIsSet;
}

void CreateConnectorSmtpConnectionOptions::unsetSmtpSsl()
{
    m_SmtpSslIsSet = false;
}
utility::string_t CreateConnectorSmtpConnectionOptions::getSmtpUsername() const
{
    return m_SmtpUsername;
}

void CreateConnectorSmtpConnectionOptions::setSmtpUsername(const utility::string_t& value)
{
    m_SmtpUsername = value;
    m_SmtpUsernameIsSet = true;
}

bool CreateConnectorSmtpConnectionOptions::smtpUsernameIsSet() const
{
    return m_SmtpUsernameIsSet;
}

void CreateConnectorSmtpConnectionOptions::unsetSmtpUsername()
{
    m_SmtpUsernameIsSet = false;
}
utility::string_t CreateConnectorSmtpConnectionOptions::getSmtpPassword() const
{
    return m_SmtpPassword;
}

void CreateConnectorSmtpConnectionOptions::setSmtpPassword(const utility::string_t& value)
{
    m_SmtpPassword = value;
    m_SmtpPasswordIsSet = true;
}

bool CreateConnectorSmtpConnectionOptions::smtpPasswordIsSet() const
{
    return m_SmtpPasswordIsSet;
}

void CreateConnectorSmtpConnectionOptions::unsetSmtpPassword()
{
    m_SmtpPasswordIsSet = false;
}
std::vector<utility::string_t>& CreateConnectorSmtpConnectionOptions::getSmtpMechanisms()
{
    return m_SmtpMechanisms;
}

void CreateConnectorSmtpConnectionOptions::setSmtpMechanisms(const std::vector<utility::string_t>& value)
{
    m_SmtpMechanisms = value;
    m_SmtpMechanismsIsSet = true;
}

bool CreateConnectorSmtpConnectionOptions::smtpMechanismsIsSet() const
{
    return m_SmtpMechanismsIsSet;
}

void CreateConnectorSmtpConnectionOptions::unsetSmtpMechanisms()
{
    m_SmtpMechanismsIsSet = false;
}
bool CreateConnectorSmtpConnectionOptions::isStartTls() const
{
    return m_StartTls;
}

void CreateConnectorSmtpConnectionOptions::setStartTls(bool value)
{
    m_StartTls = value;
    m_StartTlsIsSet = true;
}

bool CreateConnectorSmtpConnectionOptions::startTlsIsSet() const
{
    return m_StartTlsIsSet;
}

void CreateConnectorSmtpConnectionOptions::unsetStartTls()
{
    m_StartTlsIsSet = false;
}
utility::string_t CreateConnectorSmtpConnectionOptions::getLocalHostName() const
{
    return m_LocalHostName;
}

void CreateConnectorSmtpConnectionOptions::setLocalHostName(const utility::string_t& value)
{
    m_LocalHostName = value;
    m_LocalHostNameIsSet = true;
}

bool CreateConnectorSmtpConnectionOptions::localHostNameIsSet() const
{
    return m_LocalHostNameIsSet;
}

void CreateConnectorSmtpConnectionOptions::unsetLocalHostName()
{
    m_LocalHostNameIsSet = false;
}
utility::string_t CreateConnectorSmtpConnectionOptions::getProxyHost() const
{
    return m_ProxyHost;
}

void CreateConnectorSmtpConnectionOptions::setProxyHost(const utility::string_t& value)
{
    m_ProxyHost = value;
    m_ProxyHostIsSet = true;
}

bool CreateConnectorSmtpConnectionOptions::proxyHostIsSet() const
{
    return m_ProxyHostIsSet;
}

void CreateConnectorSmtpConnectionOptions::unsetProxyHost()
{
    m_ProxyHostIsSet = false;
}
int32_t CreateConnectorSmtpConnectionOptions::getProxyPort() const
{
    return m_ProxyPort;
}

void CreateConnectorSmtpConnectionOptions::setProxyPort(int32_t value)
{
    m_ProxyPort = value;
    m_ProxyPortIsSet = true;
}

bool CreateConnectorSmtpConnectionOptions::proxyPortIsSet() const
{
    return m_ProxyPortIsSet;
}

void CreateConnectorSmtpConnectionOptions::unsetProxyPort()
{
    m_ProxyPortIsSet = false;
}
bool CreateConnectorSmtpConnectionOptions::isProxyEnabled() const
{
    return m_ProxyEnabled;
}

void CreateConnectorSmtpConnectionOptions::setProxyEnabled(bool value)
{
    m_ProxyEnabled = value;
    m_ProxyEnabledIsSet = true;
}

bool CreateConnectorSmtpConnectionOptions::proxyEnabledIsSet() const
{
    return m_ProxyEnabledIsSet;
}

void CreateConnectorSmtpConnectionOptions::unsetProxyEnabled()
{
    m_ProxyEnabledIsSet = false;
}
utility::string_t CreateConnectorSmtpConnectionOptions::getSslTrust() const
{
    return m_SslTrust;
}

void CreateConnectorSmtpConnectionOptions::setSslTrust(const utility::string_t& value)
{
    m_SslTrust = value;
    m_SslTrustIsSet = true;
}

bool CreateConnectorSmtpConnectionOptions::sslTrustIsSet() const
{
    return m_SslTrustIsSet;
}

void CreateConnectorSmtpConnectionOptions::unsetSslTrust()
{
    m_SslTrustIsSet = false;
}
std::vector<utility::string_t>& CreateConnectorSmtpConnectionOptions::getSslProtocols()
{
    return m_SslProtocols;
}

void CreateConnectorSmtpConnectionOptions::setSslProtocols(const std::vector<utility::string_t>& value)
{
    m_SslProtocols = value;
    m_SslProtocolsIsSet = true;
}

bool CreateConnectorSmtpConnectionOptions::sslProtocolsIsSet() const
{
    return m_SslProtocolsIsSet;
}

void CreateConnectorSmtpConnectionOptions::unsetSslProtocols()
{
    m_SslProtocolsIsSet = false;
}
}
}
}
}


