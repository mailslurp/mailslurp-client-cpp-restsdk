/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ConnectorImapConnectionTestResult.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



ConnectorImapConnectionTestResult::ConnectorImapConnectionTestResult()
{
    m_Error = utility::conversions::to_string_t("");
    m_ErrorIsSet = false;
    m_Success = false;
    m_SuccessIsSet = false;
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
    m_LogsIsSet = false;
}

ConnectorImapConnectionTestResult::~ConnectorImapConnectionTestResult()
{
}

void ConnectorImapConnectionTestResult::validate()
{
    // TODO: implement validation
}

web::json::value ConnectorImapConnectionTestResult::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ErrorIsSet)
    {
        val[utility::conversions::to_string_t(U("error"))] = ModelBase::toJson(m_Error);
    }
    if(m_SuccessIsSet)
    {
        val[utility::conversions::to_string_t(U("success"))] = ModelBase::toJson(m_Success);
    }
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t(U("message"))] = ModelBase::toJson(m_Message);
    }
    if(m_LogsIsSet)
    {
        val[utility::conversions::to_string_t(U("logs"))] = ModelBase::toJson(m_Logs);
    }

    return val;
}

bool ConnectorImapConnectionTestResult::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("error"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("error")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setError;
            ok &= ModelBase::fromJson(fieldValue, refVal_setError);
            setError(refVal_setError);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("success"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("success")));
        if(!fieldValue.is_null())
        {
            bool refVal_setSuccess;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSuccess);
            setSuccess(refVal_setSuccess);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("message"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("message")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessage);
            setMessage(refVal_setMessage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("logs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("logs")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setLogs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLogs);
            setLogs(refVal_setLogs);
        }
    }
    return ok;
}

void ConnectorImapConnectionTestResult::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ErrorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("error")), m_Error));
    }
    if(m_SuccessIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("success")), m_Success));
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("message")), m_Message));
    }
    if(m_LogsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("logs")), m_Logs));
    }
}

bool ConnectorImapConnectionTestResult::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("error"))))
    {
        utility::string_t refVal_setError;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("error"))), refVal_setError );
        setError(refVal_setError);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("success"))))
    {
        bool refVal_setSuccess;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("success"))), refVal_setSuccess );
        setSuccess(refVal_setSuccess);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("message"))))
    {
        utility::string_t refVal_setMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("message"))), refVal_setMessage );
        setMessage(refVal_setMessage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("logs"))))
    {
        std::vector<utility::string_t> refVal_setLogs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("logs"))), refVal_setLogs );
        setLogs(refVal_setLogs);
    }
    return ok;
}

utility::string_t ConnectorImapConnectionTestResult::getError() const
{
    return m_Error;
}

void ConnectorImapConnectionTestResult::setError(const utility::string_t& value)
{
    m_Error = value;
    m_ErrorIsSet = true;
}

bool ConnectorImapConnectionTestResult::errorIsSet() const
{
    return m_ErrorIsSet;
}

void ConnectorImapConnectionTestResult::unsetError()
{
    m_ErrorIsSet = false;
}
bool ConnectorImapConnectionTestResult::isSuccess() const
{
    return m_Success;
}

void ConnectorImapConnectionTestResult::setSuccess(bool value)
{
    m_Success = value;
    m_SuccessIsSet = true;
}

bool ConnectorImapConnectionTestResult::successIsSet() const
{
    return m_SuccessIsSet;
}

void ConnectorImapConnectionTestResult::unsetSuccess()
{
    m_SuccessIsSet = false;
}
utility::string_t ConnectorImapConnectionTestResult::getMessage() const
{
    return m_Message;
}

void ConnectorImapConnectionTestResult::setMessage(const utility::string_t& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}

bool ConnectorImapConnectionTestResult::messageIsSet() const
{
    return m_MessageIsSet;
}

void ConnectorImapConnectionTestResult::unsetMessage()
{
    m_MessageIsSet = false;
}
std::vector<utility::string_t>& ConnectorImapConnectionTestResult::getLogs()
{
    return m_Logs;
}

void ConnectorImapConnectionTestResult::setLogs(const std::vector<utility::string_t>& value)
{
    m_Logs = value;
    m_LogsIsSet = true;
}

bool ConnectorImapConnectionTestResult::logsIsSet() const
{
    return m_LogsIsSet;
}

void ConnectorImapConnectionTestResult::unsetLogs()
{
    m_LogsIsSet = false;
}
}
}
}
}


