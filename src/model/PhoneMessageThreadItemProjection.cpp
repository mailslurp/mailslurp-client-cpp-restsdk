/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PhoneMessageThreadItemProjection.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



PhoneMessageThreadItemProjection::PhoneMessageThreadItemProjection()
{
    m_Body = utility::conversions::to_string_t("");
    m_BodyIsSet = false;
    m_PhoneNumberId = utility::conversions::to_string_t("");
    m_PhoneNumberIdIsSet = false;
    m_Created = utility::datetime();
    m_CreatedIsSet = false;
    m_ToPhoneNumber = utility::conversions::to_string_t("");
    m_ToPhoneNumberIsSet = false;
    m_MessageDirection = utility::conversions::to_string_t("");
    m_MessageDirectionIsSet = false;
    m_FromPhoneNumber = utility::conversions::to_string_t("");
    m_FromPhoneNumberIsSet = false;
}

PhoneMessageThreadItemProjection::~PhoneMessageThreadItemProjection()
{
}

void PhoneMessageThreadItemProjection::validate()
{
    // TODO: implement validation
}

web::json::value PhoneMessageThreadItemProjection::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BodyIsSet)
    {
        val[utility::conversions::to_string_t(U("body"))] = ModelBase::toJson(m_Body);
    }
    if(m_PhoneNumberIdIsSet)
    {
        val[utility::conversions::to_string_t(U("phoneNumberId"))] = ModelBase::toJson(m_PhoneNumberId);
    }
    if(m_CreatedIsSet)
    {
        val[utility::conversions::to_string_t(U("created"))] = ModelBase::toJson(m_Created);
    }
    if(m_ToPhoneNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("toPhoneNumber"))] = ModelBase::toJson(m_ToPhoneNumber);
    }
    if(m_MessageDirectionIsSet)
    {
        val[utility::conversions::to_string_t(U("messageDirection"))] = ModelBase::toJson(m_MessageDirection);
    }
    if(m_FromPhoneNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("fromPhoneNumber"))] = ModelBase::toJson(m_FromPhoneNumber);
    }

    return val;
}

bool PhoneMessageThreadItemProjection::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("body"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("body")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBody;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBody);
            setBody(refVal_setBody);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("phoneNumberId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("phoneNumberId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPhoneNumberId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPhoneNumberId);
            setPhoneNumberId(refVal_setPhoneNumberId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("created"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("created")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreated;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreated);
            setCreated(refVal_setCreated);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("toPhoneNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("toPhoneNumber")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setToPhoneNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setToPhoneNumber);
            setToPhoneNumber(refVal_setToPhoneNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("messageDirection"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("messageDirection")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMessageDirection;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessageDirection);
            setMessageDirection(refVal_setMessageDirection);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fromPhoneNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fromPhoneNumber")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFromPhoneNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFromPhoneNumber);
            setFromPhoneNumber(refVal_setFromPhoneNumber);
        }
    }
    return ok;
}

void PhoneMessageThreadItemProjection::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_BodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("body")), m_Body));
    }
    if(m_PhoneNumberIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("phoneNumberId")), m_PhoneNumberId));
    }
    if(m_CreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("created")), m_Created));
    }
    if(m_ToPhoneNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("toPhoneNumber")), m_ToPhoneNumber));
    }
    if(m_MessageDirectionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("messageDirection")), m_MessageDirection));
    }
    if(m_FromPhoneNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fromPhoneNumber")), m_FromPhoneNumber));
    }
}

bool PhoneMessageThreadItemProjection::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("body"))))
    {
        utility::string_t refVal_setBody;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("body"))), refVal_setBody );
        setBody(refVal_setBody);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("phoneNumberId"))))
    {
        utility::string_t refVal_setPhoneNumberId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("phoneNumberId"))), refVal_setPhoneNumberId );
        setPhoneNumberId(refVal_setPhoneNumberId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("created"))))
    {
        utility::datetime refVal_setCreated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("created"))), refVal_setCreated );
        setCreated(refVal_setCreated);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("toPhoneNumber"))))
    {
        utility::string_t refVal_setToPhoneNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("toPhoneNumber"))), refVal_setToPhoneNumber );
        setToPhoneNumber(refVal_setToPhoneNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("messageDirection"))))
    {
        utility::string_t refVal_setMessageDirection;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("messageDirection"))), refVal_setMessageDirection );
        setMessageDirection(refVal_setMessageDirection);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fromPhoneNumber"))))
    {
        utility::string_t refVal_setFromPhoneNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fromPhoneNumber"))), refVal_setFromPhoneNumber );
        setFromPhoneNumber(refVal_setFromPhoneNumber);
    }
    return ok;
}

utility::string_t PhoneMessageThreadItemProjection::getBody() const
{
    return m_Body;
}

void PhoneMessageThreadItemProjection::setBody(const utility::string_t& value)
{
    m_Body = value;
    m_BodyIsSet = true;
}

bool PhoneMessageThreadItemProjection::bodyIsSet() const
{
    return m_BodyIsSet;
}

void PhoneMessageThreadItemProjection::unsetBody()
{
    m_BodyIsSet = false;
}
utility::string_t PhoneMessageThreadItemProjection::getPhoneNumberId() const
{
    return m_PhoneNumberId;
}

void PhoneMessageThreadItemProjection::setPhoneNumberId(const utility::string_t& value)
{
    m_PhoneNumberId = value;
    m_PhoneNumberIdIsSet = true;
}

bool PhoneMessageThreadItemProjection::phoneNumberIdIsSet() const
{
    return m_PhoneNumberIdIsSet;
}

void PhoneMessageThreadItemProjection::unsetPhoneNumberId()
{
    m_PhoneNumberIdIsSet = false;
}
utility::datetime PhoneMessageThreadItemProjection::getCreated() const
{
    return m_Created;
}

void PhoneMessageThreadItemProjection::setCreated(const utility::datetime& value)
{
    m_Created = value;
    m_CreatedIsSet = true;
}

bool PhoneMessageThreadItemProjection::createdIsSet() const
{
    return m_CreatedIsSet;
}

void PhoneMessageThreadItemProjection::unsetCreated()
{
    m_CreatedIsSet = false;
}
utility::string_t PhoneMessageThreadItemProjection::getToPhoneNumber() const
{
    return m_ToPhoneNumber;
}

void PhoneMessageThreadItemProjection::setToPhoneNumber(const utility::string_t& value)
{
    m_ToPhoneNumber = value;
    m_ToPhoneNumberIsSet = true;
}

bool PhoneMessageThreadItemProjection::toPhoneNumberIsSet() const
{
    return m_ToPhoneNumberIsSet;
}

void PhoneMessageThreadItemProjection::unsetToPhoneNumber()
{
    m_ToPhoneNumberIsSet = false;
}
utility::string_t PhoneMessageThreadItemProjection::getMessageDirection() const
{
    return m_MessageDirection;
}

void PhoneMessageThreadItemProjection::setMessageDirection(const utility::string_t& value)
{
    m_MessageDirection = value;
    m_MessageDirectionIsSet = true;
}

bool PhoneMessageThreadItemProjection::messageDirectionIsSet() const
{
    return m_MessageDirectionIsSet;
}

void PhoneMessageThreadItemProjection::unsetMessageDirection()
{
    m_MessageDirectionIsSet = false;
}
utility::string_t PhoneMessageThreadItemProjection::getFromPhoneNumber() const
{
    return m_FromPhoneNumber;
}

void PhoneMessageThreadItemProjection::setFromPhoneNumber(const utility::string_t& value)
{
    m_FromPhoneNumber = value;
    m_FromPhoneNumberIsSet = true;
}

bool PhoneMessageThreadItemProjection::fromPhoneNumberIsSet() const
{
    return m_FromPhoneNumberIsSet;
}

void PhoneMessageThreadItemProjection::unsetFromPhoneNumber()
{
    m_FromPhoneNumberIsSet = false;
}
}
}
}
}


