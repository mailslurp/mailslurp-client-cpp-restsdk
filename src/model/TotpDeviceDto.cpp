/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/TotpDeviceDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



TotpDeviceDto::TotpDeviceDto()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Username = utility::conversions::to_string_t("");
    m_UsernameIsSet = false;
    m_Issuer = utility::conversions::to_string_t("");
    m_IssuerIsSet = false;
    m_Digits = 0;
    m_DigitsIsSet = false;
    m_Period = 0;
    m_PeriodIsSet = false;
    m_Algorithm = utility::conversions::to_string_t("");
    m_AlgorithmIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_UpdatedAt = utility::datetime();
    m_UpdatedAtIsSet = false;
}

TotpDeviceDto::~TotpDeviceDto()
{
}

void TotpDeviceDto::validate()
{
    // TODO: implement validation
}

web::json::value TotpDeviceDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_UsernameIsSet)
    {
        val[utility::conversions::to_string_t(U("username"))] = ModelBase::toJson(m_Username);
    }
    if(m_IssuerIsSet)
    {
        val[utility::conversions::to_string_t(U("issuer"))] = ModelBase::toJson(m_Issuer);
    }
    if(m_DigitsIsSet)
    {
        val[utility::conversions::to_string_t(U("digits"))] = ModelBase::toJson(m_Digits);
    }
    if(m_PeriodIsSet)
    {
        val[utility::conversions::to_string_t(U("period"))] = ModelBase::toJson(m_Period);
    }
    if(m_AlgorithmIsSet)
    {
        val[utility::conversions::to_string_t(U("algorithm"))] = ModelBase::toJson(m_Algorithm);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_UpdatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("updatedAt"))] = ModelBase::toJson(m_UpdatedAt);
    }

    return val;
}

bool TotpDeviceDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("username"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("username")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUsername;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUsername);
            setUsername(refVal_setUsername);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("issuer"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("issuer")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setIssuer;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIssuer);
            setIssuer(refVal_setIssuer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("digits"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("digits")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDigits;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDigits);
            setDigits(refVal_setDigits);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("period"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("period")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPeriod;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPeriod);
            setPeriod(refVal_setPeriod);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("algorithm"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("algorithm")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAlgorithm;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAlgorithm);
            setAlgorithm(refVal_setAlgorithm);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updatedAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updatedAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setUpdatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedAt);
            setUpdatedAt(refVal_setUpdatedAt);
        }
    }
    return ok;
}

void TotpDeviceDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_UsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("username")), m_Username));
    }
    if(m_IssuerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("issuer")), m_Issuer));
    }
    if(m_DigitsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("digits")), m_Digits));
    }
    if(m_PeriodIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("period")), m_Period));
    }
    if(m_AlgorithmIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("algorithm")), m_Algorithm));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updatedAt")), m_UpdatedAt));
    }
}

bool TotpDeviceDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("username"))))
    {
        utility::string_t refVal_setUsername;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("username"))), refVal_setUsername );
        setUsername(refVal_setUsername);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("issuer"))))
    {
        utility::string_t refVal_setIssuer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("issuer"))), refVal_setIssuer );
        setIssuer(refVal_setIssuer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("digits"))))
    {
        int32_t refVal_setDigits;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("digits"))), refVal_setDigits );
        setDigits(refVal_setDigits);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("period"))))
    {
        int32_t refVal_setPeriod;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("period"))), refVal_setPeriod );
        setPeriod(refVal_setPeriod);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("algorithm"))))
    {
        utility::string_t refVal_setAlgorithm;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("algorithm"))), refVal_setAlgorithm );
        setAlgorithm(refVal_setAlgorithm);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updatedAt"))))
    {
        utility::datetime refVal_setUpdatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updatedAt"))), refVal_setUpdatedAt );
        setUpdatedAt(refVal_setUpdatedAt);
    }
    return ok;
}

utility::string_t TotpDeviceDto::getId() const
{
    return m_Id;
}

void TotpDeviceDto::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool TotpDeviceDto::idIsSet() const
{
    return m_IdIsSet;
}

void TotpDeviceDto::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t TotpDeviceDto::getName() const
{
    return m_Name;
}

void TotpDeviceDto::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool TotpDeviceDto::nameIsSet() const
{
    return m_NameIsSet;
}

void TotpDeviceDto::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t TotpDeviceDto::getUsername() const
{
    return m_Username;
}

void TotpDeviceDto::setUsername(const utility::string_t& value)
{
    m_Username = value;
    m_UsernameIsSet = true;
}

bool TotpDeviceDto::usernameIsSet() const
{
    return m_UsernameIsSet;
}

void TotpDeviceDto::unsetUsername()
{
    m_UsernameIsSet = false;
}
utility::string_t TotpDeviceDto::getIssuer() const
{
    return m_Issuer;
}

void TotpDeviceDto::setIssuer(const utility::string_t& value)
{
    m_Issuer = value;
    m_IssuerIsSet = true;
}

bool TotpDeviceDto::issuerIsSet() const
{
    return m_IssuerIsSet;
}

void TotpDeviceDto::unsetIssuer()
{
    m_IssuerIsSet = false;
}
int32_t TotpDeviceDto::getDigits() const
{
    return m_Digits;
}

void TotpDeviceDto::setDigits(int32_t value)
{
    m_Digits = value;
    m_DigitsIsSet = true;
}

bool TotpDeviceDto::digitsIsSet() const
{
    return m_DigitsIsSet;
}

void TotpDeviceDto::unsetDigits()
{
    m_DigitsIsSet = false;
}
int32_t TotpDeviceDto::getPeriod() const
{
    return m_Period;
}

void TotpDeviceDto::setPeriod(int32_t value)
{
    m_Period = value;
    m_PeriodIsSet = true;
}

bool TotpDeviceDto::periodIsSet() const
{
    return m_PeriodIsSet;
}

void TotpDeviceDto::unsetPeriod()
{
    m_PeriodIsSet = false;
}
utility::string_t TotpDeviceDto::getAlgorithm() const
{
    return m_Algorithm;
}

void TotpDeviceDto::setAlgorithm(const utility::string_t& value)
{
    m_Algorithm = value;
    m_AlgorithmIsSet = true;
}

bool TotpDeviceDto::algorithmIsSet() const
{
    return m_AlgorithmIsSet;
}

void TotpDeviceDto::unsetAlgorithm()
{
    m_AlgorithmIsSet = false;
}
utility::datetime TotpDeviceDto::getCreatedAt() const
{
    return m_CreatedAt;
}

void TotpDeviceDto::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool TotpDeviceDto::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void TotpDeviceDto::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::datetime TotpDeviceDto::getUpdatedAt() const
{
    return m_UpdatedAt;
}

void TotpDeviceDto::setUpdatedAt(const utility::datetime& value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}

bool TotpDeviceDto::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void TotpDeviceDto::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
}
}
}
}


