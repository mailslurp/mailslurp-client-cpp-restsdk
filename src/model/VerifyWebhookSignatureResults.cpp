/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/VerifyWebhookSignatureResults.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



VerifyWebhookSignatureResults::VerifyWebhookSignatureResults()
{
    m_IsValid = false;
    m_IsValidIsSet = false;
}

VerifyWebhookSignatureResults::~VerifyWebhookSignatureResults()
{
}

void VerifyWebhookSignatureResults::validate()
{
    // TODO: implement validation
}

web::json::value VerifyWebhookSignatureResults::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IsValidIsSet)
    {
        val[utility::conversions::to_string_t(U("isValid"))] = ModelBase::toJson(m_IsValid);
    }

    return val;
}

bool VerifyWebhookSignatureResults::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("isValid"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isValid")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsValid;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsValid);
            setIsValid(refVal_setIsValid);
        }
    }
    return ok;
}

void VerifyWebhookSignatureResults::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IsValidIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isValid")), m_IsValid));
    }
}

bool VerifyWebhookSignatureResults::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("isValid"))))
    {
        bool refVal_setIsValid;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isValid"))), refVal_setIsValid );
        setIsValid(refVal_setIsValid);
    }
    return ok;
}

bool VerifyWebhookSignatureResults::isIsValid() const
{
    return m_IsValid;
}

void VerifyWebhookSignatureResults::setIsValid(bool value)
{
    m_IsValid = value;
    m_IsValidIsSet = true;
}

bool VerifyWebhookSignatureResults::isValidIsSet() const
{
    return m_IsValidIsSet;
}

void VerifyWebhookSignatureResults::unsetIsValid()
{
    m_IsValidIsSet = false;
}
}
}
}
}


