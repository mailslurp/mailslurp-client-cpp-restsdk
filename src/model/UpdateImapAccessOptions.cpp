/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/UpdateImapAccessOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



UpdateImapAccessOptions::UpdateImapAccessOptions()
{
    m_ImapUsername = utility::conversions::to_string_t("");
    m_ImapUsernameIsSet = false;
    m_ImapPassword = utility::conversions::to_string_t("");
    m_ImapPasswordIsSet = false;
}

UpdateImapAccessOptions::~UpdateImapAccessOptions()
{
}

void UpdateImapAccessOptions::validate()
{
    // TODO: implement validation
}

web::json::value UpdateImapAccessOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ImapUsernameIsSet)
    {
        val[utility::conversions::to_string_t(U("imapUsername"))] = ModelBase::toJson(m_ImapUsername);
    }
    if(m_ImapPasswordIsSet)
    {
        val[utility::conversions::to_string_t(U("imapPassword"))] = ModelBase::toJson(m_ImapPassword);
    }

    return val;
}

bool UpdateImapAccessOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("imapUsername"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imapUsername")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setImapUsername;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImapUsername);
            setImapUsername(refVal_setImapUsername);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("imapPassword"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imapPassword")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setImapPassword;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImapPassword);
            setImapPassword(refVal_setImapPassword);
        }
    }
    return ok;
}

void UpdateImapAccessOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ImapUsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imapUsername")), m_ImapUsername));
    }
    if(m_ImapPasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imapPassword")), m_ImapPassword));
    }
}

bool UpdateImapAccessOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("imapUsername"))))
    {
        utility::string_t refVal_setImapUsername;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imapUsername"))), refVal_setImapUsername );
        setImapUsername(refVal_setImapUsername);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("imapPassword"))))
    {
        utility::string_t refVal_setImapPassword;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imapPassword"))), refVal_setImapPassword );
        setImapPassword(refVal_setImapPassword);
    }
    return ok;
}

utility::string_t UpdateImapAccessOptions::getImapUsername() const
{
    return m_ImapUsername;
}

void UpdateImapAccessOptions::setImapUsername(const utility::string_t& value)
{
    m_ImapUsername = value;
    m_ImapUsernameIsSet = true;
}

bool UpdateImapAccessOptions::imapUsernameIsSet() const
{
    return m_ImapUsernameIsSet;
}

void UpdateImapAccessOptions::unsetImapUsername()
{
    m_ImapUsernameIsSet = false;
}
utility::string_t UpdateImapAccessOptions::getImapPassword() const
{
    return m_ImapPassword;
}

void UpdateImapAccessOptions::setImapPassword(const utility::string_t& value)
{
    m_ImapPassword = value;
    m_ImapPasswordIsSet = true;
}

bool UpdateImapAccessOptions::imapPasswordIsSet() const
{
    return m_ImapPasswordIsSet;
}

void UpdateImapAccessOptions::unsetImapPassword()
{
    m_ImapPasswordIsSet = false;
}
}
}
}
}


