/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/EmailThreadItem.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



EmailThreadItem::EmailThreadItem()
{
    m_ItemType = utility::conversions::to_string_t("");
    m_ItemTypeIsSet = false;
    m_EntityId = utility::conversions::to_string_t("");
    m_EntityIdIsSet = false;
    m_BodyExcerpt = utility::conversions::to_string_t("");
    m_BodyExcerptIsSet = false;
    m_TextExcerpt = utility::conversions::to_string_t("");
    m_TextExcerptIsSet = false;
    m_Subject = utility::conversions::to_string_t("");
    m_SubjectIsSet = false;
    m_ToIsSet = false;
    m_From = utility::conversions::to_string_t("");
    m_FromIsSet = false;
    m_BccIsSet = false;
    m_CcIsSet = false;
    m_AttachmentsIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_Read = false;
    m_ReadIsSet = false;
    m_InReplyTo = utility::conversions::to_string_t("");
    m_InReplyToIsSet = false;
    m_MessageId = utility::conversions::to_string_t("");
    m_MessageIdIsSet = false;
    m_ThreadId = utility::conversions::to_string_t("");
    m_ThreadIdIsSet = false;
    m_SenderIsSet = false;
    m_RecipientsIsSet = false;
}

EmailThreadItem::~EmailThreadItem()
{
}

void EmailThreadItem::validate()
{
    // TODO: implement validation
}

web::json::value EmailThreadItem::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ItemTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("itemType"))] = ModelBase::toJson(m_ItemType);
    }
    if(m_EntityIdIsSet)
    {
        val[utility::conversions::to_string_t(U("entityId"))] = ModelBase::toJson(m_EntityId);
    }
    if(m_BodyExcerptIsSet)
    {
        val[utility::conversions::to_string_t(U("bodyExcerpt"))] = ModelBase::toJson(m_BodyExcerpt);
    }
    if(m_TextExcerptIsSet)
    {
        val[utility::conversions::to_string_t(U("textExcerpt"))] = ModelBase::toJson(m_TextExcerpt);
    }
    if(m_SubjectIsSet)
    {
        val[utility::conversions::to_string_t(U("subject"))] = ModelBase::toJson(m_Subject);
    }
    if(m_ToIsSet)
    {
        val[utility::conversions::to_string_t(U("to"))] = ModelBase::toJson(m_To);
    }
    if(m_FromIsSet)
    {
        val[utility::conversions::to_string_t(U("from"))] = ModelBase::toJson(m_From);
    }
    if(m_BccIsSet)
    {
        val[utility::conversions::to_string_t(U("bcc"))] = ModelBase::toJson(m_Bcc);
    }
    if(m_CcIsSet)
    {
        val[utility::conversions::to_string_t(U("cc"))] = ModelBase::toJson(m_Cc);
    }
    if(m_AttachmentsIsSet)
    {
        val[utility::conversions::to_string_t(U("attachments"))] = ModelBase::toJson(m_Attachments);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_ReadIsSet)
    {
        val[utility::conversions::to_string_t(U("read"))] = ModelBase::toJson(m_Read);
    }
    if(m_InReplyToIsSet)
    {
        val[utility::conversions::to_string_t(U("inReplyTo"))] = ModelBase::toJson(m_InReplyTo);
    }
    if(m_MessageIdIsSet)
    {
        val[utility::conversions::to_string_t(U("messageId"))] = ModelBase::toJson(m_MessageId);
    }
    if(m_ThreadIdIsSet)
    {
        val[utility::conversions::to_string_t(U("threadId"))] = ModelBase::toJson(m_ThreadId);
    }
    if(m_SenderIsSet)
    {
        val[utility::conversions::to_string_t(U("sender"))] = ModelBase::toJson(m_Sender);
    }
    if(m_RecipientsIsSet)
    {
        val[utility::conversions::to_string_t(U("recipients"))] = ModelBase::toJson(m_Recipients);
    }

    return val;
}

bool EmailThreadItem::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("itemType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("itemType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setItemType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setItemType);
            setItemType(refVal_setItemType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("entityId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("entityId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEntityId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEntityId);
            setEntityId(refVal_setEntityId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bodyExcerpt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bodyExcerpt")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBodyExcerpt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBodyExcerpt);
            setBodyExcerpt(refVal_setBodyExcerpt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("textExcerpt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("textExcerpt")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTextExcerpt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTextExcerpt);
            setTextExcerpt(refVal_setTextExcerpt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subject"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subject")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubject;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubject);
            setSubject(refVal_setSubject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("to"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("to")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTo);
            setTo(refVal_setTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("from"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("from")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFrom;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFrom);
            setFrom(refVal_setFrom);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bcc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bcc")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setBcc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBcc);
            setBcc(refVal_setBcc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cc")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setCc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCc);
            setCc(refVal_setCc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("attachments"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("attachments")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setAttachments;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAttachments);
            setAttachments(refVal_setAttachments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("read"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("read")));
        if(!fieldValue.is_null())
        {
            bool refVal_setRead;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRead);
            setRead(refVal_setRead);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("inReplyTo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inReplyTo")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInReplyTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInReplyTo);
            setInReplyTo(refVal_setInReplyTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("messageId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("messageId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMessageId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessageId);
            setMessageId(refVal_setMessageId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("threadId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("threadId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setThreadId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setThreadId);
            setThreadId(refVal_setThreadId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sender"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sender")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Sender> refVal_setSender;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSender);
            setSender(refVal_setSender);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recipients"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recipients")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<EmailRecipients> refVal_setRecipients;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecipients);
            setRecipients(refVal_setRecipients);
        }
    }
    return ok;
}

void EmailThreadItem::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ItemTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("itemType")), m_ItemType));
    }
    if(m_EntityIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("entityId")), m_EntityId));
    }
    if(m_BodyExcerptIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bodyExcerpt")), m_BodyExcerpt));
    }
    if(m_TextExcerptIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("textExcerpt")), m_TextExcerpt));
    }
    if(m_SubjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subject")), m_Subject));
    }
    if(m_ToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("to")), m_To));
    }
    if(m_FromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("from")), m_From));
    }
    if(m_BccIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bcc")), m_Bcc));
    }
    if(m_CcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cc")), m_Cc));
    }
    if(m_AttachmentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("attachments")), m_Attachments));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
    if(m_ReadIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("read")), m_Read));
    }
    if(m_InReplyToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inReplyTo")), m_InReplyTo));
    }
    if(m_MessageIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("messageId")), m_MessageId));
    }
    if(m_ThreadIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("threadId")), m_ThreadId));
    }
    if(m_SenderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sender")), m_Sender));
    }
    if(m_RecipientsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recipients")), m_Recipients));
    }
}

bool EmailThreadItem::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("itemType"))))
    {
        utility::string_t refVal_setItemType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("itemType"))), refVal_setItemType );
        setItemType(refVal_setItemType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("entityId"))))
    {
        utility::string_t refVal_setEntityId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("entityId"))), refVal_setEntityId );
        setEntityId(refVal_setEntityId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bodyExcerpt"))))
    {
        utility::string_t refVal_setBodyExcerpt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bodyExcerpt"))), refVal_setBodyExcerpt );
        setBodyExcerpt(refVal_setBodyExcerpt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("textExcerpt"))))
    {
        utility::string_t refVal_setTextExcerpt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("textExcerpt"))), refVal_setTextExcerpt );
        setTextExcerpt(refVal_setTextExcerpt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subject"))))
    {
        utility::string_t refVal_setSubject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subject"))), refVal_setSubject );
        setSubject(refVal_setSubject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("to"))))
    {
        std::vector<utility::string_t> refVal_setTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("to"))), refVal_setTo );
        setTo(refVal_setTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("from"))))
    {
        utility::string_t refVal_setFrom;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("from"))), refVal_setFrom );
        setFrom(refVal_setFrom);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bcc"))))
    {
        std::vector<utility::string_t> refVal_setBcc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bcc"))), refVal_setBcc );
        setBcc(refVal_setBcc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cc"))))
    {
        std::vector<utility::string_t> refVal_setCc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cc"))), refVal_setCc );
        setCc(refVal_setCc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("attachments"))))
    {
        std::vector<utility::string_t> refVal_setAttachments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("attachments"))), refVal_setAttachments );
        setAttachments(refVal_setAttachments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("read"))))
    {
        bool refVal_setRead;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("read"))), refVal_setRead );
        setRead(refVal_setRead);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("inReplyTo"))))
    {
        utility::string_t refVal_setInReplyTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inReplyTo"))), refVal_setInReplyTo );
        setInReplyTo(refVal_setInReplyTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("messageId"))))
    {
        utility::string_t refVal_setMessageId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("messageId"))), refVal_setMessageId );
        setMessageId(refVal_setMessageId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("threadId"))))
    {
        utility::string_t refVal_setThreadId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("threadId"))), refVal_setThreadId );
        setThreadId(refVal_setThreadId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sender"))))
    {
        std::shared_ptr<Sender> refVal_setSender;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sender"))), refVal_setSender );
        setSender(refVal_setSender);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recipients"))))
    {
        std::shared_ptr<EmailRecipients> refVal_setRecipients;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recipients"))), refVal_setRecipients );
        setRecipients(refVal_setRecipients);
    }
    return ok;
}

utility::string_t EmailThreadItem::getItemType() const
{
    return m_ItemType;
}

void EmailThreadItem::setItemType(const utility::string_t& value)
{
    m_ItemType = value;
    m_ItemTypeIsSet = true;
}

bool EmailThreadItem::itemTypeIsSet() const
{
    return m_ItemTypeIsSet;
}

void EmailThreadItem::unsetItemType()
{
    m_ItemTypeIsSet = false;
}
utility::string_t EmailThreadItem::getEntityId() const
{
    return m_EntityId;
}

void EmailThreadItem::setEntityId(const utility::string_t& value)
{
    m_EntityId = value;
    m_EntityIdIsSet = true;
}

bool EmailThreadItem::entityIdIsSet() const
{
    return m_EntityIdIsSet;
}

void EmailThreadItem::unsetEntityId()
{
    m_EntityIdIsSet = false;
}
utility::string_t EmailThreadItem::getBodyExcerpt() const
{
    return m_BodyExcerpt;
}

void EmailThreadItem::setBodyExcerpt(const utility::string_t& value)
{
    m_BodyExcerpt = value;
    m_BodyExcerptIsSet = true;
}

bool EmailThreadItem::bodyExcerptIsSet() const
{
    return m_BodyExcerptIsSet;
}

void EmailThreadItem::unsetBodyExcerpt()
{
    m_BodyExcerptIsSet = false;
}
utility::string_t EmailThreadItem::getTextExcerpt() const
{
    return m_TextExcerpt;
}

void EmailThreadItem::setTextExcerpt(const utility::string_t& value)
{
    m_TextExcerpt = value;
    m_TextExcerptIsSet = true;
}

bool EmailThreadItem::textExcerptIsSet() const
{
    return m_TextExcerptIsSet;
}

void EmailThreadItem::unsetTextExcerpt()
{
    m_TextExcerptIsSet = false;
}
utility::string_t EmailThreadItem::getSubject() const
{
    return m_Subject;
}

void EmailThreadItem::setSubject(const utility::string_t& value)
{
    m_Subject = value;
    m_SubjectIsSet = true;
}

bool EmailThreadItem::subjectIsSet() const
{
    return m_SubjectIsSet;
}

void EmailThreadItem::unsetSubject()
{
    m_SubjectIsSet = false;
}
std::vector<utility::string_t>& EmailThreadItem::getTo()
{
    return m_To;
}

void EmailThreadItem::setTo(const std::vector<utility::string_t>& value)
{
    m_To = value;
    m_ToIsSet = true;
}

bool EmailThreadItem::toIsSet() const
{
    return m_ToIsSet;
}

void EmailThreadItem::unsetTo()
{
    m_ToIsSet = false;
}
utility::string_t EmailThreadItem::getFrom() const
{
    return m_From;
}

void EmailThreadItem::setFrom(const utility::string_t& value)
{
    m_From = value;
    m_FromIsSet = true;
}

bool EmailThreadItem::fromIsSet() const
{
    return m_FromIsSet;
}

void EmailThreadItem::unsetFrom()
{
    m_FromIsSet = false;
}
std::vector<utility::string_t>& EmailThreadItem::getBcc()
{
    return m_Bcc;
}

void EmailThreadItem::setBcc(const std::vector<utility::string_t>& value)
{
    m_Bcc = value;
    m_BccIsSet = true;
}

bool EmailThreadItem::bccIsSet() const
{
    return m_BccIsSet;
}

void EmailThreadItem::unsetBcc()
{
    m_BccIsSet = false;
}
std::vector<utility::string_t>& EmailThreadItem::getCc()
{
    return m_Cc;
}

void EmailThreadItem::setCc(const std::vector<utility::string_t>& value)
{
    m_Cc = value;
    m_CcIsSet = true;
}

bool EmailThreadItem::ccIsSet() const
{
    return m_CcIsSet;
}

void EmailThreadItem::unsetCc()
{
    m_CcIsSet = false;
}
std::vector<utility::string_t>& EmailThreadItem::getAttachments()
{
    return m_Attachments;
}

void EmailThreadItem::setAttachments(const std::vector<utility::string_t>& value)
{
    m_Attachments = value;
    m_AttachmentsIsSet = true;
}

bool EmailThreadItem::attachmentsIsSet() const
{
    return m_AttachmentsIsSet;
}

void EmailThreadItem::unsetAttachments()
{
    m_AttachmentsIsSet = false;
}
utility::datetime EmailThreadItem::getCreatedAt() const
{
    return m_CreatedAt;
}

void EmailThreadItem::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool EmailThreadItem::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void EmailThreadItem::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
bool EmailThreadItem::isRead() const
{
    return m_Read;
}

void EmailThreadItem::setRead(bool value)
{
    m_Read = value;
    m_ReadIsSet = true;
}

bool EmailThreadItem::readIsSet() const
{
    return m_ReadIsSet;
}

void EmailThreadItem::unsetRead()
{
    m_ReadIsSet = false;
}
utility::string_t EmailThreadItem::getInReplyTo() const
{
    return m_InReplyTo;
}

void EmailThreadItem::setInReplyTo(const utility::string_t& value)
{
    m_InReplyTo = value;
    m_InReplyToIsSet = true;
}

bool EmailThreadItem::inReplyToIsSet() const
{
    return m_InReplyToIsSet;
}

void EmailThreadItem::unsetInReplyTo()
{
    m_InReplyToIsSet = false;
}
utility::string_t EmailThreadItem::getMessageId() const
{
    return m_MessageId;
}

void EmailThreadItem::setMessageId(const utility::string_t& value)
{
    m_MessageId = value;
    m_MessageIdIsSet = true;
}

bool EmailThreadItem::messageIdIsSet() const
{
    return m_MessageIdIsSet;
}

void EmailThreadItem::unsetMessageId()
{
    m_MessageIdIsSet = false;
}
utility::string_t EmailThreadItem::getThreadId() const
{
    return m_ThreadId;
}

void EmailThreadItem::setThreadId(const utility::string_t& value)
{
    m_ThreadId = value;
    m_ThreadIdIsSet = true;
}

bool EmailThreadItem::threadIdIsSet() const
{
    return m_ThreadIdIsSet;
}

void EmailThreadItem::unsetThreadId()
{
    m_ThreadIdIsSet = false;
}
std::shared_ptr<Sender> EmailThreadItem::getSender() const
{
    return m_Sender;
}

void EmailThreadItem::setSender(const std::shared_ptr<Sender>& value)
{
    m_Sender = value;
    m_SenderIsSet = true;
}

bool EmailThreadItem::senderIsSet() const
{
    return m_SenderIsSet;
}

void EmailThreadItem::unsetSender()
{
    m_SenderIsSet = false;
}
std::shared_ptr<EmailRecipients> EmailThreadItem::getRecipients() const
{
    return m_Recipients;
}

void EmailThreadItem::setRecipients(const std::shared_ptr<EmailRecipients>& value)
{
    m_Recipients = value;
    m_RecipientsIsSet = true;
}

bool EmailThreadItem::recipientsIsSet() const
{
    return m_RecipientsIsSet;
}

void EmailThreadItem::unsetRecipients()
{
    m_RecipientsIsSet = false;
}
}
}
}
}


