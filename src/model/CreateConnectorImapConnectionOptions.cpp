/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateConnectorImapConnectionOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



CreateConnectorImapConnectionOptions::CreateConnectorImapConnectionOptions()
{
    m_ImapSsl = false;
    m_ImapSslIsSet = false;
    m_ImapUsername = utility::conversions::to_string_t("");
    m_ImapUsernameIsSet = false;
    m_ImapPassword = utility::conversions::to_string_t("");
    m_ImapPasswordIsSet = false;
    m_SelectFolder = utility::conversions::to_string_t("");
    m_SelectFolderIsSet = false;
    m_SearchTerms = utility::conversions::to_string_t("");
    m_SearchTermsIsSet = false;
    m_ImapPort = 0;
    m_ImapPortIsSet = false;
    m_ImapHost = utility::conversions::to_string_t("");
    m_ImapHostIsSet = false;
    m_Enabled = false;
    m_EnabledIsSet = false;
}

CreateConnectorImapConnectionOptions::~CreateConnectorImapConnectionOptions()
{
}

void CreateConnectorImapConnectionOptions::validate()
{
    // TODO: implement validation
}

web::json::value CreateConnectorImapConnectionOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ImapSslIsSet)
    {
        val[utility::conversions::to_string_t(U("imapSsl"))] = ModelBase::toJson(m_ImapSsl);
    }
    if(m_ImapUsernameIsSet)
    {
        val[utility::conversions::to_string_t(U("imapUsername"))] = ModelBase::toJson(m_ImapUsername);
    }
    if(m_ImapPasswordIsSet)
    {
        val[utility::conversions::to_string_t(U("imapPassword"))] = ModelBase::toJson(m_ImapPassword);
    }
    if(m_SelectFolderIsSet)
    {
        val[utility::conversions::to_string_t(U("selectFolder"))] = ModelBase::toJson(m_SelectFolder);
    }
    if(m_SearchTermsIsSet)
    {
        val[utility::conversions::to_string_t(U("searchTerms"))] = ModelBase::toJson(m_SearchTerms);
    }
    if(m_ImapPortIsSet)
    {
        val[utility::conversions::to_string_t(U("imapPort"))] = ModelBase::toJson(m_ImapPort);
    }
    if(m_ImapHostIsSet)
    {
        val[utility::conversions::to_string_t(U("imapHost"))] = ModelBase::toJson(m_ImapHost);
    }
    if(m_EnabledIsSet)
    {
        val[utility::conversions::to_string_t(U("enabled"))] = ModelBase::toJson(m_Enabled);
    }

    return val;
}

bool CreateConnectorImapConnectionOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("imapSsl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imapSsl")));
        if(!fieldValue.is_null())
        {
            bool refVal_setImapSsl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImapSsl);
            setImapSsl(refVal_setImapSsl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("imapUsername"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imapUsername")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setImapUsername;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImapUsername);
            setImapUsername(refVal_setImapUsername);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("imapPassword"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imapPassword")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setImapPassword;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImapPassword);
            setImapPassword(refVal_setImapPassword);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("selectFolder"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("selectFolder")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSelectFolder;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSelectFolder);
            setSelectFolder(refVal_setSelectFolder);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("searchTerms"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("searchTerms")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSearchTerms;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSearchTerms);
            setSearchTerms(refVal_setSearchTerms);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("imapPort"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imapPort")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setImapPort;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImapPort);
            setImapPort(refVal_setImapPort);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("imapHost"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imapHost")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setImapHost;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImapHost);
            setImapHost(refVal_setImapHost);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("enabled"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("enabled")));
        if(!fieldValue.is_null())
        {
            bool refVal_setEnabled;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEnabled);
            setEnabled(refVal_setEnabled);
        }
    }
    return ok;
}

void CreateConnectorImapConnectionOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ImapSslIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imapSsl")), m_ImapSsl));
    }
    if(m_ImapUsernameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imapUsername")), m_ImapUsername));
    }
    if(m_ImapPasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imapPassword")), m_ImapPassword));
    }
    if(m_SelectFolderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("selectFolder")), m_SelectFolder));
    }
    if(m_SearchTermsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("searchTerms")), m_SearchTerms));
    }
    if(m_ImapPortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imapPort")), m_ImapPort));
    }
    if(m_ImapHostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imapHost")), m_ImapHost));
    }
    if(m_EnabledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("enabled")), m_Enabled));
    }
}

bool CreateConnectorImapConnectionOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("imapSsl"))))
    {
        bool refVal_setImapSsl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imapSsl"))), refVal_setImapSsl );
        setImapSsl(refVal_setImapSsl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("imapUsername"))))
    {
        utility::string_t refVal_setImapUsername;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imapUsername"))), refVal_setImapUsername );
        setImapUsername(refVal_setImapUsername);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("imapPassword"))))
    {
        utility::string_t refVal_setImapPassword;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imapPassword"))), refVal_setImapPassword );
        setImapPassword(refVal_setImapPassword);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("selectFolder"))))
    {
        utility::string_t refVal_setSelectFolder;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("selectFolder"))), refVal_setSelectFolder );
        setSelectFolder(refVal_setSelectFolder);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("searchTerms"))))
    {
        utility::string_t refVal_setSearchTerms;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("searchTerms"))), refVal_setSearchTerms );
        setSearchTerms(refVal_setSearchTerms);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("imapPort"))))
    {
        int32_t refVal_setImapPort;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imapPort"))), refVal_setImapPort );
        setImapPort(refVal_setImapPort);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("imapHost"))))
    {
        utility::string_t refVal_setImapHost;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imapHost"))), refVal_setImapHost );
        setImapHost(refVal_setImapHost);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("enabled"))))
    {
        bool refVal_setEnabled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("enabled"))), refVal_setEnabled );
        setEnabled(refVal_setEnabled);
    }
    return ok;
}

bool CreateConnectorImapConnectionOptions::isImapSsl() const
{
    return m_ImapSsl;
}

void CreateConnectorImapConnectionOptions::setImapSsl(bool value)
{
    m_ImapSsl = value;
    m_ImapSslIsSet = true;
}

bool CreateConnectorImapConnectionOptions::imapSslIsSet() const
{
    return m_ImapSslIsSet;
}

void CreateConnectorImapConnectionOptions::unsetImapSsl()
{
    m_ImapSslIsSet = false;
}
utility::string_t CreateConnectorImapConnectionOptions::getImapUsername() const
{
    return m_ImapUsername;
}

void CreateConnectorImapConnectionOptions::setImapUsername(const utility::string_t& value)
{
    m_ImapUsername = value;
    m_ImapUsernameIsSet = true;
}

bool CreateConnectorImapConnectionOptions::imapUsernameIsSet() const
{
    return m_ImapUsernameIsSet;
}

void CreateConnectorImapConnectionOptions::unsetImapUsername()
{
    m_ImapUsernameIsSet = false;
}
utility::string_t CreateConnectorImapConnectionOptions::getImapPassword() const
{
    return m_ImapPassword;
}

void CreateConnectorImapConnectionOptions::setImapPassword(const utility::string_t& value)
{
    m_ImapPassword = value;
    m_ImapPasswordIsSet = true;
}

bool CreateConnectorImapConnectionOptions::imapPasswordIsSet() const
{
    return m_ImapPasswordIsSet;
}

void CreateConnectorImapConnectionOptions::unsetImapPassword()
{
    m_ImapPasswordIsSet = false;
}
utility::string_t CreateConnectorImapConnectionOptions::getSelectFolder() const
{
    return m_SelectFolder;
}

void CreateConnectorImapConnectionOptions::setSelectFolder(const utility::string_t& value)
{
    m_SelectFolder = value;
    m_SelectFolderIsSet = true;
}

bool CreateConnectorImapConnectionOptions::selectFolderIsSet() const
{
    return m_SelectFolderIsSet;
}

void CreateConnectorImapConnectionOptions::unsetSelectFolder()
{
    m_SelectFolderIsSet = false;
}
utility::string_t CreateConnectorImapConnectionOptions::getSearchTerms() const
{
    return m_SearchTerms;
}

void CreateConnectorImapConnectionOptions::setSearchTerms(const utility::string_t& value)
{
    m_SearchTerms = value;
    m_SearchTermsIsSet = true;
}

bool CreateConnectorImapConnectionOptions::searchTermsIsSet() const
{
    return m_SearchTermsIsSet;
}

void CreateConnectorImapConnectionOptions::unsetSearchTerms()
{
    m_SearchTermsIsSet = false;
}
int32_t CreateConnectorImapConnectionOptions::getImapPort() const
{
    return m_ImapPort;
}

void CreateConnectorImapConnectionOptions::setImapPort(int32_t value)
{
    m_ImapPort = value;
    m_ImapPortIsSet = true;
}

bool CreateConnectorImapConnectionOptions::imapPortIsSet() const
{
    return m_ImapPortIsSet;
}

void CreateConnectorImapConnectionOptions::unsetImapPort()
{
    m_ImapPortIsSet = false;
}
utility::string_t CreateConnectorImapConnectionOptions::getImapHost() const
{
    return m_ImapHost;
}

void CreateConnectorImapConnectionOptions::setImapHost(const utility::string_t& value)
{
    m_ImapHost = value;
    m_ImapHostIsSet = true;
}

bool CreateConnectorImapConnectionOptions::imapHostIsSet() const
{
    return m_ImapHostIsSet;
}

void CreateConnectorImapConnectionOptions::unsetImapHost()
{
    m_ImapHostIsSet = false;
}
bool CreateConnectorImapConnectionOptions::isEnabled() const
{
    return m_Enabled;
}

void CreateConnectorImapConnectionOptions::setEnabled(bool value)
{
    m_Enabled = value;
    m_EnabledIsSet = true;
}

bool CreateConnectorImapConnectionOptions::enabledIsSet() const
{
    return m_EnabledIsSet;
}

void CreateConnectorImapConnectionOptions::unsetEnabled()
{
    m_EnabledIsSet = false;
}
}
}
}
}


