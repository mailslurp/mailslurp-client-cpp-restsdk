/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/OrganizationInboxProjection.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



OrganizationInboxProjection::OrganizationInboxProjection()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_DomainId = utility::conversions::to_string_t("");
    m_DomainIdIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_EmailAddress = utility::conversions::to_string_t("");
    m_EmailAddressIsSet = false;
    m_Favourite = false;
    m_FavouriteIsSet = false;
    m_TagsIsSet = false;
    m_TeamAccess = false;
    m_TeamAccessIsSet = false;
    m_InboxType = utility::conversions::to_string_t("");
    m_InboxTypeIsSet = false;
    m_ReadOnly = false;
    m_ReadOnlyIsSet = false;
    m_VirtualInbox = false;
    m_VirtualInboxIsSet = false;
    m_FunctionsAs = utility::conversions::to_string_t("");
    m_FunctionsAsIsSet = false;
    m_UserId = utility::conversions::to_string_t("");
    m_UserIdIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_ExpiresAt = utility::datetime();
    m_ExpiresAtIsSet = false;
    m_AccountRegion = utility::conversions::to_string_t("");
    m_AccountRegionIsSet = false;
}

OrganizationInboxProjection::~OrganizationInboxProjection()
{
}

void OrganizationInboxProjection::validate()
{
    // TODO: implement validation
}

web::json::value OrganizationInboxProjection::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_DomainIdIsSet)
    {
        val[utility::conversions::to_string_t(U("domainId"))] = ModelBase::toJson(m_DomainId);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_EmailAddressIsSet)
    {
        val[utility::conversions::to_string_t(U("emailAddress"))] = ModelBase::toJson(m_EmailAddress);
    }
    if(m_FavouriteIsSet)
    {
        val[utility::conversions::to_string_t(U("favourite"))] = ModelBase::toJson(m_Favourite);
    }
    if(m_TagsIsSet)
    {
        val[utility::conversions::to_string_t(U("tags"))] = ModelBase::toJson(m_Tags);
    }
    if(m_TeamAccessIsSet)
    {
        val[utility::conversions::to_string_t(U("teamAccess"))] = ModelBase::toJson(m_TeamAccess);
    }
    if(m_InboxTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("inboxType"))] = ModelBase::toJson(m_InboxType);
    }
    if(m_ReadOnlyIsSet)
    {
        val[utility::conversions::to_string_t(U("readOnly"))] = ModelBase::toJson(m_ReadOnly);
    }
    if(m_VirtualInboxIsSet)
    {
        val[utility::conversions::to_string_t(U("virtualInbox"))] = ModelBase::toJson(m_VirtualInbox);
    }
    if(m_FunctionsAsIsSet)
    {
        val[utility::conversions::to_string_t(U("functionsAs"))] = ModelBase::toJson(m_FunctionsAs);
    }
    if(m_UserIdIsSet)
    {
        val[utility::conversions::to_string_t(U("userId"))] = ModelBase::toJson(m_UserId);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_ExpiresAtIsSet)
    {
        val[utility::conversions::to_string_t(U("expiresAt"))] = ModelBase::toJson(m_ExpiresAt);
    }
    if(m_AccountRegionIsSet)
    {
        val[utility::conversions::to_string_t(U("accountRegion"))] = ModelBase::toJson(m_AccountRegion);
    }

    return val;
}

bool OrganizationInboxProjection::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("domainId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("domainId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDomainId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDomainId);
            setDomainId(refVal_setDomainId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("emailAddress"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("emailAddress")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEmailAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEmailAddress);
            setEmailAddress(refVal_setEmailAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("favourite"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("favourite")));
        if(!fieldValue.is_null())
        {
            bool refVal_setFavourite;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFavourite);
            setFavourite(refVal_setFavourite);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tags"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tags")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setTags;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTags);
            setTags(refVal_setTags);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("teamAccess"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("teamAccess")));
        if(!fieldValue.is_null())
        {
            bool refVal_setTeamAccess;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTeamAccess);
            setTeamAccess(refVal_setTeamAccess);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("inboxType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inboxType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInboxType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInboxType);
            setInboxType(refVal_setInboxType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("readOnly"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("readOnly")));
        if(!fieldValue.is_null())
        {
            bool refVal_setReadOnly;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReadOnly);
            setReadOnly(refVal_setReadOnly);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("virtualInbox"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("virtualInbox")));
        if(!fieldValue.is_null())
        {
            bool refVal_setVirtualInbox;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVirtualInbox);
            setVirtualInbox(refVal_setVirtualInbox);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("functionsAs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("functionsAs")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFunctionsAs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFunctionsAs);
            setFunctionsAs(refVal_setFunctionsAs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("userId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("userId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserId);
            setUserId(refVal_setUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expiresAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expiresAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setExpiresAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpiresAt);
            setExpiresAt(refVal_setExpiresAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("accountRegion"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accountRegion")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAccountRegion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccountRegion);
            setAccountRegion(refVal_setAccountRegion);
        }
    }
    return ok;
}

void OrganizationInboxProjection::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_DomainIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("domainId")), m_DomainId));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_EmailAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("emailAddress")), m_EmailAddress));
    }
    if(m_FavouriteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("favourite")), m_Favourite));
    }
    if(m_TagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tags")), m_Tags));
    }
    if(m_TeamAccessIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("teamAccess")), m_TeamAccess));
    }
    if(m_InboxTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inboxType")), m_InboxType));
    }
    if(m_ReadOnlyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("readOnly")), m_ReadOnly));
    }
    if(m_VirtualInboxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("virtualInbox")), m_VirtualInbox));
    }
    if(m_FunctionsAsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("functionsAs")), m_FunctionsAs));
    }
    if(m_UserIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("userId")), m_UserId));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_ExpiresAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expiresAt")), m_ExpiresAt));
    }
    if(m_AccountRegionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accountRegion")), m_AccountRegion));
    }
}

bool OrganizationInboxProjection::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("domainId"))))
    {
        utility::string_t refVal_setDomainId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("domainId"))), refVal_setDomainId );
        setDomainId(refVal_setDomainId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("emailAddress"))))
    {
        utility::string_t refVal_setEmailAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("emailAddress"))), refVal_setEmailAddress );
        setEmailAddress(refVal_setEmailAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("favourite"))))
    {
        bool refVal_setFavourite;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("favourite"))), refVal_setFavourite );
        setFavourite(refVal_setFavourite);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tags"))))
    {
        std::vector<utility::string_t> refVal_setTags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tags"))), refVal_setTags );
        setTags(refVal_setTags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("teamAccess"))))
    {
        bool refVal_setTeamAccess;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("teamAccess"))), refVal_setTeamAccess );
        setTeamAccess(refVal_setTeamAccess);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("inboxType"))))
    {
        utility::string_t refVal_setInboxType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inboxType"))), refVal_setInboxType );
        setInboxType(refVal_setInboxType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("readOnly"))))
    {
        bool refVal_setReadOnly;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("readOnly"))), refVal_setReadOnly );
        setReadOnly(refVal_setReadOnly);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("virtualInbox"))))
    {
        bool refVal_setVirtualInbox;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("virtualInbox"))), refVal_setVirtualInbox );
        setVirtualInbox(refVal_setVirtualInbox);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("functionsAs"))))
    {
        utility::string_t refVal_setFunctionsAs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("functionsAs"))), refVal_setFunctionsAs );
        setFunctionsAs(refVal_setFunctionsAs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("userId"))))
    {
        utility::string_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("userId"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expiresAt"))))
    {
        utility::datetime refVal_setExpiresAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expiresAt"))), refVal_setExpiresAt );
        setExpiresAt(refVal_setExpiresAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("accountRegion"))))
    {
        utility::string_t refVal_setAccountRegion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accountRegion"))), refVal_setAccountRegion );
        setAccountRegion(refVal_setAccountRegion);
    }
    return ok;
}

utility::string_t OrganizationInboxProjection::getId() const
{
    return m_Id;
}

void OrganizationInboxProjection::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool OrganizationInboxProjection::idIsSet() const
{
    return m_IdIsSet;
}

void OrganizationInboxProjection::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t OrganizationInboxProjection::getDomainId() const
{
    return m_DomainId;
}

void OrganizationInboxProjection::setDomainId(const utility::string_t& value)
{
    m_DomainId = value;
    m_DomainIdIsSet = true;
}

bool OrganizationInboxProjection::domainIdIsSet() const
{
    return m_DomainIdIsSet;
}

void OrganizationInboxProjection::unsetDomainId()
{
    m_DomainIdIsSet = false;
}
utility::datetime OrganizationInboxProjection::getCreatedAt() const
{
    return m_CreatedAt;
}

void OrganizationInboxProjection::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool OrganizationInboxProjection::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void OrganizationInboxProjection::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::string_t OrganizationInboxProjection::getName() const
{
    return m_Name;
}

void OrganizationInboxProjection::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool OrganizationInboxProjection::nameIsSet() const
{
    return m_NameIsSet;
}

void OrganizationInboxProjection::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t OrganizationInboxProjection::getEmailAddress() const
{
    return m_EmailAddress;
}

void OrganizationInboxProjection::setEmailAddress(const utility::string_t& value)
{
    m_EmailAddress = value;
    m_EmailAddressIsSet = true;
}

bool OrganizationInboxProjection::emailAddressIsSet() const
{
    return m_EmailAddressIsSet;
}

void OrganizationInboxProjection::unsetEmailAddress()
{
    m_EmailAddressIsSet = false;
}
bool OrganizationInboxProjection::isFavourite() const
{
    return m_Favourite;
}

void OrganizationInboxProjection::setFavourite(bool value)
{
    m_Favourite = value;
    m_FavouriteIsSet = true;
}

bool OrganizationInboxProjection::favouriteIsSet() const
{
    return m_FavouriteIsSet;
}

void OrganizationInboxProjection::unsetFavourite()
{
    m_FavouriteIsSet = false;
}
std::vector<utility::string_t>& OrganizationInboxProjection::getTags()
{
    return m_Tags;
}

void OrganizationInboxProjection::setTags(const std::vector<utility::string_t>& value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}

bool OrganizationInboxProjection::tagsIsSet() const
{
    return m_TagsIsSet;
}

void OrganizationInboxProjection::unsetTags()
{
    m_TagsIsSet = false;
}
bool OrganizationInboxProjection::isTeamAccess() const
{
    return m_TeamAccess;
}

void OrganizationInboxProjection::setTeamAccess(bool value)
{
    m_TeamAccess = value;
    m_TeamAccessIsSet = true;
}

bool OrganizationInboxProjection::teamAccessIsSet() const
{
    return m_TeamAccessIsSet;
}

void OrganizationInboxProjection::unsetTeamAccess()
{
    m_TeamAccessIsSet = false;
}
utility::string_t OrganizationInboxProjection::getInboxType() const
{
    return m_InboxType;
}

void OrganizationInboxProjection::setInboxType(const utility::string_t& value)
{
    m_InboxType = value;
    m_InboxTypeIsSet = true;
}

bool OrganizationInboxProjection::inboxTypeIsSet() const
{
    return m_InboxTypeIsSet;
}

void OrganizationInboxProjection::unsetInboxType()
{
    m_InboxTypeIsSet = false;
}
bool OrganizationInboxProjection::isReadOnly() const
{
    return m_ReadOnly;
}

void OrganizationInboxProjection::setReadOnly(bool value)
{
    m_ReadOnly = value;
    m_ReadOnlyIsSet = true;
}

bool OrganizationInboxProjection::readOnlyIsSet() const
{
    return m_ReadOnlyIsSet;
}

void OrganizationInboxProjection::unsetReadOnly()
{
    m_ReadOnlyIsSet = false;
}
bool OrganizationInboxProjection::isVirtualInbox() const
{
    return m_VirtualInbox;
}

void OrganizationInboxProjection::setVirtualInbox(bool value)
{
    m_VirtualInbox = value;
    m_VirtualInboxIsSet = true;
}

bool OrganizationInboxProjection::virtualInboxIsSet() const
{
    return m_VirtualInboxIsSet;
}

void OrganizationInboxProjection::unsetVirtualInbox()
{
    m_VirtualInboxIsSet = false;
}
utility::string_t OrganizationInboxProjection::getFunctionsAs() const
{
    return m_FunctionsAs;
}

void OrganizationInboxProjection::setFunctionsAs(const utility::string_t& value)
{
    m_FunctionsAs = value;
    m_FunctionsAsIsSet = true;
}

bool OrganizationInboxProjection::functionsAsIsSet() const
{
    return m_FunctionsAsIsSet;
}

void OrganizationInboxProjection::unsetFunctionsAs()
{
    m_FunctionsAsIsSet = false;
}
utility::string_t OrganizationInboxProjection::getUserId() const
{
    return m_UserId;
}

void OrganizationInboxProjection::setUserId(const utility::string_t& value)
{
    m_UserId = value;
    m_UserIdIsSet = true;
}

bool OrganizationInboxProjection::userIdIsSet() const
{
    return m_UserIdIsSet;
}

void OrganizationInboxProjection::unsetUserId()
{
    m_UserIdIsSet = false;
}
utility::string_t OrganizationInboxProjection::getDescription() const
{
    return m_Description;
}

void OrganizationInboxProjection::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool OrganizationInboxProjection::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void OrganizationInboxProjection::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::datetime OrganizationInboxProjection::getExpiresAt() const
{
    return m_ExpiresAt;
}

void OrganizationInboxProjection::setExpiresAt(const utility::datetime& value)
{
    m_ExpiresAt = value;
    m_ExpiresAtIsSet = true;
}

bool OrganizationInboxProjection::expiresAtIsSet() const
{
    return m_ExpiresAtIsSet;
}

void OrganizationInboxProjection::unsetExpiresAt()
{
    m_ExpiresAtIsSet = false;
}
utility::string_t OrganizationInboxProjection::getAccountRegion() const
{
    return m_AccountRegion;
}

void OrganizationInboxProjection::setAccountRegion(const utility::string_t& value)
{
    m_AccountRegion = value;
    m_AccountRegionIsSet = true;
}

bool OrganizationInboxProjection::accountRegionIsSet() const
{
    return m_AccountRegionIsSet;
}

void OrganizationInboxProjection::unsetAccountRegion()
{
    m_AccountRegionIsSet = false;
}
}
}
}
}


