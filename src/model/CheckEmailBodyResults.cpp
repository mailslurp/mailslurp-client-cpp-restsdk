/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CheckEmailBodyResults.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



CheckEmailBodyResults::CheckEmailBodyResults()
{
    m_HasIssues = false;
    m_HasIssuesIsSet = false;
    m_LinkIssuesIsSet = false;
    m_ImageIssuesIsSet = false;
    m_SpellingIssuesIsSet = false;
}

CheckEmailBodyResults::~CheckEmailBodyResults()
{
}

void CheckEmailBodyResults::validate()
{
    // TODO: implement validation
}

web::json::value CheckEmailBodyResults::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_HasIssuesIsSet)
    {
        val[utility::conversions::to_string_t(U("hasIssues"))] = ModelBase::toJson(m_HasIssues);
    }
    if(m_LinkIssuesIsSet)
    {
        val[utility::conversions::to_string_t(U("linkIssues"))] = ModelBase::toJson(m_LinkIssues);
    }
    if(m_ImageIssuesIsSet)
    {
        val[utility::conversions::to_string_t(U("imageIssues"))] = ModelBase::toJson(m_ImageIssues);
    }
    if(m_SpellingIssuesIsSet)
    {
        val[utility::conversions::to_string_t(U("spellingIssues"))] = ModelBase::toJson(m_SpellingIssues);
    }

    return val;
}

bool CheckEmailBodyResults::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("hasIssues"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hasIssues")));
        if(!fieldValue.is_null())
        {
            bool refVal_setHasIssues;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHasIssues);
            setHasIssues(refVal_setHasIssues);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("linkIssues"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("linkIssues")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<LinkIssue>> refVal_setLinkIssues;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLinkIssues);
            setLinkIssues(refVal_setLinkIssues);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("imageIssues"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imageIssues")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ImageIssue>> refVal_setImageIssues;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImageIssues);
            setImageIssues(refVal_setImageIssues);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("spellingIssues"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("spellingIssues")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<SpellingIssue>> refVal_setSpellingIssues;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSpellingIssues);
            setSpellingIssues(refVal_setSpellingIssues);
        }
    }
    return ok;
}

void CheckEmailBodyResults::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_HasIssuesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hasIssues")), m_HasIssues));
    }
    if(m_LinkIssuesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("linkIssues")), m_LinkIssues));
    }
    if(m_ImageIssuesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imageIssues")), m_ImageIssues));
    }
    if(m_SpellingIssuesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("spellingIssues")), m_SpellingIssues));
    }
}

bool CheckEmailBodyResults::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("hasIssues"))))
    {
        bool refVal_setHasIssues;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hasIssues"))), refVal_setHasIssues );
        setHasIssues(refVal_setHasIssues);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("linkIssues"))))
    {
        std::vector<std::shared_ptr<LinkIssue>> refVal_setLinkIssues;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("linkIssues"))), refVal_setLinkIssues );
        setLinkIssues(refVal_setLinkIssues);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("imageIssues"))))
    {
        std::vector<std::shared_ptr<ImageIssue>> refVal_setImageIssues;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imageIssues"))), refVal_setImageIssues );
        setImageIssues(refVal_setImageIssues);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("spellingIssues"))))
    {
        std::vector<std::shared_ptr<SpellingIssue>> refVal_setSpellingIssues;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("spellingIssues"))), refVal_setSpellingIssues );
        setSpellingIssues(refVal_setSpellingIssues);
    }
    return ok;
}

bool CheckEmailBodyResults::isHasIssues() const
{
    return m_HasIssues;
}

void CheckEmailBodyResults::setHasIssues(bool value)
{
    m_HasIssues = value;
    m_HasIssuesIsSet = true;
}

bool CheckEmailBodyResults::hasIssuesIsSet() const
{
    return m_HasIssuesIsSet;
}

void CheckEmailBodyResults::unsetHasIssues()
{
    m_HasIssuesIsSet = false;
}
std::vector<std::shared_ptr<LinkIssue>>& CheckEmailBodyResults::getLinkIssues()
{
    return m_LinkIssues;
}

void CheckEmailBodyResults::setLinkIssues(const std::vector<std::shared_ptr<LinkIssue>>& value)
{
    m_LinkIssues = value;
    m_LinkIssuesIsSet = true;
}

bool CheckEmailBodyResults::linkIssuesIsSet() const
{
    return m_LinkIssuesIsSet;
}

void CheckEmailBodyResults::unsetLinkIssues()
{
    m_LinkIssuesIsSet = false;
}
std::vector<std::shared_ptr<ImageIssue>>& CheckEmailBodyResults::getImageIssues()
{
    return m_ImageIssues;
}

void CheckEmailBodyResults::setImageIssues(const std::vector<std::shared_ptr<ImageIssue>>& value)
{
    m_ImageIssues = value;
    m_ImageIssuesIsSet = true;
}

bool CheckEmailBodyResults::imageIssuesIsSet() const
{
    return m_ImageIssuesIsSet;
}

void CheckEmailBodyResults::unsetImageIssues()
{
    m_ImageIssuesIsSet = false;
}
std::vector<std::shared_ptr<SpellingIssue>>& CheckEmailBodyResults::getSpellingIssues()
{
    return m_SpellingIssues;
}

void CheckEmailBodyResults::setSpellingIssues(const std::vector<std::shared_ptr<SpellingIssue>>& value)
{
    m_SpellingIssues = value;
    m_SpellingIssuesIsSet = true;
}

bool CheckEmailBodyResults::spellingIssuesIsSet() const
{
    return m_SpellingIssuesIsSet;
}

void CheckEmailBodyResults::unsetSpellingIssues()
{
    m_SpellingIssuesIsSet = false;
}
}
}
}
}


