/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/OptInSendingConsentDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



OptInSendingConsentDto::OptInSendingConsentDto()
{
    m_VerificationCodeSent = false;
    m_VerificationCodeSentIsSet = false;
    m_UserHasConsented = false;
    m_UserHasConsentedIsSet = false;
    m_CanSend = false;
    m_CanSendIsSet = false;
}

OptInSendingConsentDto::~OptInSendingConsentDto()
{
}

void OptInSendingConsentDto::validate()
{
    // TODO: implement validation
}

web::json::value OptInSendingConsentDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_VerificationCodeSentIsSet)
    {
        val[utility::conversions::to_string_t(U("verificationCodeSent"))] = ModelBase::toJson(m_VerificationCodeSent);
    }
    if(m_UserHasConsentedIsSet)
    {
        val[utility::conversions::to_string_t(U("userHasConsented"))] = ModelBase::toJson(m_UserHasConsented);
    }
    if(m_CanSendIsSet)
    {
        val[utility::conversions::to_string_t(U("canSend"))] = ModelBase::toJson(m_CanSend);
    }

    return val;
}

bool OptInSendingConsentDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("verificationCodeSent"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("verificationCodeSent")));
        if(!fieldValue.is_null())
        {
            bool refVal_setVerificationCodeSent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVerificationCodeSent);
            setVerificationCodeSent(refVal_setVerificationCodeSent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("userHasConsented"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("userHasConsented")));
        if(!fieldValue.is_null())
        {
            bool refVal_setUserHasConsented;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserHasConsented);
            setUserHasConsented(refVal_setUserHasConsented);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("canSend"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("canSend")));
        if(!fieldValue.is_null())
        {
            bool refVal_setCanSend;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCanSend);
            setCanSend(refVal_setCanSend);
        }
    }
    return ok;
}

void OptInSendingConsentDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_VerificationCodeSentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("verificationCodeSent")), m_VerificationCodeSent));
    }
    if(m_UserHasConsentedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("userHasConsented")), m_UserHasConsented));
    }
    if(m_CanSendIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("canSend")), m_CanSend));
    }
}

bool OptInSendingConsentDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("verificationCodeSent"))))
    {
        bool refVal_setVerificationCodeSent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("verificationCodeSent"))), refVal_setVerificationCodeSent );
        setVerificationCodeSent(refVal_setVerificationCodeSent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("userHasConsented"))))
    {
        bool refVal_setUserHasConsented;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("userHasConsented"))), refVal_setUserHasConsented );
        setUserHasConsented(refVal_setUserHasConsented);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("canSend"))))
    {
        bool refVal_setCanSend;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("canSend"))), refVal_setCanSend );
        setCanSend(refVal_setCanSend);
    }
    return ok;
}

bool OptInSendingConsentDto::isVerificationCodeSent() const
{
    return m_VerificationCodeSent;
}

void OptInSendingConsentDto::setVerificationCodeSent(bool value)
{
    m_VerificationCodeSent = value;
    m_VerificationCodeSentIsSet = true;
}

bool OptInSendingConsentDto::verificationCodeSentIsSet() const
{
    return m_VerificationCodeSentIsSet;
}

void OptInSendingConsentDto::unsetVerificationCodeSent()
{
    m_VerificationCodeSentIsSet = false;
}
bool OptInSendingConsentDto::isUserHasConsented() const
{
    return m_UserHasConsented;
}

void OptInSendingConsentDto::setUserHasConsented(bool value)
{
    m_UserHasConsented = value;
    m_UserHasConsentedIsSet = true;
}

bool OptInSendingConsentDto::userHasConsentedIsSet() const
{
    return m_UserHasConsentedIsSet;
}

void OptInSendingConsentDto::unsetUserHasConsented()
{
    m_UserHasConsentedIsSet = false;
}
bool OptInSendingConsentDto::isCanSend() const
{
    return m_CanSend;
}

void OptInSendingConsentDto::setCanSend(bool value)
{
    m_CanSend = value;
    m_CanSendIsSet = true;
}

bool OptInSendingConsentDto::canSendIsSet() const
{
    return m_CanSendIsSet;
}

void OptInSendingConsentDto::unsetCanSend()
{
    m_CanSendIsSet = false;
}
}
}
}
}


