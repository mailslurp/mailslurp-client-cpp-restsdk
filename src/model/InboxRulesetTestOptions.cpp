/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/InboxRulesetTestOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



InboxRulesetTestOptions::InboxRulesetTestOptions()
{
    m_TestTarget = utility::conversions::to_string_t("");
    m_TestTargetIsSet = false;
}

InboxRulesetTestOptions::~InboxRulesetTestOptions()
{
}

void InboxRulesetTestOptions::validate()
{
    // TODO: implement validation
}

web::json::value InboxRulesetTestOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TestTargetIsSet)
    {
        val[utility::conversions::to_string_t(U("testTarget"))] = ModelBase::toJson(m_TestTarget);
    }

    return val;
}

bool InboxRulesetTestOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("testTarget"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("testTarget")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTestTarget;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTestTarget);
            setTestTarget(refVal_setTestTarget);
        }
    }
    return ok;
}

void InboxRulesetTestOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TestTargetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("testTarget")), m_TestTarget));
    }
}

bool InboxRulesetTestOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("testTarget"))))
    {
        utility::string_t refVal_setTestTarget;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("testTarget"))), refVal_setTestTarget );
        setTestTarget(refVal_setTestTarget);
    }
    return ok;
}

utility::string_t InboxRulesetTestOptions::getTestTarget() const
{
    return m_TestTarget;
}

void InboxRulesetTestOptions::setTestTarget(const utility::string_t& value)
{
    m_TestTarget = value;
    m_TestTargetIsSet = true;
}

bool InboxRulesetTestOptions::testTargetIsSet() const
{
    return m_TestTargetIsSet;
}

void InboxRulesetTestOptions::unsetTestTarget()
{
    m_TestTargetIsSet = false;
}
}
}
}
}


