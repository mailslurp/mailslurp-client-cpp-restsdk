/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ReplyToAliasEmailOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



ReplyToAliasEmailOptions::ReplyToAliasEmailOptions()
{
    m_Body = utility::conversions::to_string_t("");
    m_BodyIsSet = false;
    m_IsHTML = false;
    m_IsHTMLIsSet = false;
    m_Charset = utility::conversions::to_string_t("");
    m_CharsetIsSet = false;
    m_AttachmentsIsSet = false;
    m_TemplateVariablesIsSet = false;
    m_r_template = utility::conversions::to_string_t("");
    m_r_templateIsSet = false;
    m_SendStrategy = utility::conversions::to_string_t("");
    m_SendStrategyIsSet = false;
    m_CustomHeadersIsSet = false;
    m_UseInboxName = false;
    m_UseInboxNameIsSet = false;
    m_Html = false;
    m_HtmlIsSet = false;
}

ReplyToAliasEmailOptions::~ReplyToAliasEmailOptions()
{
}

void ReplyToAliasEmailOptions::validate()
{
    // TODO: implement validation
}

web::json::value ReplyToAliasEmailOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_BodyIsSet)
    {
        val[utility::conversions::to_string_t(U("body"))] = ModelBase::toJson(m_Body);
    }
    if(m_IsHTMLIsSet)
    {
        val[utility::conversions::to_string_t(U("isHTML"))] = ModelBase::toJson(m_IsHTML);
    }
    if(m_CharsetIsSet)
    {
        val[utility::conversions::to_string_t(U("charset"))] = ModelBase::toJson(m_Charset);
    }
    if(m_AttachmentsIsSet)
    {
        val[utility::conversions::to_string_t(U("attachments"))] = ModelBase::toJson(m_Attachments);
    }
    if(m_TemplateVariablesIsSet)
    {
        val[utility::conversions::to_string_t(U("templateVariables"))] = ModelBase::toJson(m_TemplateVariables);
    }
    if(m_r_templateIsSet)
    {
        val[utility::conversions::to_string_t(U("template"))] = ModelBase::toJson(m_r_template);
    }
    if(m_SendStrategyIsSet)
    {
        val[utility::conversions::to_string_t(U("sendStrategy"))] = ModelBase::toJson(m_SendStrategy);
    }
    if(m_CustomHeadersIsSet)
    {
        val[utility::conversions::to_string_t(U("customHeaders"))] = ModelBase::toJson(m_CustomHeaders);
    }
    if(m_UseInboxNameIsSet)
    {
        val[utility::conversions::to_string_t(U("useInboxName"))] = ModelBase::toJson(m_UseInboxName);
    }
    if(m_HtmlIsSet)
    {
        val[utility::conversions::to_string_t(U("html"))] = ModelBase::toJson(m_Html);
    }

    return val;
}

bool ReplyToAliasEmailOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("body"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("body")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBody;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBody);
            setBody(refVal_setBody);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isHTML"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isHTML")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsHTML;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsHTML);
            setIsHTML(refVal_setIsHTML);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("charset"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("charset")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCharset;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCharset);
            setCharset(refVal_setCharset);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("attachments"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("attachments")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setAttachments;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAttachments);
            setAttachments(refVal_setAttachments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("templateVariables"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("templateVariables")));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<Object>> refVal_setTemplateVariables;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTemplateVariables);
            setTemplateVariables(refVal_setTemplateVariables);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("template"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("template")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRTemplate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRTemplate);
            setRTemplate(refVal_setRTemplate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sendStrategy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sendStrategy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSendStrategy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSendStrategy);
            setSendStrategy(refVal_setSendStrategy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("customHeaders"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("customHeaders")));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, utility::string_t> refVal_setCustomHeaders;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCustomHeaders);
            setCustomHeaders(refVal_setCustomHeaders);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("useInboxName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("useInboxName")));
        if(!fieldValue.is_null())
        {
            bool refVal_setUseInboxName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUseInboxName);
            setUseInboxName(refVal_setUseInboxName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("html"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("html")));
        if(!fieldValue.is_null())
        {
            bool refVal_setHtml;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHtml);
            setHtml(refVal_setHtml);
        }
    }
    return ok;
}

void ReplyToAliasEmailOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_BodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("body")), m_Body));
    }
    if(m_IsHTMLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isHTML")), m_IsHTML));
    }
    if(m_CharsetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("charset")), m_Charset));
    }
    if(m_AttachmentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("attachments")), m_Attachments));
    }
    if(m_TemplateVariablesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("templateVariables")), m_TemplateVariables));
    }
    if(m_r_templateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("template")), m_r_template));
    }
    if(m_SendStrategyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sendStrategy")), m_SendStrategy));
    }
    if(m_CustomHeadersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("customHeaders")), m_CustomHeaders));
    }
    if(m_UseInboxNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("useInboxName")), m_UseInboxName));
    }
    if(m_HtmlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("html")), m_Html));
    }
}

bool ReplyToAliasEmailOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("body"))))
    {
        utility::string_t refVal_setBody;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("body"))), refVal_setBody );
        setBody(refVal_setBody);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isHTML"))))
    {
        bool refVal_setIsHTML;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isHTML"))), refVal_setIsHTML );
        setIsHTML(refVal_setIsHTML);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("charset"))))
    {
        utility::string_t refVal_setCharset;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("charset"))), refVal_setCharset );
        setCharset(refVal_setCharset);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("attachments"))))
    {
        std::vector<utility::string_t> refVal_setAttachments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("attachments"))), refVal_setAttachments );
        setAttachments(refVal_setAttachments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("templateVariables"))))
    {
        std::map<utility::string_t, std::shared_ptr<Object>> refVal_setTemplateVariables;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("templateVariables"))), refVal_setTemplateVariables );
        setTemplateVariables(refVal_setTemplateVariables);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("template"))))
    {
        utility::string_t refVal_setRTemplate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("template"))), refVal_setRTemplate );
        setRTemplate(refVal_setRTemplate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sendStrategy"))))
    {
        utility::string_t refVal_setSendStrategy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sendStrategy"))), refVal_setSendStrategy );
        setSendStrategy(refVal_setSendStrategy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("customHeaders"))))
    {
        std::map<utility::string_t, utility::string_t> refVal_setCustomHeaders;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("customHeaders"))), refVal_setCustomHeaders );
        setCustomHeaders(refVal_setCustomHeaders);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("useInboxName"))))
    {
        bool refVal_setUseInboxName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("useInboxName"))), refVal_setUseInboxName );
        setUseInboxName(refVal_setUseInboxName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("html"))))
    {
        bool refVal_setHtml;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("html"))), refVal_setHtml );
        setHtml(refVal_setHtml);
    }
    return ok;
}

utility::string_t ReplyToAliasEmailOptions::getBody() const
{
    return m_Body;
}

void ReplyToAliasEmailOptions::setBody(const utility::string_t& value)
{
    m_Body = value;
    m_BodyIsSet = true;
}

bool ReplyToAliasEmailOptions::bodyIsSet() const
{
    return m_BodyIsSet;
}

void ReplyToAliasEmailOptions::unsetBody()
{
    m_BodyIsSet = false;
}
bool ReplyToAliasEmailOptions::isIsHTML() const
{
    return m_IsHTML;
}

void ReplyToAliasEmailOptions::setIsHTML(bool value)
{
    m_IsHTML = value;
    m_IsHTMLIsSet = true;
}

bool ReplyToAliasEmailOptions::isHTMLIsSet() const
{
    return m_IsHTMLIsSet;
}

void ReplyToAliasEmailOptions::unsetIsHTML()
{
    m_IsHTMLIsSet = false;
}
utility::string_t ReplyToAliasEmailOptions::getCharset() const
{
    return m_Charset;
}

void ReplyToAliasEmailOptions::setCharset(const utility::string_t& value)
{
    m_Charset = value;
    m_CharsetIsSet = true;
}

bool ReplyToAliasEmailOptions::charsetIsSet() const
{
    return m_CharsetIsSet;
}

void ReplyToAliasEmailOptions::unsetCharset()
{
    m_CharsetIsSet = false;
}
std::vector<utility::string_t>& ReplyToAliasEmailOptions::getAttachments()
{
    return m_Attachments;
}

void ReplyToAliasEmailOptions::setAttachments(const std::vector<utility::string_t>& value)
{
    m_Attachments = value;
    m_AttachmentsIsSet = true;
}

bool ReplyToAliasEmailOptions::attachmentsIsSet() const
{
    return m_AttachmentsIsSet;
}

void ReplyToAliasEmailOptions::unsetAttachments()
{
    m_AttachmentsIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<Object>>& ReplyToAliasEmailOptions::getTemplateVariables()
{
    return m_TemplateVariables;
}

void ReplyToAliasEmailOptions::setTemplateVariables(const std::map<utility::string_t, std::shared_ptr<Object>>& value)
{
    m_TemplateVariables = value;
    m_TemplateVariablesIsSet = true;
}

bool ReplyToAliasEmailOptions::templateVariablesIsSet() const
{
    return m_TemplateVariablesIsSet;
}

void ReplyToAliasEmailOptions::unsetTemplateVariables()
{
    m_TemplateVariablesIsSet = false;
}
utility::string_t ReplyToAliasEmailOptions::getRTemplate() const
{
    return m_r_template;
}

void ReplyToAliasEmailOptions::setRTemplate(const utility::string_t& value)
{
    m_r_template = value;
    m_r_templateIsSet = true;
}

bool ReplyToAliasEmailOptions::rTemplateIsSet() const
{
    return m_r_templateIsSet;
}

void ReplyToAliasEmailOptions::unsetr_template()
{
    m_r_templateIsSet = false;
}
utility::string_t ReplyToAliasEmailOptions::getSendStrategy() const
{
    return m_SendStrategy;
}

void ReplyToAliasEmailOptions::setSendStrategy(const utility::string_t& value)
{
    m_SendStrategy = value;
    m_SendStrategyIsSet = true;
}

bool ReplyToAliasEmailOptions::sendStrategyIsSet() const
{
    return m_SendStrategyIsSet;
}

void ReplyToAliasEmailOptions::unsetSendStrategy()
{
    m_SendStrategyIsSet = false;
}
std::map<utility::string_t, utility::string_t>& ReplyToAliasEmailOptions::getCustomHeaders()
{
    return m_CustomHeaders;
}

void ReplyToAliasEmailOptions::setCustomHeaders(const std::map<utility::string_t, utility::string_t>& value)
{
    m_CustomHeaders = value;
    m_CustomHeadersIsSet = true;
}

bool ReplyToAliasEmailOptions::customHeadersIsSet() const
{
    return m_CustomHeadersIsSet;
}

void ReplyToAliasEmailOptions::unsetCustomHeaders()
{
    m_CustomHeadersIsSet = false;
}
bool ReplyToAliasEmailOptions::isUseInboxName() const
{
    return m_UseInboxName;
}

void ReplyToAliasEmailOptions::setUseInboxName(bool value)
{
    m_UseInboxName = value;
    m_UseInboxNameIsSet = true;
}

bool ReplyToAliasEmailOptions::useInboxNameIsSet() const
{
    return m_UseInboxNameIsSet;
}

void ReplyToAliasEmailOptions::unsetUseInboxName()
{
    m_UseInboxNameIsSet = false;
}
bool ReplyToAliasEmailOptions::isHtml() const
{
    return m_Html;
}

void ReplyToAliasEmailOptions::setHtml(bool value)
{
    m_Html = value;
    m_HtmlIsSet = true;
}

bool ReplyToAliasEmailOptions::htmlIsSet() const
{
    return m_HtmlIsSet;
}

void ReplyToAliasEmailOptions::unsetHtml()
{
    m_HtmlIsSet = false;
}
}
}
}
}


