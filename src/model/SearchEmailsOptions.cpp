/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SearchEmailsOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



SearchEmailsOptions::SearchEmailsOptions()
{
    m_InboxIdsIsSet = false;
    m_PageIndex = 0;
    m_PageIndexIsSet = false;
    m_PageSize = 0;
    m_PageSizeIsSet = false;
    m_SortDirection = utility::conversions::to_string_t("");
    m_SortDirectionIsSet = false;
    m_UnreadOnly = false;
    m_UnreadOnlyIsSet = false;
    m_SearchFilter = utility::conversions::to_string_t("");
    m_SearchFilterIsSet = false;
    m_Since = utility::datetime();
    m_SinceIsSet = false;
    m_Before = utility::datetime();
    m_BeforeIsSet = false;
}

SearchEmailsOptions::~SearchEmailsOptions()
{
}

void SearchEmailsOptions::validate()
{
    // TODO: implement validation
}

web::json::value SearchEmailsOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_InboxIdsIsSet)
    {
        val[utility::conversions::to_string_t(U("inboxIds"))] = ModelBase::toJson(m_InboxIds);
    }
    if(m_PageIndexIsSet)
    {
        val[utility::conversions::to_string_t(U("pageIndex"))] = ModelBase::toJson(m_PageIndex);
    }
    if(m_PageSizeIsSet)
    {
        val[utility::conversions::to_string_t(U("pageSize"))] = ModelBase::toJson(m_PageSize);
    }
    if(m_SortDirectionIsSet)
    {
        val[utility::conversions::to_string_t(U("sortDirection"))] = ModelBase::toJson(m_SortDirection);
    }
    if(m_UnreadOnlyIsSet)
    {
        val[utility::conversions::to_string_t(U("unreadOnly"))] = ModelBase::toJson(m_UnreadOnly);
    }
    if(m_SearchFilterIsSet)
    {
        val[utility::conversions::to_string_t(U("searchFilter"))] = ModelBase::toJson(m_SearchFilter);
    }
    if(m_SinceIsSet)
    {
        val[utility::conversions::to_string_t(U("since"))] = ModelBase::toJson(m_Since);
    }
    if(m_BeforeIsSet)
    {
        val[utility::conversions::to_string_t(U("before"))] = ModelBase::toJson(m_Before);
    }

    return val;
}

bool SearchEmailsOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("inboxIds"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inboxIds")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setInboxIds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInboxIds);
            setInboxIds(refVal_setInboxIds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pageIndex"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pageIndex")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPageIndex;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPageIndex);
            setPageIndex(refVal_setPageIndex);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pageSize"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pageSize")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPageSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPageSize);
            setPageSize(refVal_setPageSize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sortDirection"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sortDirection")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSortDirection;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSortDirection);
            setSortDirection(refVal_setSortDirection);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("unreadOnly"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("unreadOnly")));
        if(!fieldValue.is_null())
        {
            bool refVal_setUnreadOnly;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUnreadOnly);
            setUnreadOnly(refVal_setUnreadOnly);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("searchFilter"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("searchFilter")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSearchFilter;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSearchFilter);
            setSearchFilter(refVal_setSearchFilter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("since"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("since")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setSince;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSince);
            setSince(refVal_setSince);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("before"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("before")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setBefore;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBefore);
            setBefore(refVal_setBefore);
        }
    }
    return ok;
}

void SearchEmailsOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_InboxIdsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inboxIds")), m_InboxIds));
    }
    if(m_PageIndexIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pageIndex")), m_PageIndex));
    }
    if(m_PageSizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pageSize")), m_PageSize));
    }
    if(m_SortDirectionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sortDirection")), m_SortDirection));
    }
    if(m_UnreadOnlyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("unreadOnly")), m_UnreadOnly));
    }
    if(m_SearchFilterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("searchFilter")), m_SearchFilter));
    }
    if(m_SinceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("since")), m_Since));
    }
    if(m_BeforeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("before")), m_Before));
    }
}

bool SearchEmailsOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("inboxIds"))))
    {
        std::vector<utility::string_t> refVal_setInboxIds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inboxIds"))), refVal_setInboxIds );
        setInboxIds(refVal_setInboxIds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pageIndex"))))
    {
        int32_t refVal_setPageIndex;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pageIndex"))), refVal_setPageIndex );
        setPageIndex(refVal_setPageIndex);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pageSize"))))
    {
        int32_t refVal_setPageSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pageSize"))), refVal_setPageSize );
        setPageSize(refVal_setPageSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sortDirection"))))
    {
        utility::string_t refVal_setSortDirection;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sortDirection"))), refVal_setSortDirection );
        setSortDirection(refVal_setSortDirection);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("unreadOnly"))))
    {
        bool refVal_setUnreadOnly;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("unreadOnly"))), refVal_setUnreadOnly );
        setUnreadOnly(refVal_setUnreadOnly);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("searchFilter"))))
    {
        utility::string_t refVal_setSearchFilter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("searchFilter"))), refVal_setSearchFilter );
        setSearchFilter(refVal_setSearchFilter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("since"))))
    {
        utility::datetime refVal_setSince;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("since"))), refVal_setSince );
        setSince(refVal_setSince);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("before"))))
    {
        utility::datetime refVal_setBefore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("before"))), refVal_setBefore );
        setBefore(refVal_setBefore);
    }
    return ok;
}

std::vector<utility::string_t>& SearchEmailsOptions::getInboxIds()
{
    return m_InboxIds;
}

void SearchEmailsOptions::setInboxIds(const std::vector<utility::string_t>& value)
{
    m_InboxIds = value;
    m_InboxIdsIsSet = true;
}

bool SearchEmailsOptions::inboxIdsIsSet() const
{
    return m_InboxIdsIsSet;
}

void SearchEmailsOptions::unsetInboxIds()
{
    m_InboxIdsIsSet = false;
}
int32_t SearchEmailsOptions::getPageIndex() const
{
    return m_PageIndex;
}

void SearchEmailsOptions::setPageIndex(int32_t value)
{
    m_PageIndex = value;
    m_PageIndexIsSet = true;
}

bool SearchEmailsOptions::pageIndexIsSet() const
{
    return m_PageIndexIsSet;
}

void SearchEmailsOptions::unsetPageIndex()
{
    m_PageIndexIsSet = false;
}
int32_t SearchEmailsOptions::getPageSize() const
{
    return m_PageSize;
}

void SearchEmailsOptions::setPageSize(int32_t value)
{
    m_PageSize = value;
    m_PageSizeIsSet = true;
}

bool SearchEmailsOptions::pageSizeIsSet() const
{
    return m_PageSizeIsSet;
}

void SearchEmailsOptions::unsetPageSize()
{
    m_PageSizeIsSet = false;
}
utility::string_t SearchEmailsOptions::getSortDirection() const
{
    return m_SortDirection;
}

void SearchEmailsOptions::setSortDirection(const utility::string_t& value)
{
    m_SortDirection = value;
    m_SortDirectionIsSet = true;
}

bool SearchEmailsOptions::sortDirectionIsSet() const
{
    return m_SortDirectionIsSet;
}

void SearchEmailsOptions::unsetSortDirection()
{
    m_SortDirectionIsSet = false;
}
bool SearchEmailsOptions::isUnreadOnly() const
{
    return m_UnreadOnly;
}

void SearchEmailsOptions::setUnreadOnly(bool value)
{
    m_UnreadOnly = value;
    m_UnreadOnlyIsSet = true;
}

bool SearchEmailsOptions::unreadOnlyIsSet() const
{
    return m_UnreadOnlyIsSet;
}

void SearchEmailsOptions::unsetUnreadOnly()
{
    m_UnreadOnlyIsSet = false;
}
utility::string_t SearchEmailsOptions::getSearchFilter() const
{
    return m_SearchFilter;
}

void SearchEmailsOptions::setSearchFilter(const utility::string_t& value)
{
    m_SearchFilter = value;
    m_SearchFilterIsSet = true;
}

bool SearchEmailsOptions::searchFilterIsSet() const
{
    return m_SearchFilterIsSet;
}

void SearchEmailsOptions::unsetSearchFilter()
{
    m_SearchFilterIsSet = false;
}
utility::datetime SearchEmailsOptions::getSince() const
{
    return m_Since;
}

void SearchEmailsOptions::setSince(const utility::datetime& value)
{
    m_Since = value;
    m_SinceIsSet = true;
}

bool SearchEmailsOptions::sinceIsSet() const
{
    return m_SinceIsSet;
}

void SearchEmailsOptions::unsetSince()
{
    m_SinceIsSet = false;
}
utility::datetime SearchEmailsOptions::getBefore() const
{
    return m_Before;
}

void SearchEmailsOptions::setBefore(const utility::datetime& value)
{
    m_Before = value;
    m_BeforeIsSet = true;
}

bool SearchEmailsOptions::beforeIsSet() const
{
    return m_BeforeIsSet;
}

void SearchEmailsOptions::unsetBefore()
{
    m_BeforeIsSet = false;
}
}
}
}
}


