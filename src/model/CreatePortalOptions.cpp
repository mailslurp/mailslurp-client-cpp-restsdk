/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreatePortalOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



CreatePortalOptions::CreatePortalOptions()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_DomainId = utility::conversions::to_string_t("");
    m_DomainIdIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_LinkHelp = utility::conversions::to_string_t("");
    m_LinkHelpIsSet = false;
}

CreatePortalOptions::~CreatePortalOptions()
{
}

void CreatePortalOptions::validate()
{
    // TODO: implement validation
}

web::json::value CreatePortalOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_DomainIdIsSet)
    {
        val[utility::conversions::to_string_t(U("domainId"))] = ModelBase::toJson(m_DomainId);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_LinkHelpIsSet)
    {
        val[utility::conversions::to_string_t(U("linkHelp"))] = ModelBase::toJson(m_LinkHelp);
    }

    return val;
}

bool CreatePortalOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("domainId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("domainId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDomainId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDomainId);
            setDomainId(refVal_setDomainId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("linkHelp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("linkHelp")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLinkHelp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLinkHelp);
            setLinkHelp(refVal_setLinkHelp);
        }
    }
    return ok;
}

void CreatePortalOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_DomainIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("domainId")), m_DomainId));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_LinkHelpIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("linkHelp")), m_LinkHelp));
    }
}

bool CreatePortalOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("domainId"))))
    {
        utility::string_t refVal_setDomainId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("domainId"))), refVal_setDomainId );
        setDomainId(refVal_setDomainId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("linkHelp"))))
    {
        utility::string_t refVal_setLinkHelp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("linkHelp"))), refVal_setLinkHelp );
        setLinkHelp(refVal_setLinkHelp);
    }
    return ok;
}

utility::string_t CreatePortalOptions::getName() const
{
    return m_Name;
}

void CreatePortalOptions::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool CreatePortalOptions::nameIsSet() const
{
    return m_NameIsSet;
}

void CreatePortalOptions::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t CreatePortalOptions::getDomainId() const
{
    return m_DomainId;
}

void CreatePortalOptions::setDomainId(const utility::string_t& value)
{
    m_DomainId = value;
    m_DomainIdIsSet = true;
}

bool CreatePortalOptions::domainIdIsSet() const
{
    return m_DomainIdIsSet;
}

void CreatePortalOptions::unsetDomainId()
{
    m_DomainIdIsSet = false;
}
utility::string_t CreatePortalOptions::getDescription() const
{
    return m_Description;
}

void CreatePortalOptions::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool CreatePortalOptions::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void CreatePortalOptions::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t CreatePortalOptions::getLinkHelp() const
{
    return m_LinkHelp;
}

void CreatePortalOptions::setLinkHelp(const utility::string_t& value)
{
    m_LinkHelp = value;
    m_LinkHelpIsSet = true;
}

bool CreatePortalOptions::linkHelpIsSet() const
{
    return m_LinkHelpIsSet;
}

void CreatePortalOptions::unsetLinkHelp()
{
    m_LinkHelpIsSet = false;
}
}
}
}
}


