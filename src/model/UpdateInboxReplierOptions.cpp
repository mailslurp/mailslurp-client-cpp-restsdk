/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/UpdateInboxReplierOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



UpdateInboxReplierOptions::UpdateInboxReplierOptions()
{
    m_InboxId = utility::conversions::to_string_t("");
    m_InboxIdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Field = utility::conversions::to_string_t("");
    m_FieldIsSet = false;
    m_Match = utility::conversions::to_string_t("");
    m_MatchIsSet = false;
    m_ReplyTo = utility::conversions::to_string_t("");
    m_ReplyToIsSet = false;
    m_Subject = utility::conversions::to_string_t("");
    m_SubjectIsSet = false;
    m_From = utility::conversions::to_string_t("");
    m_FromIsSet = false;
    m_Charset = utility::conversions::to_string_t("");
    m_CharsetIsSet = false;
    m_IsHTML = false;
    m_IsHTMLIsSet = false;
    m_IgnoreReplyTo = false;
    m_IgnoreReplyToIsSet = false;
    m_Body = utility::conversions::to_string_t("");
    m_BodyIsSet = false;
    m_TemplateId = utility::conversions::to_string_t("");
    m_TemplateIdIsSet = false;
    m_TemplateVariablesIsSet = false;
}

UpdateInboxReplierOptions::~UpdateInboxReplierOptions()
{
}

void UpdateInboxReplierOptions::validate()
{
    // TODO: implement validation
}

web::json::value UpdateInboxReplierOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_InboxIdIsSet)
    {
        val[utility::conversions::to_string_t(U("inboxId"))] = ModelBase::toJson(m_InboxId);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_FieldIsSet)
    {
        val[utility::conversions::to_string_t(U("field"))] = ModelBase::toJson(m_Field);
    }
    if(m_MatchIsSet)
    {
        val[utility::conversions::to_string_t(U("match"))] = ModelBase::toJson(m_Match);
    }
    if(m_ReplyToIsSet)
    {
        val[utility::conversions::to_string_t(U("replyTo"))] = ModelBase::toJson(m_ReplyTo);
    }
    if(m_SubjectIsSet)
    {
        val[utility::conversions::to_string_t(U("subject"))] = ModelBase::toJson(m_Subject);
    }
    if(m_FromIsSet)
    {
        val[utility::conversions::to_string_t(U("from"))] = ModelBase::toJson(m_From);
    }
    if(m_CharsetIsSet)
    {
        val[utility::conversions::to_string_t(U("charset"))] = ModelBase::toJson(m_Charset);
    }
    if(m_IsHTMLIsSet)
    {
        val[utility::conversions::to_string_t(U("isHTML"))] = ModelBase::toJson(m_IsHTML);
    }
    if(m_IgnoreReplyToIsSet)
    {
        val[utility::conversions::to_string_t(U("ignoreReplyTo"))] = ModelBase::toJson(m_IgnoreReplyTo);
    }
    if(m_BodyIsSet)
    {
        val[utility::conversions::to_string_t(U("body"))] = ModelBase::toJson(m_Body);
    }
    if(m_TemplateIdIsSet)
    {
        val[utility::conversions::to_string_t(U("templateId"))] = ModelBase::toJson(m_TemplateId);
    }
    if(m_TemplateVariablesIsSet)
    {
        val[utility::conversions::to_string_t(U("templateVariables"))] = ModelBase::toJson(m_TemplateVariables);
    }

    return val;
}

bool UpdateInboxReplierOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("inboxId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inboxId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInboxId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInboxId);
            setInboxId(refVal_setInboxId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("field"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("field")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setField;
            ok &= ModelBase::fromJson(fieldValue, refVal_setField);
            setField(refVal_setField);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("match"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("match")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMatch;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMatch);
            setMatch(refVal_setMatch);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("replyTo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("replyTo")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setReplyTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReplyTo);
            setReplyTo(refVal_setReplyTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subject"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subject")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubject;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubject);
            setSubject(refVal_setSubject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("from"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("from")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFrom;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFrom);
            setFrom(refVal_setFrom);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("charset"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("charset")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCharset;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCharset);
            setCharset(refVal_setCharset);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isHTML"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isHTML")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsHTML;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsHTML);
            setIsHTML(refVal_setIsHTML);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ignoreReplyTo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ignoreReplyTo")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIgnoreReplyTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIgnoreReplyTo);
            setIgnoreReplyTo(refVal_setIgnoreReplyTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("body"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("body")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBody;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBody);
            setBody(refVal_setBody);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("templateId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("templateId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTemplateId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTemplateId);
            setTemplateId(refVal_setTemplateId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("templateVariables"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("templateVariables")));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<Object>> refVal_setTemplateVariables;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTemplateVariables);
            setTemplateVariables(refVal_setTemplateVariables);
        }
    }
    return ok;
}

void UpdateInboxReplierOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_InboxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inboxId")), m_InboxId));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_FieldIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("field")), m_Field));
    }
    if(m_MatchIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("match")), m_Match));
    }
    if(m_ReplyToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("replyTo")), m_ReplyTo));
    }
    if(m_SubjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subject")), m_Subject));
    }
    if(m_FromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("from")), m_From));
    }
    if(m_CharsetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("charset")), m_Charset));
    }
    if(m_IsHTMLIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isHTML")), m_IsHTML));
    }
    if(m_IgnoreReplyToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ignoreReplyTo")), m_IgnoreReplyTo));
    }
    if(m_BodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("body")), m_Body));
    }
    if(m_TemplateIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("templateId")), m_TemplateId));
    }
    if(m_TemplateVariablesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("templateVariables")), m_TemplateVariables));
    }
}

bool UpdateInboxReplierOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("inboxId"))))
    {
        utility::string_t refVal_setInboxId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inboxId"))), refVal_setInboxId );
        setInboxId(refVal_setInboxId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("field"))))
    {
        utility::string_t refVal_setField;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("field"))), refVal_setField );
        setField(refVal_setField);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("match"))))
    {
        utility::string_t refVal_setMatch;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("match"))), refVal_setMatch );
        setMatch(refVal_setMatch);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("replyTo"))))
    {
        utility::string_t refVal_setReplyTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("replyTo"))), refVal_setReplyTo );
        setReplyTo(refVal_setReplyTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subject"))))
    {
        utility::string_t refVal_setSubject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subject"))), refVal_setSubject );
        setSubject(refVal_setSubject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("from"))))
    {
        utility::string_t refVal_setFrom;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("from"))), refVal_setFrom );
        setFrom(refVal_setFrom);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("charset"))))
    {
        utility::string_t refVal_setCharset;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("charset"))), refVal_setCharset );
        setCharset(refVal_setCharset);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isHTML"))))
    {
        bool refVal_setIsHTML;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isHTML"))), refVal_setIsHTML );
        setIsHTML(refVal_setIsHTML);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ignoreReplyTo"))))
    {
        bool refVal_setIgnoreReplyTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ignoreReplyTo"))), refVal_setIgnoreReplyTo );
        setIgnoreReplyTo(refVal_setIgnoreReplyTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("body"))))
    {
        utility::string_t refVal_setBody;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("body"))), refVal_setBody );
        setBody(refVal_setBody);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("templateId"))))
    {
        utility::string_t refVal_setTemplateId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("templateId"))), refVal_setTemplateId );
        setTemplateId(refVal_setTemplateId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("templateVariables"))))
    {
        std::map<utility::string_t, std::shared_ptr<Object>> refVal_setTemplateVariables;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("templateVariables"))), refVal_setTemplateVariables );
        setTemplateVariables(refVal_setTemplateVariables);
    }
    return ok;
}

utility::string_t UpdateInboxReplierOptions::getInboxId() const
{
    return m_InboxId;
}

void UpdateInboxReplierOptions::setInboxId(const utility::string_t& value)
{
    m_InboxId = value;
    m_InboxIdIsSet = true;
}

bool UpdateInboxReplierOptions::inboxIdIsSet() const
{
    return m_InboxIdIsSet;
}

void UpdateInboxReplierOptions::unsetInboxId()
{
    m_InboxIdIsSet = false;
}
utility::string_t UpdateInboxReplierOptions::getName() const
{
    return m_Name;
}

void UpdateInboxReplierOptions::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool UpdateInboxReplierOptions::nameIsSet() const
{
    return m_NameIsSet;
}

void UpdateInboxReplierOptions::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t UpdateInboxReplierOptions::getField() const
{
    return m_Field;
}

void UpdateInboxReplierOptions::setField(const utility::string_t& value)
{
    m_Field = value;
    m_FieldIsSet = true;
}

bool UpdateInboxReplierOptions::fieldIsSet() const
{
    return m_FieldIsSet;
}

void UpdateInboxReplierOptions::unsetField()
{
    m_FieldIsSet = false;
}
utility::string_t UpdateInboxReplierOptions::getMatch() const
{
    return m_Match;
}

void UpdateInboxReplierOptions::setMatch(const utility::string_t& value)
{
    m_Match = value;
    m_MatchIsSet = true;
}

bool UpdateInboxReplierOptions::matchIsSet() const
{
    return m_MatchIsSet;
}

void UpdateInboxReplierOptions::unsetMatch()
{
    m_MatchIsSet = false;
}
utility::string_t UpdateInboxReplierOptions::getReplyTo() const
{
    return m_ReplyTo;
}

void UpdateInboxReplierOptions::setReplyTo(const utility::string_t& value)
{
    m_ReplyTo = value;
    m_ReplyToIsSet = true;
}

bool UpdateInboxReplierOptions::replyToIsSet() const
{
    return m_ReplyToIsSet;
}

void UpdateInboxReplierOptions::unsetReplyTo()
{
    m_ReplyToIsSet = false;
}
utility::string_t UpdateInboxReplierOptions::getSubject() const
{
    return m_Subject;
}

void UpdateInboxReplierOptions::setSubject(const utility::string_t& value)
{
    m_Subject = value;
    m_SubjectIsSet = true;
}

bool UpdateInboxReplierOptions::subjectIsSet() const
{
    return m_SubjectIsSet;
}

void UpdateInboxReplierOptions::unsetSubject()
{
    m_SubjectIsSet = false;
}
utility::string_t UpdateInboxReplierOptions::getFrom() const
{
    return m_From;
}

void UpdateInboxReplierOptions::setFrom(const utility::string_t& value)
{
    m_From = value;
    m_FromIsSet = true;
}

bool UpdateInboxReplierOptions::fromIsSet() const
{
    return m_FromIsSet;
}

void UpdateInboxReplierOptions::unsetFrom()
{
    m_FromIsSet = false;
}
utility::string_t UpdateInboxReplierOptions::getCharset() const
{
    return m_Charset;
}

void UpdateInboxReplierOptions::setCharset(const utility::string_t& value)
{
    m_Charset = value;
    m_CharsetIsSet = true;
}

bool UpdateInboxReplierOptions::charsetIsSet() const
{
    return m_CharsetIsSet;
}

void UpdateInboxReplierOptions::unsetCharset()
{
    m_CharsetIsSet = false;
}
bool UpdateInboxReplierOptions::isIsHTML() const
{
    return m_IsHTML;
}

void UpdateInboxReplierOptions::setIsHTML(bool value)
{
    m_IsHTML = value;
    m_IsHTMLIsSet = true;
}

bool UpdateInboxReplierOptions::isHTMLIsSet() const
{
    return m_IsHTMLIsSet;
}

void UpdateInboxReplierOptions::unsetIsHTML()
{
    m_IsHTMLIsSet = false;
}
bool UpdateInboxReplierOptions::isIgnoreReplyTo() const
{
    return m_IgnoreReplyTo;
}

void UpdateInboxReplierOptions::setIgnoreReplyTo(bool value)
{
    m_IgnoreReplyTo = value;
    m_IgnoreReplyToIsSet = true;
}

bool UpdateInboxReplierOptions::ignoreReplyToIsSet() const
{
    return m_IgnoreReplyToIsSet;
}

void UpdateInboxReplierOptions::unsetIgnoreReplyTo()
{
    m_IgnoreReplyToIsSet = false;
}
utility::string_t UpdateInboxReplierOptions::getBody() const
{
    return m_Body;
}

void UpdateInboxReplierOptions::setBody(const utility::string_t& value)
{
    m_Body = value;
    m_BodyIsSet = true;
}

bool UpdateInboxReplierOptions::bodyIsSet() const
{
    return m_BodyIsSet;
}

void UpdateInboxReplierOptions::unsetBody()
{
    m_BodyIsSet = false;
}
utility::string_t UpdateInboxReplierOptions::getTemplateId() const
{
    return m_TemplateId;
}

void UpdateInboxReplierOptions::setTemplateId(const utility::string_t& value)
{
    m_TemplateId = value;
    m_TemplateIdIsSet = true;
}

bool UpdateInboxReplierOptions::templateIdIsSet() const
{
    return m_TemplateIdIsSet;
}

void UpdateInboxReplierOptions::unsetTemplateId()
{
    m_TemplateIdIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<Object>>& UpdateInboxReplierOptions::getTemplateVariables()
{
    return m_TemplateVariables;
}

void UpdateInboxReplierOptions::setTemplateVariables(const std::map<utility::string_t, std::shared_ptr<Object>>& value)
{
    m_TemplateVariables = value;
    m_TemplateVariablesIsSet = true;
}

bool UpdateInboxReplierOptions::templateVariablesIsSet() const
{
    return m_TemplateVariablesIsSet;
}

void UpdateInboxReplierOptions::unsetTemplateVariables()
{
    m_TemplateVariablesIsSet = false;
}
}
}
}
}


