/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ReplyForSms.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



ReplyForSms::ReplyForSms()
{
    m_ReplyIsSet = false;
}

ReplyForSms::~ReplyForSms()
{
}

void ReplyForSms::validate()
{
    // TODO: implement validation
}

web::json::value ReplyForSms::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ReplyIsSet)
    {
        val[utility::conversions::to_string_t(U("reply"))] = ModelBase::toJson(m_Reply);
    }

    return val;
}

bool ReplyForSms::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("reply"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reply")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SentSmsDto> refVal_setReply;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReply);
            setReply(refVal_setReply);
        }
    }
    return ok;
}

void ReplyForSms::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ReplyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reply")), m_Reply));
    }
}

bool ReplyForSms::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("reply"))))
    {
        std::shared_ptr<SentSmsDto> refVal_setReply;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reply"))), refVal_setReply );
        setReply(refVal_setReply);
    }
    return ok;
}

std::shared_ptr<SentSmsDto> ReplyForSms::getReply() const
{
    return m_Reply;
}

void ReplyForSms::setReply(const std::shared_ptr<SentSmsDto>& value)
{
    m_Reply = value;
    m_ReplyIsSet = true;
}

bool ReplyForSms::replyIsSet() const
{
    return m_ReplyIsSet;
}

void ReplyForSms::unsetReply()
{
    m_ReplyIsSet = false;
}
}
}
}
}


