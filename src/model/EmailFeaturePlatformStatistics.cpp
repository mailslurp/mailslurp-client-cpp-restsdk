/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/EmailFeaturePlatformStatistics.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



EmailFeaturePlatformStatistics::EmailFeaturePlatformStatistics()
{
    m_Platform = utility::conversions::to_string_t("");
    m_PlatformIsSet = false;
    m_VersionsIsSet = false;
}

EmailFeaturePlatformStatistics::~EmailFeaturePlatformStatistics()
{
}

void EmailFeaturePlatformStatistics::validate()
{
    // TODO: implement validation
}

web::json::value EmailFeaturePlatformStatistics::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PlatformIsSet)
    {
        val[utility::conversions::to_string_t(U("platform"))] = ModelBase::toJson(m_Platform);
    }
    if(m_VersionsIsSet)
    {
        val[utility::conversions::to_string_t(U("versions"))] = ModelBase::toJson(m_Versions);
    }

    return val;
}

bool EmailFeaturePlatformStatistics::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("platform"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("platform")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPlatform;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlatform);
            setPlatform(refVal_setPlatform);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("versions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("versions")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<EmailFeatureVersionStatistics>> refVal_setVersions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVersions);
            setVersions(refVal_setVersions);
        }
    }
    return ok;
}

void EmailFeaturePlatformStatistics::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PlatformIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("platform")), m_Platform));
    }
    if(m_VersionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("versions")), m_Versions));
    }
}

bool EmailFeaturePlatformStatistics::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("platform"))))
    {
        utility::string_t refVal_setPlatform;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("platform"))), refVal_setPlatform );
        setPlatform(refVal_setPlatform);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("versions"))))
    {
        std::vector<std::shared_ptr<EmailFeatureVersionStatistics>> refVal_setVersions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("versions"))), refVal_setVersions );
        setVersions(refVal_setVersions);
    }
    return ok;
}

utility::string_t EmailFeaturePlatformStatistics::getPlatform() const
{
    return m_Platform;
}

void EmailFeaturePlatformStatistics::setPlatform(const utility::string_t& value)
{
    m_Platform = value;
    m_PlatformIsSet = true;
}

bool EmailFeaturePlatformStatistics::platformIsSet() const
{
    return m_PlatformIsSet;
}

void EmailFeaturePlatformStatistics::unsetPlatform()
{
    m_PlatformIsSet = false;
}
std::vector<std::shared_ptr<EmailFeatureVersionStatistics>>& EmailFeaturePlatformStatistics::getVersions()
{
    return m_Versions;
}

void EmailFeaturePlatformStatistics::setVersions(const std::vector<std::shared_ptr<EmailFeatureVersionStatistics>>& value)
{
    m_Versions = value;
    m_VersionsIsSet = true;
}

bool EmailFeaturePlatformStatistics::versionsIsSet() const
{
    return m_VersionsIsSet;
}

void EmailFeaturePlatformStatistics::unsetVersions()
{
    m_VersionsIsSet = false;
}
}
}
}
}


