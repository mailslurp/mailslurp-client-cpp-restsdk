/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/GuestPortalUserCreateDto.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



GuestPortalUserCreateDto::GuestPortalUserCreateDto()
{
    m_GuestIsSet = false;
    m_Password = utility::conversions::to_string_t("");
    m_PasswordIsSet = false;
}

GuestPortalUserCreateDto::~GuestPortalUserCreateDto()
{
}

void GuestPortalUserCreateDto::validate()
{
    // TODO: implement validation
}

web::json::value GuestPortalUserCreateDto::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_GuestIsSet)
    {
        val[utility::conversions::to_string_t(U("guest"))] = ModelBase::toJson(m_Guest);
    }
    if(m_PasswordIsSet)
    {
        val[utility::conversions::to_string_t(U("password"))] = ModelBase::toJson(m_Password);
    }

    return val;
}

bool GuestPortalUserCreateDto::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("guest"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("guest")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<GuestPortalUserDto> refVal_setGuest;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGuest);
            setGuest(refVal_setGuest);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("password"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("password")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPassword;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPassword);
            setPassword(refVal_setPassword);
        }
    }
    return ok;
}

void GuestPortalUserCreateDto::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_GuestIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("guest")), m_Guest));
    }
    if(m_PasswordIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("password")), m_Password));
    }
}

bool GuestPortalUserCreateDto::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("guest"))))
    {
        std::shared_ptr<GuestPortalUserDto> refVal_setGuest;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("guest"))), refVal_setGuest );
        setGuest(refVal_setGuest);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("password"))))
    {
        utility::string_t refVal_setPassword;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("password"))), refVal_setPassword );
        setPassword(refVal_setPassword);
    }
    return ok;
}

std::shared_ptr<GuestPortalUserDto> GuestPortalUserCreateDto::getGuest() const
{
    return m_Guest;
}

void GuestPortalUserCreateDto::setGuest(const std::shared_ptr<GuestPortalUserDto>& value)
{
    m_Guest = value;
    m_GuestIsSet = true;
}

bool GuestPortalUserCreateDto::guestIsSet() const
{
    return m_GuestIsSet;
}

void GuestPortalUserCreateDto::unsetGuest()
{
    m_GuestIsSet = false;
}
utility::string_t GuestPortalUserCreateDto::getPassword() const
{
    return m_Password;
}

void GuestPortalUserCreateDto::setPassword(const utility::string_t& value)
{
    m_Password = value;
    m_PasswordIsSet = true;
}

bool GuestPortalUserCreateDto::passwordIsSet() const
{
    return m_PasswordIsSet;
}

void GuestPortalUserCreateDto::unsetPassword()
{
    m_PasswordIsSet = false;
}
}
}
}
}


