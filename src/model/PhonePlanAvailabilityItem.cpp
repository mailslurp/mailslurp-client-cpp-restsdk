/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PhonePlanAvailabilityItem.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



PhonePlanAvailabilityItem::PhonePlanAvailabilityItem()
{
    m_PhoneCountry = utility::conversions::to_string_t("");
    m_PhoneCountryIsSet = false;
    m_AvailabilityStatus = utility::conversions::to_string_t("");
    m_AvailabilityStatusIsSet = false;
}

PhonePlanAvailabilityItem::~PhonePlanAvailabilityItem()
{
}

void PhonePlanAvailabilityItem::validate()
{
    // TODO: implement validation
}

web::json::value PhonePlanAvailabilityItem::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PhoneCountryIsSet)
    {
        val[utility::conversions::to_string_t(U("phoneCountry"))] = ModelBase::toJson(m_PhoneCountry);
    }
    if(m_AvailabilityStatusIsSet)
    {
        val[utility::conversions::to_string_t(U("availabilityStatus"))] = ModelBase::toJson(m_AvailabilityStatus);
    }

    return val;
}

bool PhonePlanAvailabilityItem::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("phoneCountry"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("phoneCountry")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPhoneCountry;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPhoneCountry);
            setPhoneCountry(refVal_setPhoneCountry);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("availabilityStatus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("availabilityStatus")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAvailabilityStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAvailabilityStatus);
            setAvailabilityStatus(refVal_setAvailabilityStatus);
        }
    }
    return ok;
}

void PhonePlanAvailabilityItem::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PhoneCountryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("phoneCountry")), m_PhoneCountry));
    }
    if(m_AvailabilityStatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("availabilityStatus")), m_AvailabilityStatus));
    }
}

bool PhonePlanAvailabilityItem::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("phoneCountry"))))
    {
        utility::string_t refVal_setPhoneCountry;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("phoneCountry"))), refVal_setPhoneCountry );
        setPhoneCountry(refVal_setPhoneCountry);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("availabilityStatus"))))
    {
        utility::string_t refVal_setAvailabilityStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("availabilityStatus"))), refVal_setAvailabilityStatus );
        setAvailabilityStatus(refVal_setAvailabilityStatus);
    }
    return ok;
}

utility::string_t PhonePlanAvailabilityItem::getPhoneCountry() const
{
    return m_PhoneCountry;
}

void PhonePlanAvailabilityItem::setPhoneCountry(const utility::string_t& value)
{
    m_PhoneCountry = value;
    m_PhoneCountryIsSet = true;
}

bool PhonePlanAvailabilityItem::phoneCountryIsSet() const
{
    return m_PhoneCountryIsSet;
}

void PhonePlanAvailabilityItem::unsetPhoneCountry()
{
    m_PhoneCountryIsSet = false;
}
utility::string_t PhonePlanAvailabilityItem::getAvailabilityStatus() const
{
    return m_AvailabilityStatus;
}

void PhonePlanAvailabilityItem::setAvailabilityStatus(const utility::string_t& value)
{
    m_AvailabilityStatus = value;
    m_AvailabilityStatusIsSet = true;
}

bool PhonePlanAvailabilityItem::availabilityStatusIsSet() const
{
    return m_AvailabilityStatusIsSet;
}

void PhonePlanAvailabilityItem::unsetAvailabilityStatus()
{
    m_AvailabilityStatusIsSet = false;
}
}
}
}
}


