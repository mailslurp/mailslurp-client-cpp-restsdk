/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PhoneMessageThreadProjection.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



PhoneMessageThreadProjection::PhoneMessageThreadProjection()
{
    m_PhoneNumber = utility::conversions::to_string_t("");
    m_PhoneNumberIsSet = false;
    m_PhoneNumberId = utility::conversions::to_string_t("");
    m_PhoneNumberIdIsSet = false;
    m_OtherPhoneNumber = utility::conversions::to_string_t("");
    m_OtherPhoneNumberIsSet = false;
    m_LastMessageDirection = utility::conversions::to_string_t("");
    m_LastMessageDirectionIsSet = false;
    m_LastBody = utility::conversions::to_string_t("");
    m_LastBodyIsSet = false;
    m_LastCreated = utility::datetime();
    m_LastCreatedIsSet = false;
}

PhoneMessageThreadProjection::~PhoneMessageThreadProjection()
{
}

void PhoneMessageThreadProjection::validate()
{
    // TODO: implement validation
}

web::json::value PhoneMessageThreadProjection::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PhoneNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("phoneNumber"))] = ModelBase::toJson(m_PhoneNumber);
    }
    if(m_PhoneNumberIdIsSet)
    {
        val[utility::conversions::to_string_t(U("phoneNumberId"))] = ModelBase::toJson(m_PhoneNumberId);
    }
    if(m_OtherPhoneNumberIsSet)
    {
        val[utility::conversions::to_string_t(U("otherPhoneNumber"))] = ModelBase::toJson(m_OtherPhoneNumber);
    }
    if(m_LastMessageDirectionIsSet)
    {
        val[utility::conversions::to_string_t(U("lastMessageDirection"))] = ModelBase::toJson(m_LastMessageDirection);
    }
    if(m_LastBodyIsSet)
    {
        val[utility::conversions::to_string_t(U("lastBody"))] = ModelBase::toJson(m_LastBody);
    }
    if(m_LastCreatedIsSet)
    {
        val[utility::conversions::to_string_t(U("lastCreated"))] = ModelBase::toJson(m_LastCreated);
    }

    return val;
}

bool PhoneMessageThreadProjection::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("phoneNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("phoneNumber")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPhoneNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPhoneNumber);
            setPhoneNumber(refVal_setPhoneNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("phoneNumberId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("phoneNumberId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPhoneNumberId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPhoneNumberId);
            setPhoneNumberId(refVal_setPhoneNumberId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("otherPhoneNumber"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("otherPhoneNumber")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOtherPhoneNumber;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOtherPhoneNumber);
            setOtherPhoneNumber(refVal_setOtherPhoneNumber);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lastMessageDirection"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lastMessageDirection")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLastMessageDirection;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastMessageDirection);
            setLastMessageDirection(refVal_setLastMessageDirection);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lastBody"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lastBody")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLastBody;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastBody);
            setLastBody(refVal_setLastBody);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lastCreated"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lastCreated")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setLastCreated;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastCreated);
            setLastCreated(refVal_setLastCreated);
        }
    }
    return ok;
}

void PhoneMessageThreadProjection::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PhoneNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("phoneNumber")), m_PhoneNumber));
    }
    if(m_PhoneNumberIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("phoneNumberId")), m_PhoneNumberId));
    }
    if(m_OtherPhoneNumberIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("otherPhoneNumber")), m_OtherPhoneNumber));
    }
    if(m_LastMessageDirectionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lastMessageDirection")), m_LastMessageDirection));
    }
    if(m_LastBodyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lastBody")), m_LastBody));
    }
    if(m_LastCreatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lastCreated")), m_LastCreated));
    }
}

bool PhoneMessageThreadProjection::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("phoneNumber"))))
    {
        utility::string_t refVal_setPhoneNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("phoneNumber"))), refVal_setPhoneNumber );
        setPhoneNumber(refVal_setPhoneNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("phoneNumberId"))))
    {
        utility::string_t refVal_setPhoneNumberId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("phoneNumberId"))), refVal_setPhoneNumberId );
        setPhoneNumberId(refVal_setPhoneNumberId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("otherPhoneNumber"))))
    {
        utility::string_t refVal_setOtherPhoneNumber;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("otherPhoneNumber"))), refVal_setOtherPhoneNumber );
        setOtherPhoneNumber(refVal_setOtherPhoneNumber);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lastMessageDirection"))))
    {
        utility::string_t refVal_setLastMessageDirection;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lastMessageDirection"))), refVal_setLastMessageDirection );
        setLastMessageDirection(refVal_setLastMessageDirection);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lastBody"))))
    {
        utility::string_t refVal_setLastBody;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lastBody"))), refVal_setLastBody );
        setLastBody(refVal_setLastBody);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lastCreated"))))
    {
        utility::datetime refVal_setLastCreated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lastCreated"))), refVal_setLastCreated );
        setLastCreated(refVal_setLastCreated);
    }
    return ok;
}

utility::string_t PhoneMessageThreadProjection::getPhoneNumber() const
{
    return m_PhoneNumber;
}

void PhoneMessageThreadProjection::setPhoneNumber(const utility::string_t& value)
{
    m_PhoneNumber = value;
    m_PhoneNumberIsSet = true;
}

bool PhoneMessageThreadProjection::phoneNumberIsSet() const
{
    return m_PhoneNumberIsSet;
}

void PhoneMessageThreadProjection::unsetPhoneNumber()
{
    m_PhoneNumberIsSet = false;
}
utility::string_t PhoneMessageThreadProjection::getPhoneNumberId() const
{
    return m_PhoneNumberId;
}

void PhoneMessageThreadProjection::setPhoneNumberId(const utility::string_t& value)
{
    m_PhoneNumberId = value;
    m_PhoneNumberIdIsSet = true;
}

bool PhoneMessageThreadProjection::phoneNumberIdIsSet() const
{
    return m_PhoneNumberIdIsSet;
}

void PhoneMessageThreadProjection::unsetPhoneNumberId()
{
    m_PhoneNumberIdIsSet = false;
}
utility::string_t PhoneMessageThreadProjection::getOtherPhoneNumber() const
{
    return m_OtherPhoneNumber;
}

void PhoneMessageThreadProjection::setOtherPhoneNumber(const utility::string_t& value)
{
    m_OtherPhoneNumber = value;
    m_OtherPhoneNumberIsSet = true;
}

bool PhoneMessageThreadProjection::otherPhoneNumberIsSet() const
{
    return m_OtherPhoneNumberIsSet;
}

void PhoneMessageThreadProjection::unsetOtherPhoneNumber()
{
    m_OtherPhoneNumberIsSet = false;
}
utility::string_t PhoneMessageThreadProjection::getLastMessageDirection() const
{
    return m_LastMessageDirection;
}

void PhoneMessageThreadProjection::setLastMessageDirection(const utility::string_t& value)
{
    m_LastMessageDirection = value;
    m_LastMessageDirectionIsSet = true;
}

bool PhoneMessageThreadProjection::lastMessageDirectionIsSet() const
{
    return m_LastMessageDirectionIsSet;
}

void PhoneMessageThreadProjection::unsetLastMessageDirection()
{
    m_LastMessageDirectionIsSet = false;
}
utility::string_t PhoneMessageThreadProjection::getLastBody() const
{
    return m_LastBody;
}

void PhoneMessageThreadProjection::setLastBody(const utility::string_t& value)
{
    m_LastBody = value;
    m_LastBodyIsSet = true;
}

bool PhoneMessageThreadProjection::lastBodyIsSet() const
{
    return m_LastBodyIsSet;
}

void PhoneMessageThreadProjection::unsetLastBody()
{
    m_LastBodyIsSet = false;
}
utility::datetime PhoneMessageThreadProjection::getLastCreated() const
{
    return m_LastCreated;
}

void PhoneMessageThreadProjection::setLastCreated(const utility::datetime& value)
{
    m_LastCreated = value;
    m_LastCreatedIsSet = true;
}

bool PhoneMessageThreadProjection::lastCreatedIsSet() const
{
    return m_LastCreatedIsSet;
}

void PhoneMessageThreadProjection::unsetLastCreated()
{
    m_LastCreatedIsSet = false;
}
}
}
}
}


