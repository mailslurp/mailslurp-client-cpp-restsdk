/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/EmailPreview.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



EmailPreview::EmailPreview()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_InboxId = utility::conversions::to_string_t("");
    m_InboxIdIsSet = false;
    m_DomainId = utility::conversions::to_string_t("");
    m_DomainIdIsSet = false;
    m_Subject = utility::conversions::to_string_t("");
    m_SubjectIsSet = false;
    m_ToIsSet = false;
    m_From = utility::conversions::to_string_t("");
    m_FromIsSet = false;
    m_BccIsSet = false;
    m_CcIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_Read = false;
    m_ReadIsSet = false;
    m_AttachmentsIsSet = false;
    m_ThreadId = utility::conversions::to_string_t("");
    m_ThreadIdIsSet = false;
    m_MessageId = utility::conversions::to_string_t("");
    m_MessageIdIsSet = false;
    m_InReplyTo = utility::conversions::to_string_t("");
    m_InReplyToIsSet = false;
    m_SenderIsSet = false;
    m_RecipientsIsSet = false;
    m_Favourite = false;
    m_FavouriteIsSet = false;
    m_BodyPartContentTypesIsSet = false;
    m_PlusAddress = utility::conversions::to_string_t("");
    m_PlusAddressIsSet = false;
}

EmailPreview::~EmailPreview()
{
}

void EmailPreview::validate()
{
    // TODO: implement validation
}

web::json::value EmailPreview::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_InboxIdIsSet)
    {
        val[utility::conversions::to_string_t(U("inboxId"))] = ModelBase::toJson(m_InboxId);
    }
    if(m_DomainIdIsSet)
    {
        val[utility::conversions::to_string_t(U("domainId"))] = ModelBase::toJson(m_DomainId);
    }
    if(m_SubjectIsSet)
    {
        val[utility::conversions::to_string_t(U("subject"))] = ModelBase::toJson(m_Subject);
    }
    if(m_ToIsSet)
    {
        val[utility::conversions::to_string_t(U("to"))] = ModelBase::toJson(m_To);
    }
    if(m_FromIsSet)
    {
        val[utility::conversions::to_string_t(U("from"))] = ModelBase::toJson(m_From);
    }
    if(m_BccIsSet)
    {
        val[utility::conversions::to_string_t(U("bcc"))] = ModelBase::toJson(m_Bcc);
    }
    if(m_CcIsSet)
    {
        val[utility::conversions::to_string_t(U("cc"))] = ModelBase::toJson(m_Cc);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_ReadIsSet)
    {
        val[utility::conversions::to_string_t(U("read"))] = ModelBase::toJson(m_Read);
    }
    if(m_AttachmentsIsSet)
    {
        val[utility::conversions::to_string_t(U("attachments"))] = ModelBase::toJson(m_Attachments);
    }
    if(m_ThreadIdIsSet)
    {
        val[utility::conversions::to_string_t(U("threadId"))] = ModelBase::toJson(m_ThreadId);
    }
    if(m_MessageIdIsSet)
    {
        val[utility::conversions::to_string_t(U("messageId"))] = ModelBase::toJson(m_MessageId);
    }
    if(m_InReplyToIsSet)
    {
        val[utility::conversions::to_string_t(U("inReplyTo"))] = ModelBase::toJson(m_InReplyTo);
    }
    if(m_SenderIsSet)
    {
        val[utility::conversions::to_string_t(U("sender"))] = ModelBase::toJson(m_Sender);
    }
    if(m_RecipientsIsSet)
    {
        val[utility::conversions::to_string_t(U("recipients"))] = ModelBase::toJson(m_Recipients);
    }
    if(m_FavouriteIsSet)
    {
        val[utility::conversions::to_string_t(U("favourite"))] = ModelBase::toJson(m_Favourite);
    }
    if(m_BodyPartContentTypesIsSet)
    {
        val[utility::conversions::to_string_t(U("bodyPartContentTypes"))] = ModelBase::toJson(m_BodyPartContentTypes);
    }
    if(m_PlusAddressIsSet)
    {
        val[utility::conversions::to_string_t(U("plusAddress"))] = ModelBase::toJson(m_PlusAddress);
    }

    return val;
}

bool EmailPreview::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("inboxId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inboxId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInboxId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInboxId);
            setInboxId(refVal_setInboxId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("domainId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("domainId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDomainId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDomainId);
            setDomainId(refVal_setDomainId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subject"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subject")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubject;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubject);
            setSubject(refVal_setSubject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("to"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("to")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTo);
            setTo(refVal_setTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("from"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("from")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFrom;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFrom);
            setFrom(refVal_setFrom);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bcc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bcc")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setBcc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBcc);
            setBcc(refVal_setBcc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cc")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setCc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCc);
            setCc(refVal_setCc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("read"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("read")));
        if(!fieldValue.is_null())
        {
            bool refVal_setRead;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRead);
            setRead(refVal_setRead);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("attachments"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("attachments")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setAttachments;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAttachments);
            setAttachments(refVal_setAttachments);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("threadId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("threadId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setThreadId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setThreadId);
            setThreadId(refVal_setThreadId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("messageId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("messageId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMessageId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessageId);
            setMessageId(refVal_setMessageId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("inReplyTo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inReplyTo")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInReplyTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInReplyTo);
            setInReplyTo(refVal_setInReplyTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sender"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sender")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Sender> refVal_setSender;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSender);
            setSender(refVal_setSender);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("recipients"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("recipients")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<EmailRecipients> refVal_setRecipients;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRecipients);
            setRecipients(refVal_setRecipients);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("favourite"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("favourite")));
        if(!fieldValue.is_null())
        {
            bool refVal_setFavourite;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFavourite);
            setFavourite(refVal_setFavourite);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bodyPartContentTypes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bodyPartContentTypes")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setBodyPartContentTypes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBodyPartContentTypes);
            setBodyPartContentTypes(refVal_setBodyPartContentTypes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("plusAddress"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("plusAddress")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPlusAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlusAddress);
            setPlusAddress(refVal_setPlusAddress);
        }
    }
    return ok;
}

void EmailPreview::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_InboxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inboxId")), m_InboxId));
    }
    if(m_DomainIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("domainId")), m_DomainId));
    }
    if(m_SubjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subject")), m_Subject));
    }
    if(m_ToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("to")), m_To));
    }
    if(m_FromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("from")), m_From));
    }
    if(m_BccIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bcc")), m_Bcc));
    }
    if(m_CcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cc")), m_Cc));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
    if(m_ReadIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("read")), m_Read));
    }
    if(m_AttachmentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("attachments")), m_Attachments));
    }
    if(m_ThreadIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("threadId")), m_ThreadId));
    }
    if(m_MessageIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("messageId")), m_MessageId));
    }
    if(m_InReplyToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inReplyTo")), m_InReplyTo));
    }
    if(m_SenderIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sender")), m_Sender));
    }
    if(m_RecipientsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("recipients")), m_Recipients));
    }
    if(m_FavouriteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("favourite")), m_Favourite));
    }
    if(m_BodyPartContentTypesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bodyPartContentTypes")), m_BodyPartContentTypes));
    }
    if(m_PlusAddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("plusAddress")), m_PlusAddress));
    }
}

bool EmailPreview::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("inboxId"))))
    {
        utility::string_t refVal_setInboxId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inboxId"))), refVal_setInboxId );
        setInboxId(refVal_setInboxId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("domainId"))))
    {
        utility::string_t refVal_setDomainId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("domainId"))), refVal_setDomainId );
        setDomainId(refVal_setDomainId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subject"))))
    {
        utility::string_t refVal_setSubject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subject"))), refVal_setSubject );
        setSubject(refVal_setSubject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("to"))))
    {
        std::vector<utility::string_t> refVal_setTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("to"))), refVal_setTo );
        setTo(refVal_setTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("from"))))
    {
        utility::string_t refVal_setFrom;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("from"))), refVal_setFrom );
        setFrom(refVal_setFrom);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bcc"))))
    {
        std::vector<utility::string_t> refVal_setBcc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bcc"))), refVal_setBcc );
        setBcc(refVal_setBcc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cc"))))
    {
        std::vector<utility::string_t> refVal_setCc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cc"))), refVal_setCc );
        setCc(refVal_setCc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("read"))))
    {
        bool refVal_setRead;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("read"))), refVal_setRead );
        setRead(refVal_setRead);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("attachments"))))
    {
        std::vector<utility::string_t> refVal_setAttachments;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("attachments"))), refVal_setAttachments );
        setAttachments(refVal_setAttachments);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("threadId"))))
    {
        utility::string_t refVal_setThreadId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("threadId"))), refVal_setThreadId );
        setThreadId(refVal_setThreadId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("messageId"))))
    {
        utility::string_t refVal_setMessageId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("messageId"))), refVal_setMessageId );
        setMessageId(refVal_setMessageId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("inReplyTo"))))
    {
        utility::string_t refVal_setInReplyTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inReplyTo"))), refVal_setInReplyTo );
        setInReplyTo(refVal_setInReplyTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sender"))))
    {
        std::shared_ptr<Sender> refVal_setSender;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sender"))), refVal_setSender );
        setSender(refVal_setSender);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("recipients"))))
    {
        std::shared_ptr<EmailRecipients> refVal_setRecipients;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("recipients"))), refVal_setRecipients );
        setRecipients(refVal_setRecipients);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("favourite"))))
    {
        bool refVal_setFavourite;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("favourite"))), refVal_setFavourite );
        setFavourite(refVal_setFavourite);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bodyPartContentTypes"))))
    {
        std::vector<utility::string_t> refVal_setBodyPartContentTypes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bodyPartContentTypes"))), refVal_setBodyPartContentTypes );
        setBodyPartContentTypes(refVal_setBodyPartContentTypes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("plusAddress"))))
    {
        utility::string_t refVal_setPlusAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("plusAddress"))), refVal_setPlusAddress );
        setPlusAddress(refVal_setPlusAddress);
    }
    return ok;
}

utility::string_t EmailPreview::getId() const
{
    return m_Id;
}

void EmailPreview::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool EmailPreview::idIsSet() const
{
    return m_IdIsSet;
}

void EmailPreview::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t EmailPreview::getInboxId() const
{
    return m_InboxId;
}

void EmailPreview::setInboxId(const utility::string_t& value)
{
    m_InboxId = value;
    m_InboxIdIsSet = true;
}

bool EmailPreview::inboxIdIsSet() const
{
    return m_InboxIdIsSet;
}

void EmailPreview::unsetInboxId()
{
    m_InboxIdIsSet = false;
}
utility::string_t EmailPreview::getDomainId() const
{
    return m_DomainId;
}

void EmailPreview::setDomainId(const utility::string_t& value)
{
    m_DomainId = value;
    m_DomainIdIsSet = true;
}

bool EmailPreview::domainIdIsSet() const
{
    return m_DomainIdIsSet;
}

void EmailPreview::unsetDomainId()
{
    m_DomainIdIsSet = false;
}
utility::string_t EmailPreview::getSubject() const
{
    return m_Subject;
}

void EmailPreview::setSubject(const utility::string_t& value)
{
    m_Subject = value;
    m_SubjectIsSet = true;
}

bool EmailPreview::subjectIsSet() const
{
    return m_SubjectIsSet;
}

void EmailPreview::unsetSubject()
{
    m_SubjectIsSet = false;
}
std::vector<utility::string_t>& EmailPreview::getTo()
{
    return m_To;
}

void EmailPreview::setTo(const std::vector<utility::string_t>& value)
{
    m_To = value;
    m_ToIsSet = true;
}

bool EmailPreview::toIsSet() const
{
    return m_ToIsSet;
}

void EmailPreview::unsetTo()
{
    m_ToIsSet = false;
}
utility::string_t EmailPreview::getFrom() const
{
    return m_From;
}

void EmailPreview::setFrom(const utility::string_t& value)
{
    m_From = value;
    m_FromIsSet = true;
}

bool EmailPreview::fromIsSet() const
{
    return m_FromIsSet;
}

void EmailPreview::unsetFrom()
{
    m_FromIsSet = false;
}
std::vector<utility::string_t>& EmailPreview::getBcc()
{
    return m_Bcc;
}

void EmailPreview::setBcc(const std::vector<utility::string_t>& value)
{
    m_Bcc = value;
    m_BccIsSet = true;
}

bool EmailPreview::bccIsSet() const
{
    return m_BccIsSet;
}

void EmailPreview::unsetBcc()
{
    m_BccIsSet = false;
}
std::vector<utility::string_t>& EmailPreview::getCc()
{
    return m_Cc;
}

void EmailPreview::setCc(const std::vector<utility::string_t>& value)
{
    m_Cc = value;
    m_CcIsSet = true;
}

bool EmailPreview::ccIsSet() const
{
    return m_CcIsSet;
}

void EmailPreview::unsetCc()
{
    m_CcIsSet = false;
}
utility::datetime EmailPreview::getCreatedAt() const
{
    return m_CreatedAt;
}

void EmailPreview::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool EmailPreview::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void EmailPreview::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
bool EmailPreview::isRead() const
{
    return m_Read;
}

void EmailPreview::setRead(bool value)
{
    m_Read = value;
    m_ReadIsSet = true;
}

bool EmailPreview::readIsSet() const
{
    return m_ReadIsSet;
}

void EmailPreview::unsetRead()
{
    m_ReadIsSet = false;
}
std::vector<utility::string_t>& EmailPreview::getAttachments()
{
    return m_Attachments;
}

void EmailPreview::setAttachments(const std::vector<utility::string_t>& value)
{
    m_Attachments = value;
    m_AttachmentsIsSet = true;
}

bool EmailPreview::attachmentsIsSet() const
{
    return m_AttachmentsIsSet;
}

void EmailPreview::unsetAttachments()
{
    m_AttachmentsIsSet = false;
}
utility::string_t EmailPreview::getThreadId() const
{
    return m_ThreadId;
}

void EmailPreview::setThreadId(const utility::string_t& value)
{
    m_ThreadId = value;
    m_ThreadIdIsSet = true;
}

bool EmailPreview::threadIdIsSet() const
{
    return m_ThreadIdIsSet;
}

void EmailPreview::unsetThreadId()
{
    m_ThreadIdIsSet = false;
}
utility::string_t EmailPreview::getMessageId() const
{
    return m_MessageId;
}

void EmailPreview::setMessageId(const utility::string_t& value)
{
    m_MessageId = value;
    m_MessageIdIsSet = true;
}

bool EmailPreview::messageIdIsSet() const
{
    return m_MessageIdIsSet;
}

void EmailPreview::unsetMessageId()
{
    m_MessageIdIsSet = false;
}
utility::string_t EmailPreview::getInReplyTo() const
{
    return m_InReplyTo;
}

void EmailPreview::setInReplyTo(const utility::string_t& value)
{
    m_InReplyTo = value;
    m_InReplyToIsSet = true;
}

bool EmailPreview::inReplyToIsSet() const
{
    return m_InReplyToIsSet;
}

void EmailPreview::unsetInReplyTo()
{
    m_InReplyToIsSet = false;
}
std::shared_ptr<Sender> EmailPreview::getSender() const
{
    return m_Sender;
}

void EmailPreview::setSender(const std::shared_ptr<Sender>& value)
{
    m_Sender = value;
    m_SenderIsSet = true;
}

bool EmailPreview::senderIsSet() const
{
    return m_SenderIsSet;
}

void EmailPreview::unsetSender()
{
    m_SenderIsSet = false;
}
std::shared_ptr<EmailRecipients> EmailPreview::getRecipients() const
{
    return m_Recipients;
}

void EmailPreview::setRecipients(const std::shared_ptr<EmailRecipients>& value)
{
    m_Recipients = value;
    m_RecipientsIsSet = true;
}

bool EmailPreview::recipientsIsSet() const
{
    return m_RecipientsIsSet;
}

void EmailPreview::unsetRecipients()
{
    m_RecipientsIsSet = false;
}
bool EmailPreview::isFavourite() const
{
    return m_Favourite;
}

void EmailPreview::setFavourite(bool value)
{
    m_Favourite = value;
    m_FavouriteIsSet = true;
}

bool EmailPreview::favouriteIsSet() const
{
    return m_FavouriteIsSet;
}

void EmailPreview::unsetFavourite()
{
    m_FavouriteIsSet = false;
}
std::vector<utility::string_t>& EmailPreview::getBodyPartContentTypes()
{
    return m_BodyPartContentTypes;
}

void EmailPreview::setBodyPartContentTypes(const std::vector<utility::string_t>& value)
{
    m_BodyPartContentTypes = value;
    m_BodyPartContentTypesIsSet = true;
}

bool EmailPreview::bodyPartContentTypesIsSet() const
{
    return m_BodyPartContentTypesIsSet;
}

void EmailPreview::unsetBodyPartContentTypes()
{
    m_BodyPartContentTypesIsSet = false;
}
utility::string_t EmailPreview::getPlusAddress() const
{
    return m_PlusAddress;
}

void EmailPreview::setPlusAddress(const utility::string_t& value)
{
    m_PlusAddress = value;
    m_PlusAddressIsSet = true;
}

bool EmailPreview::plusAddressIsSet() const
{
    return m_PlusAddressIsSet;
}

void EmailPreview::unsetPlusAddress()
{
    m_PlusAddressIsSet = false;
}
}
}
}
}


