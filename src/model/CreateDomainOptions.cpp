/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/CreateDomainOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



CreateDomainOptions::CreateDomainOptions()
{
    m_Domain = utility::conversions::to_string_t("");
    m_DomainIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_CreatedCatchAllInbox = false;
    m_CreatedCatchAllInboxIsSet = false;
    m_DomainType = utility::conversions::to_string_t("");
    m_DomainTypeIsSet = false;
}

CreateDomainOptions::~CreateDomainOptions()
{
}

void CreateDomainOptions::validate()
{
    // TODO: implement validation
}

web::json::value CreateDomainOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DomainIsSet)
    {
        val[utility::conversions::to_string_t(U("domain"))] = ModelBase::toJson(m_Domain);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_CreatedCatchAllInboxIsSet)
    {
        val[utility::conversions::to_string_t(U("createdCatchAllInbox"))] = ModelBase::toJson(m_CreatedCatchAllInbox);
    }
    if(m_DomainTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("domainType"))] = ModelBase::toJson(m_DomainType);
    }

    return val;
}

bool CreateDomainOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("domain"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("domain")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDomain;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDomain);
            setDomain(refVal_setDomain);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdCatchAllInbox"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdCatchAllInbox")));
        if(!fieldValue.is_null())
        {
            bool refVal_setCreatedCatchAllInbox;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedCatchAllInbox);
            setCreatedCatchAllInbox(refVal_setCreatedCatchAllInbox);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("domainType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("domainType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDomainType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDomainType);
            setDomainType(refVal_setDomainType);
        }
    }
    return ok;
}

void CreateDomainOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_DomainIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("domain")), m_Domain));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_CreatedCatchAllInboxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdCatchAllInbox")), m_CreatedCatchAllInbox));
    }
    if(m_DomainTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("domainType")), m_DomainType));
    }
}

bool CreateDomainOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("domain"))))
    {
        utility::string_t refVal_setDomain;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("domain"))), refVal_setDomain );
        setDomain(refVal_setDomain);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdCatchAllInbox"))))
    {
        bool refVal_setCreatedCatchAllInbox;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdCatchAllInbox"))), refVal_setCreatedCatchAllInbox );
        setCreatedCatchAllInbox(refVal_setCreatedCatchAllInbox);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("domainType"))))
    {
        utility::string_t refVal_setDomainType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("domainType"))), refVal_setDomainType );
        setDomainType(refVal_setDomainType);
    }
    return ok;
}

utility::string_t CreateDomainOptions::getDomain() const
{
    return m_Domain;
}

void CreateDomainOptions::setDomain(const utility::string_t& value)
{
    m_Domain = value;
    m_DomainIsSet = true;
}

bool CreateDomainOptions::domainIsSet() const
{
    return m_DomainIsSet;
}

void CreateDomainOptions::unsetDomain()
{
    m_DomainIsSet = false;
}
utility::string_t CreateDomainOptions::getDescription() const
{
    return m_Description;
}

void CreateDomainOptions::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool CreateDomainOptions::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void CreateDomainOptions::unsetDescription()
{
    m_DescriptionIsSet = false;
}
bool CreateDomainOptions::isCreatedCatchAllInbox() const
{
    return m_CreatedCatchAllInbox;
}

void CreateDomainOptions::setCreatedCatchAllInbox(bool value)
{
    m_CreatedCatchAllInbox = value;
    m_CreatedCatchAllInboxIsSet = true;
}

bool CreateDomainOptions::createdCatchAllInboxIsSet() const
{
    return m_CreatedCatchAllInboxIsSet;
}

void CreateDomainOptions::unsetCreatedCatchAllInbox()
{
    m_CreatedCatchAllInboxIsSet = false;
}
utility::string_t CreateDomainOptions::getDomainType() const
{
    return m_DomainType;
}

void CreateDomainOptions::setDomainType(const utility::string_t& value)
{
    m_DomainType = value;
    m_DomainTypeIsSet = true;
}

bool CreateDomainOptions::domainTypeIsSet() const
{
    return m_DomainTypeIsSet;
}

void CreateDomainOptions::unsetDomainType()
{
    m_DomainTypeIsSet = false;
}
}
}
}
}


