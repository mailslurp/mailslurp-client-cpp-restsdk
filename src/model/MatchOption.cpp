/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/MatchOption.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



MatchOption::MatchOption()
{
    m_Field = utility::conversions::to_string_t("");
    m_FieldIsSet = false;
    m_Should = utility::conversions::to_string_t("");
    m_ShouldIsSet = false;
    m_Value = utility::conversions::to_string_t("");
    m_ValueIsSet = false;
}

MatchOption::~MatchOption()
{
}

void MatchOption::validate()
{
    // TODO: implement validation
}

web::json::value MatchOption::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FieldIsSet)
    {
        val[utility::conversions::to_string_t(U("field"))] = ModelBase::toJson(m_Field);
    }
    if(m_ShouldIsSet)
    {
        val[utility::conversions::to_string_t(U("should"))] = ModelBase::toJson(m_Should);
    }
    if(m_ValueIsSet)
    {
        val[utility::conversions::to_string_t(U("value"))] = ModelBase::toJson(m_Value);
    }

    return val;
}

bool MatchOption::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("field"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("field")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setField;
            ok &= ModelBase::fromJson(fieldValue, refVal_setField);
            setField(refVal_setField);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("should"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("should")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setShould;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShould);
            setShould(refVal_setShould);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("value"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("value")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setValue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setValue);
            setValue(refVal_setValue);
        }
    }
    return ok;
}

void MatchOption::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_FieldIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("field")), m_Field));
    }
    if(m_ShouldIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("should")), m_Should));
    }
    if(m_ValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("value")), m_Value));
    }
}

bool MatchOption::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("field"))))
    {
        utility::string_t refVal_setField;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("field"))), refVal_setField );
        setField(refVal_setField);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("should"))))
    {
        utility::string_t refVal_setShould;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("should"))), refVal_setShould );
        setShould(refVal_setShould);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("value"))))
    {
        utility::string_t refVal_setValue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("value"))), refVal_setValue );
        setValue(refVal_setValue);
    }
    return ok;
}

utility::string_t MatchOption::getField() const
{
    return m_Field;
}

void MatchOption::setField(const utility::string_t& value)
{
    m_Field = value;
    m_FieldIsSet = true;
}

bool MatchOption::fieldIsSet() const
{
    return m_FieldIsSet;
}

void MatchOption::unsetField()
{
    m_FieldIsSet = false;
}
utility::string_t MatchOption::getShould() const
{
    return m_Should;
}

void MatchOption::setShould(const utility::string_t& value)
{
    m_Should = value;
    m_ShouldIsSet = true;
}

bool MatchOption::shouldIsSet() const
{
    return m_ShouldIsSet;
}

void MatchOption::unsetShould()
{
    m_ShouldIsSet = false;
}
utility::string_t MatchOption::getValue() const
{
    return m_Value;
}

void MatchOption::setValue(const utility::string_t& value)
{
    m_Value = value;
    m_ValueIsSet = true;
}

bool MatchOption::valueIsSet() const
{
    return m_ValueIsSet;
}

void MatchOption::unsetValue()
{
    m_ValueIsSet = false;
}
}
}
}
}


