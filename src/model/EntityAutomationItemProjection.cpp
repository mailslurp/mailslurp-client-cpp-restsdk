/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/EntityAutomationItemProjection.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



EntityAutomationItemProjection::EntityAutomationItemProjection()
{
    m_InboxId = utility::conversions::to_string_t("");
    m_InboxIdIsSet = false;
    m_PhoneId = utility::conversions::to_string_t("");
    m_PhoneIdIsSet = false;
    m_Action = utility::conversions::to_string_t("");
    m_ActionIsSet = false;
    m_AutomationType = utility::conversions::to_string_t("");
    m_AutomationTypeIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
}

EntityAutomationItemProjection::~EntityAutomationItemProjection()
{
}

void EntityAutomationItemProjection::validate()
{
    // TODO: implement validation
}

web::json::value EntityAutomationItemProjection::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_InboxIdIsSet)
    {
        val[utility::conversions::to_string_t(U("inboxId"))] = ModelBase::toJson(m_InboxId);
    }
    if(m_PhoneIdIsSet)
    {
        val[utility::conversions::to_string_t(U("phoneId"))] = ModelBase::toJson(m_PhoneId);
    }
    if(m_ActionIsSet)
    {
        val[utility::conversions::to_string_t(U("action"))] = ModelBase::toJson(m_Action);
    }
    if(m_AutomationTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("automationType"))] = ModelBase::toJson(m_AutomationType);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }

    return val;
}

bool EntityAutomationItemProjection::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("inboxId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inboxId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setInboxId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInboxId);
            setInboxId(refVal_setInboxId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("phoneId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("phoneId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPhoneId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPhoneId);
            setPhoneId(refVal_setPhoneId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("action"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("action")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAction;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAction);
            setAction(refVal_setAction);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("automationType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("automationType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAutomationType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAutomationType);
            setAutomationType(refVal_setAutomationType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    return ok;
}

void EntityAutomationItemProjection::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_InboxIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inboxId")), m_InboxId));
    }
    if(m_PhoneIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("phoneId")), m_PhoneId));
    }
    if(m_ActionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("action")), m_Action));
    }
    if(m_AutomationTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("automationType")), m_AutomationType));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
}

bool EntityAutomationItemProjection::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("inboxId"))))
    {
        utility::string_t refVal_setInboxId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inboxId"))), refVal_setInboxId );
        setInboxId(refVal_setInboxId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("phoneId"))))
    {
        utility::string_t refVal_setPhoneId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("phoneId"))), refVal_setPhoneId );
        setPhoneId(refVal_setPhoneId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("action"))))
    {
        utility::string_t refVal_setAction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("action"))), refVal_setAction );
        setAction(refVal_setAction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("automationType"))))
    {
        utility::string_t refVal_setAutomationType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("automationType"))), refVal_setAutomationType );
        setAutomationType(refVal_setAutomationType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    return ok;
}

utility::string_t EntityAutomationItemProjection::getInboxId() const
{
    return m_InboxId;
}

void EntityAutomationItemProjection::setInboxId(const utility::string_t& value)
{
    m_InboxId = value;
    m_InboxIdIsSet = true;
}

bool EntityAutomationItemProjection::inboxIdIsSet() const
{
    return m_InboxIdIsSet;
}

void EntityAutomationItemProjection::unsetInboxId()
{
    m_InboxIdIsSet = false;
}
utility::string_t EntityAutomationItemProjection::getPhoneId() const
{
    return m_PhoneId;
}

void EntityAutomationItemProjection::setPhoneId(const utility::string_t& value)
{
    m_PhoneId = value;
    m_PhoneIdIsSet = true;
}

bool EntityAutomationItemProjection::phoneIdIsSet() const
{
    return m_PhoneIdIsSet;
}

void EntityAutomationItemProjection::unsetPhoneId()
{
    m_PhoneIdIsSet = false;
}
utility::string_t EntityAutomationItemProjection::getAction() const
{
    return m_Action;
}

void EntityAutomationItemProjection::setAction(const utility::string_t& value)
{
    m_Action = value;
    m_ActionIsSet = true;
}

bool EntityAutomationItemProjection::actionIsSet() const
{
    return m_ActionIsSet;
}

void EntityAutomationItemProjection::unsetAction()
{
    m_ActionIsSet = false;
}
utility::string_t EntityAutomationItemProjection::getAutomationType() const
{
    return m_AutomationType;
}

void EntityAutomationItemProjection::setAutomationType(const utility::string_t& value)
{
    m_AutomationType = value;
    m_AutomationTypeIsSet = true;
}

bool EntityAutomationItemProjection::automationTypeIsSet() const
{
    return m_AutomationTypeIsSet;
}

void EntityAutomationItemProjection::unsetAutomationType()
{
    m_AutomationTypeIsSet = false;
}
utility::string_t EntityAutomationItemProjection::getName() const
{
    return m_Name;
}

void EntityAutomationItemProjection::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool EntityAutomationItemProjection::nameIsSet() const
{
    return m_NameIsSet;
}

void EntityAutomationItemProjection::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t EntityAutomationItemProjection::getId() const
{
    return m_Id;
}

void EntityAutomationItemProjection::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool EntityAutomationItemProjection::idIsSet() const
{
    return m_IdIsSet;
}

void EntityAutomationItemProjection::unsetId()
{
    m_IdIsSet = false;
}
}
}
}
}


