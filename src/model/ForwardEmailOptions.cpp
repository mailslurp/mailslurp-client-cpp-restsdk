/**
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.2.1.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ForwardEmailOptions.h"

namespace com {
namespace mailslurp {
namespace client {
namespace model {



ForwardEmailOptions::ForwardEmailOptions()
{
    m_ToIsSet = false;
    m_Subject = utility::conversions::to_string_t("");
    m_SubjectIsSet = false;
    m_CcIsSet = false;
    m_BccIsSet = false;
    m_From = utility::conversions::to_string_t("");
    m_FromIsSet = false;
    m_UseInboxName = false;
    m_UseInboxNameIsSet = false;
    m_FilterBouncedRecipients = false;
    m_FilterBouncedRecipientsIsSet = false;
}

ForwardEmailOptions::~ForwardEmailOptions()
{
}

void ForwardEmailOptions::validate()
{
    // TODO: implement validation
}

web::json::value ForwardEmailOptions::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ToIsSet)
    {
        val[utility::conversions::to_string_t(U("to"))] = ModelBase::toJson(m_To);
    }
    if(m_SubjectIsSet)
    {
        val[utility::conversions::to_string_t(U("subject"))] = ModelBase::toJson(m_Subject);
    }
    if(m_CcIsSet)
    {
        val[utility::conversions::to_string_t(U("cc"))] = ModelBase::toJson(m_Cc);
    }
    if(m_BccIsSet)
    {
        val[utility::conversions::to_string_t(U("bcc"))] = ModelBase::toJson(m_Bcc);
    }
    if(m_FromIsSet)
    {
        val[utility::conversions::to_string_t(U("from"))] = ModelBase::toJson(m_From);
    }
    if(m_UseInboxNameIsSet)
    {
        val[utility::conversions::to_string_t(U("useInboxName"))] = ModelBase::toJson(m_UseInboxName);
    }
    if(m_FilterBouncedRecipientsIsSet)
    {
        val[utility::conversions::to_string_t(U("filterBouncedRecipients"))] = ModelBase::toJson(m_FilterBouncedRecipients);
    }

    return val;
}

bool ForwardEmailOptions::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("to"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("to")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setTo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTo);
            setTo(refVal_setTo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("subject"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("subject")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubject;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubject);
            setSubject(refVal_setSubject);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cc")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setCc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCc);
            setCc(refVal_setCc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bcc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bcc")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setBcc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBcc);
            setBcc(refVal_setBcc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("from"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("from")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFrom;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFrom);
            setFrom(refVal_setFrom);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("useInboxName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("useInboxName")));
        if(!fieldValue.is_null())
        {
            bool refVal_setUseInboxName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUseInboxName);
            setUseInboxName(refVal_setUseInboxName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("filterBouncedRecipients"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("filterBouncedRecipients")));
        if(!fieldValue.is_null())
        {
            bool refVal_setFilterBouncedRecipients;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFilterBouncedRecipients);
            setFilterBouncedRecipients(refVal_setFilterBouncedRecipients);
        }
    }
    return ok;
}

void ForwardEmailOptions::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ToIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("to")), m_To));
    }
    if(m_SubjectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("subject")), m_Subject));
    }
    if(m_CcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cc")), m_Cc));
    }
    if(m_BccIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bcc")), m_Bcc));
    }
    if(m_FromIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("from")), m_From));
    }
    if(m_UseInboxNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("useInboxName")), m_UseInboxName));
    }
    if(m_FilterBouncedRecipientsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("filterBouncedRecipients")), m_FilterBouncedRecipients));
    }
}

bool ForwardEmailOptions::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("to"))))
    {
        std::vector<utility::string_t> refVal_setTo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("to"))), refVal_setTo );
        setTo(refVal_setTo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("subject"))))
    {
        utility::string_t refVal_setSubject;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("subject"))), refVal_setSubject );
        setSubject(refVal_setSubject);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cc"))))
    {
        std::vector<utility::string_t> refVal_setCc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cc"))), refVal_setCc );
        setCc(refVal_setCc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bcc"))))
    {
        std::vector<utility::string_t> refVal_setBcc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bcc"))), refVal_setBcc );
        setBcc(refVal_setBcc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("from"))))
    {
        utility::string_t refVal_setFrom;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("from"))), refVal_setFrom );
        setFrom(refVal_setFrom);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("useInboxName"))))
    {
        bool refVal_setUseInboxName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("useInboxName"))), refVal_setUseInboxName );
        setUseInboxName(refVal_setUseInboxName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("filterBouncedRecipients"))))
    {
        bool refVal_setFilterBouncedRecipients;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("filterBouncedRecipients"))), refVal_setFilterBouncedRecipients );
        setFilterBouncedRecipients(refVal_setFilterBouncedRecipients);
    }
    return ok;
}

std::vector<utility::string_t>& ForwardEmailOptions::getTo()
{
    return m_To;
}

void ForwardEmailOptions::setTo(const std::vector<utility::string_t>& value)
{
    m_To = value;
    m_ToIsSet = true;
}

bool ForwardEmailOptions::toIsSet() const
{
    return m_ToIsSet;
}

void ForwardEmailOptions::unsetTo()
{
    m_ToIsSet = false;
}
utility::string_t ForwardEmailOptions::getSubject() const
{
    return m_Subject;
}

void ForwardEmailOptions::setSubject(const utility::string_t& value)
{
    m_Subject = value;
    m_SubjectIsSet = true;
}

bool ForwardEmailOptions::subjectIsSet() const
{
    return m_SubjectIsSet;
}

void ForwardEmailOptions::unsetSubject()
{
    m_SubjectIsSet = false;
}
std::vector<utility::string_t>& ForwardEmailOptions::getCc()
{
    return m_Cc;
}

void ForwardEmailOptions::setCc(const std::vector<utility::string_t>& value)
{
    m_Cc = value;
    m_CcIsSet = true;
}

bool ForwardEmailOptions::ccIsSet() const
{
    return m_CcIsSet;
}

void ForwardEmailOptions::unsetCc()
{
    m_CcIsSet = false;
}
std::vector<utility::string_t>& ForwardEmailOptions::getBcc()
{
    return m_Bcc;
}

void ForwardEmailOptions::setBcc(const std::vector<utility::string_t>& value)
{
    m_Bcc = value;
    m_BccIsSet = true;
}

bool ForwardEmailOptions::bccIsSet() const
{
    return m_BccIsSet;
}

void ForwardEmailOptions::unsetBcc()
{
    m_BccIsSet = false;
}
utility::string_t ForwardEmailOptions::getFrom() const
{
    return m_From;
}

void ForwardEmailOptions::setFrom(const utility::string_t& value)
{
    m_From = value;
    m_FromIsSet = true;
}

bool ForwardEmailOptions::fromIsSet() const
{
    return m_FromIsSet;
}

void ForwardEmailOptions::unsetFrom()
{
    m_FromIsSet = false;
}
bool ForwardEmailOptions::isUseInboxName() const
{
    return m_UseInboxName;
}

void ForwardEmailOptions::setUseInboxName(bool value)
{
    m_UseInboxName = value;
    m_UseInboxNameIsSet = true;
}

bool ForwardEmailOptions::useInboxNameIsSet() const
{
    return m_UseInboxNameIsSet;
}

void ForwardEmailOptions::unsetUseInboxName()
{
    m_UseInboxNameIsSet = false;
}
bool ForwardEmailOptions::isFilterBouncedRecipients() const
{
    return m_FilterBouncedRecipients;
}

void ForwardEmailOptions::setFilterBouncedRecipients(bool value)
{
    m_FilterBouncedRecipients = value;
    m_FilterBouncedRecipientsIsSet = true;
}

bool ForwardEmailOptions::filterBouncedRecipientsIsSet() const
{
    return m_FilterBouncedRecipientsIsSet;
}

void ForwardEmailOptions::unsetFilterBouncedRecipients()
{
    m_FilterBouncedRecipientsIsSet = false;
}
}
}
}
}


